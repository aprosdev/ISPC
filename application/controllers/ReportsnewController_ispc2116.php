<?php

	class ReportsnewController extends Zend_Controller_Action {

		public function init()
		{
			
			if($_REQUEST['et'] == "1"){
				echo ini_get('max_execution_time'); 
				die();
			}
			set_time_limit(600);
		}

		public function exportlistAction()
		{
			set_time_limit(0);
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$previleges = new Pms_Acl_Assertion();
			$return = $previleges->checkPrevilege('reports', $logininfo->userid, 'canview');

			if(!$return)
			{
				
			}

			$reportperm = new ReportPermission();
			$allowedReports = $reportperm->getAllowedReports($logininfo->clientid);
			$reportnew = new Reportsnew();
			if($logininfo->usertype == "SA")
			{
				//			super admin list all reports
				$reportarray = $reportnew->getallreports();
			}
			else
			{
				$reportarray = $reportnew->getAllowedReports($allowedReports);
			}
			
			foreach($reportarray as $rkey => $rvalue)
			{
				$report_name = preg_replace('/[^a-zA-Z0-9_]+/i', '-', strtolower(trim($this->view->translate($rvalue['report']))));
				$report_array_second[$report_name] = $rvalue;
			}

			ksort($report_array_second);
			$this->view->allreports = $report_array_second;
			
			
			/* ========================== Radu - patients select==================== */
			$actpatients = Doctrine_Query::create()
				->select("p.ipid, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, e.epid")
				->from('PatientMaster p')
				->Where('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0');
			$actpatients->leftJoin("p.EpidIpidMapping e");
			$actpatients->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$actpatients->orderBy('CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ASC');

			$actipidarray = $actpatients->fetchArray();

			foreach($actipidarray as $k_patient => $v_patient)
			{
				$client_patients[$v_patient['id']] = $v_patient;
				$client_patients_select[$v_patient['id']] = strtoupper($v_patient['EpidIpidMapping']['epid']) . ' - ' . $v_patient['last_name'] . ', ' . $v_patient['first_name'];
			}

			$this->view->client_patients_select = $client_patients_select;
			/* ========================== Radu - patients select==================== */
			
			/* ========================== Ancuta - location  select==================== */
			// For report_id 159
			$client_locations = Locations::getLocations($clientid,2);
            $this->view->client_locations =$client_locations;			
			/* ========================== Ancuta - location  select END==================== */
            
            /* ========================== Carmen - discharged method  select==================== */
            // For report_id 177 si 178
            $client_discharged_methodes = DischargeMethod::getDischargeMethod($clientid, 1, true);
            $key_unset='';
            unset($client_discharged_methodes[$key_unset]);
            $this->view->client_discharged_methodes =$client_discharged_methodes;
            
            /* ========================== Carmen - discharged method  select END==================== */
				

			$this->view->radio = 'excel';
			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('clientid =' . $logininfo->clientid . ' and isdelete=0')
				->orderBy('last_name ASC');
			$usrexec = $usrar->execute();
			$doctor_array = array("0" => $this->view->translate('allebenutzer'));
			foreach($usrexec->toArray() as $key => $val)
			{
				$doctor_array[$val['id']] = $val['user_title'] . " " . $val['last_name'] . ", " . $val['first_name'];
				
				$doctor_array_m['user-'.$val['id']] = $val['user_title'] . " " . $val['last_name'] . ", " . $val['first_name'];
			}
			$this->view->doctorarray = $doctor_array;
			
			
			/* ========================== Ancuta - Add  client groups in select==================== */
			// For report_id 137
			$client_groups = Usergroup::get_clients_groups(array($clientid));
			
			
			$grous_array = array("0" => $this->view->translate(''));
			foreach($client_groups as $kg =>$vg)
			{
			    $grous_array['group-'.$vg['id']] = 'Gruppe: '.$vg['groupname'];
			}
			
			if(!empty($grous_array) && !empty($doctor_array_m)){
			    $empty_line["emptyline"] = "--------------------------";
			    $groups_and_users = array_merge($grous_array,$empty_line);
			    $groups_and_users = array_merge($groups_and_users, $doctor_array_m);
			}
			
			$this->view->groups_and_users = $groups_and_users;
			/* ========================== Ancuta - location  select==================== */

			
			
			
			
			if($this->getRequest()->isPost())
			{
				$previleges = new Pms_Acl_Assertion();
				$return = $previleges->checkPrevilege('reports', $logininfo->userid, 'canadd');

				if(!$return)
				{
					//$this->_redirect(APP_BASE."error/previlege");
				}

				if(strlen($logininfo->clientid) < 1)
				{
					$this->view->error_clientid = $this->view->translate("selectclient");
					$error = 1;
				}
				if(strlen($_POST['listname']) < 1)
				{
					$this->view->error_listname = $this->view->translate("selectlist");
					$error = 2;
				}

				if($_POST['onlyactive'] == '1')
				{
					$montharr = 'only_now'; //hack to remove time filter from reports, more to follow in getimeperiod() function
					$quarterarr = 'only_now';
					$yeararr = 'only_now';
					$includearr = array();
					$onlyactive = 1;
				}
				else
				{
					$montharr = $_POST['month'];
					$quarterarr = $_POST['quarter'];
					$yeararr = $_POST['year'];
					$includearr = $_POST['include'];
					$onlyactive = 0;
				}

				$radioarr = $_POST['radio'];
				$sortarr = $_POST['columnname'];

				$this->retainvalues($_POST);
				$this->view->died = $_POST['died'];
				$this->view->treatavg = $_POST['treatavg'];
				$this->view->statdiagnosis = $_POST['statdiagnosis'];
				$this->view->treatthreeweek = $_POST['treatthreeweek'];
				$this->view->zip = $_POST['reportzip'];
				$custom['daysinperiod'] = $_POST['daysinperiod'];
				$custom['tdays'] = $_POST['tdays'];
				$custom['location'] = $_POST['location_select'];
				$custom['discharged_method'] = $_POST['discharged_method'];

				$custom['ipid'] = $client_patients[Pms_Uuid::decrypt($_POST['patient_select'])]['ipid'];

				$this->generateReport($_REQUEST['reporttype'], $quarterarr, $yeararr, $montharr, $radioarr, $sortarr, $includearr, $onlyactive, $custom);
				exit;
			}
		}

		private function generateReport($report, $quarterarr = false, $yeararr = false, $montharr = false, $radioarr = false, $sortarr = false, $includearr = false, $onlyactive = 0, $custom = false)
		{
			$report_details = $this->fetchReportDetailsAction($report);
			$report_func = $report_details[0]['functionname'];			

			if(is_array($report_details) && sizeof($report_details) > 0)
			{
				$params['quarterarr'] = $quarterarr;
				$params['yeararr'] = $yeararr;
				$params['montharr'] = $montharr;
				$params['radioarr'] = $radioarr;
				$params['sortarr'] = $sortarr;
				$params['includearr'] = $includearr;
				$params['dateused'] = $dateused;
				$params['custom'] = $custom;
				$params['onlyactive'] = $onlyactive;

				//report data grabbed in array
				$reportdata = $this->$report_func($params);
				
				//set header from-to date
				$reportdata['header_data'] = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr, 'd.m.Y');
				$reportdata['header_data']['onlyactive'] = $onlyactive;
				$reportdata['header_data']['year'] = $yeararr;

				//sort the report data
				if(!empty($sortarr))
				{
					$reportdata['data'] = $this->array_sort($reportdata['data'], $sortarr, SORT_ASC);
				}

				//send to browser based on report and output mehtod
				if(empty($radioarr[0]))
				{
					$output = 'screen';
				}
				else
				{
					$output = $radioarr[0];
				}

				if($report_func == "lag_bw")
				{
					$output = 'excelv2';
				}


				if($output == 'excel')
				{
					if( $report_func == "kv_numberofcases"  //  report id = 67 
					    || $report_func == "accounting" //  report id = 106
					    || $report_func == "overlapping_visits" //  report id = 97
					    || $report_func == "aktuellepatientfurth" //  report id = 43
					    || $report_func == "maindiagnosisstats" //  report id = 7
						|| $report_func == "behandeltePatienten" // report_id = 39
						|| $report_func == "discharged_patients_all" // report_id = 152
						|| $report_func == "discharged_patients_dead" // report_id = 111
						|| $report_func == "discharged_patients_bayern" // report_id = 177
						|| $report_func == "discharged_patients_nohospiz" // report_id = 160
						|| $report_func == "healthinsurance2deadpatients" // report_id = 112
						|| $report_func == "healthinsurance2patients_bayern" // report_id = 178
						|| $report_func == "overlapping_visits" // report_id = 97
						|| $report_func == "voluntaryworkerseropromotion" // report_id = 163
						|| $report_func == "users_visit" // report_id = 87
// 						|| $report_func == "shinternal" // report_id = 149
						|| $report_func == "akutellepatient_niedersachsen_nomeds" // report_id = 93
						|| $report_func == "akutellepatient_aschaffenburg" // report_id = 114
						|| $report_func == "aktuellepatientDachau" // report_id = 49
						|| $report_func == "akutellepatient_contactv2_ffb" // report_id = 156
						|| $report_func == "aktuellepatientGottingen" // report_id = 174
// 						|| $report_func == "aktuelle_patienten_munche_west" // report_id = 131
						|| $report_func == "aktuellepatientmunster1" // report_id = 135
						|| $report_func == "aktuellepatientmunster2" // report_id = 136
						|| $report_func == "aktuelle_patienten_memmingen2" // report_id = 134
						|| $report_func == "akutellepatient_contact" // report_id = 88
						|| $report_func == "akutellepatient_contactv2" // report_id = 98
						|| $report_func == "akutellepatient_niedersachsen" // report_id = 90
						|| $report_func == "akutellepatient_niedersachsen_amb" // report_id = 91
						|| $report_func == "akutellepatient_niedersachsen_hospiz" // report_id = 92
						|| $report_func == "akutellepatient_region" // report_id = 56
						|| $report_func == "aktuellepatienten_sinsheim" // report_id = 118
						|| $report_func == "aktuelle_patient_sinsheim" // report_id = 138
						|| $report_func == "akutellepatient" // report_id = 9
						|| $report_func == "akutellepatientv2" // report_id = 15
						|| $report_func == "aktuellepatientv3" // report_id = 148
						|| $report_func == "aktuelpatientandstanby" // report_id = 28
						|| $report_func == "aktuellepatientzapv" // report_id = 102
						|| $report_func == "aktuellepatientzapv_standby_discharge" // report_id = 120
						|| $report_func == "aktuellepatientzapv_standby" // report_id = 105
						|| $report_func == "patientsage" // report_id = 59
						|| $report_func == "anfrage" // report_id = 48
						|| $report_func == "anfragendePerson" // report_id = 22
						|| $report_func == "wlanlage7uncompleted" // report_id = 60
// 						|| $report_func == "anthrocare_accounting_period" // report_id = 154
// 						|| $report_func == "anzahlbesuchepropatient" // report_id = 16
						|| $report_func == "user_working_hours_kntf" // report_id = 137
						|| $report_func == "user_working_hours_kntf_2" // report_id = 182
						|| $report_func == "voluntaryworkersactivities" // report_id = 164
						|| $report_func == "voluntaryworkersvisits2" // report_id = 180
						|| $report_func == "voluntaryworkersvisits" // report_id = 35
						|| $report_func == "voluntaryworkersvisits3" // report_id = 183
						|| $report_func == "hessen_patient_statistics_active_3" // report_id = 184
						|| $report_func == "sapv_tage_ii_erstverordnungen" // report_id = 190
						|| $report_func == "voluntaryworkersvisits2bis" // report_id = 191
						|| $report_func == "deadstats" // report_id = 3
							
					)
					{
						$this->generatePHPExcel($report, $reportdata);
					} else {
    					$this->generateXLS($report, $reportdata);
					}
				}
				else if($output == 'excelv2')
				{
					$this->generateXLSv2($report, $reportdata);
				}
				else
				{
					$this->generateHTML($report, $reportdata, $output);
				}
			}
			else
			{
				exit;
			}
		}

		public function testreportsAction()
		{
			$params['quarterarr'] = array("1");
			$params['yeararr'] = array("2011");
			$params['montharr'] = array("2");
			$params['includearr'] = false;
			$params['onlyactive'] = 1;

			print_r($this->privatepatient($params));
			exit;
		}

		private function getActivePatients($quarterarr, $yeararr, $montharr)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$finalipidval = array();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			
			$search_sql = '1';
			
			if($active_cond['onlynowactive'] == 1) {
				$search_sql = 'p.isdischarged = 0'; 
			} 
			
			if($whereepid) {
				$search_sql .= ' AND e.'.str_ireplace('AND ', ' ', $whereepid);
			}
			
			$ipids = Pms_CommonData::patients_active('ipid',$logininfo->clientid,$active_cond['periods'], null, 'e.epid','ASC',$search_sql);
			
			
			foreach ($ipids as $ipid) {
				$finalipidval[] = $ipid['ipid'];
			}
			
			
			/*
			var_dump($finalipidval);
			//exit;
			unset($finalipidval);
			
			$allpatients = $this->getAllClientPatients($logininfo->clientid, $whereepid, true);
			foreach($allpatients as $allpatient_item)
			{
				$allpatients_str .= '"' . $allpatient_item['ipid'] . '",';
				$allpatients_arr[] = $allpatient_item['ipid'];
			}

			$allpatients_arr[] = '999999';
			$actpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 0')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['admission_sql']) . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$actpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$actipidarray = $actpatient->fetchArray();

			foreach($actipidarray as $key => $val)
			{
				$finalipidval[] = $val['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['admission_sql']) . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$patient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$ipidarray = $patient->fetchArray();

			if(is_array($ipidarray) && sizeof($ipidarray) > 0)
			{
				foreach($ipidarray as $key => $val)
				{
					$disipidval .= '"' . $val['ipid'] . '",';
					$disipidarr[] = $val['ipid'];
				}

				$disipidarr[] = '999999';
				$disquery = Doctrine_Query::create()
					->select("*")
					->from('PatientDischarge')
					->where('(' . str_replace('%date%', 'discharge_date', $active_cond['active_sql']) . ')')
					->andWhereIn('ipid', $disipidarr);
				$disarray = $disquery->fetchArray();

				foreach($disarray as $key => $val)
				{
					$finalipidval[] = $val['ipid'];
				}
			}

			if($_REQUEST['dbga'])
			{
				print_r("#2 \n\n");
				print_r($ipidarray);
				print_r($disquery->getSqlQuery());
				print_r("\n\n");
				print_r($patient->getSqlQuery());

				exit;
			}

			if($active_cond['onlynowactive'] != 1)
			{
				$readmission_add = Doctrine_Query::create()
					->select("p.ipid as theipid, p.date AS date_start, id")
					->addSelect("(SELECT r.date FROM PatientReadmission r WHERE r.date_type = 2 and r.date > p.date and p.ipid=r.ipid order by r.date ASC limit 1) AS date_end")
					->from("PatientReadmission p")
					->where('p.date_type = 1')
					->andWhereIn('p.ipid', $allpatients_arr)
					->having(str_replace('%', '', $active_cond['interval_sql']))
					->orderBy("theipid asc, date_start, date_end");
				//			get patients that WERE active during time frame and add to final array
				$add_array = $readmission_add->fetchArray();

				if(sizeof($add_array) > 0)
				{
					foreach($add_array as $add_pat)
					{
						$finalipidval[] = $add_pat['theipid'];
					}
				}

				$finalipidval = array_unique($finalipidval);
				$readmission_del = Doctrine_Query::create()
					->select("p.ipid as theipid, p.date AS date_start, id")
					->addSelect("(SELECT r.date FROM PatientReadmission r WHERE r.date_type = 1 and r.date > p.date and p.ipid=r.ipid order by r.date ASC limit 1) AS date_end")
					->from("PatientReadmission p")
					->where('p.date_type = 2')
					->andWhereIn('p.ipid', $allpatients_arr)
					->having(str_replace('%', '', $active_cond['readmission_delete_sql']))
					->orderBy("theipid asc, date_start, date_end");
				//			get patients that WERE NOT active during time frame and DELETE from final array
				$del_array = $readmission_del->fetchArray();

				if(sizeof($del_array) > 0)
				{
					foreach($del_array as $del_pat)
					{
						$thekey = array_search($del_pat['theipid'], $finalipidval);
						if($thekey !== false)
						{
							unset($finalipidval[$thekey]);
						}
					}
				}
			}

			*/
			
			return $finalipidval;
		}

		public function getTimePeriod($quarterarr, $yeararr, $montharr)
		{
			if($quarterarr == 'only_now' && $yeararr == 'only_now' && $montharr == 'only_now')
			{
				$active_sql = '(date(%date%) >= "' . date('Y') . '-' . date('m') . '-' . date('d') . '") OR ';
				$admission_sql = '(date(%date%) < "' . date('Y') . '-' . (date('m') + 1) . '-01") OR ';
				$date_sql = ' year(%date%) > "1900" AND ';
				$interval_location_sql = '(year(%date_start%) >= "1900" AND year(%date_end%) <= "2100") OR ';
				$interval_location_sql_qtz = '(year(%date_start%) >= "1900" AND year(%date_end%) <= "2100") OR ';
				$interval_sql = '(year(%date_start%) >= "1900" AND year(%date_end%) <= "2100") OR ';
				$negated_interval_sql = '(year(%date_start%) < "1900" AND year(%date_end%) > "2100") OR ';
				$readmission_delete_sql = '(year(%date_start%) >= "1900" AND year(%date_end%) <= "2100") OR ';
				$onlynowactive = 1;
				$periods = null;
			}
			else
			{
				$onlynowactive = 0;
				if(!empty($quarterarr))
				{
					$montharr = array();
					foreach($quarterarr as $quart)
					{
						switch($quart)
						{
							case '2':
								$montharr[] = 4;
								$montharr[] = 5;
								$montharr[] = 6;
								break;

							case '3':
								$montharr[] = 7;
								$montharr[] = 8;
								$montharr[] = 9;
								break;

							case '4':
								$montharr[] = 10;
								$montharr[] = 11;
								$montharr[] = 12;
								break;

							default:
								$montharr[] = 1;
								$montharr[] = 2;
								$montharr[] = 3;
								break;
						}
					}
				}

				foreach($yeararr as $year)
				{
					if(is_numeric($year))
					{
						$year_sql .= '"' . $year . '",';

						if(is_array($montharr) && sizeof($montharr))
						{
							foreach($montharr as $month)
							{
								if(is_numeric($month))
								{
									$this_month = $year . '-' . $month . '-01';
									$this_month_end = date('Y-m-d', strtotime('-1 day', strtotime('+1 month', strtotime($this_month))));
									$next_month = date('Y-m-', strtotime('+1 month', strtotime($this_month))) . '01';

									$active_sql .= '(date(%date%) >= "' . $year . '-' . $month . '-01") OR ';
									$admission_sql .= '(date(%date%) < "' . $next_month . '") OR ';
									$interval_location_sql .= '(((date(%date_start%) >= "' . $year . '-' . $month . '-01") AND date(%date_start%) < "' . $next_month . '" AND (date(%date_end%) >= "' . $year . '-' . $month . '-01"  OR date(%date_end%) = "0000-00-00") ) OR ((date(%date_start%) >= "' . $year . '-' . $month . '-01" AND date(%date_start%) < "' . $next_month . '") AND (date(%date_end%) < "' . $next_month . '" AND (date(%date_end%) >= "' . $year . '-' . $month . '-01" OR date(%date_end%) = "0000-00-00")))) OR ';
									$interval_location_sql_qtz .= '(((date(%date_start%) >= "' . $year . '-' . $month . '-01") AND date(%date_start%) < "' . $next_month . '" AND (date(%date_end%) >= "' . $year . '-' . $month . '-01"  OR date(%date_end%) = "0000-00-00 0000:00:00")) or ((date(%date_start%) <= "' . $year . '-' . $month . '-01") AND (date(%date_end%) >= "' . $year . '-' . $month . '-01")) or ((date(%date_start%) <= "' . $year . '-' . $month . '-01") AND (date(%date_end%) = "0000-00-00 0000:00:00"))     OR ((date(%date_start%) >= "' . $year . '-' . $month . '-01" AND date(%date_start%) < "' . $next_month . '") AND (date(%date_end%) < "' . $next_month . '" AND (date(%date_end%) >= "' . $year . '-' . $month . '-01" OR date(%date_end%) = "0000-00-00 0000:00:00")))  OR (date(%date_start%) <="' . $year . '-' . $month . '-01" AND date(%date_end%) =  "0000-00-00 0000:00:00") OR (date(%date_start%) > "' . $year . '-' . $month . '-01" AND date(%date_start%) < "' . $next_month . '" AND date(%date_end%) =  "0000-00-00 0000:00:00" )) OR ';
									$interval_sql .= '(((date(%date_start%) <= "' . $year . '-' . $month . '-01") AND (date(%date_end%) >= "' . $year . '-' . $month . '-01")) OR ((date(%date_start%) >= "' . $year . '-' . $month . '-01") AND (date(%date_start%) < "' . $next_month . '"))) OR ';
									$negated_interval_sql .= '((date(%date_start%) < "' . $year . '-' . $month . '-01") AND date(%date_end%) < "' . $year . '-' . $month . '-01" AND %date_end% IS NOT NULL) OR  date(%date_start%) >= "' . $next_month . '") OR ';
									$readmission_delete_sql .= '(%date_start% IS NOT NULL AND (date(%date_start%) < "' . $year . '-' . $month . '-01") AND date(%date_end%) > "' . $this_month_end . '") AND ';
									
									$periods[] = array(
											'start' =>  $year . '-' . $month . '-01',
											'end' => $this_month_end
									);
									
								}
								else
								{
									$active_sql .= '(year(%date%) >= "' . $year . '") OR ';
									$admission_sql .= '(year(%date%) <= "' . $year . '") OR ';
									$interval_location_sql .= '(((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) >= "' . $year . '")) OR ((year(%date_start%) >= "' . $year . '") AND (year(%date_start%) < "' . ($year + 1) . '"))) OR ';
									$interval_location_sql_qtz .= '(((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) >= "' . $year . '")) OR ((year(%date_start%) >= "' . $year . '") AND (year(%date_start%) < "' . ($year + 1) . '"))) OR ';
									$interval_sql .= '(((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) >= "' . $year . '")) OR ((year(%date_start%) >= "' . $year . '") AND (year(%date_start%) < "' . ($year + 1) . '"))) OR ';
									$negated_interval_sql .= '((year(%date_start%) > "' . $year . '") OR (year(%date_end%) < "' . $year . '")) OR ';
									$readmission_delete_sql .= '(%date_start% IS NOT NULL AND (year(%date_start%) < "' . $year . '") AND (year(%date_end%) > "' . $year . '")) AND ';
									
									$periods[] = array(
											'start' => $year.'-01-01',
											'end' => ($year+1).'-01-01'
									);
								}
							}
						}
						else
						{
							$active_sql .= '(year(%date%) >= "' . $year . '") OR ';
							$admission_sql .= '(year(%date%) <= "' . $year . '") OR ';
							//$interval_sql .= '((year(%date_start%) >= "'.$year.'") AND (year(%date_end%) <= "'.$year.'")) OR ';
							$interval_location_sql .= '(((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) >= "' . $year . '")) OR ((year(%date_start%) >= "' . $year . '") AND (year(%date_start%) < "' . ($year + 1) . '"))) OR ';
							$interval_location_sql_qtz .= '(((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) >= "' . $year . '")) or ((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) = "0000")) OR ((year(%date_start%) >= "' . $year . '") AND (year(%date_start%) < "' . ($year + 1) . '"))) OR ';
							$interval_sql .= '(((year(%date_start%) <= "' . $year . '") AND (year(%date_end%) >= "' . $year . '")) OR ((year(%date_start%) >= "' . $year . '") AND (year(%date_start%) < "' . ($year + 1) . '"))) OR ';
							$negated_interval_sql .= '((year(%date_start%) > "' . $year . '") OR (year(%date_end%) < "' . $year . '" AND %date_end% IS NOT NULL)) OR ';
							$readmission_delete_sql .= '(%date_start% IS NOT NULL AND (year(%date_start%) < "' . $year . '") AND (year(%date_end%) > "' . $year . '")) AND ';
							
							$periods[] = array(
									'start' => $year.'-01-01',
									'end' => ($year+1).'-01-01'
							);
						}
					}
				}

				foreach($montharr as $month)
				{
					if(is_numeric($month))
					{
						$month_sql .= '"' . $month . '",';
					}
				}

				if(!empty($month_sql))
				{
					$date_sql .= ' month(%date%) IN (' . substr($month_sql, 0, -1) . ') AND ';
				}

				if(!empty($year_sql))
				{
					$date_sql .= ' year(%date%) IN (' . substr($year_sql, 0, -1) . ') AND ';
				}
			}

			if(!empty($date_sql))
			{
				$return['date_sql'] = substr($date_sql, 0, -5);
				$return['active_sql'] = substr($active_sql, 0, -4);
				$return['admission_sql'] = substr($admission_sql, 0, -4);
				$return['interval_location_sql'] = substr($interval_location_sql, 0, -4);
				$return['interval_location_sql_qtz'] = substr($interval_location_sql_qtz, 0, -4);
				$return['interval_sql'] = substr($interval_sql, 0, -4);
				$return['negated_interval_sql'] = substr($negated_interval_sql, 0, -4);
				$return['readmission_delete_sql'] = substr($readmission_delete_sql, 0, -4);
				$return['onlynowactive'] = $onlynowactive;
				$return['periods'] = $periods;

				return $return;
			}
			else
			{
				return false;
			}
		}

		private function getDeadPatients($quarterarr, $yeararr, $montharr)
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$finalipidval = array();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$allpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['date_sql']) . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();

			$allarray[999999]['ipid'] = 'X'; //force empty query
			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}
			
			$dead_methods_abbr = array('TOD','TODNA','tod','Verstorben','VERSTORBEN','verstorben');
			
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid=?", $logininfo->clientid)
				->andWhereIn("abbr",$dead_methods_abbr);

			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}

			$deadpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ") AND discharge_method IN (" . implode($dm_deadfinal, ',') . ") AND isdelete=0");
			$deadpatientarray = $deadpatients->fetchArray();

			if($deadpatientarray)
			{
				foreach($deadpatientarray as $deadpatient)
				{
					$finaldeadpatient[] = $deadpatient['ipid'];
				}
				return $finaldeadpatient;
			}
		}

		private function getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$finalipidval = array();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$allpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();

			//		force empty query
			$allarray[999999]['ipid'] = 'X';
			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}

			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid='" . $logininfo->clientid . "' AND (abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA')")
				->andwhere('isdelete = 0');

			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}

			$deadpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ") AND (" . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ") AND discharge_method IN (" . implode($dm_deadfinal, ',') . ") AND isdelete=0");
			$deadpatientarray = $deadpatients->fetchArray();

			if($deadpatientarray)
			{
				foreach($deadpatientarray as $deadpatient)
				{
					$finaldeadpatient[] = $deadpatient['ipid'];
				}

				return $finaldeadpatient;
			}
		}

		private function getallPatientsByDischarge($quarterarr, $yeararr, $montharr) //ISPC-1887- for anlage7 Bayern
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$finalipidval = array();
		
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
		
			$allpatient = Doctrine_Query::create()
			->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
			->from('PatientMaster p')
			->where('isdischarged = 1')
			->andWhere('isdelete = 0')
			->andWhere('isstandby = 0')
			->andWhere('isstandbydelete = 0')
			->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();
		
			//		force empty query
			$allarray[999999]['ipid'] = 'X';
			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}
		
			$dm_dead = Doctrine_Query::create()
			->select("*")
			->from('DischargeMethod')
			->where("clientid='" . $logininfo->clientid . "'")
			->andwhere('isdelete = 0');
		
			$dm_deadarray = $dm_dead->fetchArray();
		
			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}
		
			$deadpatients = Doctrine_Query::create()
			->select('*')
			->from('PatientDischarge p')
			->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ") AND (" . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ") AND discharge_method IN (" . implode($dm_deadfinal, ',') . ") AND isdelete=0");
			$deadpatientarray = $deadpatients->fetchArray();
		
			if($deadpatientarray)
			{
				foreach($deadpatientarray as $deadpatient)
				{
					$finaldeadpatient[] = $deadpatient;
				}
		
				return $finaldeadpatient;
			}
		}


		private function get_all_discharge_patients($quarterarr, $yeararr, $montharr, $cond = null)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$finalipidval = array();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$allpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();

			//		force empty query
			$allarray[999999]['ipid'] = 'X';
			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}

			$query = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid='" . $logininfo->clientid . "'")
				->andwhere('isdelete = 0');
			    if(!empty($cond['anlage_6_report'])) {
	    		     $query->andWhere('anlage_6_report = "1"');
                }
			$dm_deadarray = $query->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}

			$deadpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" p.ipid IN (" . substr($allfinal_str, 0, -1) . ") AND p.discharge_method IN (" . implode($dm_deadfinal, ',') . ")");
			$deadpatientarray = $deadpatients->fetchArray();

			if($deadpatientarray)
			{
			    if(!empty($cond['only_first_period']) || !empty($cond['all_discharge_details'])) {
			        foreach($deadpatientarray as $deadpatient)
			        {
			            $patient_discharge_details[$deadpatient['ipid']][strtotime($deadpatient['discharge_date'])] = $deadpatient;
			        }   
			        $all_periods = array();
			        foreach($patient_discharge_details as $ipid =>$dper){
			            ksort($dper);
			            $all_periods = array_values($dper);
			            if(!empty($cond['all_discharge_details'])){
      			            $finaldeadpatient[$ipid] = $all_periods; // all  discharged details
			            } else{
      			            $finaldeadpatient[$ipid] = $all_periods[0]; // only the first
			            }
  			             
			        }
			        
			    } else {
			    
    				foreach($deadpatientarray as $deadpatient)
    				{
    					$finaldeadpatient[] = $deadpatient['ipid'];
    				}

			    }
				return $finaldeadpatient;
			}
		}

		private function getDeadPatientsByDeathbutton($quarterarr, $yeararr, $montharr)
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$finalipidval = array();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$allpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();

			//		force empty query
			$allarray[999999]['ipid'] = 'X';
			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}

			$deadpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDeath p')
				->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ") AND (" . str_replace('%date%', 'death_date', $active_cond['date_sql']) . ")  AND isdelete=0");
			$deadpatientarray = $deadpatients->fetchArray();

			if($deadpatientarray)
			{
				foreach($deadpatientarray as $deadpatient)
				{
					$finaldeadpatient[] = $deadpatient['ipid'];
				}
				return $finaldeadpatient;
			}
		}

		private function getStandbyPatients($quarterarr, $yeararr, $montharr, $date_field = 'admission_date')
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$finalipidval = array();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			
			$sql_period_standby = array();
			$sql_period_standby_text =  "";	
			if( ! empty($active_cond['periods']))
			{
				foreach($active_cond['periods'] as $period)
				{
					if(empty($period['end']))
					{
						$period['end'] = date('Y-m-d', strtotime('+1 day'));
					}	
					$period['end'] = date('Y-m-d', strtotime($period['end']));
					$period['start'] = date('Y-m-d', strtotime($period['start']));
					$sql_period_standby[] = ' ((ps.start BETWEEN "' . $period['start'] . '" AND "' . $period['end'] . '") OR (ps.end BETWEEN "' . $period['start'] . '"	AND "' . $period['end'] . '") OR (ps.start <= "' . $period['start'] . '" AND (ps.end = "0000-00-00" OR ps.end >= "' . $period['end'] . '")))';
				}

				$sql_period_standby_text = " AND ( " . implode(" OR ", $sql_period_standby) . " )";
			}
			
			$allpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 0')
				->andWhere('isdelete = 0')
// 				->andWhere('isstandby = 1')
				->andWhere('isstandbydelete = 0')
				->andWhere('(' . str_replace('%date%', $date_field, $active_cond['date_sql']) . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->innerJoin('e.PatientStandby ps ON e.ipid = ps.ipid '. $sql_period_standby_text);
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();

			if($allarray)
			{
				foreach($allarray as $key => $val)
				{
					$finalsbpatient[] = $val['ipid'];
				}
				return $finalsbpatient;
			}
		}

		private function getPatientsByDischarge($quarterarr, $yeararr, $montharr)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$finalipidval = array();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$allpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();

			//		force empty query
			$allarray[999999]['ipid'] = 'X';
			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}

			/* $dm_dead = Doctrine_Query::create()
			  ->select("*")
			  ->from('DischargeMethod')
			  ->where("clientid='" . $logininfo->clientid . "' AND (abbr='TOD' OR abbr='TODNA')")
			  ->andwhere('isdelete = 0');

			  $dm_deadarray = $dm_dead->fetchArray();

			  $dm_deadfinal[] = '999999999';
			  foreach($dm_deadarray as $key => $val)
			  {
			  $dm_deadfinal[] = $val['id'];
			  }
			 */
			$deadpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ") AND (" . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ")   AND isdelete=0");
			$dischargepatientarray = $deadpatients->fetchArray();

			if($dischargepatientarray)
			{
				foreach($dischargepatientarray as $dischargedpatient)
				{
					$finaldischargepatient[] = $dischargedpatient['ipid'];
				}

				return $finaldischargepatient;
			}
		}

		private function generateHTML($report, $data, $output)
		{
			$columns = $this->getreportscolumns($report);
			$namereport = $this->fetchReportDetailsAction($report);
			
			//Setting up reports periods start
			if($data['header_data']['onlyactive'] == '0' && !empty($data['header_data']['year']))
			{
				$periods_no = count($data['header_data']['start']);
				$table = '<table class="datatable" cellpadding="5" cellspacing="0" border="0" style="width:30%;">
					<tr>
					<th rowspan="' . ($periods_no + 1) . '" style="width:42%;">' . $this->view->translate('reportperiods') . '</th>
					<th>' . $this->view->translate('rfrom') . '</th>
					<th>' . $this->view->translate('rtill') . '</th>
					</tr>';

				foreach($data['header_data']['start'] as $k_period => $value)
				{
					$table .= '<tr>';
					$table .= '<td style="width:10%;">' . date('d.m.Y', strtotime($value)) . '</td>';
					$table .= '<td style="width:10%;">' . date('d.m.Y', strtotime($data['header_data']['end'][$k_period])) . '</td>';
					$table .= '</tr>';
				}
				$table .= '</table>';
			}
			else
			{
				$table = '';
			}

			//		Setting up reports periods end
			switch($report)
			{
			    case '169':
			        $html ='<h3 style=" line-height:25px; font-size: 18px; font-family : Arial;">SAPV-Rufbereitschaft '.date("d.m.Y H:i").'</h3>';
			        //$html .= $table;
			    
			        $rowcount=1;
			        foreach($data['data'] as $key=>$row)
			        {
			        $html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" style="font-size:10pt;border-collapse:collapse; width:19cm!important">';
			    
			            $html .='<tr class="row" style="page-break-inside:avoid;">';
			            $html .= '<td valign="top" style="width:20%!important; cellpadding:1px;font-size:9pt;">'.$row['Nummer'].'</td>';
			            $html .= '<td valign="top" style="width:20%!important; cellpadding:1px;font-size:9pt;">'.$row['zustaendig'].'</td>';
			            $html .= '<td valign="top" style="width:60%!important; padding:1px;font-size:9pt;">'.$row['patient'].'</td>';
			            $html .='</tr>';
// 			            $html .='<tr class="row" style="page-break-inside:avoid">';
// 			            $html .= '<td valign="top" style="width:4cm!important;cellpadding:1px;font-size:9pt;">'.$row['Nummer'].'</td>';
// 			            $html .= '<td valign="top" style="width:2cm!important;cellpadding:1px;font-size:9pt;">'.$row['zustaendig'].'</td>';
// 			            $html .= '<td valign="top" style="width:12.8cm!important;padding:1px;font-size:9pt;">'.$row['patient'].'</td>';
// 			            $html .='</tr>';
			        $html.="</table>";
			        }
			        break;
			        
			        
			    
				case '16':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';

					$html .= '<th width="1%">' . $this->view->translate('no') . '</th>';

					foreach($columns as $column)
					{

						$html .= '<th width="10%">' . $this->view->translate($column['column_name']) . '</th>';
					}
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';

						foreach($row as $value)
						{
							if(!is_array($value))
							{
								$html.= '<td valign="top">' . $value . '</td>';
							}
							else
							{
								$array_names = array("1" => "Hausbesuch in Privatwohnung", "2" => "Besuch im Krankenhaus / Palliativstation", "3" => "Besuch in stationärer Pflegeeinrichtung / Hospiz", "4" => "Besuch in Arztpraxis");
								$html .='<td valign="top">';
								$html .='<table width="250" cellspacing="0" cellpadding="0">';
								$i = 1;
								foreach($value as $k => $val)
								{
									if($i != 4)
									{
										$class = 'class="botomborder"';
									}
									else
									{
										$class = '';
									}
									$html .= '<tr><td ' . $class . '>' . $array_names[$k] . '</td><td ' . $class . '>' . $val . '</td></tr>';
									$i++;
								}
								$html .='</table>';
								$html .='</td>';
							}
						}
						$html .='</tr>';
						$rowcount++;
					}

					$html .= '<tr class="row">
							<td valign="top" colspan="6" align="right">' . $this->view->translate('Average') . '</td>
							<td valign="top">' . $data['extra']['averege'] . '</td>
							<td valign="top"></td>
						</tr>';

					break;
				case '19':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('Vorname Nachname ') . '</th>';
					$html .= '<th width="1%" colspan="4">' . $this->view->translate('Verordnungen') . '</th>';
					$html .= '</tr><tr>';
					$html .= '<th width="1%">Verordnet von</th>';
					$html .= '<th width="1%">von - bis</th>';
					$html .= '<th width="1%">Verordnet</th>';
					$html .= '<th width="1%">Status</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['sapv']);
						foreach($row['sapv'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['sapv'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['full_name'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['verordnet_von'] . '&nbsp;</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['von-bis'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['verordnet'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['status'] . '&nbsp;</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top">' . $sec_row['verordnet_von'] . '&nbsp;</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['von-bis'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['verordnet'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['status'] . '&nbsp;</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html.="</table>";
					break;
					
					case '35':
						$report_language = $this->view->translate($namereport[0]['report'].'_lang');
							
						$html = "";
						$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $report_language[$namereport[0]['report']] . '</h3>';
						$html .= $table;
						$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
						$html .= '<th width="1%" rowspan="2">' . $report_language['no'] . '</th>';
						$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
						$html .= '<th width="1%" rowspan="2">' . $report_language['lastname']. '</th>';
						$html .= '<th width="1%" rowspan="2">' . $report_language['firstname'] . '</th>';
						$html .= '<th width="1%" rowspan="2">' . $report_language['birthd'] . '</th>';
						$html .= '<th width="1%" rowspan="2">' . $report_language['healthinsurance'] . '</th>';
						$html .= '<th width="1%" colspan="7">' . $report_language['visit'] . '</th>';
						$html .= '</tr><tr>';
						$html .= '<th width="1%">'.$report_language['voluntaryworker'].'</th>';
						$html .= '<th width="1%">'.$report_language['beginvisit'].'</th>';
						$html .= '<th width="1%">'.$report_language['endvisit'].'</th>';
						$html .= '<th width="1%">'.$report_language['duration'].'</th>';
						$html .= '<th width="1%">'.$report_language['distance'].'</th>';
						$html .= '</tr>';
					
						$rowcount = 1;
						foreach($data['data'] as $key => $row)
						{
							$rowspan = sizeof($row['visits']);
							foreach($row['visits'] as $sec_key => $sec_row)
							{
								if($sec_key == min(array_keys($row['visits'])))
								{
									$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['healthinsurance'] . '</td>';
									$html .= '<td valign="top">' . $sec_row['vw_worker'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['beginvisit'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['endvisit'] . '</td>';
									$html .= '<td valign="top">' . $sec_row['duration'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['distance'] . '&nbsp;</td>';
									$html .='</tr>';
								}
								else
								{
									$html .='<tr>';
									$html .= '<td valign="top">' . $sec_row['vw_worker'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['beginvisit'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['endvisit'] . '</td>';
									$html .= '<td valign="top">' . $sec_row['duration'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['distance'] . '&nbsp;</td>';
									$html .='</tr>';
								}
							}
							$rowcount++;
						}
						$html.="</table>";
						break;
					
				case '183':
					$report_language = $this->view->translate($namereport[0]['report'].'_lang');
					
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $report_language[$namereport[0]['report']] . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2">' . $report_language['no'] . '</th>';
					$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					$html .= '<th width="1%" rowspan="2">' . $report_language['lastname']. '</th>';
					$html .= '<th width="1%" rowspan="2">' . $report_language['firstname'] . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $report_language['birthd'] . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $report_language['healthinsurance'] . '</th>';
					$html .= '<th width="1%" colspan="7">' . $report_language['visit'] . '</th>';
					$html .= '</tr><tr>';
					$html .= '<th width="1%">'.$report_language['voluntaryworker'].'</th>';
					$html .= '<th width="1%">'.$report_language['beginvisit'].'</th>';
					$html .= '<th width="1%">'.$report_language['endvisit'].'</th>';
					$html .= '<th width="1%">'.$report_language['duration'].'</th>';
					$html .= '<th width="1%">'.$report_language['distance'].'</th>';
					$html .= '<th width="1%">'.$report_language['driving_time_count'].'</th>';
					$html .= '<th width="1%">'.$report_language['visit_reason'].'</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['visits']);
						foreach($row['visits'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['visits'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['healthinsurance'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['vw_worker'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['beginvisit'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['endvisit'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['duration'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['distance'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['driving_time_count'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['visit_reason'] . '&nbsp;</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top">' . $sec_row['vw_worker'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['beginvisit'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['endvisit'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['duration'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['distance'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['driving_time_count'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['visit_reason'] . '&nbsp;</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}
					$html .='<tr>';
					$html .= '<td valign="top" colspan="11">' . $report_language['average_travel_time'] . '&nbsp;</td>';
					$html .= '<td valign="top">' . $data['average_driving_time'] . '&nbsp;</td>';
					$html .= '<td valign="top">&nbsp;</td>';
					$html .='</tr>';
					$html.="</table>";
					break;
					
				case '101':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('epid') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('street') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('zip') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('city') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('birthd') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('admissiondate') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('diedon') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('familydoctor') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('dielocation') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('treateddays') . '</th>';
					$html .= '<th width="1%" colspan="6">' . $this->view->translate('contactperson') . '</th>';
					$html .= '</tr><tr>';
					$html .= '<th width="1%">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('street') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('zip') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('city') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('phone') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;

					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['contactperson']);

						if(count($row['contactperson']) != 0)
						{
							foreach($row['contactperson'] as $sec_key => $sec_row)
							{
								if($sec_key == min(array_keys($row['contactperson'])))
								{
									$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['street'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['zip'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['city'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['admissiondate'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['diedon'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['familydoctor'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['dielocation'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['treateddays'] . '</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_first_name'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_last_name'] . '</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_street1'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_zip'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_city'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_phone'] . '&nbsp;</td>';
									$html .='</tr>';
								}
								else
								{
									$html .='<tr>';
									$html .= '<td valign="top">' . $sec_row['cnt_first_name'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_last_name'] . '</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_street1'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_zip'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_city'] . '&nbsp;</td>';
									$html .= '<td valign="top">' . $sec_row['cnt_phone'] . '&nbsp;</td>';
									$html .='</tr>';
								}
							}
							$rowcount++;
						}
						else
						{
							$html .='<tr class="row"><td valign="top" rowspan="0">' . $rowcount . '</td>';
							$html .= '<td valign="top">' . $row['epid'] . '</td>';
							$html .= '<td valign="top">' . $row['firstname'] . '</td>';
							$html .= '<td valign="top">' . $row['lastname'] . '</td>';
							$html .= '<td valign="top">' . $row['street'] . '</td>';
							$html .= '<td valign="top">' . $row['zip'] . '</td>';
							$html .= '<td valign="top">' . $row['city'] . '</td>';
							$html .= '<td valign="top">' . $row['birthd'] . '</td>';
							$html .= '<td valign="top">' . $row['admissiondate'] . '</td>';
							$html .= '<td valign="top">' . $row['diedon'] . '</td>';
							$html .= '<td valign="top">' . $row['familydoctor'] . '</td>';
							$html .= '<td valign="top">' . $row['dielocation'] . '</td>';
							$html .= '<td valign="top">' . $row['treateddays'] . '</td>';
							$html .= '<td valign="top">&nbsp; - &nbsp;</td>';
							$html .= '<td valign="top">&nbsp; - &nbsp;</td>';
							$html .= '<td valign="top">&nbsp; - &nbsp;</td>';
							$html .= '<td valign="top">&nbsp; - &nbsp;</td>';
							$html .= '<td valign="top">&nbsp; - &nbsp;</td>';
							$html .= '<td valign="top">&nbsp; - &nbsp;</td>';
							$html .='</tr>';
							$rowcount++;
						}
					}
					$html .= '<tr>
							<td colspan="7" align="right">Durchschnitt Alter</td>
							<td>' . $data['extra']['avg_die'] . '</td>
							<td colspan="4" align="right">Durchschnittliche Behandlungsdauer</td>
							<td>' . $data['extra']['avg_treatment'] . '</td>
							<td colspan="6">&nbsp;</td>
						</tr>';
					$html.="</table>";
					break;

				case '55':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" >' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" > Pat. Nr</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Vorname') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Nachname ') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('birthd') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('sapv_startdate') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('sapv_enddate') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['sapv']);
						foreach($row['sapv'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['sapv'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['sapv_startdate'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['sapv_enddate'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top" width="20%">' . $sec_row['sapv_startdate'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['sapv_enddate'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html.="</table>";
					break;

				case '47':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('Vorname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('Nachname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('birthd') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('admissiondate') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('dischargedate') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('healthinsurance') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('healthinsurance_nr') . '</th>';
					$html .= '<th width="1%" colspan="4">' . $this->view->translate('Verordnungen') . '</th>';
					$html .= '</tr><tr>';
					$html .= '<th width="1%">Verordnet</th>';
					$html .= '<th width="1%">von - bis</th>';
					$html .= '<th width="1%">Status</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['sapv']);
						foreach($row['sapv'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['sapv'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['admissiondate'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['dischargedate'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['healthinsurance'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['healthinsurance_nr'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['verordnet'] . '&nbsp;</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['von-bis'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['status'] . '&nbsp;</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top">' . $sec_row['verordnet'] . '&nbsp;</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['von-bis'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['status'] . '&nbsp;</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html.="</table>";
					break;

				case '14':
					$noofpatients = $data['extra']['noofpatients'];

					$html = "";
					$html .='<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>
			<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%">
							 <tr><th>PKD-Statistik</th>
							 <td colspan="4">';

					if($data['header_data']['onlyactive'] == '0' && !empty($data['header_data']['year']))
					{
						$html .= 'Abrechnungszeitraum :<br /> ';
						foreach($data['header_data']['start'] as $k_period => $value)
						{
							$html .= date('d.m.Y', strtotime($value)) . ' - ' . date('d.m.Y', strtotime($data['header_data']['end'][$k_period])) . '<br />';
						}
					}
					$html .='</td>
							 <th>' . date("d.m.Y") . '</th></tr>
							  <tr><td colspan="11">Anzahl der eingeschriebenen Pat. : <b>' . $noofpatients . '</b></td></tr>
							  <tr> <th>QPA-Name</th>
							  <th>Initialtelefonat (t1)</th>
							  <th>Telefonat mit Prof. (tp)</th>
							  <th>Telefonat mit Fam. (tf)</th>
							  <th>Hausbesuch (hb)</th>
							  <th>Nachgespräch (ng)</th></tr>';
					$rowcount = 1;

					$allhb = 0;
					$allt1 = 0;
					$alltp = 0;
					$alltf = 0;
					$allng = 0;
					foreach($data['data'] as $key => $valfile)
					{
						if($valfile['type'] == 'doctor')
						{
							$html.= '<tr><td>' . $valfile['userdata'] . '&nbsp;</td>
										<td align="center">' . $valfile['t1'] . '&nbsp;</td>
										<td align="center">' . $valfile['tp'] . '&nbsp;</td>
										<td align="center">' . $valfile['tf'] . '&nbsp;</td>
										<td align="center">' . $valfile['hb'] . '&nbsp;</td>
										<td align="center">' . $valfile['ng'] . '&nbsp;</td></tr>';

							$rowcount++;
							$allhb += $valfile['hb'];
							$allt1 += $valfile['t1'];
							$alltp +=$valfile['tp'];
							$alltf +=$valfile['tf'];
							$allng +=$valfile['ng'];
						}
					}
					$html.= '<tr><td><b>Summe</b>&nbsp;</td>
							<td align="center"><b>' . $allt1 . '</b>&nbsp;</td>
							<td align="center"><b>' . $alltp . '</b>&nbsp;</td>
							<td align="center"><b>' . $alltf . '</b>&nbsp;</td>
							<td align="center"><b>' . $allhb . '</b>&nbsp;</td>
							<td align="center"><b>' . $allng . '</b>&nbsp;</td></tr>
							<tr><td><b>Aktion pro Patient</b>&nbsp;</td>
							<td align="center"><b>' . number_format(($allt1 / $noofpatients), 2, ".", "") . '</b>&nbsp;</td>
							<td align="center"><b>' . number_format(($alltp / $noofpatients), 2, ".", "") . '</b>&nbsp;</td>
							<td align="center"><b>' . number_format(($alltf / $noofpatients), 2, ".", "") . '</b>&nbsp;</td>
							<td align="center"><b>' . number_format(($allhb / $noofpatients), 2, ".", "") . '</b>&nbsp;</td>
							<td align="center"><b>' . number_format(($allng / $noofpatients), 2, ".", "") . '</b>&nbsp;</td></tr>';
					$html.="</table><br /><br /><br />";

					$html .='<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%">
							 <tr><th>KO-Statistik</th>
							 <td colspan="4">';

					if($data['header_data']['onlyactive'] == '0' && !empty($data['header_data']['year']))
					{
						$html .= 'Abrechnungszeitraum :<br /> ';
						foreach($data['header_data']['start'] as $k_period => $value)
						{
							$html .= date('d.m.Y', strtotime($value)) . ' - ' . date('d.m.Y', strtotime($data['header_data']['end'][$k_period])) . '<br />';
						}
					}
					$html.='</td>
							<th>' . date("d.m.Y") . '</th></tr><tr>
							 <th>Koordinator-Name</th>
							 <th>Initialtelefonat (t1)</th>
							 <th>Telefonat mit Prof. (tp)</th>
							 <th>Telefonat mit Fam. (tf)</th>
							 <th>Hausbesuch (hb)</th>
							 <th>Nachgespräch (ng)</th></tr>';
					$rowcount = 1;
					$allhb = 0;
					$allt1 = 0;
					$alltp = 0;
					$alltf = 0;
					$allng = 0;
					foreach($data['data'] as $key => $valfile)
					{
						if($valfile['type'] == 'cordinator')
						{
							$html.= '<tr><td>' . $valfile['userdata'] . '&nbsp;</td>
										 <td align="center">' . $valfile['t1'] . '&nbsp;</td>
										 <td align="center">' . $valfile['tp'] . '&nbsp;</td>
										 <td align="center">' . $valfile['tf'] . '&nbsp;</td>
										 <td align="center">' . $valfile['hb'] . '&nbsp;</td>
										 <td align="center">' . $valfile['ng'] . '&nbsp;</td></tr>';

							$rowcount++;
							$allhb += $valfile['hb'];
							$allt1 += $valfile['t1'];
							$alltp +=$valfile['tp'];
							$alltf +=$valfile['tf'];
							$allng +=$valfile['ng'];
						}
					}

					$html.= '<tr><td><b>Summe</b>&nbsp;</td>
						<td align="center"><b>' . $allt1 . '</b>&nbsp;</td>
						<td align="center"><b>' . $alltp . '</b>&nbsp;</td>
						<td align="center"><b>' . $alltf . '</b>&nbsp;</td>
						<td align="center"><b>' . $allhb . '</b>&nbsp;</td>
						<td align="center"><b>' . $allng . '</b>&nbsp;</td></tr>
						<tr><td><b>Aktion pro Patient</b>&nbsp;</td>
						<td align="center"><b>' . number_format(($allt1 / $noofpatients), 2, ".", "") . '</b>&nbsp;</td>
						<td align="center"><b>' . number_format(($alltp / $noofpatients), 2, ".", "") . '</b>&nbsp;</td>
						<td align="center"><b>' . number_format(($alltf / $noofpatients), 2, ".", "") . '</b>&nbsp;</td>
						<td align="center"><b>' . number_format(($allhb / $noofpatients), 2, ".", "") . '</b>&nbsp;</td>
						<td align="center"><b>' . number_format(($allng / $noofpatients), 2, ".", "") . '</b>&nbsp;</td></tr>';
					$html.="</table>";
					break;

				case '13':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%"> Pat. Nr</th>';
					$html .= '<th width="1%">' . $this->view->translate('Nachname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Vorname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Behandlungsdauer') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Anzahl KH Einweisungen') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('KH Tage') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Zeitraum') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Grund der Aufnahme') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Einweisender Arzt ') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Transportmittel ') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Sterbeort ') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('SAPV ') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['locationstatsarr']);
						foreach($row['locationstatsarr'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['locationstatsarr'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '&nbsp;</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '&nbsp;</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '&nbsp;</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['treateddays'] . '&nbsp;</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['admissionsinhopital'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['khtage'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['locationstats'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['reason'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['hospdoc'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['transport'] . '&nbsp;</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['dielocation'] . '&nbsp;</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['sapv'] . '&nbsp;</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top">' . $sec_row['khtage'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['locationstats'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['reason'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['hospdoc'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['transport'] . '&nbsp;</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html.="</table>";
					break;
				case '54':
				case '58':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%"> Pat. Nr</th>';
					$html .= '<th width="1%">' . $this->view->translate('Nachname ') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Vorname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Geburtsdatum') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('readmision') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Entlassungsdatum') . '</th>';
					$html .= '</tr>';
					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['admissiondate']);
						foreach($row['admissiondate'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['admissiondate'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top">' . $sec_row . '&nbsp;</td>';
								$html .= '<td valign="top">' . $row['dischargedate'][$sec_key] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top">' . $sec_row . '</td>';
								$html .= '<td valign="top">' . $row['dischargedate'][$sec_key] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html.="</table>";
					break;

				case '80':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%">' . $this->view->translate('no') . '</th>';

					foreach($columns as $column)
					{

						$html .= '<th width="10%">' . $this->view->translate($column['column_name']) . '</th>';
					}
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['fall']);
						foreach($row['fall'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['fall'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '&nbsp;</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '&nbsp;</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['fall_start'] . ' - ' . $sec_row['fall_end'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['fall_days'] . '&nbsp;</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['treateddays'] . '&nbsp;</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top">' . $sec_row['fall_start'] . ' - ' . $sec_row['fall_end'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['fall_days'] . '&nbsp;</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					if($data['extra'])
					{
						$html .= '<tr>
								<td colspan="5">' . $this->view->translate('Average') . '</td>
								<td>' . $data['extra']['average_fall_period'] . '</td>
								<td>' . $data['extra']['average'] . '</td>

							</tr>
							<tr>
								<td colspan="5">' . $this->view->translate('Median') . '</td>
								<td>' . $data['extra']['median_fall'] . '</td>
								<td>' . $data['extra']['median'] . '</td>
							</tr>';
					}
					break;


				case '84':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" >' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" > Pat. Nr</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Nachname') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Vorname') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('admissiondate') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('dischargedate') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('nursing') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('palliativpflegedienst') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';
						foreach($row as $row_key => $value)
						{
							$html.= '<td valign="top">' . $value . '</td>';
						}
						$html .='</tr>';
						$rowcount++;
					}

					$html .='<tr><td colspan="4" >Pflegedienst</td><td colspan="4">' . $data['extra']['patients_pflegedienst'] . '</td></tr>';
					$html .='<tr><td colspan="4" >Palliativpflegedienst</td><td colspan="4">' . $data['extra']['patients_paliativepfle'] . '</td></tr>';
					$html .='<tr><td colspan="4" >Pflegedienst AND Palliativpflegedienst</td><td colspan="4">' . $data['extra']['patients_pflegedienst_paliativepfle'] . '</td></tr>';
					$html .='<tr><td colspan="4" >no Pflegedienst</td><td colspan="4">' . $data['extra']['patients_no_pflegedienst_no_paliativepfle'] . '</td></tr>';
					$html.="</table>";
					break;

				case '85':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" >' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" > Pat. Nr</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Nachname') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Vorname') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('admissiondate') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('dischargedate') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Visit_date') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Visit_by') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Visit_duration') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['visit']);
						foreach($row['visit'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['visit'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['admissiondate'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['dischargedate'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_date'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_by'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_duration'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_date'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_by'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_duration'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html .='<tr>
							<td colspan="2">' . $this->view->translate('average_vist_per_day') . '</td>
							<td colspan="2">' . $data['extra']['average_visit_per_day'] . '</td>
							<td colspan="2">' . $this->view->translate('overall_amount_of_visits') . '</td>
							' . $data['extra']['overall_visits'] . '</td>
							<td>' . $this->view->translate('overall_time_of_visits') . '</td>
							' . $data['extra']['overall_time'] . '</td>
						</tr>';
					$html.="</table>";
					break;
				case '97':

					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" >' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('username') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visit_date') . '</th>';
					$html .= '<th width="1%" > Pat. Nr</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Nachname') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('Vorname') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['visit']);
						foreach($row['visit'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['visit'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['username'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_date'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['epid'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['patient_lastname'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['patient_firstname'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_date'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['epid'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['patient_lastname'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['patient_firstname'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html.="</table>";
					break;
				case '87':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="2%">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="7%">' . $this->view->translate('username') . '</th>';
					$html .= '<th width="5%">' . $this->view->translate('action') . '</th>';
					$html .= '<th>' . $this->view->translate('patient_name') . '</th>';
					$html .= '<th width="5%">' . $this->view->translate('quality') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					$quality_map = array('0' => 'Normal', '1' => 'Dringend', '2' => 'Normal', '3' => 'Notfall');

					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['rows']);
						foreach($row['rows'] as $sec_key => $sec_row)
						{
							if($sec_row['action'] == 'visit_action')
							{
								$quality = $quality_map[$sec_row['quality']];
							}
							else
							{
								$quality = ' - ';
							}
							if($sec_key == min(array_keys($row['rows'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '" width="2%">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['username'] . '</td>';
								$html .= '<td valign="top">' . $this->view->translate($sec_row['action']) . '&nbsp;</td>'; //action
								$html .= '<td valign="top" width="15%">' . $sec_row['epid'] . ' - ' . $sec_row['row_date'] . '</td>';
								$html .= '<td valign="top">' . $quality . '&nbsp;</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top">' . $this->view->translate($sec_row['action']) . '&nbsp;</td>';
								$html .= '<td valign="top" width="15%">' . $sec_row['epid'] . ' - ' . $sec_row['row_date'] . '</td>';
								$html .= '<td valign="top">' . $quality . '&nbsp;</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html .= '<tr>
							<td colspan="5">&nbsp;</td>
						</tr>';

					foreach($data['extra'] as $user => $details)
					{
						$html .= '<tr>
								<td rowspan="7">' . $user . '</td>
							</tr>
							<tr>
								<td>' . $this->view->translate('ammount_visits_dringend') . '</td>
								<td colspan="3">' . $details['visit'][1] . '</td>
							</tr>
							<tr>
								<td>' . $this->view->translate('ammount_visits_normal') . '</td>
								<td colspan="3">' . $details['visit'][2] . '</td>
							</tr>
							<tr>
								<td>' . $this->view->translate('ammount_visits_duty') . '</td>
								<td colspan="3">' . $details['visit'][3] . '</td>
							</tr>
							<tr>
								<td>' . $this->view->translate('ammount_beratung') . '</td>
								<td colspan="3">' . $details['beratung'] . '</td>
							</tr>
							<tr>
								<td>' . $this->view->translate('ammount_koordination') . '</td>
								<td colspan="3">' . $details['koord'] . '</td>
							</tr>
							<tr>
								<td>' . $this->view->translate('ammount_tel') . '</td>
								<td colspan="3">' . $details['tel'] . '</td>
							</tr>';
					}
					$html.="</table>";
					break;

				case '99':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%"> Pat. Nr</th>';
					$html .= '<th width="1%">' . $this->view->translate('Nachname ') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Vorname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Geburtsdatum') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('readmision') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('Entlassungsdatum') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('diagnosis') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('familydoctor') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('lanrfamilydoctor') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('healthinsurance') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('healthinsurance_nr') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('healthinsurance_case') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('healthinsurance_status') . '</th>';
					$html .= '</tr>';
					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['admissiondate']);
						foreach($row['admissiondate'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['admissiondate'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top">' . $sec_row . '&nbsp;</td>';
								$html .= '<td valign="top">' . $row['dischargedate'][$sec_key] . '</td>';
								$html .= '<td valign="top">' . $row['diagnosis'] . '</td>';
								$html .= '<td valign="top">' . $row['familydoctor'] . '</td>';
								$html .= '<td valign="top">' . $row['lanr'] . '</td>';
								$html .= '<td valign="top">' . $row['healthinsurance'] . '</td>';
								$html .= '<td valign="top">' . $row['healthinsurance_nr'] . '</td>';
								$html .= '<td valign="top">' . $row['healthinsurance_case'] . '</td>';
								$html .= '<td valign="top">' . $row['healthinsurance_status'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top">' . $sec_row . '</td>';
								$html .= '<td valign="top">' . $row['dischargedate'][$sec_key] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html.="</table>";
					break;



				case '103':

					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2" >' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('birthd') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('admissiondate') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('dischargedate') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('has_sapv_vv') . '</th>';
					$html .= '<th width="1%"  colspan="12">' . $this->view->translate('users_working_hours') . '</th>';
					$html .= '</tr>';


					$html .= '<tr>';
					$html .= '<th width="1%" >' . $this->view->translate('username') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visit_times') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visits_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('driving_time') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('telefon_duration') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('telefon_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('koordination_duration') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('koordination_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('beratung_duration') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('beratung_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visits per day') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('contacts per day') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['user_documentation']);
						foreach($row['user_documentation'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['user_documentation'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['admissiondate'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['dischargedate'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '" align="center">' . $row['has_sapv_vv'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_driving'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visits_per_day'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['contacts_per_day'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_driving'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visits_per_day'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['contacts_per_day'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}


					$html.="<tr>";
					$html.='<td colspan="9">' . $this->view->translate('sum') . '</td>';
					$html.='<td>' . $data['extra']['total_visits_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_visits_count'] . '</td>';
					$html.='<td>' . $data['extra']['total_driving_sum'] . '</td>';
					$html.='<td>' . $data['extra']['total_telefonat_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_telefonat_count'] . '</td>';
					$html.='<td>' . $data['extra']['total_coordination_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_coordination_count'] . '</td>';
					$html.='<td>' . $data['extra']['total_consulting_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_consulting_count'] . '</td>';
					$html.="</tr>";

					$html.="<tr>";
					$html.='<td colspan="9">' . $this->view->translate('average') . '</td>';
					$html.='<td>' . $data['extra']['avg_total_visits_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_visits_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_driving_sum'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_telefonat_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_telefonat_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_coordination_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_coordination_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_consulting_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_consulting_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_visits_per_day'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_contacts_per_day'] . '</td>';
					$html.="</tr>";

					$html.="</table>";
					break;


				case '104':

					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2" >' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('birthd') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('admissiondate') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('dischargedate') . '</th>';
					$html .= '<th width="1%"  colspan="12">' . $this->view->translate('users_working_hours_sapv') . '</th>';
					$html .= '</tr>';


					$html .= '<tr>';
					$html .= '<th width="1%" >' . $this->view->translate('username') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visit_times') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visits_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('driving_time') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('telefon_duration') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('telefon_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('koordination_duration') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('koordination_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('beratung_duration') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('beratung_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visits per day') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('contacts per day') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['user_documentation']);
						foreach($row['user_documentation'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['user_documentation'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['admissiondate'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['dischargedate'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_driving'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visits_per_day'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['contacts_per_day'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_driving'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visits_per_day'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['contacts_per_day'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}


					$html.="<tr>";
					$html.='<td colspan="8">' . $this->view->translate('sum') . '</td>';
					$html.='<td>' . $data['extra']['total_visits_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_visits_count'] . '</td>';
					$html.='<td>' . $data['extra']['total_driving_sum'] . '</td>';
					$html.='<td>' . $data['extra']['total_telefonat_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_telefonat_count'] . '</td>';
					$html.='<td>' . $data['extra']['total_coordination_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_coordination_count'] . '</td>';
					$html.='<td>' . $data['extra']['total_consulting_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_consulting_count'] . '</td>';
					$html.="</tr>";

					$html.="<tr>";
					$html.='<td colspan="8">' . $this->view->translate('average') . '</td>';
					$html.='<td>' . $data['extra']['avg_total_visits_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_visits_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_driving_sum'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_telefonat_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_telefonat_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_coordination_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_coordination_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_consulting_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_consulting_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_visits_per_day'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_contacts_per_day'] . '</td>';
					$html.="</tr>";

					$html.="</table>";
					break;

				case '108':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2" >' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('birthd') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('admissiondate') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('dischargedate') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('has_sapv_vv') . '</th>';
					$html .= '<th width="1%"  colspan="12">' . $this->view->translate('users_working_hours_no_sapv') . '</th>';
					$html .= '</tr>';

					$html .= '<tr>';
					$html .= '<th width="1%" >' . $this->view->translate('username') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visit_times') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visits_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('driving_time') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('telefon_duration') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('telefon_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('koordination_duration') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('koordination_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('beratung_duration') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('beratung_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visits per day') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('contacts per day') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['user_documentation']);
						foreach($row['user_documentation'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['user_documentation'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['admissiondate'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['discharge_date'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '" align="center">' . $row['has_sapv_vv'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_driving'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visits_per_day'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['contacts_per_day'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_driving'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['telefonate_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_minutes'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['consulting_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visits_per_day'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['contacts_per_day'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html.="<tr>";
					$html.='<td colspan="9">' . $this->view->translate('sum') . '</td>';
					$html.='<td>' . $data['extra']['total_visits_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_visits_count'] . '</td>';
					$html.='<td>' . $data['extra']['total_driving_sum'] . '</td>';
					$html.='<td>' . $data['extra']['total_telefonat_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_telefonat_count'] . '</td>';
					$html.='<td>' . $data['extra']['total_coordination_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_coordination_count'] . '</td>';
					$html.='<td>' . $data['extra']['total_consulting_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['total_consulting_count'] . '</td>';
					$html.="</tr>";

					$html.="<tr>";
					$html.='<td colspan="9">' . $this->view->translate('average') . '</td>';
					$html.='<td>' . $data['extra']['avg_total_visits_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_visits_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_driving_sum'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_telefonat_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_telefonat_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_coordination_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_coordination_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_consulting_minutes'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_consulting_count'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_visits_per_day'] . '</td>';
					$html.='<td>' . $data['extra']['avg_total_contacts_per_day'] . '</td>';
					$html.="</tr>";
					$html.="</table>";
					break;

				case '109':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2" >' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('birthd') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('admissiondate') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('dischargedate') . '</th>';
					$html .= '<th width="1%"  colspan="4">' . $this->view->translate('bre_sapv') . '</th>';
					$html .= '</tr>';

					$html .= '<tr>';
					$html .= '<th width="1%" >' . $this->view->translate('shortcut_name') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('shortcut_qty') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('shortcut_price') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('shortcut_total') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['bre_sapv']);
						foreach($row['bre_sapv'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['bre_sapv'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['admissiondate'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['discharge_date'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $this->view->translate('report_shortcut_name_' . $sec_row['shortcut_name']) . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['qty'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['price'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['shortcut_total'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top" width="20%">' . $this->view->translate('report_shortcut_name_' . $sec_row['shortcut_name']) . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['qty'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['price'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['shortcut_total'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html.="<tr>";
					$html.='<td colspan="7" rowspan="5"><b>' . $this->view->translate('Overall amounts  for report period') . '</b></td>';
					$html .= '<th width="1%" ><b>' . $this->view->translate('shortcut_name') . '</b></th>';
					$html .= '<th width="1%" ><b>' . $this->view->translate('shortcut_qty') . '</b></th>';
					$html .= '<th width="1%" ><b>' . $this->view->translate('shortcut_price') . '</b></th>';
					$html .= '<th width="1%" ><b>' . $this->view->translate('shortcut_total') . '</b></th>';
					$html .= '</tr>';
					foreach($data['extra']['overall'] as $sh => $sh_details)
					{
						$html.="<tr>";
						$html.='<td>' . $this->view->translate('report_shortcut_name_' . $sh) . '</td>';
						$html .= '<td valign="top" width="20%">' . $sh_details['amount'] . '</td>';
						$html .= '<td valign="top" width="20%">' . $sh_details['price'] . '</td>';
						$html .= '<td valign="top" width="20%">' . round($sh_details['summe'], 2) . '</td>';
						$html.="</tr>";
					}
					$html.="</table>";
					break;

				case '116':
					$data['location_count'] = max($data['location_count']);

					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('epid') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('sapv_activity') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('sapv_by') . '</th>';
					if($data['location_count'] != '0')
					{
						for($cols = '1'; $cols <= $data['location_count']; $cols++)
						{
							$html .= '<th width="1%">' . $this->view->translate('report_location_start') . $cols . '</th>';
							$html .= '<th width="1%">' . $this->view->translate('report_location_name') . $cols . '</th>';
						}
					}
					else
					{
						$html .= '<th width="1%">' . $this->view->translate('report_location_start') . '1</th>';
						$html .= '<th width="1%">' . $this->view->translate('report_location_name') . '1</th>';
					}
					$html .= '<th width="1%">' . $this->view->translate('dischargedate') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('discharge_methode') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';
						$html .= '<td valign="top">' . $row['epid'] . '</td>';
						$html .= '<td valign="top">' . $row['lastname'] . '</td>';
						$html .= '<td valign="top">' . $row['firstname'] . '</td>';
						$html .= '<td valign="top">' . $row['sapv_activity'] . '</td>';
						$html .= '<td valign="top">' . $row['sapv_by'] . '</td>';

						if($data['location_count'] != '0')
						{
							for($col_data = '1'; $col_data <= $data['location_count']; $col_data++)
							{
								if(strlen($row['locations']['location_start'][($col_data - 1)]) > '0')
								{
									$html .= '<td valign="top">' . $row['locations']['location_start'][($col_data - 1)] . '</td>';
									$html .= '<td valign="top">' . $row['locations']['location_name'][($col_data - 1)] . '</td>';
								}
								else
								{
									$html .= '<td valign="top">&nbsp;</td>';
									$html .= '<td valign="top">&nbsp;</td>';
								}
							}
						}
						else
						{
							$html .= '<td valign="top">&nbsp;</td>';
							$html .= '<td valign="top">&nbsp;</td>';
						}
						$html .= '<td valign="top">' . $row['dischargedate'] . '</td>';
						$html .= '<td valign="top">' . $row['discharge_methode'] . '</td>';
						$html .='</tr>';
						$rowcount++;
					}

					$html.="</table>";
					break;
				case '144':
				case '127':

					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2" >' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('birthd') . '</th>';
					/*$html .= '<th width="1%" rowspan="2">' . $this->view->translate('besuch_war') . '</th>';*/
					$html .= '<th width="1%"  colspan="7">' . $this->view->translate('ptm_users_working_hours') . '</th>';
					$html .= '</tr>';


					$html .= '<tr>';
					$html .= '<th width="1%" >' . $this->view->translate('user_action') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('date_of_action') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visit_time_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('xt_time_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('driving_time_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('documentation_time_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('coordination_time_count') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['patient_actions']);
						foreach($row['patient_actions'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['patient_actions'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								/*$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['besuch_war'] . '</td>';*/

								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['date_of_action'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['xt_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['driving_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['documentation_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_time_count'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['date_of_action'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['xt_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['driving_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['documentation_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_time_count'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}
					$html.="</table>";
					break;

				case '129':
					$max_dynamic_cols = $data['extra']['max_dynamic_col'];

					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('epid') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('birthd') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('admissiondate') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('dischargedate') . '</th>';
					for($cols = '1'; $cols <= $max_dynamic_cols; $cols++)
					{
						$html .= '<th width="1%">' . $this->view->translate('nurse_service') . ' ' . $cols . '</th>';
					}
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';
						$html .= '<td valign="top">' . $row['epid'] . '</td>';
						$html .= '<td valign="top">' . $row['lastname'] . '</td>';
						$html .= '<td valign="top">' . $row['firstname'] . '</td>';
						$html .= '<td valign="top">' . $row['birthd'] . '</td>';
						$html .= '<td valign="top">' . $row['admissiondate'] . '</td>';
						$html .= '<td valign="top">' . $row['dischargedate'] . '</td>';

						for($col_data = '1'; $col_data <= $max_dynamic_cols; $col_data++)
						{
							if(strlen(trim($row['nurse_service_' . $col_data])) > '0')
							{
								$html .= '<td valign="top">' . $row['nurse_service_' . $col_data] . '</td>';
							}
							else
							{
								$html .= '<td valign="top"> - </td>';
							}
						}

						$html .='</tr>';
						$rowcount++;
					}

					$html.="</table>";
					break;

				case '137':
					$report_language = $this->view->translate($namereport[0]['report'].'_lang');
					
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $report_language[$namereport[0]['report']] . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2" >' . $report_language['no'] . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $report_language['Epid'] . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $report_language['lastname'] . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $report_language['firstname'] . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $report_language['birthd'] . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $report_language['voluntaryworkers'] . '</th>';
					$html .= '<th width="1%"  colspan="10">' . $report_language['users_working_hours_kntf'] . '</th>';
					$html .= '</tr>';


					$html .= '<tr>';
					$html .= '<th width="1%" >' . $report_language['user_action'] . '</th>';
					$html .= '<th width="1%" >' . $report_language['user_action_type'] . '</th>';
					$html .= '<th width="1%" >' . $report_language['date_of_action'] . '</th>';
					$html .= '<th width="1%" >' . $report_language['time_of_action'] . '</th>';
					$html .= '<th width="1%" >' . $report_language['visit_time_duration'] . '</th>';
					$html .= '<th width="1%" >' . $report_language['xt_time_count'] . '</th>';
					$html .= '<th width="1%" >' . $report_language['driving_time_count'] . '</th>';
					$html .= '<th width="1%" >' . $report_language['coordination_time_count'] . '</th>';
					$html .= '<th width="1%" >' . $report_language['block_visitplan_cntf'] . '</th>';
					$html .= '<th width="1%" >' . $report_language['documentation_time_count'] . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['patient_actions']);
						foreach($row['patient_actions'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['patient_actions'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['voluntaryworkers'] . '</td>';

								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_action_type'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['date_of_action'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['time_of_action'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_time_duration'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['xt_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['driving_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_quality'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_documentation'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_action_type'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['date_of_action'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['time_of_action'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_time_duration'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['xt_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['driving_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_quality'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_documentation'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}
					$html.="</table>";
					break;
					
					case '182':
						
						$report_language = $this->view->translate($namereport[0]['report'].'_lang');
						
						$html = "";
						$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $report_language[$namereport[0]['report']] . '</h3>';
						$html .= $table;
						$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
						$html .= '<th width="1%" rowspan="2" >' . $report_language['no'] . '</th>';
						$html .= '<th width="1%" rowspan="2">' . $report_language['epid'] . '</th>';
						$html .= '<th width="1%" rowspan="2">' . $report_language['surname'] . '</th>';
						$html .= '<th width="1%" rowspan="2">' . $report_language['firstname'] . '</th>';
						$html .= '<th width="1%" rowspan="2">' . $report_language['birthd'] . '</th>';
						$html .= '<th width="1%"  colspan="12">' . $report_language['users_working_hours_kntf'] . '</th>';
						$html .= '</tr>';
					
					
						$html .= '<tr>';
						$html .= '<th width="1%" >' . $report_language['user_action'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['user_action_type'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['date_of_action'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['time_of_action'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['visit_time_duration'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['xt_time_count'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['driving_time_count'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['coordination_time_count'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['coordination_ve_time_count'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['coordination_vo_time_count'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['block_visitplan_cntf'] . '</th>';
						$html .= '<th width="1%" >' . $report_language['documentation_time_count'] . '</th>';
						$html .= '</tr>';
					
						$rowcount = 1;
						foreach($data['data'] as $key => $row)
						{
							$rowspan = sizeof($row['patient_actions']);
							foreach($row['patient_actions'] as $sec_key => $sec_row)
							{
								if($sec_key == min(array_keys($row['patient_actions'])))
								{
									$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
					
									$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['user_action_type'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['date_of_action'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['time_of_action'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['visit_time_duration'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['xt_time_count'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['driving_time_count'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['coordination_time_count'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['coordination_ve_time_count'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['coordination_vo_time_count'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['visit_quality'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['visit_documentation'] . '</td>';
									$html .='</tr>';
								}
								else
								{
									$html .='<tr>';
									$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['user_action_type'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['date_of_action'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['time_of_action'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['visit_time_duration'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['xt_time_count'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['driving_time_count'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['coordination_time_count'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['coordination_ve_time_count'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['coordination_vo_time_count'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['visit_quality'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['visit_documentation'] . '</td>';
									$html .='</tr>';
								}
							}
							$rowcount++;
						}
						$html.="</table>";
						break;

				case '146':

					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2" >' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('birthd') . '</th>';
					$html .= '<th width="1%"  colspan="7">' . $this->view->translate('ptm_users_working_nordrhein') . '</th>';
					$html .= '</tr>';


					$html .= '<tr>';
					$html .= '<th width="1%" >' . $this->view->translate('user_action') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('date_of_action') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('visit_time_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('xt_time_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('driving_time_count') . '</th>';
					//$html .= '<th width="1%" >' . $this->view->translate('documentation_time_count') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('coordination_time_count') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['patient_actions']);
						foreach($row['patient_actions'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['patient_actions'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';

								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['date_of_action'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['xt_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['driving_time_count'] . '</td>';
								//$html .= '<td valign="top" width="20%">' . $sec_row['documentation_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_time_count'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['date_of_action'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['visit_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['xt_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['driving_time_count'] . '</td>';
								//$html .= '<td valign="top" width="20%">' . $sec_row['documentation_time_count'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['coordination_time_count'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}
					$html.="</table>";
					break;

				case '147':

					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2" >' . $this->view->translate('no') . '</th>';

					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('firstname') . '</th>';

					$html .= '</tr>';


					$html .= '<tr>';

					$html .= '<th width="1%" >' . $this->view->translate('visit_date') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('time_of_action') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('quality') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['patient_actions']);
						foreach($row['patient_actions'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['patient_actions'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';

								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';

								$html .= '<td valign="top" width="20%">' . $sec_row['visit_date'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['time_of_action'] . '</td>';

								$html .= '<td valign="top" width="20%">' . $sec_row['quality'] . '</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';


								$html .= '<td valign="top" width="20%">' . $sec_row['visit_date'] . '</td>';
								$html .= '<td valign="top" width="20%">' . $sec_row['time_of_action'] . '</td>';

								$html .= '<td valign="top" width="20%">' . $sec_row['quality'] . '</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}
					$html.="</table>";
					break;


				case '139':
					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('Nachname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('Vorname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('Geb. Datum') . '</th>';
					$html .= '<th width="1%" colspan="4">' . $this->view->translate('Erstverordnungen / Folgeverordnungen') . '</th>';
					$html .= '</tr><tr>';
					$html .= '<th width="1%">Erstverordnung</th>';
					$html .= '<th width="1%">Folgeverordnung</th>';
					$html .= '<th width="1%">Status</th>';
					$html .= '<th width="1%">Datum</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$rowspan = sizeof($row['sapv']);
						foreach($row['sapv'] as $sec_key => $sec_row)
						{
							if($sec_key == min(array_keys($row['sapv'])))
							{
								$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
								$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
								$html .= '<td valign="top">' . $sec_row['first'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['additional'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['verordnet'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['sapv_date'] . '&nbsp;</td>';
								$html .='</tr>';
							}
							else
							{
								$html .='<tr>';
								$html .= '<td valign="top">' . $sec_row['first'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['additional'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['verordnet'] . '&nbsp;</td>';
								$html .= '<td valign="top">' . $sec_row['sapv_date'] . '&nbsp;</td>';
								$html .='</tr>';
							}
						}
						$rowcount++;
					}

					$html.="</table>";
					break;
					
				case '140':
					$data['location_count'] = max($data['location_count']);

					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%">' . $this->view->translate('no') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('epid') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('sapv_activity') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('sapv_by') . '</th>';
					if($data['location_count'] != '0')
					{
						for($cols = '1'; $cols <= $data['location_count']; $cols++)
						{
							$html .= '<th width="1%">' . $this->view->translate('report_location_start') . $cols . '</th>';
							$html .= '<th width="1%">' . $this->view->translate('report_location_name') . $cols . '</th>';
						}
					}
					else
					{
						$html .= '<th width="1%">' . $this->view->translate('report_location_start') . '1</th>';
						$html .= '<th width="1%">' . $this->view->translate('report_location_name') . '1</th>';
					}
					$html .= '<th width="1%">' . $this->view->translate('dischargedate') . '</th>';
					$html .= '<th width="1%">' . $this->view->translate('discharge_methode') . '</th>';
					$html .= '</tr>';

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';
						$html .= '<td valign="top">' . $row['epid'] . '</td>';
						$html .= '<td valign="top">' . $row['lastname'] . '</td>';
						$html .= '<td valign="top">' . $row['firstname'] . '</td>';
						$html .= '<td valign="top">' . $row['sapv_activity'] . '</td>';
						$html .= '<td valign="top">' . $row['sapv_by'] . '</td>';

						if($data['location_count'] != '0')
						{
							for($col_data = '1'; $col_data <= $data['location_count']; $col_data++)
							{
								if(strlen($row['locations']['location_start'][($col_data - 1)]) > '0')
								{
									$html .= '<td valign="top">' . $row['locations']['location_start'][($col_data - 1)] . '</td>';
									$html .= '<td valign="top">' . $row['locations']['location_name'][($col_data - 1)] . '</td>';
								}
								else
								{
									$html .= '<td valign="top">&nbsp;</td>';
									$html .= '<td valign="top">&nbsp;</td>';
								}
							}
						}
						else
						{
							$html .= '<td valign="top">&nbsp;</td>';
							$html .= '<td valign="top">&nbsp;</td>';
						}
						$html .= '<td valign="top">' . $row['dischargedate'] . '</td>';
						$html .= '<td valign="top">' . $row['discharge_methode'] . '</td>';
						$html .='</tr>';
						$rowcount++;
					}

					$html.="</table>";
					break;
					
					
					
				case '149':

					$motnhs = array(
							'01' => 'Januar',
							'02' => 'Februar',
							'03' => 'März',
							'04' => 'April',
							'05' => 'Mai',
							'06' => 'Juni',
							'07' => 'Juli',
							'08' => 'August',
							'09' => 'September',
							'10' => 'Oktober',
							'11' => 'November',
							'12' => 'Dezember'
					);
					
					$rep_date = $motnhs[date('m', strtotime($data['header_data']['start'][0]))].' '.date('Y', strtotime($data['header_data']['start'][0]));
 					$html = "";
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;"><u><b>Sutundenlohnberechnung : '.$rep_date.'</b></u></h3>';
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%"></th>';
					$html .= '<th width="1%"></th>';
					$html .= '<th width="1%">' . $this->view->translate('Anzahl') . '</th>';
					$html .= '</tr>';

					$html .= '<tr>';
						$html .= '<td>'.$this->view->translate('sh_total_sum_b3').'</td>';
						$html .= '<td>'.$data['data']['sh_total_sum_b3'].'</td>';
						$html .= '<td></td>';
					$html .= '</tr>';
					$html .= '<tr>';
						$html .= '<td>'.$this->view->translate('sh_total_koordination_b4').'</td>';
						$html .= '<td>'.$data['data']['sh_total_koordination_b4'].'</td>';
						$html .= '<td>'.$data['data']['sh_total_koordination_count'].'</td>';
					$html .= '</tr>';
					$html .= '<tr>';
						$html .= '<td>'.$this->view->translate('sh_total_team_meeting_b5').'</td>';
						$html .= '<td>'.$data['data']['sh_total_team_meeting_b5'].'</td>';
						$html .= '<td>'.$data['data']['sh_total_team_meeting_count'].'</td>';
					$html .= '</tr>';
					$html .= '<tr>';
						$html .= '<td>'.$this->view->translate('sh_total_doctor_visits_b6').'</td>';
						$html .= '<td>'.$data['data']['sh_total_doctor_visits_b6'].'</td>';
						$html .= '<td>'.$data['data']['sh_total_doctor_visits_count'].'</td>';
					$html .= '</tr>';
					$html .= '<tr>';
						$html .= '<td> </td>';
						$html .= '<td><b>'.$data['data']['sh_total_result_b7'].'</b></td>';
						$html .= '<td></td>';
					$html .= '</tr>';
					$html .= '<tr>';
						$html .= '<td>'.$this->view->translate('sh_result_dividedby_nrodays').'</td>';
						$html .= '<td style="color: #ff0000;">'.$data['data']['sh_result_dividedby_nrodays'].'</td>';
						$html .= '<td></td>';
					$html .= '</tr>';
					$html .= '<tr>';
						$html .= '<td>'.$this->view->translate('sh_days_result_divided_by_hours').'</td>';
						$html .= '<td>'.$data['data']['sh_days_result_divided_by_hours'].'</td>';
						$html .= '<td></td>';
					$html .= '</tr>';
					$html .= '<tr>';
						$html .= '<td>'.$this->view->translate('sh_days_result_hours_percentage').'</td>';
						$html .= '<td>'.$data['data']['sh_days_result_hours_percentage'].'</td>';
						$html .= '<td></td>';
					$html .= '</tr>';
 
					$html.="</table>";
					break;
					
				case '154':
					$html = "";
					$html = $html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					$html .= '<th width="1%" rowspan="2" >' . $this->view->translate('no') . '</th>';
					
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('lastname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('firstname') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('birthd') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('healthinsurance_name') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('healthinsurance_nr') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('contactperson_1') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('contactperson1_comment') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('contactperson_2') . '</th>';
					$html .= '<th width="1%" rowspan="2">' . $this->view->translate('contactperson2_comment') . '</th>';
					$html .= '</tr>';
										
					$html .= '<tr>';
					
					$html .= '<th width="1%" >' . $this->view->translate('sapv_number') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('verordnung_from') . '</th>';
					$html .= '<th width="1%" >' . $this->view->translate('verordnung_to') . '</th>';
					$html .= '</tr>';
					
					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{ 
						$rowspan = sizeof($row['sapv']);
						
						if(count($row['sapv']) != 0)
						
						{
							foreach($row['sapv'] as $sec_key => $sec_row)
							{
								if($sec_key == min(array_keys($row['sapv'])))
								{
									$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
							
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['healthinsurance_name'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['healthinsurance_nr'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['contactperson_1'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['contactperson1_comment'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['contactperson_2'] . '</td>';
									$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['contactperson2_comment'] . '</td>';
								
									$html .= '<td valign="top" width="20%">' . $sec_row['sapv_number'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['verordnung_from'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['verordnung_to'] . '</td>';
									$html .='</tr>';
								}
							else
								{
									$html .='<tr>';
							
									$html .= '<td valign="top" width="20%">' . $sec_row['sapv_number'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['verordnung_from'] . '</td>';
									$html .= '<td valign="top" width="20%">' . $sec_row['verordnung_to'] . '</td>';
									$html .='</tr>';
								}
							
							}
							$rowcount++;
						}
						else
						{
							$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
								
							$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
							$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
							$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
							$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['healthinsurance_name'] . '</td>';
							$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['healthinsurance_nr'] . '</td>';
							$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['contactperson_1'] . '</td>';
							$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['contactperson1_comment'] . '</td>';
							$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['contactperson_2'] . '</td>';
							$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['contactperson2_comment'] . '</td>';
							
							$html .= '<td valign="top">&nbsp; - &nbsp;</td>';
							$html .= '<td valign="top">&nbsp; - &nbsp;</td>';
							$html .= '<td valign="top">&nbsp; - &nbsp;</td>';
							$html .='</tr>';
							$rowcount++;
						}
					}
					$html.="</table>";
					break;
					
					
					
					
					case '156':
					
					$html = "";
					$html = $html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%">';
					
					$html .= '<tr>';
					$html .= '<th>' . $this->view->translate('no') . '</th>';
					$html .= '<th>' . $this->view->translate('lastname') . '</th>';
					$html .= '<th>' . $this->view->translate('firstname') . '</th>';
					$html .= '<th>' . $this->view->translate('birthd') . '</th>';
					$html .= '<th>' . $this->view->translate('pat_addresse') . '</th>';
					$html .= '<th>' . $this->view->translate('phone') . '</th>';
					$html .= '<th>' . $this->view->translate('contactperson') . '</th>';
					$html .= '<th>' . $this->view->translate('familydoctor') . '</th>';
					$html .= '<th>' . $this->view->translate('VO') . '</th>';
					$html .= '<th >' . $this->view->translate('diagnosis') . '</th>';
					$html .= '<th width="30%" colspan="4">' . $this->view->translate('memo') . '</th>';
					$html .= '</tr>';
					
					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
					    $html .='<tr class="row"><td valign="top" >' . $rowcount . '</td>';
					    $html .= '<td valign="top" >' . $row['lastname'] . '</td>';
					    $html .= '<td valign="top" >' . $row['firstname'] . '</td>';
					    $html .= '<td valign="top" >' . $row['birthd'] . '</td>';
					    $html .= '<td valign="top" >' . $row['pat_addresse'] . '</td>';
					    $html .= '<td valign="top" >' . $row['phone'] . '</td>';
					    $html .= '<td valign="top" >' . $row['contactperson'] . '</td>';
					    $html .= '<td valign="top" >' . $row['familydoctor'] . '</td>';
					    $html .= '<td valign="top" >' . $row['vo'] . '</td>';
					    $html .= '<td valign="top" >' . $row['diagnosis'] . '</td>';
					    $html .= '<td valign="top" colspan="4"><div style="display: block; width: 400px">' . $row['memo'] . '</div></td>';
					    $html .='</tr>';
					    $rowcount++;
					}
					$html.="</table>";
					break;
					
					
					case '157':
					case '158':
					    $html = "";
					    $html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					    $html .= $table;
					    $html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					    $html .= '<th width="1%">' . $this->view->translate('heimnetz_familydoc') . '</th>';
					    $html .= '<th width="1%">' . $this->view->translate('heimnetz_location') . '</th>';
					    $html .= '<th width="1%">' . $this->view->translate('Anzahl') . '</th>';
					    $html .= '</tr>';
					
					    $rowcount = 1;
					    
					    foreach($data['data'] as $key => $row)
					    {
					        $rowspan = sizeof($row['locations']);
					        foreach($row['locations'] as $sec_key => $sec_row)
					        {
					            if($sec_key == min(array_keys($row['locations'])))
					            {
					                $html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['heimnetz_familydoc'] . '</td>';
					                $html .= '<td valign="top">' . $sec_row['name'] . '&nbsp;</td>';
					                $html .= '<td valign="top">' . $sec_row['amount'] . '&nbsp;</td>';
					                $html .='</tr>';
					            }
					            else
					            {
					                $html .='<tr>';
					                $html .= '<td valign="top">' . $sec_row['name'] . '&nbsp;</td>';
					                $html .= '<td valign="top">' . $sec_row['amount'] . '&nbsp;</td>';
					                $html .='</tr>';
					            }
					        }
					        $rowcount++;
					    }
					    $html .= '<tr class="row">
								<td valign="top" colspan="2">' . $this->view->translate('sum') . '</td>
								<td valign="top">' . $data['extra']['sum'] . '</td>
								</tr>';
					    
					    $html.="</table>";
					    break;
					
					//Heimnetz - Pflegeheim
					case '159':
					    $html = "";
					    $html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					    $html .= $table;
						
						
						$html_active = '<th width="1%">' . $this->view->translate('no') . '</th>';
						$html_discharge = '<th width="1%">' . $this->view->translate('no') . '</th>';
						
						foreach($columns as $column)
						{
						    if($column['column_name'] != 'patient_last_name'){
    							if($column['column_name'] != 'dischargedate' && $column['column_name'] != 'discharge_methode' )
    							{
    								$html_active .= '<th>' . $this->view->translate($column['column_name']) . '</th>';
    							}
    							
    							$html_discharge .= '<th>' . $this->view->translate($column['column_name']) . '</th>';
						    }
							
							
						}
						$html_active .= '</tr>';
						$html_discharge .= '</tr>';
						
						$total_table_pages = count($data['data']);
						$curent_table_page = "1";
						
					    foreach($data['data'] as $location_id => $row)
					    {
							$rowcount = 1;
							if(!empty($row['active']))
							{
								
								$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="0" width="100%">';
									$html .= '<tr>';
										$html .= '<td>';
											$html .= "<h3>".$this->view->translate('heimnetz_homegroup_nursing_active')."</h3>";
										$html .= '</td>';
									$html .= '</tr>';
									
									$html .= '<tr>';
										$html .= '<td>';
											$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="100%">';
											$html .= $html_active;
											foreach($row['active'] as $k_ipid => $row_data)
											{
												$html .= '<tr>';
												$html .= '<td valign="top">'.$rowcount.'</td>';
												$html .= '<td valign="top">'.$row_data['location_name'].'</td>';
												$html .= '<td valign="top">'.$row_data['patient_name'].'</td>';
												$html .= '<td valign="top">'.$row_data['assigned_doctors'].'</td>';
												$html .= '<td valign="top">'.$row_data['admission_date'].'</td>';
												$html .='</tr>';
												$rowcount++;
											}
											$html.="</table>";

										$html .= '</td>';
									$html .= '</tr>';

								$html.="</table>";
							}
							
							if(!empty($row['discharged']))
							{
								$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="0" width="100%">';
									$html .= '<tr>';
										$html .= '<td>';
											$html .= "<h3>".$this->view->translate('heimnetz_homegroup_nursing_discharged')."</h3>";
										$html .= '</td>';
									$html .= '</tr>';
									
									$html .= '<tr>';
										$html .= '<td>';
										
											$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="100%">';
											$html .= $html_discharge;
											foreach($row['discharged'] as $k_ipid => $row_data)
											{
												$html .= '<tr>';
												$html .= '<td valign="top">'.$rowcount.'</td>';
												$html .= '<td valign="top">'.$row_data['location_name'].'</td>';
												$html .= '<td valign="top">'.$row_data['patient_name'].'</td>';
												$html .= '<td valign="top">'.$row_data['assigned_doctors'].'</td>';
												$html .= '<td valign="top">'.$row_data['admission_date'].'</td>';
												$html .= '<td valign="top">'.$row_data['dischargedate'].'</td>';
												$html .= '<td valign="top">'.$row_data['discharge_methode'].'</td>';
												$html .='</tr>';
												$rowcount++;
											}

											$html.="</table>";
									
										$html .= '<td>';	
									$html .= '<tr>';
								$html.="</table>";
							}
							
							if($total_table_pages != $curent_table_page)
							{
								$html .= '<p class="break">&nbsp;</p>';
							}
							
							$curent_table_page++;
					    }
					    break;

					    case '164':
					    
					        $html = "";
					        $html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					        $html .= $table;
					        $html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					        $html .= '<th width="1%" rowspan="2">' . $this->view->translate('no') . '</th>';
					        $html .= '<th width="1%"  rowspan="2" >' . $this->view->translate('lastname') . '</th>';
					        $html .= '<th width="1%"  rowspan="2">' . $this->view->translate('firstname') . '</th>';
					        $html .= '<th width="1%" colspan="3">' . $this->view->translate('activities_and_training') . '</th>';
					        $html .= '</tr>';
					    
					        $html .= '<tr>';
					        $html .= '<th width="1%" >' . $this->view->translate('date') . '</th>';
					        $html .= '<th width="1%" >' . $this->view->translate('vw_activity_duration') . '</th>';
					        $html .= '<th width="1%" >' . $this->view->translate('name') . '</th>';
					        $html .= '</tr>';
					    
					        $rowcount = 1;
					        foreach($data['data'] as $key => $row)
					        {
					            $rowspan = sizeof($row['activities']);
					            foreach($row['activities'] as $sec_key => $sec_row)
					            {
					                if($sec_key == min(array_keys($row['activities'])))
					                {
					                    $html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
					                    $html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
					                    $html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
					                    $html .= '<td valign="top" width="5%">' . $sec_row['date'] . '</td>';
					                    $html .= '<td valign="top" width="5%">' . $sec_row['duration'] . '</td>';
					                    $html .= '<td valign="top" width="35%">' . $sec_row['name'] . '</td>';
					                    $html .='</tr>';
					                }
					                else
					                {
					                    $html .='<tr>';
					                    $html .= '<td valign="top" width="5%">' . $sec_row['date'] . '</td>';
					                    $html .= '<td valign="top" width="5%">' . $sec_row['duration'] . '</td>';
					                    $html .= '<td valign="top" width="35%">' . $sec_row['name'] . '</td>';
					                    $html .='</tr>';
					                }
					            }
					            $rowcount++;
					        }
					    
					        $html.="</table>";
					        break;
					    


					        case '166':
					        
					            $html = "";
					            $html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					            $html .= $table;
					            $html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					            $html .= '<th width="1%" rowspan="2" >' . $this->view->translate('no') . '</th>';
					            $html .= '<th width="1%" rowspan="2"> Pat. Nr</th>';
					            $html .= '<th width="1%" rowspan="2">' . $this->view->translate('lastname') . '</th>';
					            $html .= '<th width="1%" rowspan="2">' . $this->view->translate('firstname') . '</th>';
					            $html .= '<th width="1%" rowspan="2">' . $this->view->translate('birthd') . '</th>';
					            $html .= '<th width="1%"  colspan="5">' . $this->view->translate('users_working_hours_kntf') . '</th>';
					            $html .= '<th width="1%" rowspan="2">' . $this->view->translate('rp_pat_dead') . '</th>';
					            $html .= '<th width="1%" rowspan="2">' . $this->view->translate('rpassessment') . '</th>';
					            $html .= '</tr>';
					        
					        
					            $html .= '<tr>';
					            $html .= '<th width="1%" >' . $this->view->translate('user_action') . '</th>';
					            $html .= '<th width="1%" >' . $this->view->translate('user_action_type') . '</th>';
					            $html .= '<th width="1%" >' . $this->view->translate('date_of_action') . '</th>';
					            $html .= '<th width="1%" >' . $this->view->translate('time_of_action') . '</th>';
					            $html .= '<th width="1%" >' . $this->view->translate('visit_time_duration') . '</th>';
					           // $html .= '<th width="1%" >' . $this->view->translate('xt_time_count') . '</th>';
					           // $html .= '<th width="1%" >' . $this->view->translate('driving_time_count') . '</th>';
					           //  $html .= '<th width="1%" >' . $this->view->translate('coordination_time_count') . '</th>';
					            $html .= '</tr>';
					        
					            $rowcount = 1;
					            foreach($data['data'] as $key => $row)
					            {
					                $rowspan = sizeof($row['patient_actions']);
					                foreach($row['patient_actions'] as $sec_key => $sec_row)
					                {
					                    if($sec_key == min(array_keys($row['patient_actions'])))
					                    {
					                        $html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
					                        $html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['epid'] . '</td>';
					                        $html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['lastname'] . '</td>';
					                        $html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['firstname'] . '</td>';
					                        $html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['birthd'] . '</td>';
					        
					                        $html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
					                        $html .= '<td valign="top" width="20%">' . $sec_row['user_action_type'] . '</td>';
					                        $html .= '<td valign="top" width="20%">' . $sec_row['date_of_action'] . '</td>';
					                        $html .= '<td valign="top" width="20%">' . $sec_row['time_of_action'] . '</td>';
					                        $html .= '<td valign="top" width="20%">' . $sec_row['visit_time_duration'] . '</td>';
					                       // $html .= '<td valign="top" width="20%">' . $sec_row['xt_time_count'] . '</td>';
					                       // $html .= '<td valign="top" width="20%">' . $sec_row['driving_time_count'] . '</td>';
					                       // $html .= '<td valign="top" width="20%">' . $sec_row['coordination_time_count'] . '</td>';
					                        
					                        $html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['rp_pat_dead'] . '</td>';
					                        $html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['rpassessment'] . '</td>';
					                        
					                        $html .='</tr>';
					                    }
					                    else
					                    {
					                        $html .='<tr>';
					                        $html .= '<td valign="top" width="20%">' . $sec_row['user_name'] . '</td>';
					                        $html .= '<td valign="top" width="20%">' . $sec_row['user_action_type'] . '</td>';
					                        $html .= '<td valign="top" width="20%">' . $sec_row['date_of_action'] . '</td>';
					                        $html .= '<td valign="top" width="20%">' . $sec_row['time_of_action'] . '</td>';
					                        $html .= '<td valign="top" width="20%">' . $sec_row['visit_time_duration'] . '</td>';
					                       // $html .= '<td valign="top" width="20%">' . $sec_row['xt_time_count'] . '</td>';
					                       // $html .= '<td valign="top" width="20%">' . $sec_row['driving_time_count'] . '</td>';
					                       // $html .= '<td valign="top" width="20%">' . $sec_row['coordination_time_count'] . '</td>';
					                        $html .='</tr>';
					                    }
					                }
					                $rowcount++;
					            }
					            $html.="</table>";
					            break;

					            

					            case '167':
					                $data['location_count'] = max($data['location_count']);
					            
					                $html = "";
					                $html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					                $html .= $table;
					                $html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					                $html .= '<th width="1%">' . $this->view->translate('no') . '</th>';
					                $html .= '<th width="1%">' . $this->view->translate('epid') . '</th>';
					                $html .= '<th width="1%">' . $this->view->translate('lastname') . '</th>';
					                $html .= '<th width="1%">' . $this->view->translate('firstname') . '</th>';
					                $html .= '<th width="1%">' . $this->view->translate('sapv_activity') . '</th>';
					                $html .= '<th width="1%">' . $this->view->translate('sapv_by') . '</th>';
					                if($data['location_count'] != '0')
					                {
					                    for($cols = '1'; $cols <= $data['location_count']; $cols++)
					                    {
					                        $html .= '<th width="1%">' . $this->view->translate('report_location_start') . $cols . '</th>';
					                        $html .= '<th width="1%">' . $this->view->translate('report_location_name') . $cols . '</th>';
					                }
					            }
					            else
					            {
					                $html .= '<th width="1%">' . $this->view->translate('report_location_start') . '1</th>';
					                $html .= '<th width="1%">' . $this->view->translate('report_location_name') . '1</th>';
					            }
					            $html .= '<th width="1%">' . $this->view->translate('dischargedate') . '</th>';
					            $html .= '<th width="1%">' . $this->view->translate('discharge_methode') . '</th>';
					            $html .= '</tr>';
					            
					            $rowcount = 1;
					            foreach($data['data'] as $key => $row)
					            {
					                $html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';
					                $html .= '<td valign="top">' . $row['epid'] . '</td>';
					                $html .= '<td valign="top">' . $row['lastname'] . '</td>';
					                $html .= '<td valign="top">' . $row['firstname'] . '</td>';
					                $html .= '<td valign="top">' . $row['sapv_activity'] . '</td>';
					                $html .= '<td valign="top">' . $row['sapv_by'] . '</td>';
					            
					                if($data['location_count'] != '0')
					                {
					                    for($col_data = '1'; $col_data <= $data['location_count']; $col_data++)
					                    {
					                        if(strlen($row['locations']['location_start'][($col_data - 1)]) > '0')
					                        {
					                            $html .= '<td valign="top">' . $row['locations']['location_start'][($col_data - 1)] . '</td>';
					                            $html .= '<td valign="top">' . $row['locations']['location_name'][($col_data - 1)] . '</td>';
					                    }
					                        else
					                            {
									$html .= '<td valign="top">&nbsp;</td>';
									$html .= '<td valign="top">&nbsp;</td>';
					            }
					            }
					            }
					            else
					            {
					            $html .= '<td valign="top">&nbsp;</td>';
					            $html .= '<td valign="top">&nbsp;</td>';
					            }
					                $html .= '<td valign="top">' . $row['dischargedate'] . '</td>';
					                    $html .= '<td valign="top">' . $row['discharge_methode'] . '</td>';
					                    $html .='</tr>';
					                    $rowcount++;
					            }
					            
					            $html.="</table>";
					            break;
				
					            case '180':
					            	$report_language = $this->view->translate($namereport[0]['report'].'_lang');
					            	
					            	$html = "";
					            	$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $report_language[$namereport[0]['report']] . '</h3>';
					            	$html .= $table;
					            	$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					            	$html .= '<th width="1%">' . $report_language['no'] . '</th>';
					            	$html .= '<th width="1%">'.$report_language['vw_lastname'].'</th>';
					            	$html .= '<th width="1%">'.$report_language['vw_firstname'].'</th>';
					            	$html .= '<th width="1%">'.$report_language['Epid'].'</th>';
					            	$html .= '<th width="1%">' . $report_language['lastname'] . '</th>';
					            	$html .= '<th width="1%">' . $report_language['firstname'] . '</th>';
					            	$html .= '<th width="1%">'.$report_language['visiting_day'].'</th>';					   					            
					            	$html .= '<th width="1%">'.$report_language['duration'].'</th>';
					            	$html .= '<th width="1%">'.$report_language['visit_reason'].'</th>';
					            	$html .= '<th width="1%">'.$report_language['driving_time_count'].'</th>';
					            	$html .= '</tr>';
					            
					            	$total_visits = 0;
					            	$total_visit_time = 0;
					            	$total_driving_time = 0;
					            	$rowcount = 1;
					            	
					            	foreach($data['data'] as $key => $row)
					            	{					            	
					            		foreach($row['visits'] as $sec_key => $sec_row)
					            		{					            			
					            			if(isset($sec_row['summ']))
					            			{
							            		/*$html .='<tr>';
					            				$html .= '<td valign="top" style="font-weight: bold; background: #ccc;">SUMME Besuche:&nbsp;'.$sec_row['summ']['number_of_visits'].'</td>';
					            				$html .= '<td valign="top" style="background: #ccc;">&nbsp;</td>';
					            				$html .= '<td valign="top" style="background: #ccc;">&nbsp;</td>';
					            				$html .= '<td valign="top" style="background: #ccc;">&nbsp;</td>';
					            				$html .= '<td valign="top" style="background: #ccc;">&nbsp;</td>';
					            				$html .= '<td valign="top" style="background: #ccc;">&nbsp;</td>';
					            				$html .= '<td valign="top" style="background: #ccc;">&nbsp;</td>';
					            				$html .= '<td valign="top"  style="font-weight: bold; background: #ccc;">SUMME:&nbsp;' . $sec_row['summ']['visit_time_sum'] . '&nbsp;</td>';
					            				$html .= '<td valign="top"  style="background: #ccc;">&nbsp;</td>';
					            				$html .= '<td valign="top"  style="font-weight: bold; background: #ccc;">SUMME:&nbsp;' . $sec_row['summ']['driving_time_sum'] . '&nbsp;</td>';
					            				$html .='</tr>';
					            				$rowcount = 1;*/
					            			}
					            			else 
					            			{
					            				$html .='<tr>';
					            				$html .= '<td valign="top">' . $rowcount.'</td>';
					            				$html .= '<td valign="top">' . $row['vw_lastname'] . '&nbsp;</td>';
					            				$html .= '<td valign="top">' . $row['vw_firstname'] . '&nbsp;</td>';
					            				$html .= '<td valign="top">' . $sec_row['epid'] . '&nbsp;</td>';
					            				$html .= '<td valign="top">' . $sec_row['pat_lastname'] . '&nbsp;</td>';
					            				$html .= '<td valign="top">' . $sec_row['pat_firstname'] . '&nbsp;</td>';
					            				$html .= '<td valign="top">' . date('d.m.Y', strtotime($sec_row['visit_date'])) . '&nbsp;</td>';
					            				$html .= '<td valign="top">' . ($sec_row['visit_time_count'] != 0 ? $sec_row['visit_time_count'] : 0) . '&nbsp;</td>';
					            				$html .= '<td valign="top">' . $sec_row['visit_reason'] . '&nbsp;</td>';
					            				$html .= '<td valign="top">' . ($sec_row['driving_time_count'] != 0 ? $sec_row['driving_time_count'] : 0) . '&nbsp;</td>';
					            				$html .='</tr>';
					            				$rowcount++;
					            			}					            			
					            		}
					            		
					            		$html .='<tr>';
					            		$html .= '<td valign="top" style="font-weight: bold; background: #eee;">'.$report_language['sum'].' Besuche:&nbsp;'.$row['summ']['number_of_visits'].'</td>';
					            		$html .= '<td valign="top" style="background: #eee;">&nbsp;</td>';
					            		$html .= '<td valign="top" style="background: #eee;">&nbsp;</td>';
					            		$html .= '<td valign="top" style="background: #eee;">&nbsp;</td>';
					            		$html .= '<td valign="top" style="background: #eee;">&nbsp;</td>';
					            		$html .= '<td valign="top" style="background: #eee;">&nbsp;</td>';
					            		$html .= '<td valign="top" style="background: #eee;">&nbsp;</td>';
					            		$html .= '<td valign="top"  style="font-weight: bold; background: #eee;">'.$report_language['sum'].':&nbsp;' . $row['summ']['visit_time_sum'] . '&nbsp;</td>';
					            		$html .= '<td valign="top"  style="background: #eee;">&nbsp;</td>';
					            		$html .= '<td valign="top"  style="font-weight: bold; background: #eee;">'.$report_language['sum'].':&nbsp;' . $row['summ']['driving_time_sum'] . '&nbsp;</td>';
					            		$html .='</tr>';
					            		
					            		$total_visits += $row['summ']['number_of_visits'];
					            		$total_visit_time += $row['summ']['visit_time_sum'];
					            		$total_driving_time += $row['summ']['driving_time_sum'];
					            		$rowcount = 1;
					            	}
					            	
					            	$html .='<tr>';
					            	$html .= '<td valign="top"  style="font-weight: bold;">'.$report_language['total_visits'].':&nbsp;'.$total_visits.'</td>';
					            	$html .= '<td valign="top">&nbsp;</td>';
					            	$html .= '<td valign="top">&nbsp;</td>';
					            	$html .= '<td valign="top">&nbsp;</td>';
					            	$html .= '<td valign="top">&nbsp;</td>';
					            	$html .= '<td valign="top">&nbsp;</td>';
					            	$html .= '<td valign="top">&nbsp;</td>';
					            	$html .= '<td valign="top"  style="font-weight: bold;">'.$report_language['sum'].':&nbsp;' . $total_visit_time . '&nbsp;</td>';
					            	$html .= '<td valign="top">&nbsp;</td>';
					            	$html .= '<td valign="top"  style="font-weight: bold;">'.$report_language['sum'].':&nbsp;' . $total_driving_time . '&nbsp;</td>';
					            	$html .='</tr>';
					            	$html.="</table>";
					            	break;
				case '184':
					$report_language = $this->view->translate($namereport[0]['report'].'_lang');
					$html = "";
						
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' .$report_language[$namereport[0]['report']] . '</h3>';
					$html .= $table;
					
					$html .='<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					
					$html .= '<th width="1%">' . $report_language['no'] . '</th>';
					
					foreach($columns as $column)
					{
						$html .= '<th width="10%">' . $report_language[$column['column_name']] . '</th>';
					}
					$html .= '</tr>';
					
					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';
						foreach($row as $row_key => $value)
						{
							if($row_key == 'alter')
							{
								$html.= '<td valign="top">' . $value . ' Jahre</td>';
							}
							else
							{
								if($row_key == 'description' && is_array($value))
								{
									$value = implode(', ', $value);
								}
					
								$html.= '<td valign="top">' . $value . '</td>';
							}
						}
						$html .='</tr>';
						$rowcount++;
					}
					$html .='</tr>';
					$html.="</table>";
					break;
					
					case '190':
						$report_language = $this->view->translate($namereport[0]['report'].'_lang');
						$html = "";
					
						$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' .$report_language[$namereport[0]['report']] . '</h3>';
						$html .= $table;
							
						$html .='<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
							
						$html .= '<th width="1%">' . $report_language['no'] . '</th>';
							
						foreach($columns as $column)
						{
							$html .= '<th width="10%">' . $report_language[$column['column_name']] . '</th>';
						}
						$html .= '</tr>';
							
						$rowcount = 1;
						foreach($data['data'] as $key => $row)
						{
							$html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';
							foreach($row as $row_key => $value)
							{
								if($row_key == 'alter')
								{
									$html.= '<td valign="top">' . $value . ' Jahre</td>';
								}
								else
								{
									if($row_key == 'description' && is_array($value))
									{
										$value = implode(', ', $value);
									}
										
									$html.= '<td valign="top">' . $value . '</td>';
								}
							}
							$html .='</tr>';
							$rowcount++;
						}
						$html .='</tr>';
						$html.="</table>";
						break;
						
						case '191':
							$report_language = $this->view->translate($namereport[0]['report'].'_lang');
								
							$html = "";
							$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $report_language[$namereport[0]['report']] . '</h3>';
							$html .= $table;
							$html .= '<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
							$html .= '<th width="1%" rowspan="2">'.$report_language['no'].'</th>';
							$html .= '<th width="1%" rowspan="2">'.$report_language['voluntaryworker'].'</th>';
							$html .= '<th width="1%" colspan="6">' . $report_language['visit'] . '</th>';
							$html .= '</tr><tr>';
							$html .= '<th width="1%">'.$report_language['beginvisit'].'</th>';
							$html .= '<th width="1%">'.$report_language['endvisit'].'</th>';
							$html .= '<th width="1%">'.$report_language['duration'].'</th>';
							$html .= '<th width="1%">'.$report_language['duration_nightshift'].'</th>';
							$html .= '<th width="1%">'.$report_language['distance'].'</th>';
							$html .= '<th width="1%">'.$report_language['visit_reason'].'</th>';
							$html .= '</tr>';
								
							$rowcount = 1;
							foreach($data['data'] as $key => $row)
							{
								$rowspan = sizeof($row['visits']);
								foreach($row['visits'] as $sec_key => $sec_row)
								{
									if($sec_key == min(array_keys($row['visits'])))
									{
										$html .='<tr class="row"><td valign="top" rowspan="' . $rowspan . '">' . $rowcount . '</td>';
										$html .= '<td valign="top" rowspan="' . $rowspan . '">' . $row['voluntaryworker'] . '</td>';
										$html .= '<td valign="top">' . $sec_row['beginvisit'] . '&nbsp;</td>';
										$html .= '<td valign="top">' . $sec_row['endvisit'] . '</td>';
										$html .= '<td valign="top">' . $sec_row['duration'] . '&nbsp;</td>';
										$html .= '<td valign="top">' . $sec_row['duration_nightshift'] . '&nbsp;</td>';
										$html .= '<td valign="top">' . $sec_row['distance'] . '&nbsp;</td>';
										$html .= '<td valign="top">' . $sec_row['visit_reason'] . '&nbsp;</td>';
										$html .='</tr>';
									}
									else
									{
										$html .='<tr>';
										$html .= '<td valign="top">' . $sec_row['beginvisit'] . '&nbsp;</td>';
										$html .= '<td valign="top">' . $sec_row['endvisit'] . '</td>';
										$html .= '<td valign="top">' . $sec_row['duration'] . '&nbsp;</td>';
										$html .= '<td valign="top">' . $sec_row['duration_nightshift'] . '&nbsp;</td>';
										$html .= '<td valign="top">' . $sec_row['distance'] . '&nbsp;</td>';
										$html .= '<td valign="top">' . $sec_row['visit_reason'] . '&nbsp;</td>';
										$html .='</tr>';
									}
								}
								$rowcount++;
							}
							$html.="</table>";
							break;
							
							case '3':
								$report_language = $this->view->translate($namereport[0]['report'].'_lang');
								$html = "";
									
								$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' .$report_language[$namereport[0]['report']] . '</h3>';
								$html .= $table;
									
								$html .='<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
									
								$html .= '<th width="1%">' . $report_language['no'] . '</th>';
									
								foreach($columns as $column)
								{
									$html .= '<th width="10%">' . $report_language[$column['column_name']] . '</th>';
								}
								$html .= '</tr>';
									
								$rowcount = 1;
								foreach($data['data'] as $key => $row)
								{
									$html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';
									foreach($row as $row_key => $value)
									{
										if($row_key == 'alter')
										{
											$html.= '<td valign="top">' . $value . ' Jahre</td>';
										}
										else
										{
											if($row_key == 'description' && is_array($value))
											{
												$value = implode(', ', $value);
											}
							
											$html.= '<td valign="top">' . $value . '</td>';
										}
									}
									$html .='</tr>';
									$rowcount++;
								}
								$html .='</tr>';
								$html.="</table>";
								break;
					
				default:
					$html = "";
					
					$html = '<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Name des Berichts: ' . $this->view->translate($namereport[0]['report']) . '</h3>';
					$html .= $table;
					switch($report)
					{
						case '43':
							$html .='<h3 style=" width:100%; line-height:25px; font-size: 18px; font-family : Arial;">Datum: ' . date("d.m.Y") . '</h3>';

							break;

						default:

							break;
					}
					$html .='<table class="datatable" cellpadding="5" cellspacing="0" border="1" width="80%"><tr>';
					if($report != "181"){
						
					$html .= '<th width="1%">' . $this->view->translate('no') . '</th>';
					foreach($columns as $column)
					{
						$html .= '<th width="10%">' . $this->view->translate($column['column_name']) . '</th>';
					}
					$html .= '</tr>';
					}

					$rowcount = 1;
					foreach($data['data'] as $key => $row)
					{
						$html .='<tr class="row"><td valign="top">' . $rowcount . '</td>';
						foreach($row as $row_key => $value)
						{
							if($row_key == 'alter')
							{
								$html.= '<td valign="top">' . $value . ' Jahre</td>';
							}
							else
							{
								if($row_key == 'description' && is_array($value))
								{
									$value = implode(', ', $value);
								}

								$html.= '<td valign="top">' . $value . '</td>';
							}
						}
						$html .='</tr>';
						$rowcount++;
					}

					switch($report)
					{
						case '1':
							$html .= '<tr class="row">
								<td valign="top">' . $this->view->translate('sum') . '</td>
								<td valign="top">&nbsp;</td>
								<td valign="top">' . $data['extra']['sum'] . '</td>
								</tr>';
							break;

						case '22':
						case '23':
							$html .= '<tr class="row">
								<td valign="top">' . $this->view->translate('sum') . '</td>
								<td valign="top">&nbsp;</td>
								<td valign="top">' . $data['extra']['sum'] . '</td>
								<td valign="top">&nbsp;</td>
								</tr>';
							break;
						case '25':
							$html .= '<tr class="row">
								<td valign="top" colspan="4" align="right">' . $this->view->translate('sum') . '</td>
								<td valign="top">' . $data['extra']['sum'] . '</td>
								</tr>';
							break;

						case '17':
							$html .= '<tr class="row">
								<td valign="top" colspan="5" align="right">' . $this->view->translate('sum') . '</td>
								<td valign="top">' . $data['extra']['sum_min'] . '</td>
								<td valign="top">' . $data['extra']['sum_km'] . '</td>
								<td valign="top">' . $data['extra']['sum_rides'] . '</td>
								</tr>';
							break;

						case '3':
							$html .= '<tr>
									<td colspan="7" align="right">Durchschnitt Alter</td>
									<td>' . $data['extra']['avg_die'] . '</td>
									<td colspan="4" align="right">Durchschnittliche Behandlungsdauer</td>
									<td>' . $data['extra']['avg_treatment'] . '</td>
								</tr>';
							break;
						case '4':
							$html .= '<tr>
									<td colspan="10">Durchschnittliche Behandlungsdauer</td>
									<td>' . $data['extra']['avg_treatment'] . '</td>
								</tr>';
							break;

						case '143':
							$html .= '<tr>
									<td colspan="10">Durchschnittliche Behandlungsdauer Kassenpatient</td>
									<td>' . $data['extra']['avg_treatment'] . '</td>
								</tr>';
							break;
						case '11':
							$html .= '<tr class="row"><td valign="top" colspan="2" align="right">Summe:</td><td valign="top" colspan="2">' . $data['extra']['total'] . '</td></tr>';
							break;

						case '26':
							$html .= "
							<tr><td colspan='5' rowspan='5'   valign='top' align='right'>Summe</td> </tr>
							<tr><td>Koordination -> " . $data['extra']['status2'] . "</td></tr>
							<tr><td>Beratung -> " . $data['extra']['status1'] . "</td></tr>
							<tr><td>Teilversorgung -> " . $data['extra']['status3'] . "</td></tr>
							<tr><td>Vollversorgung -> " . $data['extra']['status4'] . "</td></tr>
							";
							break;
						case '18':
							$html .= '<tr class="row"><td valign="top" colspan="5"></td><td valign="top">' . $data['extra']['totalactivity'] . ' / ' . $data['extra']['averageactivity'] . '</td><td valign="top">' . $data['extra']['totalminutes'] . ' / ' . $data['extra']['averageminutes'] . '</td></tr>';
							break;
						case '45':
							$html .= '<tr>
								<td colspan="2">' . $this->view->translate('Average') . '</td>
								<td>' . $data['extra']['avg_patients_days'] . '</td>
							</tr>';
							break;
						case '67':
							$html .= '<tr>
								<td colspan="3">' . $this->view->translate('Average') . '</td>
								<td>' . $data['extra']['sum_master_be'] . '</td>
								<td>' . $data['extra']['sum_master_tv'] . '</td>
								<td>' . $data['extra']['sum_master_betv'] . '</td>
								<td>' . $data['extra']['sum_master_vv'] . '</td>
							</tr>';
							foreach($data['unique_patients'] as $k_sapv => $v_vollversorgung)
							{
								$html .= '							<tr>
								<td colspan="2">' . $this->view->translate($k_sapv) . '</td>
								<td colspan="4">' . $v_vollversorgung['epids'] . '</td>
								<td>' . $v_vollversorgung['count'] . '</td>
							</tr>';
							}
							break;

						case '75':
							$html .= '
							<tr>
								<td colspan="12">' . $this->view->translate('Visits_by_Ehrenamtliche') . ':  ' . $data['extra']['ehrenamtliche_visits'] . ' ( ' . $data['extra']['ehrenamtliche_percentage'] . ' )</td>
							</tr>
							<tr>
								<td colspan="12">' . $this->view->translate('Visits_by_Koordinator') . ': ' . $data['extra']['koordinator_visits'] . ' ( ' . $data['extra']['koordinator_percentage'] . ' )</td>
							</tr>
							<tr>
								<td colspan="6">' . $this->view->translate('Average_pat_dayts') . '</td>
								<td> ' . $data['extra']['koordinator_average_amount'] . '</td>
								<td colspan="2"></td>
								<td> ' . $data['extra']['ehrenamtliche_average_amount'] . '</td>
							</tr>';
							break;

						case '77':
							$html .= '<tr>
								<td colspan="2">' . $this->view->translate('Nr_dead_patients') . '</td>
								<td>' . $data['extra']['sum'] . '</td>
								<td></td>
								<td></td>
							</tr>';
							break;

						case '78':
							$html .= '<tr>
							<td colspan="4">' . $this->view->translate('Average') . '</td>
							<td>' . $data['extra']['expectancy_average'] . '</td>
						</tr>
						<tr>
							<td colspan="4">' . $this->view->translate('Median') . '</td>
							<td>' . $data['extra']['expectancy_median'] . '</td>
						</tr>';
							break;


						case '80':
							$html .= '<tr>
								<td colspan="4">' . $this->view->translate('Average') . '</td>
								<td>' . $data['extra']['average'] . '</td>
							</tr>';
							$html .= '<tr>
								<td colspan="4">' . $this->view->translate('Median') . '</td>
								<td>' . $data['extra']['median'] . '</td>
							</tr>';
							break;
						case '82':
							$html .= '<tr>
								<td colspan="4">' . $this->view->translate('sum') . '</td>
								<td>' . $data['extra']['sum_km'] . '</td>
								<td>' . $data['extra']['sum_time'] . '</td>
								<td>' . $data['extra']['sum_rides'] . '</td>
								<td></td>
							</tr>';
							$html .= '<tr>
								<td colspan="4">' . $this->view->translate('Average') . '</td>
								<td>' . $data['extra']['average_km'] . '</td>
								<td>' . $data['extra']['average_time'] . '</td>
								<td></td>
								<td>' . $data['extra']['average_treateddays'] . '</td>
							</tr>';
							$html .= '<tr>
								<td colspan="4">' . $this->view->translate('Median') . '</td>
								<td>' . $data['extra']['median_km'] . '</td>
								<td>' . $data['extra']['median_time'] . '</td>
								<td></td>
								<td>' . $data['extra']['median_treateddays'] . '</td>
							</tr>';


							break;

						case '83':
							$html .= '
							<tr>
								<td colspan="4">' . $this->view->translate('sum') . '</td>
								<td>' . $data['extra']['sum_consulting_minutes'] . '</td>
								<td>' . $data['extra']['sum_coordination_minutes'] . '</td>
								<td>' . $data['extra']['sum_visits_minutes'] . '</td>
								<td>' . $data['extra']['sum_active_days'] . '</td>
								<td>' . $data['extra']['sum_patient_minutes'] . '</td>
							</tr>
							<tr>
								<td colspan="4">' . $this->view->translate('Average') . '</td>
								<td>' . $data['extra']['average_consulting_minutes'] . '</td>
								<td>' . $data['extra']['average_coordination_minutes'] . '</td>
								<td>' . $data['extra']['average_visits_minutes'] . '</td>
								<td>' . $data['extra']['average_active_days'] . '</td>
								<td>' . $data['extra']['average_patient_minutes'] . '</td>
							</tr>
							<tr>
								<td colspan="4">' . $this->view->translate('Median') . '</td>
								<td>' . $data['extra']['median_consulting_minutes'] . '</td>
								<td>' . $data['extra']['median_coordination_minutes'] . '</td>
								<td>' . $data['extra']['median_visits_minutes'] . '</td>
								<td>' . $data['extra']['median_active_days'] . '</td>
								<td>' . $data['extra']['median_patient_minutes'] . '</td>
							</tr>';


							break;


						case '112':
							$html .= '<tr>
								<td colspan="2">' . $this->view->translate('Nr_dead_patients') . '</td>
								<td>' . $data['extra']['sum'] . '</td>
							</tr>';
							break;

						case '178':
								$html .= '<tr>
								<td colspan="2">' . $this->view->translate('Nr_discharged_patients') . '</td>
								<td>' . $data['extra']['sum'] . '</td>
							</tr>';
							break;

						case '119':
							$html .= '<tr>
								<td colspan="7">' . $this->view->translate('Median') . '</td>
								<td>' . $data['extra']['median'] . '</td>
								<td colspan="8"></td>
							</tr>';
							break;

						case '150':
							$html .= '<tr>
								<td colspan="7" align="right">Durchschnitt Alter</td>
								<td>' . $data['extra']['avg_die'] . '</td>
								<td colspan="5" align="right">Durchschnittliche Behandlungsdauer</td>
								<td>' . $data['extra']['avg_treatment'] . '</td>
							</tr>';
							break;
							
						case '163':
							$html .= '<tr>
								<td colspan="3" align="right">' . $this->view->translate('Sum') . '</td>
								<td>' . $data['extra']['sum'] . '</td>
								<td>' . $data['extra']['sum_driving'] . '</td>
							</tr>';
							break;
							
						case '171':
							$html .= '<tr>
								<td colspan="2" align="right">' . $this->view->translate('Gesamt') . '</td>
								<td>' . $data['extra']['overall_hb_amount'] . '</td>
								<td></td>
								<td>' . $data['extra']['overall_tp_amount'] . '</td>
								<td></td>
							</tr>';
							break;
						case '133':
							$html .= '<tr>
								<td colspan="5" align="right">' . $this->view->translate('sum') . '</td>
								<td>' . $data['extra']['sum'] . '</td>
							</tr>';
						break;

						default:
						break;
					}

					$html.="</table>";
					break;
			}

			if($output == "screen")
			{
			    switch ($report){
			        case "169":
				            $html_doc = '<html>';
				            $html_doc .= '<head>';
				            $html_doc .= '<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">';
				            $html_doc .= '<title></title>';
				            $html_doc .= '<link href="' . APP_BASE . 'css/reports.css?'.date('Ymd', time()).'" rel="stylesheet" type="text/css" />';
				            $html_doc .= '</head>';
				            $html_doc .= '<body>';
				            $html_doc .= $html;
				            $html_doc .= '</body>';
				            $html_doc .= '</html>';
							break;

						default:
				            $html_doc = '<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link href="' . APP_BASE . 'css/reports.css?'.date('Ymd', time()).'" rel="stylesheet" type="text/css" />' . $html;
							break;
			    }
			    
			    //ispc-1859 added this echo for tr pagebreak
			    echo <<<EOT
<style>
	.datatable td,
	.datatable tr{
		 page-break-inside: avoid;
		 page-break-after:auto
	}
</style>

EOT;
				echo $html_doc;
				return;
			}
			elseif($output == "printing")
			{
			    switch ($report){
			        case "169":
			            $html_doc = '<html>';
			            $html_doc .= '<head>';
			            $html_doc .= '<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">';
			            $html_doc .= '<title></title>';
			            $html_doc .= '<link href="' . APP_BASE . 'css/reports.css?'.date('Ymd', time()).'" rel="stylesheet" type="text/css" />';
			            $html_doc .= '</head>';
			            $html_doc .= '<body>';
			            $html_doc .= $html;
			            $html_doc .= '</body>';
			            $html_doc .= '</html>';
			            break;
			    
			        default:
			            $html_doc = '<link href="' . APP_BASE . 'css/reports.css?'.date('Ymd', time()).'" rel="stylesheet" type="text/css" />' . $html;
			            break;
			    }
			    //ispc-1859 added this echo for tr pagebreak
			    echo <<<EOT
<style>
	.datatable td,
	.datatable tr{
		 page-break-inside: avoid;
		 page-break-after:auto
	}
</style>

EOT;
				echo $html_doc;
				echo "<SCRIPT type='text/javascript'>";
				echo "window.print();";
				echo "</SCRIPT>";
				exit;
			}
		}

		private function generateXLS($report, $data)
		{
			if ( $report!='58' ){			
				$this->xlsBOF();
			}
			
			$columns = $this->getreportscolumns($report);
			$namereport = $this->fetchReportDetailsAction($report);

			switch($report)
			{
			    
				case '14':
					$period .="";
					if($data['header_data']['onlyactive'] == '0' && !empty($data['header_data']['year']))
					{
						foreach($data['header_data']['start'] as $k_period => $value)
						{
							$period .= "\n" . date('d.m.Y', strtotime($value)) . ' - ' . date('d.m.Y', strtotime($data['header_data']['end'][$k_period]));
						}
					}

					$xlsRow = 4;

					$fromdate = $data['extra']['fromdate'];
					$tilldate = $data['extra']['tilldate'];
					$noofpatients = $data['extra']['noofpatients'];
					$sortarray1 = $data['data'];

					$this->xlsWriteLabel(0, 0, "PKD-Statistik");
					if($data['header_data']['onlyactive'] == '0' && !empty($data['header_data']['year']))
					{
						$this->xlsWriteLabel(0, 1, "Abrechnungszeitraum");
						$this->xlsWriteLabel(0, 2, $period);
						$this->xlsWriteLabel(0, 3, '');
					}
					else
					{
						$this->xlsWriteLabel(0, 1, "");
						$this->xlsWriteLabel(0, 2, '');
						$this->xlsWriteLabel(0, 3, '');
					}

					$this->xlsWriteLabel(0, 4, date("d.m.Y"));

					$this->xlsWriteLabel(2, 0, "Anzahl der eingeschriebenen Pat.");
					$this->xlsWriteNumber(2, 1, $noofpatients);

					$this->xlsWriteLabel(3, 0, "QPA-Name");
					$this->xlsWriteLabel(3, 1, "Initialtelefonat (t1)");
					$this->xlsWriteLabel(3, 2, "Telefonat mit Prof. (tp)");
					$this->xlsWriteLabel(3, 3, "Telefonat mit Fam. (tf)");
					$this->xlsWriteLabel(3, 4, "Hausbesuch (hb)");
					$this->xlsWriteLabel(3, 5, "Nachgespräch (ng)");





					foreach($sortarray1 as $key => $valfile)
					{
						$i++;
						if($valfile['type'] == 'doctor')
						{
							$this->xlsWriteLabel($xlsRow, 0, utf8_decode($valfile['userdata']));
							$this->xlsWriteNumber($xlsRow, 1, $valfile['t1']);
							$this->xlsWriteNumber($xlsRow, 2, $valfile['tp']);
							$this->xlsWriteNumber($xlsRow, 3, $valfile['tf']);
							$this->xlsWriteNumber($xlsRow, 4, $valfile['hb']);
							$this->xlsWriteNumber($xlsRow, 5, $valfile['ng']);


							$rowcount++;
							$allhb += $valfile['hb'];
							$allt1 += $valfile['t1'];
							$alltp +=$valfile['tp'];
							$alltf +=$valfile['tf'];
							$allng +=$valfile['ng'];
						}
						$xlsRow++;
					}
					$this->xlsWriteLabel($xlsRow - 3, 0, "Summe");
					$this->xlsWriteNumber($xlsRow - 3, 1, $allt1);
					$this->xlsWriteNumber($xlsRow - 3, 2, $alltp);
					$this->xlsWriteNumber($xlsRow - 3, 3, $alltf);
					$this->xlsWriteNumber($xlsRow - 3, 4, $allhb);
					$this->xlsWriteNumber($xlsRow - 3, 5, $allng);

					$this->xlsWriteLabel($xlsRow - 2, 0, "Aktion pro Patient");
					$this->xlsWriteNumber($xlsRow - 2, 1, number_format(($allt1 / $noofpatients), 2, ".", ""));
					$this->xlsWriteNumber($xlsRow - 2, 2, number_format(($alltp / $noofpatients), 2, ".", ""));
					$this->xlsWriteNumber($xlsRow - 2, 3, number_format(($alltf / $noofpatients), 2, ".", ""));
					$this->xlsWriteNumber($xlsRow - 2, 4, number_format(($allhb / $noofpatients), 2, ".", ""));
					$this->xlsWriteNumber($xlsRow - 2, 4, number_format(($allng / $noofpatients), 2, ".", ""));

					$this->xlsWriteLabel($xlsRow, 0, "KO-Statistik");

					if($data['header_data']['onlyactive'] == '0' && !empty($data['header_data']['year']))
					{
						$this->xlsWriteLabel($xlsRow, 1, "Abrechnungszeitraum");
						$this->xlsWriteLabel($xlsRow, 2, $period);
						$this->xlsWriteLabel($xlsRow, 3, '');
					}
					else
					{
						$this->xlsWriteLabel($xlsRow, 1, "");
						$this->xlsWriteLabel($xlsRow, 2, '');
						$this->xlsWriteLabel($xlsRow, 3, '');
					}

					$this->xlsWriteLabel($xlsRow, 4, date("d.m.Y"));
					$this->xlsWriteLabel($xlsRow + 1, 0, "Koordinator-Name");
					$this->xlsWriteLabel($xlsRow + 1, 1, "Initialtelefonat (t1)");
					$this->xlsWriteLabel($xlsRow + 1, 2, "Telefonat mit Prof. (tp)");
					$this->xlsWriteLabel($xlsRow + 1, 3, "Telefonat mit Fam. (tf)");
					$this->xlsWriteLabel($xlsRow + 1, 4, "Hausbesuch (hb)");
					$this->xlsWriteLabel($xlsRow + 1, 5, "Nachgespräch (ng)");

					//$rowcount=1;
					$sexlsRow = $xlsRow - 5;
					$allhb = 0;
					$allt1 = 0;
					$alltp = 0;
					$alltf = 0;
					$allng = 0;
					foreach($sortarray1 as $key => $valfile)
					{
						if($valfile['type'] == 'cordinator')
						{
							$this->xlsWriteLabel($sexlsRow, 0, utf8_decode($valfile['userdata']));
							$this->xlsWriteNumber($sexlsRow, 1, $valfile['t1']);
							$this->xlsWriteNumber($sexlsRow, 2, $valfile['tp']);
							$this->xlsWriteNumber($sexlsRow, 3, $valfile['tf']);
							$this->xlsWriteNumber($sexlsRow, 4, $valfile['hb']);
							$this->xlsWriteNumber($sexlsRow, 5, $valfile['ng']);

							$rowcount++;
							$allhb += $valfile['hb'];
							$allt1 += $valfile['t1'];
							$alltp +=$valfile['tp'];
							$alltf +=$valfile['tf'];
							$allng +=$valfile['ng'];
						}
						$sexlsRow++;
					}

					$this->xlsWriteLabel($sexlsRow, 0, "Summe");
					$this->xlsWriteNumber($sexlsRow, 1, $allt1);
					$this->xlsWriteNumber($sexlsRow, 2, $alltp);
					$this->xlsWriteNumber($sexlsRow, 3, $alltf);
					$this->xlsWriteNumber($sexlsRow, 4, $allhb);
					$this->xlsWriteNumber($sexlsRow, 5, $allng);

					$this->xlsWriteLabel($sexlsRow + 1, 0, "Aktion pro Patient");
					$this->xlsWriteNumber($sexlsRow + 1, 1, number_format(($allt1 / $noofpatients), 2, ".", ""));
					$this->xlsWriteNumber($sexlsRow + 1, 2, number_format(($alltp / $noofpatients), 2, ".", ""));
					$this->xlsWriteNumber($sexlsRow + 1, 3, number_format(($alltf / $noofpatients), 2, ".", ""));
					$this->xlsWriteNumber($sexlsRow + 1, 4, number_format(($allhb / $noofpatients), 2, ".", ""));
					$this->xlsWriteNumber($sexlsRow + 1, 5, number_format(($allng / $noofpatients), 2, ".", ""));



					break;
				case "13":
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . $this->view->translate($namereport[0]['report']) . "");
					$line++;

					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$nrCols = (count($columns));
					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "treateddays")
							{
								$this->xlsWriteNumber($xlsRow, 4, utf8_decode($value));
								$t++;
							}
							else if($field == "admissionsinhopital")
							{
								$this->xlsWriteNumber($xlsRow, 5, utf8_decode($value));
								$t++;
							}
							else if($field == "locationstatsarr")
							{
								$cntMultiData = count($value);

								foreach($value as $k_val => $v_val)
								{
									$t = 6; //where to start inserting multi patient data(row)
									$countedMultiCells = count($v_val);
									$sc = 1;
									foreach($v_val as $keyCell => $valCell)
									{
										$valCell = str_replace("<br />", "\n", $valCell);

										if(is_numeric(trim($valCell)))
										{ //if numeric format as number
											$this->xlsWriteNumber($xlsRow, $t, $valCell);
										}
										else
										{
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));
										}
										if($sc == $countedMultiCells && $s != ($cntMultiData - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else if($field == "dielocation")
							{
								$this->xlsWriteLabel($xlsRow, 11, utf8_decode($value));
								$t++;
							}
							else if($field == "sapv")
							{
								$this->xlsWriteLabel($lastRow, 12, utf8_decode($value));
								$t++;
							}
							else if($field != "full_name" && $field != "sapv")
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$lastRow = $xlsRow;
								$t++;
							}
						}
						$xlsRow++;
					}
					break;
				case "16":
					$line = 0;
					$this->xlsWriteLabel(0, 0, "Name des Berichts: " . $this->view->translate($namereport[0]['report']) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						if($column['column_name'] == "sum")
						{
							$c++; //move the sum col 1 space to right
						}
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;

					$xlsRow = $line;

					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field != "sum")
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
								$lastRow = $xlsRow;
							}

							if($field == "visits")
							{
								$cntMultiData = count($value);
								$countedMultiCells = count($value);
								$sc = 1;
								foreach($value as $keyCell => $valCell)
								{
									$array_names = array(
										"1" => "Hausbesuch in Privatwohnung",
										"2" => "Besuch im Krankenhaus / Palliativstation",
										"3" => "Besuch in stationärer Pflegeeinrichtung / Hospiz",
										"4" => "Besuch in Arztpraxis"
									);
									$t = 5; //where to start inserting multi patient data(rows)
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($array_names[$keyCell]));
									$t++;
									$this->xlsWriteNumber($xlsRow, $t, utf8_decode($valCell));


									if($sc != $cntMultiData)
									{
										$xlsRow++;
									}
									$sc++;
									$t++;
								}
							}
							else if($field == "sum")
							{
								$this->xlsWriteNumber($lastRow, $t, utf8_decode($value));
								$t++;
							}
						}
						$xlsRow++;
					}


					if($data['extra'])
					{
						$this->xlsWriteLabel($xlsRow, 0, utf8_decode($this->view->translate('Average')));
						$this->xlsWriteLabel($xlsRow, 7, utf8_decode($data['extra']['averege']));
					}


					break;
				case "80":
					$line = 0;
					$this->xlsWriteLabel(0, 0, "Name des Berichts: " . $this->view->translate($namereport[0]['report']) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;

					$xlsRow = $line;

					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field != "sum")
							{
								if(is_numeric($value))
								{
									$this->xlsWriteNumber($xlsRow, $t, utf8_decode($value));
								}
								else
								{
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								}

								$t++;
								$lastRow = $xlsRow;
							}

							if($field == "sum")
							{
								$this->xlsWriteNumber($lastRow, $t, utf8_decode($value));
								$t++;
							}

							if($field == "fall")
							{
								$cntMultiData = count($value);
								$countedMultiCells = count($value);
								$sc = 1;
								foreach($value as $keyCell => $valCell)
								{
									$t = 4; //where to start inserting multi patient data(rows)
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell['fall_start'] . ' - ' . $valCell['fall_end']));
									$t++;
									$this->xlsWriteNumber($xlsRow, $t, utf8_decode($valCell['fall_days']));


									if($sc != $cntMultiData)
									{
										$xlsRow++;
									}
									$sc++;
									$t++;
								}
							}
						}
						$xlsRow++;
					}

					if($data['extra'])
					{
						$this->xlsWriteLabel($xlsRow, 0, utf8_decode($this->view->translate('Average')));
						$this->xlsWriteNumber($xlsRow, 5, utf8_decode($data['extra']['average_fall_period']));
						$this->xlsWriteNumber($xlsRow, 6, utf8_decode($data['extra']['average']));


						$xlsRow++;

						$this->xlsWriteLabel($xlsRow, 0, utf8_decode($this->view->translate('Median')));
						$this->xlsWriteNumber($xlsRow, 5, utf8_decode($data['extra']['median_fall']));
						$this->xlsWriteNumber($xlsRow, 6, utf8_decode($data['extra']['median']));
					}

					break;


				case "19":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;

					$this->xlsWriteLabel($line, 3, 'Verordnet von');
					$this->xlsWriteLabel($line, 4, 'von - bis');
					$this->xlsWriteLabel($line, 5, 'Verordnet');
					$this->xlsWriteLabel($line, 6, 'Status');
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "sapv")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 3;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}
					break;

				case "35":
					$report_language = $this->view->translate($namereport[0]['report'].'_lang');					
					
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($report_language[$namereport[0]['report']]) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $report_language['reportperiods']);
						$this->xlsWriteLabel($line, 1, $report_language['rfrom']);
						$this->xlsWriteLabel($line, 2, $report_language['rtill']);
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $report_language['no']);

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($report_language[$column['column_name']])));
						$c++;
					}
					$line++;

					$this->xlsWriteLabel($line, 6, $report_language['voluntaryworker']);
					$this->xlsWriteLabel($line, 7, $report_language['beginvisit']);
					$this->xlsWriteLabel($line, 8, $report_language['endvisit']);
					$this->xlsWriteLabel($line, 9, $report_language['duration']);
					$this->xlsWriteLabel($line, 10, $report_language['distance']);
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "visits")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 6;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}
					break;


				case "101":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;

					$this->xlsWriteLabel($line, 13, $this->view->translate('firstname'));
					$this->xlsWriteLabel($line, 14, $this->view->translate('lastname'));
					$this->xlsWriteLabel($line, 15, utf8_decode($this->view->translate('street')));
					$this->xlsWriteLabel($line, 16, $this->view->translate('zip'));
					$this->xlsWriteLabel($line, 17, $this->view->translate('city'));
					$this->xlsWriteLabel($line, 18, $this->view->translate('phone'));
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "contactperson")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 13;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}

					$this->xlsWriteLabel($xlsRow, 0, "");
					$this->xlsWriteLabel($xlsRow, 1, "");
					$this->xlsWriteLabel($xlsRow, 2, "");
					$this->xlsWriteLabel($xlsRow, 3, "");
					$this->xlsWriteLabel($xlsRow, 4, "");
					$this->xlsWriteLabel($xlsRow, 5, "");
					$this->xlsWriteLabel($xlsRow, 6, $this->view->translate('Durchschnitt Alter'));
					$this->xlsWriteNumber($xlsRow, 7, $data['extra']['avg_die']);
					$this->xlsWriteLabel($xlsRow, 8, " ");
					$this->xlsWriteLabel($xlsRow, 9, " ");
					$this->xlsWriteLabel($xlsRow, 10, " ");
					$this->xlsWriteLabel($xlsRow, 11, $this->view->translate('Durchschnittliche Behandlungsdauer'));
					$this->xlsWriteNumber($xlsRow, 12, $data['extra']['avg_treatment']);
					break;

				case "101-a":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						if($column['column_name'] == 'contactperson')
						{
							$c = ($c + 4);
						}
						$c++;
					}
					$line++;

					$this->xlsWriteLabel($line, 10, $this->view->translate('firstname'));
					$this->xlsWriteLabel($line, 11, $this->view->translate('lastname'));
					$this->xlsWriteLabel($line, 12, utf8_decode($this->view->translate('street')));
					$this->xlsWriteLabel($line, 13, $this->view->translate('zip'));
					$this->xlsWriteLabel($line, 14, $this->view->translate('city'));
					//$this->xlsWriteLabel($line, 15, $this->view->translate('phone'));
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							$cntSapv = '0';
							if($field == "contactperson")
							{

								$cntSapv = count($value);

								if($cntSapv > '0')
								{
									for($s = 0; $s <= $cntSapv; $s++)
									{
										$tx = count($columns);
										$t = 10;
										$countedSapvCells = count($value[$s]);
										$sc = 1;
										foreach($value[$s] as $keyCell => $valCell)
										{
											if(is_numeric($valCell))
											{
												$this->xlsWriteNumber($xlsRow, $t, utf8_decode($valCell));
											}
											else
											{
												$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));
											}

											//continue curent row
											if($keyCell == 'cnt_city' && count($value[($s + 1)]) != '0')
											{
												$xlsRow++;
											}
											else if($sc == $countedSapvCells && $s == ($cntSapv - 1) && $keyCell == 'cnt_city')
											{
												$xlsRow = ($xlsRow - $s);
												$xlsRow++;
											}

											if($sc == $countedSapvCells && $s != ($cntSapv - 1))
											{
												$prev_field = $field;
												$t = ($t - ($countedSapvCells - 1));
											}
											else
											{

												$t++;
											}
											$sc++;
										}
									}
								}
								else
								{

									$t = '15';
								}
							}
							else
							{
								if($prev_field == 'contactperson')
								{
									$t = '15';
								}

								if(is_numeric($value))
								{
									$this->xlsWriteNumber($xlsRow, $t, utf8_decode($value));
								}
								else
								{
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								}
								$t++;
								$prev_field = '';
							}
						}
						$prev_field = '';
						$xlsRow++;
					}
					break;

				case "55":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;


					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "sapv")
							{
								$cntSapv = count($value);

//							for($s = 0; $s <= $cntSapv; $s++)
								foreach($value as $k_val => $v_val)
								{
									$t = 5;
									$countedSapvCells = count($v_val);
									$sc = 1;
									foreach($v_val as $keyCell => $valCell)
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}
					break;

				case "45":
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, utf8_decode($this->view->translate($column['column_name'])));
						$c++;
					}
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "nrpatientenvv")
							{
								$this->xlsWriteNumber($xlsRow, $t, utf8_decode($value));
								$t++;
							}
							else
							{
								$value = str_replace("<br />", "\n", $value);
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}
					$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Average'));
					$this->xlsWriteNumber($xlsRow, 2, $data['extra']['avg_patients_days']);
					break;

				case "47":
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}


					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;

					$this->xlsWriteLabel($line, 9, 'Verordnet');
					$this->xlsWriteLabel($line, 10, 'von - bis');
					$this->xlsWriteLabel($line, 11, 'Status');
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "sapv")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 9;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}
					break;
				case "54":
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "admissiondate")
							{
// 								$cntSapv = count($value);
								$cntSapv_max = max(array_keys($value));
								
// 								for($s = 0; $s <= $cntSapv; $s++)
								for($s = 0; $s <= $cntSapv_max; $s++)
								{
									if (!isset($value[$s])) {
										continue;
									}
									$t = 5;

									$countedSapvCells = count($value[$s]);
									$sc = 1;

									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value[$s]));
									$this->xlsWriteLabel($xlsRow, ($t + 1), utf8_decode($row['dischargedate'][$s]));

									if($sc == $countedSapvCells)
									{
										$xlsRow++;
									}
									$sc++;
									$t++;
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}
					break;

				case "58":
					/*
					 * new excel version for raport 58
					 * using PHPExcel class
					 */
					
					$objPHPExcel = new PHPExcel();
					//next commented is a test, that works, if you want to add some preperties to the xml file
					/*
					$logininfo = new Zend_Session_Namespace('Login_Info');
					$clientid = $logininfo->clientid;
					$userid = $logininfo->userid;
					$user_arr = User :: getUsersDetails( array($userid));
					
					$objPHPExcel->getProperties()->setCreator($user_arr[$userid]['last_name'] .", ". $user_arr[$userid]['first_name'])
					->setLastModifiedBy($user_arr[$userid]['last_name'] .", ". $user_arr[$userid]['first_name'])
					->setTitle($this->view->translate($namereport[0]['report']) )
					->setSubject($this->view->translate($namereport[0]['report']))
					->setKeywords($this->view->translate($namereport[0]['report']))
					->setCategory("Raport");
					*/	
					$objPHPExcel->getDefaultStyle()->getFont()->setSize(10);
					
					$sheet1 = $objPHPExcel->getActiveSheet();
	
					$sheet1->setTitle( utf8_decode($this->view->translate($namereport[0]['report'])) );
					
					$sheet1->getColumnDimension('A')->setAutoSize(false)->setWidth("5");
					$sheet1->getColumnDimension('B')->setAutoSize(false)->setWidth("12");
					$sheet1->getColumnDimension('C')->setAutoSize(false)->setWidth("18");
					$sheet1->getColumnDimension('D')->setAutoSize(false)->setWidth("18");
					$sheet1->getColumnDimension('E')->setAutoSize(false)->setWidth("12");
					$sheet1->getColumnDimension('F')->setAutoSize(false)->setWidth("12");
					$sheet1->getColumnDimension('G')->setAutoSize(false)->setWidth("12");
		
					
					$line = 1;
					
					$sheet1->mergeCells("A{$line}:G{$line}");
					$sheet1->setCellValue("A{$line}",  "Name des Berichts: " . ($this->view->translate($namereport[0]['report'])));
					$sheet1->getStyle("A{$line}")->getFont()->setBold(true);
					$line++;
					$line++;
					
					
					$c = 0;
					if($data['header_data']['onlyactive'] == '0')
					{
						$sheet1->mergeCells("A{$line}:B{$line}");
						$sheet1->getStyle("A{$line}")->getAlignment()->setVertical(PHPExcel_Style_Alignment::VERTICAL_TOP);
						
						$sheet1->setCellValueByColumnAndRow(0, $line,  $this->view->translate('reportperiods'));
						$sheet1->setCellValueByColumnAndRow(2, $line,  $this->view->translate('rfrom'));
						$sheet1->setCellValueByColumnAndRow(3, $line,  $this->view->translate('rtill'));
					
						$line++; //next line
					
						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$sheet1->mergeCells("A".($line-1) .":B".$line);
							$cp = 2;
							
							$sheet1->setCellValueByColumnAndRow($cp, $line,  $p_value_start);
							$sheet1->setCellValueByColumnAndRow($cp+1, $line,  $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 0;
					$sheet1->setCellValueByColumnAndRow($c, $line,  $this->view->translate('no'));
					$sheet1->getStyle("A{$line}")->getFont()->setBold(true);
					
					foreach($columns as $column)
					{
						
						
						$c++;
						$sheet1->setCellValueByColumnAndRow($c, $line, ucfirst(($this->view->translate($column['column_name']))));
						$sheet1->getStyle(PHPExcel_Cell::stringFromColumnIndex($c) . $line)->getFont()->setBold(true);
						
						
					}
					$line++;
					$line++;
					$i=0;
					foreach($data['data'] as $key => $row){
						$i++;
						$column = 0;
						
						$sheet1->setCellValueByColumnAndRow($column, $line, $i);
						$column++;
						$sheet1->setCellValueByColumnAndRow($column, $line, ($row['epid']));
						$column++;
						$sheet1->setCellValueByColumnAndRow($column, $line, ($row['lastname']));
						$column++;
						$sheet1->setCellValueByColumnAndRow($column, $line, ($row['firstname']));
						$column++;
						$sheet1->setCellValueByColumnAndRow($column, $line, $row['birthd']);
						$column++;
						//change the next 2 line into implode() for all, or [sizeof(array)] for the last
						$sheet1->setCellValueByColumnAndRow($column, $line, $row['admissiondate'][0]); 
						$column++;
						$sheet1->setCellValueByColumnAndRow($column, $line, $row['dischargedate'][0]);
						$column++;
						
												
						$line++;
					}
					
					$objPHPExcel->setActiveSheetIndex(0);
					header("Content-Type: application/vnd.ms-excel");
					header("Content-Disposition: attachment; filename=\"".utf8_decode($this->view->translate($namereport[0]['report'])).".xls\"");
					header("Cache-Control: max-age=0");
					
					$objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, "Excel5");
					$objWriter->save("php://output");
					
					die();
					break;
				case "58_old_version":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "admissiondate")
							{
								$cntSapv = count($value);
								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 5;

									$countedSapvCells = count($value[$s]);
									$sc = 1;

									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value[$s]));
									$this->xlsWriteLabel($xlsRow, ($t + 1), utf8_decode($row['dischargedate'][$s]));

									if($sc == $countedSapvCells)
									{
										$xlsRow++;
									}
									$sc++;
									$t++;
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}
					}
					break;

				case "67":
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, utf8_decode($this->view->translate($column['column_name'])));
						$c++;
					}
					$line++;

					$xlsRow = $line;
					$numeric_fields = array("nrpatientenvv2", "nrpatientenbe", "nrpatiententv", "nrpatientenbetv");

					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{

							if(in_array($field, $numeric_fields))
							{
								$this->xlsWriteNumber($xlsRow, $t, utf8_decode($value));
								$t++;
							}
							else
							{
								$value = str_replace("<br />", "\n", $value);
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}
					$this->xlsWriteLabel($xlsRow, 0, $this->view->translate('Average'));
					$this->xlsWriteNumber($xlsRow, 3, $data['extra']['sum_master_be']);
					$this->xlsWriteNumber($xlsRow, 4, $data['extra']['sum_master_tv']);
					$this->xlsWriteNumber($xlsRow, 5, $data['extra']['sum_master_betv']);
					$this->xlsWriteNumber($xlsRow, 6, $data['extra']['sum_master_vv']);


					foreach($data['unique_patients'] as $k_sapv => $v_pat_numbrer)
					{
						$xlsRow++;
						$this->xlsWriteLabel($xlsRow, 0, $this->view->translate($k_sapv));
						$this->xlsWriteLabel($xlsRow, 2, $v_pat_numbrer['epids']);
						$this->xlsWriteNumber($xlsRow, 6, $v_pat_numbrer['count']);
					}
					break;



				case '84':
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0' && !empty($data['header_data']['year']))
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}


					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$this->xlsWriteLabel($line, 1, $this->view->translate('Pat. Nr'));
					$this->xlsWriteLabel($line, 2, $this->view->translate('Nachname'));
					$this->xlsWriteLabel($line, 3, $this->view->translate('Vorname'));
					$this->xlsWriteLabel($line, 4, $this->view->translate('admissiondate'));
					$this->xlsWriteLabel($line, 5, $this->view->translate('dischargedate'));
					$this->xlsWriteLabel($line, 6, $this->view->translate('Pflegedienst'));
					$this->xlsWriteLabel($line, 7, $this->view->translate('Palliativpflegedienst'));



					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, utf8_decode($this->view->translate($column['column_name'])));
						$c++;
					}

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							$value = str_replace("<br />", "\n", $value);
							if(is_numeric($value))
							{ //if numeric format as number
								$this->xlsWriteNumber($xlsRow, $t, $value);
							}
							else
							{

								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
							}
							$t++;
						}

						$xlsRow++;
					}
					$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Pflegedienst'));
					$this->xlsWriteNumber($xlsRow, 2, $data['extra']['patients_pflegedienst']);

					$this->xlsWriteLabel($xlsRow + 1, 1, $this->view->translate('Palliativpflegedienst'));
					$this->xlsWriteNumber($xlsRow + 1, 2, $data['extra']['patients_paliativepfle']);

					$this->xlsWriteLabel($xlsRow + 2, 1, $this->view->translate('Pflegedienst AND Palliativpflegedienst'));
					$this->xlsWriteNumber($xlsRow + 2, 2, $data['extra']['patients_pflegedienst_paliativepfle']);

					$this->xlsWriteLabel($xlsRow + 3, 1, $this->view->translate('no Pflegedienst'));
					$this->xlsWriteNumber($xlsRow + 3, 2, $data['extra']['patients_no_pflegedienst_no_paliativepfle']);
					break;



				case '85':
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$this->xlsWriteLabel($line, 1, $this->view->translate('Pat. Nr'));
					$this->xlsWriteLabel($line, 2, $this->view->translate('Nachname'));
					$this->xlsWriteLabel($line, 3, $this->view->translate('Vorname'));
					$this->xlsWriteLabel($line, 4, $this->view->translate('admissiondate'));
					$this->xlsWriteLabel($line, 5, $this->view->translate('dischargedate'));
					$this->xlsWriteLabel($line, 6, $this->view->translate('Visit_date'));
					$this->xlsWriteLabel($line, 7, $this->view->translate('Visit_by'));
					$this->xlsWriteLabel($line, 8, $this->view->translate('Visit_duration'));



					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "visit")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									//								$t = count($columns);
									$t = 6;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}

					$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('overall_amount_of_visits'));
					$this->xlsWriteNumber($xlsRow, 2, $data['extra']['average_visit_per_day']);

					$this->xlsWriteLabel($xlsRow, 3, $this->view->translate('average_vist_per_day'));
					$this->xlsWriteNumber($xlsRow, 4, $data['extra']['overall_visits']);
					$this->xlsWriteLabel($xlsRow, 5, $this->view->translate('overall_time_of_visits'));
					$this->xlsWriteNumber($xlsRow, 6, $data['extra']['overall_time']);

					break;

				case '97':
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$this->xlsWriteLabel($line, 1, $this->view->translate('username'));
					$this->xlsWriteLabel($line, 2, $this->view->translate('visit_date'));
					$this->xlsWriteLabel($line, 3, $this->view->translate('Pat. Nr'));
					$this->xlsWriteLabel($line, 4, $this->view->translate('Nachname'));
					$this->xlsWriteLabel($line, 5, $this->view->translate('Vorname'));
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "visit")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 2;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}

					break;
				case "87":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;

					$xlsRow = $line;
					$quality_map = array('0' => 'Normal', '1' => 'Dringend', '2' => 'Normal', '3' => 'Notfall');
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "rows")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{

									$countedSapvCells = count($value[$s]);
									foreach($value[$s] as $keyCell => $valCell)
									{
										if($keyCell == 'action')
										{
											$this->xlsWriteLabel($xlsRow, 2, utf8_decode($this->view->translate($valCell)));
										}
										if($keyCell == 'epid')
										{
											$string_row = $valCell . ' - ' . $value[$s]['row_date'];
											$this->xlsWriteLabel($xlsRow, 3, utf8_decode($string_row));
										}
										if($keyCell == 'quality')
										{
											if(empty($valCell) || $valCell == '0')
											{
												$quality = $quality_map[0];
											}
											else
											{
												$quality = $quality_map[$valCell];
											}
											$this->xlsWriteLabel($xlsRow, 4, utf8_decode($quality));
										}
									}
									$xlsRow++;
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}

					foreach($data['extra'] as $user => $details)
					{
						$this->xlsWriteLabel($xlsRow, 0, utf8_decode($user));
						$this->xlsWriteLabel($xlsRow, 1, utf8_decode($this->view->translate('ammount_visits_dringend')));
						$this->xlsWriteNumber($xlsRow, 2, utf8_decode($details['visit'][1]));
						$xlsRow++;
						$this->xlsWriteLabel($xlsRow, 1, utf8_decode($this->view->translate('ammount_visits_normal')));
						$this->xlsWriteNumber($xlsRow, 2, utf8_decode($details['visit'][2]));
						$xlsRow++;
						$this->xlsWriteLabel($xlsRow, 1, utf8_decode($this->view->translate('ammount_visits_duty')));
						$this->xlsWriteNumber($xlsRow, 2, utf8_decode($details['visit'][3]));
						$xlsRow++;
						$this->xlsWriteLabel($xlsRow, 1, utf8_decode($this->view->translate('ammount_beratung')));
						$this->xlsWriteNumber($xlsRow, 2, utf8_decode($details['beratung']));
						$xlsRow++;
						$this->xlsWriteLabel($xlsRow, 1, utf8_decode($this->view->translate('ammount_koordination')));
						$this->xlsWriteNumber($xlsRow, 2, utf8_decode($details['koord']));
						$xlsRow++;
						$this->xlsWriteLabel($xlsRow, 1, utf8_decode($this->view->translate('ammount_tel')));
						$this->xlsWriteNumber($xlsRow, 2, utf8_decode($details['tel']));
						$xlsRow++;
						$xlsRow++;
					}
					break;

				case "97":


					break;
				case "99":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "admissiondate")
							{
								$cntSapv = count($value);
								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 5;

									$countedSapvCells = count($value[$s]);
									$sc = 1;

									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value[$s]));
									$this->xlsWriteLabel($xlsRow, ($t + 1), utf8_decode($row['dischargedate'][$s]));
									$sc++;
									$t++;
								}
							} 
							elseif( $field == "familydoctor") 
							{
								$value = str_replace("<br />", "\n", $value);
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}
						$xlsRow++;
					}
					break;

				case "103":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$this->xlsWriteLabel($line, 1, $this->view->translate('Pat. Nr'));
					$this->xlsWriteLabel($line, 2, $this->view->translate('Nachname'));
					$this->xlsWriteLabel($line, 3, $this->view->translate('Vorname'));
					$this->xlsWriteLabel($line, 4, $this->view->translate('birthd'));
					$this->xlsWriteLabel($line, 5, $this->view->translate('admissiondate'));
					$this->xlsWriteLabel($line, 6, $this->view->translate('dischargedate'));
					$this->xlsWriteLabel($line, 7, $this->view->translate('has_sapv_vv'));
					$this->xlsWriteLabel($line, 8, $this->view->translate('users_working_hours'));


					$this->xlsWriteLabel($line + 1, 8, $this->view->translate('username'));
					$this->xlsWriteLabel($line + 1, 9, $this->view->translate('visit_times'));
					$this->xlsWriteLabel($line + 1, 10, $this->view->translate('visits_count'));
					$this->xlsWriteLabel($line + 1, 11, $this->view->translate('driving_time'));
					$this->xlsWriteLabel($line + 1, 12, $this->view->translate('telefon_duration'));
					$this->xlsWriteLabel($line + 1, 13, $this->view->translate('telefon_count'));
					$this->xlsWriteLabel($line + 1, 14, $this->view->translate('koordination_duration'));
					$this->xlsWriteLabel($line + 1, 15, $this->view->translate('koordination_count'));
					$this->xlsWriteLabel($line + 1, 16, $this->view->translate('beratung_duration'));
					$this->xlsWriteLabel($line + 1, 17, $this->view->translate('beratung_count'));
					$this->xlsWriteLabel($line + 1, 18, $this->view->translate('visits per day'));
					$this->xlsWriteLabel($line + 1, 19, $this->view->translate('contacts per day'));

					$line = $line + 1;

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						foreach($row as $field => $value)
						{
							if($field == "user_documentation")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 8;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										if($keyCell != "visits_per_day" && $keyCell != "contacts_per_day" && $keyCell != "user_name")
										{
											$this->xlsWriteNumber($xlsRow, $t, utf8_decode($valCell));
										}
										else
										{
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));
										}

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}


					$this->xlsWriteLabel($xlsRow, 8, $this->view->translate('sum'));
					$this->xlsWriteNumber($xlsRow, 9, $data['extra']['total_visits_minutes']);
					$this->xlsWriteNumber($xlsRow, 10, $data['extra']['total_visits_count']);
					$this->xlsWriteNumber($xlsRow, 11, $data['extra']['total_driving_sum']);
					$this->xlsWriteNumber($xlsRow, 12, $data['extra']['total_telefonat_minutes']);
					$this->xlsWriteNumber($xlsRow, 13, $data['extra']['total_telefonat_count']);
					$this->xlsWriteNumber($xlsRow, 14, $data['extra']['total_coordination_minutes']);
					$this->xlsWriteNumber($xlsRow, 15, $data['extra']['total_coordination_count']);
					$this->xlsWriteNumber($xlsRow, 16, $data['extra']['total_consulting_minutes']);
					$this->xlsWriteNumber($xlsRow, 17, $data['extra']['total_consulting_count']);

					$xlsRow++;

					$this->xlsWriteLabel($xlsRow, 8, $this->view->translate('average'));
					$this->xlsWriteNumber($xlsRow, 9, $data['extra']['avg_total_visits_minutes']);
					$this->xlsWriteNumber($xlsRow, 10, $data['extra']['avg_total_visits_count']);
					$this->xlsWriteNumber($xlsRow, 11, $data['extra']['avg_total_driving_sum']);
					$this->xlsWriteNumber($xlsRow, 12, $data['extra']['avg_total_telefonat_minutes']);
					$this->xlsWriteNumber($xlsRow, 13, $data['extra']['avg_total_telefonat_count']);
					$this->xlsWriteNumber($xlsRow, 14, $data['extra']['avg_total_coordination_minutes']);
					$this->xlsWriteNumber($xlsRow, 15, $data['extra']['avg_total_coordination_count']);
					$this->xlsWriteNumber($xlsRow, 16, $data['extra']['avg_total_consulting_minutes']);
					$this->xlsWriteNumber($xlsRow, 17, $data['extra']['avg_total_consulting_count']);
					$this->xlsWriteNumber($xlsRow, 18, $data['extra']['avg_total_visits_per_day']);
					$this->xlsWriteNumber($xlsRow, 19, $data['extra']['avg_total_contacts_per_day']);

					break;


				case "104":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$this->xlsWriteLabel($line, 1, $this->view->translate('Pat. Nr'));
					$this->xlsWriteLabel($line, 2, $this->view->translate('Nachname'));
					$this->xlsWriteLabel($line, 3, $this->view->translate('Vorname'));
					$this->xlsWriteLabel($line, 4, $this->view->translate('birthd'));
					$this->xlsWriteLabel($line, 5, $this->view->translate('admissiondate'));
					$this->xlsWriteLabel($line, 6, $this->view->translate('dischargedate'));
					$this->xlsWriteLabel($line, 7, $this->view->translate('users_working_hours_sapv'));


					$this->xlsWriteLabel($line + 1, 7, $this->view->translate('username'));
					$this->xlsWriteLabel($line + 1, 8, $this->view->translate('visit_times'));
					$this->xlsWriteLabel($line + 1, 9, $this->view->translate('visits_count'));
					$this->xlsWriteLabel($line + 1, 10, $this->view->translate('driving_time'));
					$this->xlsWriteLabel($line + 1, 11, $this->view->translate('telefon_duration'));
					$this->xlsWriteLabel($line + 1, 12, $this->view->translate('telefon_count'));
					$this->xlsWriteLabel($line + 1, 13, $this->view->translate('koordination_duration'));
					$this->xlsWriteLabel($line + 1, 14, $this->view->translate('koordination_count'));
					$this->xlsWriteLabel($line + 1, 15, $this->view->translate('beratung_duration'));
					$this->xlsWriteLabel($line + 1, 16, $this->view->translate('beratung_count'));
					$this->xlsWriteLabel($line + 1, 17, $this->view->translate('visits per day'));
					$this->xlsWriteLabel($line + 1, 18, $this->view->translate('contacts per day'));

					$line = $line + 1;

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						foreach($row as $field => $value)
						{
							if($field == "user_documentation")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									//								$t = count($columns);
									$t = 7;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										if($keyCell != "visits_per_day" && $keyCell != "contacts_per_day" && $keyCell != "user_name")
										{
											$this->xlsWriteNumber($xlsRow, $t, utf8_decode($valCell));
										}
										else
										{
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));
										}

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}


					$this->xlsWriteLabel($xlsRow, 7, $this->view->translate('sum'));
					$this->xlsWriteNumber($xlsRow, 8, $data['extra']['total_visits_minutes']);
					$this->xlsWriteNumber($xlsRow, 9, $data['extra']['total_visits_count']);
					$this->xlsWriteNumber($xlsRow, 10, $data['extra']['total_driving_sum']);
					$this->xlsWriteNumber($xlsRow, 11, $data['extra']['total_telefonat_minutes']);
					$this->xlsWriteNumber($xlsRow, 12, $data['extra']['total_telefonat_count']);
					$this->xlsWriteNumber($xlsRow, 13, $data['extra']['total_coordination_minutes']);
					$this->xlsWriteNumber($xlsRow, 14, $data['extra']['total_coordination_count']);
					$this->xlsWriteNumber($xlsRow, 15, $data['extra']['total_consulting_minutes']);
					$this->xlsWriteNumber($xlsRow, 16, $data['extra']['total_consulting_count']);

					$xlsRow++;

					$this->xlsWriteLabel($xlsRow, 7, $this->view->translate('average'));
					$this->xlsWriteNumber($xlsRow, 8, $data['extra']['avg_total_visits_minutes']);
					$this->xlsWriteNumber($xlsRow, 9, $data['extra']['avg_total_visits_count']);
					$this->xlsWriteNumber($xlsRow, 10, $data['extra']['avg_total_driving_sum']);
					$this->xlsWriteNumber($xlsRow, 11, $data['extra']['avg_total_telefonat_minutes']);
					$this->xlsWriteNumber($xlsRow, 12, $data['extra']['avg_total_telefonat_count']);
					$this->xlsWriteNumber($xlsRow, 13, $data['extra']['avg_total_coordination_minutes']);
					$this->xlsWriteNumber($xlsRow, 14, $data['extra']['avg_total_coordination_count']);
					$this->xlsWriteNumber($xlsRow, 15, $data['extra']['avg_total_consulting_minutes']);
					$this->xlsWriteNumber($xlsRow, 16, $data['extra']['avg_total_consulting_count']);

					$this->xlsWriteNumber($xlsRow, 17, $data['extra']['avg_total_visits_per_day']);
					$this->xlsWriteNumber($xlsRow, 18, $data['extra']['avg_total_contacts_per_day']);


					break;


				case "108":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$this->xlsWriteLabel($line, 1, $this->view->translate('Pat. Nr'));
					$this->xlsWriteLabel($line, 2, $this->view->translate('Nachname'));
					$this->xlsWriteLabel($line, 3, $this->view->translate('Vorname'));
					$this->xlsWriteLabel($line, 4, $this->view->translate('birthd'));
					$this->xlsWriteLabel($line, 5, $this->view->translate('admissiondate'));
					$this->xlsWriteLabel($line, 6, $this->view->translate('dischargedate'));
					$this->xlsWriteLabel($line, 7, $this->view->translate('has_sapv_vv'));
					$this->xlsWriteLabel($line, 8, $this->view->translate('users_working_hours_no_sapv'));


					$this->xlsWriteLabel($line + 1, 8, $this->view->translate('username'));
					$this->xlsWriteLabel($line + 1, 9, $this->view->translate('visit_times'));
					$this->xlsWriteLabel($line + 1, 10, $this->view->translate('visits_count'));
					$this->xlsWriteLabel($line + 1, 11, $this->view->translate('driving_time'));
					$this->xlsWriteLabel($line + 1, 12, $this->view->translate('telefon_duration'));
					$this->xlsWriteLabel($line + 1, 13, $this->view->translate('telefon_count'));
					$this->xlsWriteLabel($line + 1, 14, $this->view->translate('koordination_duration'));
					$this->xlsWriteLabel($line + 1, 15, $this->view->translate('koordination_count'));
					$this->xlsWriteLabel($line + 1, 16, $this->view->translate('beratung_duration'));
					$this->xlsWriteLabel($line + 1, 17, $this->view->translate('beratung_count'));
					$this->xlsWriteLabel($line + 1, 18, $this->view->translate('visits per day'));
					$this->xlsWriteLabel($line + 1, 19, $this->view->translate('contacts per day'));

					$line = $line + 1;

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						foreach($row as $field => $value)
						{
							if($field == "user_documentation")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 8;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										if($keyCell != "visits_per_day" && $keyCell != "contacts_per_day" && $keyCell != "user_name")
										{
											$this->xlsWriteNumber($xlsRow, $t, utf8_decode($valCell));
										}
										else
										{
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));
										}

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}


					$this->xlsWriteLabel($xlsRow, 8, $this->view->translate('sum'));
					$this->xlsWriteNumber($xlsRow, 9, $data['extra']['total_visits_minutes']);
					$this->xlsWriteNumber($xlsRow, 10, $data['extra']['total_visits_count']);
					$this->xlsWriteNumber($xlsRow, 11, $data['extra']['total_driving_sum']);
					$this->xlsWriteNumber($xlsRow, 12, $data['extra']['total_telefonat_minutes']);
					$this->xlsWriteNumber($xlsRow, 13, $data['extra']['total_telefonat_count']);
					$this->xlsWriteNumber($xlsRow, 14, $data['extra']['total_coordination_minutes']);
					$this->xlsWriteNumber($xlsRow, 15, $data['extra']['total_coordination_count']);
					$this->xlsWriteNumber($xlsRow, 16, $data['extra']['total_consulting_minutes']);
					$this->xlsWriteNumber($xlsRow, 17, $data['extra']['total_consulting_count']);

					$xlsRow++;

					$this->xlsWriteLabel($xlsRow, 8, $this->view->translate('average'));
					$this->xlsWriteNumber($xlsRow, 9, $data['extra']['avg_total_visits_minutes']);
					$this->xlsWriteNumber($xlsRow, 10, $data['extra']['avg_total_visits_count']);
					$this->xlsWriteNumber($xlsRow, 11, $data['extra']['avg_total_driving_sum']);
					$this->xlsWriteNumber($xlsRow, 12, $data['extra']['avg_total_telefonat_minutes']);
					$this->xlsWriteNumber($xlsRow, 13, $data['extra']['avg_total_telefonat_count']);
					$this->xlsWriteNumber($xlsRow, 14, $data['extra']['avg_total_coordination_minutes']);
					$this->xlsWriteNumber($xlsRow, 15, $data['extra']['avg_total_coordination_count']);
					$this->xlsWriteNumber($xlsRow, 16, $data['extra']['avg_total_consulting_minutes']);
					$this->xlsWriteNumber($xlsRow, 17, $data['extra']['avg_total_consulting_count']);
					$this->xlsWriteNumber($xlsRow, 18, $data['extra']['avg_total_visits_per_day']);
					$this->xlsWriteNumber($xlsRow, 19, $data['extra']['avg_total_contacts_per_day']);

					break;

				case "109":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$this->xlsWriteLabel($line, 1, $this->view->translate('Pat. Nr'));
					$this->xlsWriteLabel($line, 2, $this->view->translate('Nachname'));
					$this->xlsWriteLabel($line, 3, $this->view->translate('Vorname'));
					$this->xlsWriteLabel($line, 4, $this->view->translate('birthd'));
					$this->xlsWriteLabel($line, 5, $this->view->translate('admissiondate'));
					$this->xlsWriteLabel($line, 6, $this->view->translate('dischargedate'));
					$this->xlsWriteLabel($line, 7, $this->view->translate('bre_sapv'));


					$this->xlsWriteLabel($line + 1, 7, $this->view->translate('shortcut_name'));
					$this->xlsWriteLabel($line + 1, 8, $this->view->translate('shortcut_qty'));
					$this->xlsWriteLabel($line + 1, 9, $this->view->translate('shortcut_price'));
					$this->xlsWriteLabel($line + 1, 10, $this->view->translate('shortcut_total'));

					$line = $line + 1;

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						foreach($row as $field => $value)
						{
							if($field == "bre_sapv")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 7;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										if($keyCell == "shortcut_name")
										{
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($this->view->translate('report_shortcut_name_' . $valCell)));
										}
										else
										{
											$this->xlsWriteNumber($xlsRow, $t, utf8_decode($valCell));
										}


										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}

					$this->xlsWriteLabel($xlsRow, 3, $this->view->translate('Overall amounts for report period'));
					foreach($data['extra']['overall'] as $sh => $sh_details)
					{
						$this->xlsWriteLabel($xlsRow, 7, utf8_decode($this->view->translate('report_shortcut_name_' . $sh)));
						$this->xlsWriteNumber($xlsRow, 8, $sh_details['amount']);
						$this->xlsWriteNumber($xlsRow, 9, $sh_details['price']);
						$this->xlsWriteNumber($xlsRow, 10, round($sh_details['summe'], 2));
						$xlsRow++;
					}

					break;

				case '116':
					$max_columns = max($data['location_count']);
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 0;
					$this->xlsWriteLabel($line, $c, $this->view->translate('no'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('epid'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('lastname'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('firstname'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('sapv_activity'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('sapv_by'));

					if($max_columns != '0')
					{
						for($cols = '1'; $cols <= $max_columns; $cols++)
						{
							$c++;
							$this->xlsWriteLabel($line, $c, $this->view->translate('report_location_start') . $cols);
							$c++;
							$this->xlsWriteLabel($line, $c, $this->view->translate('report_location_name') . $cols);
						}
					}
					else
					{
						$c++;
						$this->xlsWriteLabel($line, $c, $this->view->translate('report_location_start') . '1');
						$c++;
						$this->xlsWriteLabel($line, $c, $this->view->translate('report_location_name') . '1');
					}

					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('dischargedate'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('discharge_methode'));
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						foreach($row as $field => $value)
						{
							$value = str_replace("<br />", "\n", $value);
							if($field == "locations")
							{
								if($max_columns != '0')
								{
									for($s = 0; $s <= ($max_columns - 1); $s++)
									{
										if(strlen($value['location_name'][$s]) > '0')
										{

											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value['location_start'][$s]));
											$t++;
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value['location_name'][$s]));
											$t++;
										}
										else
										{
											$this->xlsWriteLabel($xlsRow, $t, '');
											$t++;
											$this->xlsWriteLabel($xlsRow, $t, '');
											$t++;
										}
									}
								}
								else
								{
									$this->xlsWriteLabel($xlsRow, $t, '');
									$t++;
									$this->xlsWriteLabel($xlsRow, $t, '');
									$t++;
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}
						$xlsRow++;
					}
					break;

				case "144":
				case "127":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$this->xlsWriteLabel($line, 1, $this->view->translate('Pat. Nr'));
					$this->xlsWriteLabel($line, 2, $this->view->translate('Nachname'));
					$this->xlsWriteLabel($line, 3, $this->view->translate('Vorname'));
					$this->xlsWriteLabel($line, 4, $this->view->translate('birthd'));
					$this->xlsWriteLabel($line, 5, $this->view->translate('ptm_users_working_hours'));


					$this->xlsWriteLabel($line + 1, 5, $this->view->translate('user_action'));
					$this->xlsWriteLabel($line + 1, 6, $this->view->translate('date_of_action'));
					$this->xlsWriteLabel($line + 1, 7, $this->view->translate('visit_time_count'));
					$this->xlsWriteLabel($line + 1, 8, $this->view->translate('xt_time_count'));
					$this->xlsWriteLabel($line + 1, 9, $this->view->translate('driving_time_count'));
					$this->xlsWriteLabel($line + 1, 10, $this->view->translate('documentation_time_count'));
					$this->xlsWriteLabel($line + 1, 11, $this->view->translate('coordination_time_count'));

					$line = $line + 1;

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						foreach($row as $field => $value)
						{
							if($field == "patient_actions")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 5;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{

										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}

					break;

				case '129':
					$max_dynamic_cols = $data['extra']['max_dynamic_col'];
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 0;
					$this->xlsWriteLabel($line, $c, $this->view->translate('no'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('epid'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('lastname'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('firstname'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('birthd'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('admissiondate'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('dischargedate'));

					if($max_dynamic_cols != '0')
					{
						for($cols = '1'; $cols <= $max_dynamic_cols; $cols++)
						{
							$c++;
							$this->xlsWriteLabel($line, $c, $this->view->translate('nurse_service') . ' ' . $cols);
						}
					}

					$line++;

					$xlsRow = $line;

					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						$i_row = '1';
						foreach($row as $field => $value)
						{
							if($i_row <= '6')
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
							elseif($max_dynamic_cols != '0' && $i_row == '7')
							{
								for($s = 1; $s <= $max_dynamic_cols; $s++)
								{
									if(strlen(trim($row['nurse_service_' . $s])) > '0')
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($row['nurse_service_' . $s]));
										$t++;
									}
									else
									{
										$this->xlsWriteLabel($xlsRow, $t, '-');
										$t++;
									}
								}
							}
							$i_row++;
						}
						$xlsRow++;
					}
					break;

				case "137":
					$report_language = $this->view->translate($namereport[0]['report'].'_lang');					

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($report_language[$namereport[0]['report']]) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $report_language['reportperiods']);
						$this->xlsWriteLabel($line, 1, $report_language['rfrom']);
						$this->xlsWriteLabel($line, 2, $report_language['rtill']);
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $report_language['no']);
					$this->xlsWriteLabel($line, 1, $report_language['Epid']);
					$this->xlsWriteLabel($line, 2, $report_language['lastname']);
					$this->xlsWriteLabel($line, 3, $report_language['firstname']);
					$this->xlsWriteLabel($line, 4, $report_language['birthd']);
					$this->xlsWriteLabel($line, 5, $report_language['voluntaryworkers']);
					$this->xlsWriteLabel($line, 6, $report_language['users_working_hours_kntf']);


					$this->xlsWriteLabel($line + 1, 6, $report_language['user_action']);
					$this->xlsWriteLabel($line + 1, 7, $report_language['user_action_type']);
					$this->xlsWriteLabel($line + 1, 8, $report_language['date_of_action']);
					$this->xlsWriteLabel($line + 1, 9, $report_language['time_of_action']);
					$this->xlsWriteLabel($line + 1, 10, $report_language['visit_time_duration']);
					$this->xlsWriteLabel($line + 1, 11, $report_language['xt_time_count']);
					$this->xlsWriteLabel($line + 1, 12, $report_language['driving_time_count']);
					$this->xlsWriteLabel($line + 1, 13, $report_language['coordination_time_count']);
					$this->xlsWriteLabel($line + 1, 14, $report_language['block_visitplan_cntf']);
					$this->xlsWriteLabel($line + 1, 15, $report_language['documentation_time_count']);

					$line = $line + 1;

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						foreach($row as $field => $value)
						{
							if($field == "patient_actions")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 6;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{

										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}

					break;

				case "146":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$this->xlsWriteLabel($line, 1, $this->view->translate('Pat. Nr'));
					$this->xlsWriteLabel($line, 2, $this->view->translate('Nachname'));
					$this->xlsWriteLabel($line, 3, $this->view->translate('Vorname'));
					$this->xlsWriteLabel($line, 4, $this->view->translate('birthd'));
					$this->xlsWriteLabel($line, 5, $this->view->translate('ptm_users_working_nordrhein'));


					$this->xlsWriteLabel($line + 1, 5, $this->view->translate('user_action'));
					$this->xlsWriteLabel($line + 1, 6, $this->view->translate('date_of_action'));
					$this->xlsWriteLabel($line + 1, 7, $this->view->translate('visit_time_count'));
					$this->xlsWriteLabel($line + 1, 8, $this->view->translate('xt_time_count'));
					$this->xlsWriteLabel($line + 1, 9, $this->view->translate('driving_time_count'));
					//$this->xlsWriteLabel($line + 1, 10, $this->view->translate('documentation_time_count'));
					$this->xlsWriteLabel($line + 1, 10, $this->view->translate('coordination_time_count'));

					$line = $line + 1;

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						foreach($row as $field => $value)
						{
							if($field == "patient_actions")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 5;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{

										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}

					break;

				case "147":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					$this->xlsWriteLabel($line, 1, $this->view->translate('Nachname'));
					$this->xlsWriteLabel($line, 2, $this->view->translate('Vorname'));

					$this->xlsWriteLabel($line, 3, $this->view->translate('date_of_action'));
					$this->xlsWriteLabel($line, 4, $this->view->translate('time_of_action'));
					$this->xlsWriteLabel($line, 5, utf8_decode($this->view->translate('quality')));


					$line = $line + 1;

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						foreach($row as $field => $value)
						{
							if($field == "patient_actions")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 3;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{

										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}

					break;


				case "139":

					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));

					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
					$line++;

					$this->xlsWriteLabel($line, 5, 'Erstverordnung');
					$this->xlsWriteLabel($line, 6, 'Folgeverordnung');
					$this->xlsWriteLabel($line, 7, 'Status');
					$this->xlsWriteLabel($line, 8, 'Datum');
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							if($field == "sapv")
							{
								$cntSapv = count($value);

								for($s = 0; $s <= $cntSapv; $s++)
								{
									$t = 5;
									$countedSapvCells = count($value[$s]);
									$sc = 1;
									foreach($value[$s] as $keyCell => $valCell)
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
										{
											$xlsRow++;
										}
										$sc++;
										$t++;
									}
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}

						$xlsRow++;
					}
					break;

				case '140':
					$max_columns = max($data['location_count']);
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}

					$c = 0;
					$this->xlsWriteLabel($line, $c, $this->view->translate('no'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('epid'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('lastname'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('firstname'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('sapv_activity'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('sapv_by'));

					if($max_columns != '0')
					{
						for($cols = '1'; $cols <= $max_columns; $cols++)
						{
							$c++;
							$this->xlsWriteLabel($line, $c, $this->view->translate('report_location_start') . $cols);
							$c++;
							$this->xlsWriteLabel($line, $c, $this->view->translate('report_location_name') . $cols);
						}
					}
					else
					{
						$c++;
						$this->xlsWriteLabel($line, $c, $this->view->translate('report_location_start') . '1');
						$c++;
						$this->xlsWriteLabel($line, $c, $this->view->translate('report_location_name') . '1');
					}

					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('dischargedate'));
					$c++;
					$this->xlsWriteLabel($line, $c, $this->view->translate('discharge_methode'));
					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;

						foreach($row as $field => $value)
						{
							$value = str_replace("<br />", "\n", $value);
							if($field == "locations")
							{
								if($max_columns != '0')
								{
									for($s = 0; $s <= ($max_columns - 1); $s++)
									{
										if(strlen($value['location_name'][$s]) > '0')
										{

											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value['location_start'][$s]));
											$t++;
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value['location_name'][$s]));
											$t++;
										}
										else
										{
											$this->xlsWriteLabel($xlsRow, $t, '');
											$t++;
											$this->xlsWriteLabel($xlsRow, $t, '');
											$t++;
										}
									}
								}
								else
								{
									$this->xlsWriteLabel($xlsRow, $t, '');
									$t++;
									$this->xlsWriteLabel($xlsRow, $t, '');
									$t++;
								}
							}
							else
							{
								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								$t++;
							}
						}
						$xlsRow++;
					}
					break;
					
					
					

					case '149':
					
						$motnhs = array(
							'01' => 'Januar',
							'02' => 'Februar',
							'03' => 'März',
							'04' => 'April',
							'05' => 'Mai',
							'06' => 'Juni',
							'07' => 'Juli',
							'08' => 'August',
							'09' => 'September',
							'10' => 'Oktober',
							'11' => 'November',
							'12' => 'Dezember');
							
						$rep_date = $motnhs[date('m', strtotime($data['header_data']['start'][0]))].' '.date('Y', strtotime($data['header_data']['start'][0]));
						
						$this->xlsWriteLabel(3, 0, "Sutundenlohnberechnung : " .$rep_date. "");
						
						$this->xlsWriteLabel(5, 0, "");
						$this->xlsWriteLabel(5, 1, "");
						$this->xlsWriteLabel(5, 2, "Anzahl");
						
						$this->xlsWriteLabel(6, 0,  utf8_decode($this->view->translate('sh_total_sum_b3')));
						$this->xlsWriteLabel(6, 1, $data['data']['sh_total_sum_b3']);
						$this->xlsWriteLabel(6, 2, "");
						
						
						$this->xlsWriteLabel(7, 0,   html_entity_decode(utf8_decode($this->view->translate('sh_total_koordination_b4'))));
						$this->xlsWriteLabel(7, 1, $data['data']['sh_total_koordination_b4']);
						$this->xlsWriteLabel(7, 2, $data['data']['sh_total_koordination_count']);
	 
						$this->xlsWriteLabel(8, 0,   html_entity_decode(utf8_decode($this->view->translate('sh_total_team_meeting_b5'))));
						$this->xlsWriteLabel(8, 1, $data['data']['sh_total_team_meeting_b5']);
						$this->xlsWriteLabel(8, 2, $data['data']['sh_total_team_meeting_count']);
	 
				  
						$this->xlsWriteLabel(9, 0,   html_entity_decode(utf8_decode($this->view->translate('sh_total_doctor_visits_b6'))));
						$this->xlsWriteLabel(9, 1, $data['data']['sh_total_doctor_visits_b6']);
						$this->xlsWriteLabel(9, 2, $data['data']['sh_total_doctor_visits_count']);
	 
						$this->xlsWriteLabel(10, 0,  "");
						$this->xlsWriteLabel(10, 1, $data['data']['sh_total_result_b7']);
						$this->xlsWriteLabel(10, 2, "");
	 
						$this->xlsWriteLabel(11, 0,  utf8_decode($this->view->translate('sh_result_dividedby_nrodays')));
						$this->xlsWriteLabel(11, 1, $data['data']['sh_result_dividedby_nrodays']);
						$this->xlsWriteLabel(11, 2, "");
						
	 
						$this->xlsWriteLabel(12, 0,  utf8_decode($this->view->translate('sh_days_result_divided_by_hours')));
						$this->xlsWriteLabel(12, 1, $data['data']['sh_days_result_divided_by_hours']);
						$this->xlsWriteLabel(12, 2, "");
						
  
	 
						$this->xlsWriteLabel(13, 0, html_entity_decode(utf8_decode($this->view->translate('sh_days_result_hours_percentage'))) );
						$this->xlsWriteLabel(13, 1, $data['data']['sh_days_result_hours_percentage'] );
						$this->xlsWriteLabel(13, 2, "");
						
     
						break;
							
					case "154":
						$line = 0;
						$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
						$line++;
							
						if($data['header_data']['onlyactive'] == '0')
						{
							$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
							$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
							$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
							$line++; //next line
						
							foreach($data['header_data']['start'] as $p_key => $p_value_start)
							{
								$cp = 1;
								$this->xlsWriteLabel($line, $cp, $p_value_start);
								$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
								$line++;
							}
							$line++; //leave one line between periods and table
						}
						
						$c = 1;
						$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					
						$this->xlsWriteLabel($line, 1, $this->view->translate('lastname'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('firstname'));
						$this->xlsWriteLabel($line, 3, $this->view->translate('birthd'));
						$this->xlsWriteLabel($line, 4, $this->view->translate('healthinsurance_name'));
						$this->xlsWriteLabel($line, 5, $this->view->translate('healthinsurance_nr'));
						$this->xlsWriteLabel($line, 6, $this->view->translate('contactperson_1'));
						$this->xlsWriteLabel($line, 7, $this->view->translate('contactperson1_comment'));
						$this->xlsWriteLabel($line, 8, $this->view->translate('contactperson_2'));
						$this->xlsWriteLabel($line, 9, $this->view->translate('contactperson2_comment'));
						
						$this->xlsWriteLabel($line, 10, $this->view->translate('sapv_number'));
						$this->xlsWriteLabel($line, 11, $this->view->translate('verordnung_from'));
						$this->xlsWriteLabel($line, 12, $this->view->translate('verordnung_to'));
						
						
						$line = $line + 1;
						
						$line++;
						$xlsRow = $line;
						//print_r($data['data']);exit;
						foreach($data['data'] as $key => $row)
						{//print_r($row);exit;
							$i++;
							$this->xlsWriteNumber($xlsRow, 0, "$i");
							$t = 1;
							
							foreach($row as $field => $value)
							{
								$value = str_replace("<br />", "\n", $value);
								if($field == "sapv")
								{
									$cntSapv = count($value);
									
									for($s = 0; $s <= $cntSapv; $s++)
									{
										$t = 10;
										$countedSapvCells = count($value[$s]);
										$sc = 1;
										foreach($value[$s] as $keyCell => $valCell)
										{

											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));

											if($sc == $countedSapvCells && $s != ($cntSapv - 1))
											{
												$xlsRow++;
											}
											$sc++;
											$t++;
										}
									}
								}
								else 
								{
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
									$t++;
								}
							}
							
							$xlsRow++;
							
						}
						
					break;
					
							
					case "157":
					case "158":
						$line = 0;
						$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
						$line++;
							
						if($data['header_data']['onlyactive'] == '0')
						{
							$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
							$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
							$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
							$line++; //next line
						
							foreach($data['header_data']['start'] as $p_key => $p_value_start)
							{
								$cp = 1;
								$this->xlsWriteLabel($line, $cp, $p_value_start);
								$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
								$line++;
							}
							$line++; //leave one line between periods and table
						}
						
						$c = 1;
						$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					
						$this->xlsWriteLabel($line, 1, $this->view->translate('heimnetz_familydoc'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('heimnetz_location'));
						$this->xlsWriteLabel($line, 3, $this->view->translate('heimnetz_amount'));
						$line = $line + 1;
						
						$line++;
						$xlsRow = $line;
						//print_r($data['data']);exit;
						foreach($data['data'] as $key => $row)
						{//print_r($row);exit;
							$i++;
							$this->xlsWriteNumber($xlsRow, 0, "$i");
							$t = 1;
							
							foreach($row as $field => $value)
							{
    					       if($field !="user_last_name"){
    								if($field == "locations")
    								{
    									$cntSapv = count($value);
    									
    									for($s = 0; $s <= $cntSapv; $s++)
    									{
    										$t = 2;
    										$countedSapvCells = count($value[$s]);
    										$sc = 1;
    										foreach($value[$s] as $keyCell => $valCell)
    										{
    
    											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));
    
    											if($sc == $countedSapvCells && $s != ($cntSapv - 1))
    											{
    												$xlsRow++;
    											}
    											$sc++;
    											$t++;
    										}
    									}
    								}
    								else 
    								{
    									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
    									$t++;
    								}
    							}
							}
							
							$xlsRow++;
						}
						
						$this->xlsWriteLabel($xlsRow, 2, $this->view->translate('sum'));
						$this->xlsWriteNumber($xlsRow, 3, $data['extra']['sum']);
						
					break;
					
					case "159":
						$line = 0;
						$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
						$line++;
							
						if($data['header_data']['onlyactive'] == '0')
						{
							$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
							$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
							$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
							$line++; //next line
						
							foreach($data['header_data']['start'] as $p_key => $p_value_start)
							{
								$cp = 1;
								$this->xlsWriteLabel($line, $cp, $p_value_start);
								$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
								$line++;
							}
							$line++; //leave one line between periods and table
						}

						$xlsRow = $line;
//print_r($data['data']);
//exit;
						foreach($data['data'] as $id_location => $row)
						{
							$i = "1";
							$ta = "1";
							$td = "1";
							$excluded_active_cols = array('dischargedate', 'discharge_methode','patient_last_name');
							$excluded_cols = array('patient_last_name');

							if(!empty($row['active']))
							{
								$this->xlsWriteLabel($xlsRow, 0, utf8_decode($this->view->translate('heimnetz_homegroup_nursing_active')));
								$xlsRow++;
								$this->generate_table_header($xlsRow, $ta, $columns, $excluded_active_cols);
								$xlsRow++;

								foreach($row['active'] as $field => $value_a)
								{
									$this->xlsWriteNumber($xlsRow, 0, "$i");
									$ta = "1";
									foreach($value_a as $ka_val => $va_val)
									{
										if($ka_val != "epid" && $ka_val != "ipid" && !in_array($ka_val, $excluded_active_cols))
										{
											$this->xlsWriteLabel($xlsRow, $ta, utf8_decode($va_val));
											$ta++;
										}
									}
									$i++;
									$xlsRow++;
								}
							}
							$xlsRow++;

							if(!empty($row['discharged']))
							{
								$this->xlsWriteLabel($xlsRow, 0, utf8_decode($this->view->translate('heimnetz_homegroup_nursing_discharged')));
								$xlsRow++;
								$this->generate_table_header($xlsRow, $td, $columns,$excluded_cols);
								$xlsRow++;

								foreach($row['discharged'] as $field => $value)
								{
									$this->xlsWriteNumber($xlsRow, 0, "$i");
									$td = "1";
									foreach($value as $k_val => $v_val)
									{
										if($k_val != "epid" && $k_val != "ipid" && !in_array($k_val, $excluded_cols))
										{
											$this->xlsWriteLabel($xlsRow, $td, utf8_decode($v_val));
											$td++;
										}
									}
									$i++;
									$xlsRow++;
								}
							}
							$xlsRow++;
							$xlsRow++;
						}

					break;

					case '164':
                        $line = 0;
                        $this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
                        $line ++;
                        
                        if($data['header_data']['onlyactive'] == '0')
                        {
                            $this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
                            $this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
                            $this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
                            $line++; //next line
                        
                            foreach($data['header_data']['start'] as $p_key => $p_value_start)
                            {
                                $cp = 1;
                                $this->xlsWriteLabel($line, $cp, $p_value_start);
                                $this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
                                $line++;
                            }
                            $line++; //leave one line between periods and table
                        }
                        
                        $xlsRow = $line;
                        $c = 1;
                        $this->xlsWriteLabel($line, 0, $this->view->translate('no'));
                        $this->xlsWriteLabel($line, 1, $this->view->translate('lastname'));
                        $this->xlsWriteLabel($line, 2, $this->view->translate('firstname'));
                        $this->xlsWriteLabel($line, 3, utf8_decode($this->view->translate('activities_and_training')));
                        $line ++;
                        $this->xlsWriteLabel($line, 3, $this->view->translate('date'));
                        $this->xlsWriteLabel($line, 4, $this->view->translate('vw_activity_duration'));
                        $this->xlsWriteLabel($line, 5, $this->view->translate('name'));
                        $line ++;
                        
                        $xlsRow = $line;
                        foreach ($data['data'] as $key => $row) {
                            $i ++;
                            $this->xlsWriteNumber($xlsRow, 0, "$i");
                            $t = 1;
                            foreach ($row as $field => $value) {
                                if ($field == "activities") {
                                    $cntSapv = count($value);
                                    
                                    for ($s = 0; $s <= $cntSapv; $s ++) {
                                        $t = 3;
                                        $countedSapvCells = count($value[$s]);
                                        $sc = 1;
                                        foreach ($value[$s] as $keyCell => $valCell) {
                                            $this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));
                                            
                                            if ($sc == $countedSapvCells && $s != ($cntSapv - 1)) {
                                                $xlsRow ++;
                                            }
                                            $sc ++;
                                            $t ++;
                                        }
                                    }
                                } else {
                                    $this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
                                    $t ++;
                                }
                            }
                            
                            $xlsRow ++;
                        }
                
                break;
					

                case "166":
                
                    $line = 0;
                    $this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
                    $line++;
                
                
                    if($data['header_data']['onlyactive'] == '0')
                    {
                        $this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
                        $this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
                        $this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
                        $line++; //next line
                
                        foreach($data['header_data']['start'] as $p_key => $p_value_start)
                        {
                            $cp = 1;
                            $this->xlsWriteLabel($line, $cp, $p_value_start);
                            $this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
                            $line++;
                        }
                        $line++; //leave one line between periods and table
                    }
                
                    $c = 1;
                    $this->xlsWriteLabel($line, 0, $this->view->translate('no'));
                    $this->xlsWriteLabel($line, 1, $this->view->translate('Pat. Nr'));
                    $this->xlsWriteLabel($line, 2, $this->view->translate('Nachname'));
                    $this->xlsWriteLabel($line, 3, $this->view->translate('Vorname'));
                    $this->xlsWriteLabel($line, 4, $this->view->translate('birthd'));
                    $this->xlsWriteLabel($line, 5, $this->view->translate('users_working_hours_kntf'));
                    $this->xlsWriteLabel($line, 10, $this->view->translate('rp_pat_dead'));
                    $this->xlsWriteLabel($line, 11, $this->view->translate('rpassessment'));
                
                
                    $this->xlsWriteLabel($line + 1, 5, $this->view->translate('user_action'));
                    $this->xlsWriteLabel($line + 1, 6, $this->view->translate('user_action_type'));
                    $this->xlsWriteLabel($line + 1, 7, $this->view->translate('date_of_action'));
                    $this->xlsWriteLabel($line + 1, 8, $this->view->translate('time_of_action'));
                    $this->xlsWriteLabel($line + 1, 9, $this->view->translate('visit_time_duration'));
                   // $this->xlsWriteLabel($line + 1, 10, $this->view->translate('xt_time_count'));
                   // $this->xlsWriteLabel($line + 1, 11, $this->view->translate('driving_time_count'));
                   // $this->xlsWriteLabel($line + 1, 12, $this->view->translate('coordination_time_count'));
                
                    $line = $line + 1;
                
                    $line++;
                
                    $xlsRow = $line;
                    foreach($data['data'] as $key => $row)
                    {
                        $i++;
                        $this->xlsWriteNumber($xlsRow, 0, "$i");
                        $t = 1;
                
                        foreach($row as $field => $value)
                        {
                            if($field == "patient_actions")
                            {
                                $cntSapv = count($value);
                
                                for($s = 0; $s <= $cntSapv; $s++)
                                {
                                    $t = 5;
                                    $countedSapvCells = count($value[$s]);
                                    $sc = 1;
                                    foreach($value[$s] as $keyCell => $valCell)
                                    {
                
                                        $this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));
                
                                        if($sc == $countedSapvCells && $s != ($cntSapv - 1))
                                        {
                                        $xlsRow++;
                                        }
                                        $sc++;
                                        $t++;
                                    }
                                }
                            }
                            else
                            {
                                if($field == "rp_pat_dead")
                                {
                                    $t = 10;
                                } 
                                elseif($field == "rpassessment")
                                {
                                    $t = 11;
                                } 
                                else
                                {
                                    $t = $t;
                                }
   								$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
                                
        						$t++;
        						
        						
                            }
                		}
                		$xlsRow++;
              		}
                
				break;
                

				case '167':
				    $max_columns = max($data['location_count']);
				    $line = 0;
				    $this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($this->view->translate($namereport[0]['report'])) . "");
				    $line++;
				
				
				    if($data['header_data']['onlyactive'] == '0')
				    {
				        $this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
				        $this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
				        $this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
				        $line++; //next line
				
				        foreach($data['header_data']['start'] as $p_key => $p_value_start)
				        {
				            $cp = 1;
				            $this->xlsWriteLabel($line, $cp, $p_value_start);
				            $this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
				            $line++;
				        }
				        $line++; //leave one line between periods and table
				    }
				
				    $c = 0;
				    $this->xlsWriteLabel($line, $c, $this->view->translate('no'));
				    $c++;
				    $this->xlsWriteLabel($line, $c, $this->view->translate('epid'));
				    $c++;
				    $this->xlsWriteLabel($line, $c, $this->view->translate('lastname'));
				    $c++;
				    $this->xlsWriteLabel($line, $c, $this->view->translate('firstname'));
				    $c++;
				    $this->xlsWriteLabel($line, $c, $this->view->translate('sapv_activity'));
				    $c++;
				    $this->xlsWriteLabel($line, $c, $this->view->translate('sapv_by'));
				
				    if($max_columns != '0')
				    {
				        for($cols = '1'; $cols <= $max_columns; $cols++)
				        {
				            $c++;
				            $this->xlsWriteLabel($line, $c, $this->view->translate('report_location_start') . $cols);
				            $c++;
				            $this->xlsWriteLabel($line, $c, $this->view->translate('report_location_name') . $cols);
				}
				}
				else
				    {
				        $c++;
				        $this->xlsWriteLabel($line, $c, $this->view->translate('report_location_start') . '1');
				        $c++;
				        $this->xlsWriteLabel($line, $c, $this->view->translate('report_location_name') . '1');
				}
				
				$c++;
				$this->xlsWriteLabel($line, $c, $this->view->translate('dischargedate'));
				$c++;
				$this->xlsWriteLabel($line, $c, $this->view->translate('discharge_methode'));
					$line++;
				
				$xlsRow = $line;
				foreach($data['data'] as $key => $row)
				{
				    $i++;
				    $this->xlsWriteNumber($xlsRow, 0, "$i");
				    $t = 1;
				
				    foreach($row as $field => $value)
				    {
				    $value = str_replace("<br />", "\n", $value);
				    if($field == "locations")
				    {
				    if($max_columns != '0')
				    {
				        for($s = 0; $s <= ($max_columns - 1); $s++)
				        {
				            if(strlen($value['location_name'][$s]) > '0')
				                {
				
				                $this->xlsWriteLabel($xlsRow, $t, utf8_decode($value['location_start'][$s]));
				                $t++;
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value['location_name'][$s]));
															$t++;
										}
															    else
															    {
															    $this->xlsWriteLabel($xlsRow, $t, '');
															    $t++;
															        $this->xlsWriteLabel($xlsRow, $t, '');
															        $t++;
															    }
				            }
				        }
				        else
				        {
				            $this->xlsWriteLabel($xlsRow, $t, '');
				            $t++;
				            $this->xlsWriteLabel($xlsRow, $t, '');
				            $t++;
				        }
				    }
				    else
				    {
				        $this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
				        $t++;
				    }
				    }
				    $xlsRow++;
				}
				break;
				
				case "184":
					$report_language = $this->view->translate($namereport[0]['report'].'_lang');
				
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($report_language[$namereport[0]['report']]) . "");
					$line++;
				
				
					if($data['header_data']['onlyactive'] == '0')
					{
						$this->xlsWriteLabel($line, 0, $report_language['reportperiods']);
						$this->xlsWriteLabel($line, 1, $report_language['rfrom']);
						$this->xlsWriteLabel($line, 2, $report_language['rtill']);
						$line++; //next line
				
						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}
				
					$c = 1;
					$this->xlsWriteLabel($line, 0, $report_language['no']);
				
					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($report_language[$column['column_name']])));
						$c++;
					}
					$line++;
					 
					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							$value = str_replace("<br />", "\n", $value);
							$value = str_replace("<hr/>", "\n", $value);
							if(is_numeric($value))
							{ //if numeric format as number
								if($field == 'alter')
								{
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value) . " Jahre");
								}
								else if($field == "firstname" || $field == "lastname" || $field == "memo")
								{
									//weird stuff going if first name/last name or memo is numeric = true(ISPC-1243)
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								}
								else
								{
									$this->xlsWriteNumber($xlsRow, $t, $value);
								}
							}
							else
							{
								if($field == 'description' || $field == 'diagnosis' || $field == 'maindiagnosis' || $field == 'ecog') //7,20,71,72,115
								{
									if(is_array($value))
									{
										 
										$value = implode(', ', $value);
									}
									 
									$this->xlsWriteLabel($xlsRow, $t, html_entity_decode(utf8_decode($value)));
								}
								else
								{
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								}
							}
							$t++;
						}
						 
						$xlsRow++;
					}
					break;
					
					case "190":
						$report_language = $this->view->translate($namereport[0]['report'].'_lang');
					
						$line = 0;
						$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($report_language[$namereport[0]['report']]) . "");
						$line++;
					
					
						if($data['header_data']['onlyactive'] == '0')
						{
							$this->xlsWriteLabel($line, 0, $report_language['reportperiods']);
							$this->xlsWriteLabel($line, 1, $report_language['rfrom']);
							$this->xlsWriteLabel($line, 2, $report_language['rtill']);
							$line++; //next line
					
							foreach($data['header_data']['start'] as $p_key => $p_value_start)
							{
								$cp = 1;
								$this->xlsWriteLabel($line, $cp, $p_value_start);
								$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
								$line++;
							}
							$line++; //leave one line between periods and table
						}
					
						$c = 1;
						$this->xlsWriteLabel($line, 0, $report_language['no']);
					
						foreach($columns as $column)
						{
							$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($report_language[$column['column_name']])));
							$c++;
						}
						$line++;
					
						$xlsRow = $line;
						foreach($data['data'] as $key => $row)
						{
							$i++;
							$this->xlsWriteNumber($xlsRow, 0, "$i");
							$t = 1;
							foreach($row as $field => $value)
							{
								$value = str_replace("<br />", "\n", $value);
								$value = str_replace("<hr/>", "\n", $value);
								if(is_numeric($value))
								{ //if numeric format as number
									if($field == 'alter')
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value) . " Jahre");
									}
									else if($field == "firstname" || $field == "lastname" || $field == "memo")
									{
										//weird stuff going if first name/last name or memo is numeric = true(ISPC-1243)
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
									}
									else
									{
										$this->xlsWriteNumber($xlsRow, $t, $value);
									}
								}
								else
								{
									if($field == 'description' || $field == 'diagnosis' || $field == 'maindiagnosis' || $field == 'ecog') //7,20,71,72,115
									{
										if(is_array($value))
										{
												
											$value = implode(', ', $value);
										}
					
										$this->xlsWriteLabel($xlsRow, $t, html_entity_decode(utf8_decode($value)));
									}
									else
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
									}
								}
								$t++;
							}
								
							$xlsRow++;
						}
						break;
						
						case "3":
							$report_language = $this->view->translate($namereport[0]['report'].'_lang');
								
							$line = 0;
							$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($report_language[$namereport[0]['report']]) . "");
							$line++;
								
								
							if($data['header_data']['onlyactive'] == '0')
							{
								$this->xlsWriteLabel($line, 0, $report_language['reportperiods']);
								$this->xlsWriteLabel($line, 1, $report_language['rfrom']);
								$this->xlsWriteLabel($line, 2, $report_language['rtill']);
								$line++; //next line
									
								foreach($data['header_data']['start'] as $p_key => $p_value_start)
								{
									$cp = 1;
									$this->xlsWriteLabel($line, $cp, $p_value_start);
									$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
									$line++;
								}
								$line++; //leave one line between periods and table
							}
								
							$c = 1;
							$this->xlsWriteLabel($line, 0, $report_language['no']);
								
							foreach($columns as $column)
							{
								$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($report_language[$column['column_name']])));
								$c++;
							}
							$line++;
								
							$xlsRow = $line;
							foreach($data['data'] as $key => $row)
							{
								$i++;
								$this->xlsWriteNumber($xlsRow, 0, "$i");
								$t = 1;
								foreach($row as $field => $value)
								{
									$value = str_replace("<br />", "\n", $value);
									$value = str_replace("<hr/>", "\n", $value);
									if(is_numeric($value))
									{ //if numeric format as number
										if($field == 'alter')
										{
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value) . " Jahre");
										}
										else if($field == "firstname" || $field == "lastname" || $field == "memo")
										{
											//weird stuff going if first name/last name or memo is numeric = true(ISPC-1243)
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
										}
										else
										{
											$this->xlsWriteNumber($xlsRow, $t, $value);
										}
									}
									else
									{
										if($field == 'description' || $field == 'diagnosis' || $field == 'maindiagnosis' || $field == 'ecog') //7,20,71,72,115
										{
											if(is_array($value))
											{
						
												$value = implode(', ', $value);
											}
												
											$this->xlsWriteLabel($xlsRow, $t, html_entity_decode(utf8_decode($value)));
										}
										else
										{
											$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
										}
									}
									$t++;
								}
						
								$xlsRow++;
							}
							break;
						
						case "191":
							$report_language = $this->view->translate($namereport[0]['report'].'_lang');
								
							$line = 0;
							$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode($report_language[$namereport[0]['report']]) . "");
							$line++;
						
						
							if($data['header_data']['onlyactive'] == '0')
							{
								$this->xlsWriteLabel($line, 0, $report_language['reportperiods']);
								$this->xlsWriteLabel($line, 1, $report_language['rfrom']);
								$this->xlsWriteLabel($line, 2, $report_language['rtill']);
								$line++; //next line
						
								foreach($data['header_data']['start'] as $p_key => $p_value_start)
								{
									$cp = 1;
									$this->xlsWriteLabel($line, $cp, $p_value_start);
									$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
									$line++;
								}
								$line++; //leave one line between periods and table
							}
						
							$c = 1;
							$this->xlsWriteLabel($line, 0, $report_language['no']);
						
							foreach($columns as $column)
							{
								$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($report_language[$column['column_name']])));
								$c++;
							}
							$line++;
						
							$this->xlsWriteLabel($line, 2, $report_language['beginvisit']);
							$this->xlsWriteLabel($line, 3, $report_language['endvisit']);
							$this->xlsWriteLabel($line, 4, $report_language['duration']);
							$this->xlsWriteLabel($line, 5, $report_language['duration_nightshift']);
							$this->xlsWriteLabel($line, 6, $report_language['distance']);
							$this->xlsWriteLabel($line, 7, $report_language['visit_reason']);
							$line++;
						
							$xlsRow = $line;
							foreach($data['data'] as $key => $row)
							{
								$i++;
								$this->xlsWriteNumber($xlsRow, 0, "$i");
								$t = 1;
								foreach($row as $field => $value)
								{
									if($field == "visits")
									{
										$cntSapv = count($value);
						
										for($s = 0; $s <= $cntSapv; $s++)
										{
											$t = 2;
											$countedSapvCells = count($value[$s]);
											$sc = 1;
											foreach($value[$s] as $keyCell => $valCell)
											{
												$this->xlsWriteLabel($xlsRow, $t, utf8_decode($valCell));
						
												if($sc == $countedSapvCells && $s != ($cntSapv - 1))
												{
													$xlsRow++;
												}
												$sc++;
												$t++;
											}
										}
									}
									else
									{
										$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
										$t++;
									}
								}
						
								$xlsRow++;
							}
							break;
				
				//lmu rufbereit, elim html-chars
				case "169":
				    foreach($data['data'] as $key=>$row)
				    {
				        foreach($row as $field=>$value) {
				            $data['data'][$key][$field]=str_replace("<b>","",$data['data'][$key][$field]);
				            $data['data'][$key][$field]=str_replace("</b>","",$data['data'][$key][$field]);
				            $data['data'][$key][$field]=str_replace("</span>","",$data['data'][$key][$field]);
				            $data['data'][$key][$field]=str_replace('<span style="font-size:8px;">',"",$data['data'][$key][$field]);
				            $data['data'][$key][$field]=str_replace('<span style="font-size:9px;">',"",$data['data'][$key][$field]);
				            $data['data'][$key][$field]=str_replace('<br>',"\n",$data['data'][$key][$field]);
				            $data['data'][$key][$field]=str_replace('<span>',"",$data['data'][$key][$field]);
				        }
				    }
				    	
				
                
				default:
					$line = 0;
					$this->xlsWriteLabel($line, 0, "Name des Berichts: " . utf8_decode(html_entity_decode($this->view->translate($namereport[0]['report']))) . "");
					$line++;


					if($data['header_data']['onlyactive'] == '0' && !empty($data['header_data']['year']))
					{
						$this->xlsWriteLabel($line, 0, $this->view->translate('reportperiods'));
						$this->xlsWriteLabel($line, 1, $this->view->translate('rfrom'));
						$this->xlsWriteLabel($line, 2, $this->view->translate('rtill'));
						$line++; //next line

						foreach($data['header_data']['start'] as $p_key => $p_value_start)
						{
							$cp = 1;
							$this->xlsWriteLabel($line, $cp, $p_value_start);
							$this->xlsWriteLabel($line, ($cp + 1), $data['header_data']['end'][$p_key]);
							$line++;
						}
						$line++; //leave one line between periods and table
					}


					$c = 1;
					$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
					foreach($columns as $column)
					{
						$this->xlsWriteLabel($line, $c, utf8_decode($this->view->translate($column['column_name'])));
						$c++;
					}

					$line++;

					$xlsRow = $line;
					foreach($data['data'] as $key => $row)
					{
						$i++;
						$this->xlsWriteNumber($xlsRow, 0, "$i");
						$t = 1;
						foreach($row as $field => $value)
						{
							$value = str_replace("<br />", "\n", $value);
							$value = str_replace("<hr/>", "\n", $value);
							if(is_numeric($value))
							{ //if numeric format as number
								if($field == 'alter')
								{
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value) . " Jahre");
								}
								else if($field == "firstname" || $field == "lastname" || $field == "memo")
								{
									//weird stuff going if first name/last name or memo is numeric = true(ISPC-1243)
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								}
								else
								{
									$this->xlsWriteNumber($xlsRow, $t, $value);
								}
							}
							else
							{
								if($field == 'description' || $field == 'diagnosis' || $field == 'maindiagnosis' || $field == 'ecog') //7,20,71,72,115
								{
									if(is_array($value))
									{

										$value = implode(', ', $value);
									}

									$this->xlsWriteLabel($xlsRow, $t, html_entity_decode(utf8_decode($value)));
								}
								else
								{
									$this->xlsWriteLabel($xlsRow, $t, utf8_decode($value));
								}
							}
							$t++;
						}

						$xlsRow++;
					}
					switch($report)
					{

						case '1':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('sum'));
							$this->xlsWriteNumber($xlsRow, 2, $data['extra']['sum']);
							break;

						case '22':
						case '23':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('sum'));
							$this->xlsWriteNumber($xlsRow, 2, $data['extra']['sum']);
							break;

						case '25':
							$this->xlsWriteLabel($xlsRow, 0, "");
							$this->xlsWriteLabel($xlsRow, 1, "");
							$this->xlsWriteLabel($xlsRow, 2, "");
							$this->xlsWriteLabel($xlsRow, 3, $this->view->translate('sum'));
							$this->xlsWriteNumber($xlsRow, 4, $data['extra']['sum']);
							break;

						case '26':
							$this->xlsWriteLabel($xlsRow, 4, "Summe");
							$this->xlsWriteLabel($xlsRow, 5, "Koordination->" . $data['extra']['status2'] . "\nBeratung->" . $data['extra']['status1'] . "\nTeilversorgung->" . $data['extra']['status3'] . "\nVollversorgung->" . $data['extra']['status4'] . "");
							break;


						case '17':
							$this->xlsWriteLabel($xlsRow, 4, $this->view->translate('sum'));
							$this->xlsWriteLabel($xlsRow, 5, $data['extra']['sum_min']);
							$this->xlsWriteNumber($xlsRow, 6, $data['extra']['sum_km']);
							$this->xlsWriteNumber($xlsRow, 7, $data['extra']['sum_rides']);
							break;
						case '18':

							$this->xlsWriteLabel($xlsRow, 0, "");
							$this->xlsWriteLabel($xlsRow, 1, "");
							$this->xlsWriteLabel($xlsRow, 2, "");
							$this->xlsWriteLabel($xlsRow, 3, "");
							$this->xlsWriteLabel($xlsRow, 4, "");
							$this->xlsWriteLabel($xlsRow, 5, '' . $data['extra']['totalactivity'] . ' / ' . $data['extra']['averageactivity'] . '');
							$this->xlsWriteLabel($xlsRow, 6, '' . $data['extra']['totalminutes'] . ' / ' . $data['extra']['averageminutes'] . '');
							break;

						case '3':
							$this->xlsWriteLabel($xlsRow, 0, "");
							$this->xlsWriteLabel($xlsRow, 1, "");
							$this->xlsWriteLabel($xlsRow, 2, "");
							$this->xlsWriteLabel($xlsRow, 3, "");
							$this->xlsWriteLabel($xlsRow, 4, "");
							$this->xlsWriteLabel($xlsRow, 5, "");
							$this->xlsWriteLabel($xlsRow, 6, $this->view->translate('Durchschnitt Alter'));
							$this->xlsWriteNumber($xlsRow, 7, $data['extra']['avg_die']);
							$this->xlsWriteLabel($xlsRow, 8, " ");
							$this->xlsWriteLabel($xlsRow, 9, " ");
							$this->xlsWriteLabel($xlsRow, 10, " ");
							$this->xlsWriteLabel($xlsRow, 11, $this->view->translate('Durchschnittliche Behandlungsdauer'));
							$this->xlsWriteNumber($xlsRow, 12, $data['extra']['avg_treatment']);
							break;

						case '4':
							$this->xlsWriteLabel($xlsRow, 9, $this->view->translate('Durchschnittliche Behandlungsdauer'));
							$this->xlsWriteNumber($xlsRow, 10, $data['extra']['avg_treatment']);
							break;
						case '143':
							$this->xlsWriteLabel($xlsRow, 9, $this->view->translate('Durchschnittliche Behandlungsdauer Kassenpatient'));
							$this->xlsWriteNumber($xlsRow, 10, $data['extra']['avg_treatment']);
							break;
						case '11':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('sum'));
							$this->xlsWriteNumber($xlsRow, 2, $data['extra']['total']);
							break;
						case '75':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Visits_by_Ehrenamtliche'));
							$this->xlsWriteLabel($xlsRow, 2, $data['extra']['ehrenamtliche_visits'] . ' (' . $data['extra']['ehrenamtliche_percentage'] . ') ');
							$this->xlsWriteLabel($xlsRow + 1, 1, $this->view->translate('Visits_by_Koordinator'));
							$this->xlsWriteLabel($xlsRow + 1, 2, $data['extra']['koordinator_visits'] . ' (' . $data['extra']['koordinator_percentage'] . ') ');

							$this->xlsWriteLabel($xlsRow + 2, 1, $this->view->translate('Average_pat_dayts'));
							$this->xlsWriteLabel($xlsRow + 2, 6, $data['extra']['koordinator_average_amount']);
							$this->xlsWriteLabel($xlsRow + 2, 6, $data['extra']['koordinator_average_amount']);
							$this->xlsWriteLabel($xlsRow + 2, 9, $data['extra']['ehrenamtliche_average_amount']);
							break;
						case '77':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Nr_dead_patients'));
							$this->xlsWriteNumber($xlsRow, 2, $data['extra']['sum']);
							break;

						case '78':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Average'));
							$this->xlsWriteNumber($xlsRow, 4, $data['extra']['expectancy_average']);
							$xlsRow++;
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Median'));
							$this->xlsWriteNumber($xlsRow, 4, $data['extra']['expectancy_median']);
							break;

						case '80':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Average'));
							$this->xlsWriteNumber($xlsRow, 4, $data['extra']['average']);
							$this->xlsWriteLabel($xlsRow + 1, 1, $this->view->translate('Median'));
							$this->xlsWriteNumber($xlsRow + 1, 4, $data['extra']['median']);
							break;

						case '82':

							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('sum'));
							$this->xlsWriteNumber($xlsRow, 4, $data['extra']['sum_km']);
							$this->xlsWriteNumber($xlsRow, 5, $data['extra']['sum_time']);
							$this->xlsWriteNumber($xlsRow, 6, $data['extra']['sum_rides']);

							$this->xlsWriteLabel($xlsRow + 1, 1, $this->view->translate('Average'));
							$this->xlsWriteNumber($xlsRow + 1, 4, $data['extra']['average_km']);
							$this->xlsWriteNumber($xlsRow + 1, 5, $data['extra']['average_time']);
							$this->xlsWriteLabel($xlsRow + 1, 6, '');
							$this->xlsWriteNumber($xlsRow + 1, 7, $data['extra']['average_treateddays']);

							$this->xlsWriteLabel($xlsRow + 2, 1, $this->view->translate('Median'));
							$this->xlsWriteNumber($xlsRow + 2, 4, $data['extra']['median_km']);
							$this->xlsWriteNumber($xlsRow + 2, 5, $data['extra']['median_time']);
							$this->xlsWriteLabel($xlsRow + 2, 6, '');
							$this->xlsWriteNumber($xlsRow + 2, 7, $data['extra']['median_treateddays']);

							break;

						case '83':

							$this->xlsWriteLabel($xlsRow, 3, $this->view->translate('sum'));
							$this->xlsWriteNumber($xlsRow, 4, $data['extra']['sum_consulting_minutes']);
							$this->xlsWriteNumber($xlsRow, 5, $data['extra']['sum_coordination_minutes']);
							$this->xlsWriteNumber($xlsRow, 6, $data['extra']['sum_visits_minutes']);
							$this->xlsWriteNumber($xlsRow, 7, $data['extra']['sum_active_days']);
							$this->xlsWriteNumber($xlsRow, 8, $data['extra']['sum_patient_minutes']);

							$this->xlsWriteLabel($xlsRow + 1, 3, $this->view->translate('Average'));
							$this->xlsWriteNumber($xlsRow + 1, 4, $data['extra']['average_consulting_minutes']);
							$this->xlsWriteNumber($xlsRow + 1, 5, $data['extra']['average_coordination_minutes']);
							$this->xlsWriteNumber($xlsRow + 1, 6, $data['extra']['average_visits_minutes']);
							$this->xlsWriteNumber($xlsRow + 1, 7, $data['extra']['average_active_days']);
							$this->xlsWriteNumber($xlsRow + 1, 8, $data['extra']['average_patient_minutes']);

							$this->xlsWriteLabel($xlsRow + 2, 3, $this->view->translate('Median'));
							$this->xlsWriteNumber($xlsRow + 2, 4, $data['extra']['median_consulting_minutes']);
							$this->xlsWriteNumber($xlsRow + 2, 5, $data['extra']['median_coordination_minutes']);
							$this->xlsWriteNumber($xlsRow + 2, 6, $data['extra']['median_visits_minutes']);
							$this->xlsWriteNumber($xlsRow + 2, 7, $data['extra']['median_active_days']);
							$this->xlsWriteNumber($xlsRow + 2, 8, $data['extra']['median_patient_minutes']);
							break;

						case '84':


							break;
						case '112':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Nr_dead_patients'));
							$this->xlsWriteNumber($xlsRow, 2, $data['extra']['sum']);
							break;

						case '119':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Median'));
							$this->xlsWriteNumber($xlsRow, 7, $data['extra']['median']);
							break;


						case '150':
							$this->xlsWriteLabel($xlsRow, 0, "");
							$this->xlsWriteLabel($xlsRow, 1, "");
							$this->xlsWriteLabel($xlsRow, 2, "");
							$this->xlsWriteLabel($xlsRow, 3, "");
							$this->xlsWriteLabel($xlsRow, 4, "");
							$this->xlsWriteLabel($xlsRow, 5, "");
							$this->xlsWriteLabel($xlsRow, 6, $this->view->translate('Durchschnitt Alter'));
							$this->xlsWriteNumber($xlsRow, 7, $data['extra']['avg_die']);
							$this->xlsWriteLabel($xlsRow, 8, " ");
							$this->xlsWriteLabel($xlsRow, 9, " ");
							$this->xlsWriteLabel($xlsRow, 10, " ");
							$this->xlsWriteLabel($xlsRow, 11, " ");
							$this->xlsWriteLabel($xlsRow, 12, $this->view->translate('Durchschnittliche Behandlungsdauer'));
							$this->xlsWriteNumber($xlsRow, 13, $data['extra']['avg_treatment']);
							break;
							
						case '163':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Sum'));
							$this->xlsWriteNumber($xlsRow, 3, $data['extra']['sum']);
							$this->xlsWriteNumber($xlsRow, 4, $data['extra']['sum_driving']);
							break;
							
						case '171':
							$this->xlsWriteLabel($xlsRow, 1, $this->view->translate('Gesamt'));
							$this->xlsWriteNumber($xlsRow, 2, $data['extra']['overall_hb_amount']);
							$this->xlsWriteNumber($xlsRow, 4, $data['extra']['overall_tp_amount']);
							break;
						case '133':
							$this->xlsWriteLabel($xlsRow, 4, $this->view->translate('sum'));
							$this->xlsWriteNumber($xlsRow, 5, $data['extra']['sum']);
							break;
					}

					break;
			}

			$this->xlsEOF();

			$reportdetails = $this->fetchReportDetailsAction($report);

			$file = str_replace(" ", "_", $this->view->translate($reportdetails[0]['report']));
			$fileName = html_entity_decode($file . ".xls");
			//$fileName = iconv("UTF-8", "Windows-1252", $fileName);
			//$fileName = mb_convert_encoding($fileName, "utf-16", "utf-8");
			//if you use utf-16 for filename, win7 IE10 will recognize the excel header and present a popup save/open file of type excel

			header("Pragma: public");
			header("Expires: 0");
			header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
			header("Content-Type: application/force-download");
			header("Content-Type: application/octet-stream");
			header("Content-type: application/vnd.ms-excel; charset=utf-8");
			header("Content-Disposition: attachment; filename=" . $fileName);
			exit;
		}

		public function getActiveIpids()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->where('isdelete = 0 and isdischarged = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('isstandby = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$patient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$patientexec = $patient->execute();
			$ipidarray = $patientexec->toArray();


			foreach($ipidarray as $patient)
			{
				$activipids[] = $patient['ipid'];
			}

			return $activipids;
		}

		public function getStandbyIpids()
		{

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->where('isdelete = 0 and isdischarged = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('isstandby = 1')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$patient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$patientexec = $patient->execute();
			$ipidarray = $patientexec->toArray();


			foreach($ipidarray as $patient)
			{
				$standby_ipids[] = $patient['ipid'];
			}

			return $standby_ipids;
		}

		private function neuePatientenVO($params)
		{
			// report_id = 26
			// report name = neue Patienten & VO

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$newpatient = Doctrine_Query::create()
				->select("*,date_format(p.admission_date, '%d.%m.%Y') as admission_date, p.ipid as ipid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdelete = 0 AND isstandbydelete = 0')
				->andWhere(str_replace('%date%', 'admission_date', $active_cond['date_sql']));
			$newpatient->leftJoin("p.EpidIpidMapping e");
			$newpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$newpatientar = $newpatient->fetchArray();

			foreach($newpatientar as $newpatient_ipid)
			{
				$newpatient_ipid_str .= '"' . $newpatient_ipid['ipid'] . '",';
				$newpatientarray[$newpatient_ipid['ipid']] = $newpatient_ipid;
			}

			if(!empty($newpatientarray))
			{
				$drop = Doctrine_Query::create()
					->select('*')
					->from('SapvVerordnung')
					->where('ipid in (' . substr($newpatient_ipid_str, 0, -1) . ')  and isdelete=0 and verordnet != ""')
					->orderBy('ipid asc');
				$droparray = $drop->fetchArray();

				$data['extra']['status1'] = 0;
				$data['extra']['status2'] = 0;
				$data['extra']['status3'] = 0;
				$data['extra']['status4'] = 0;

				$vo_statuses = array(1 => 'a', 2 => 'g', 3 => 'kA', 0 => 'kA');
				;
				$vo_net = array(1 => 'Beratung', 2 => 'Koordination', 3 => 'Teilversorgung', 4 => 'Vollversorgung');

				foreach($droparray as $drop)
				{
					$verarray = explode(',', $drop['verordnet']);
					$max = max($verarray);
					$veropatdet[$drop['ipid']]['verordnet'] = $drop['verordnet'];
					for($i = 1; $i <= 4; $i++)
					{
						if(!isset($veropatdet[$drop['ipid']]['max']) || $veropatdet[$drop['ipid']]['max'] < $i || ($max == $i && $veropatdet[$drop['ipid']]['max_status'] != '2' && $drop['stauts'] == '2'))
						{
							$veropatdet[$drop['ipid']]['max'] = $vo_net[$max];
							$veropatdet[$drop['ipid']]['max_status'] = $vo_statuses[$drop['status']];
						}
					}
					if($drop['status'] == '2')
					{
						$max_approved = max($verarray);
						for($i = 1; $i <= 4; $i++)
						{
							if(!isset($veropatdet[$drop['ipid']]['max_approved']) || $max_approved < $i)
							{
								$veropatdet[$drop['ipid']]['max_approved'] = $vo_net[$max_approved];
								$veropatdet[$drop['ipid']]['max_approved_status'] = $vo_statuses[$drop['status']];
							}
						}
					}
				}


				foreach($veropatdet as $key => $patient)
				{
					$epidipid = Doctrine::getTable('EpidIpidMapping')->findBy('ipid', $newpatientarray[$key]['ipid']);
					$epidipidarray = $epidipid->toArray();
					$gepid = $epidipidarray[0]['epid'];

					$actpatientarray[$key] = $patient;
					$actpatientarray[$key]['first_name'] = $newpatientarray[$key]['first_name'];
					$actpatientarray[$key]['last_name'] = $newpatientarray[$key]['last_name'];
					$actpatientarray[$key]['admission_date'] = $newpatientarray[$key]['admission_date'];
					$actpatientarray[$key]['epid_num'] = $gepid;
				}
			}

			foreach($actpatientarray as $key => $patient_item)
			{
				$data['data'][$key]['epid'] = $patient_item['epid_num'];
				$data['data'][$key]['lastname'] = $patient_item['last_name'];
				$data['data'][$key]['firstname'] = $patient_item['first_name'];
				$data['data'][$key]['admissiondate'] = $patient_item['admission_date'];

				foreach($vo_net as $vo_key => $vo_val)
				{
					if($patient_item['max'] == $vo_val)
					{
						$data['extra']['status' . $vo_key] ++;
					}
				}

				if($patient_item['max'] != $patient_item['max_approved'] && !empty($patient_item['max_approved']))
				{
					$approved_str = '   ' . $patient_item['max_approved'] . '(' . $patient_item['max_approved_status'] . ')';
				}
				else
				{
					$approved_str = '';
				}
				$data['data'][$key]['Verordnung'] = $patient_item['max'] . " (" . $patient_item['max_status'] . ")" . $approved_str;
			}
			return $data;
		}

		private function neuePatientenAufnahmen($params)
		{
			// report_id = 38
			// report_name = Aufnahmen
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$standby = array();
			if($includearr['standby'] == 1)
			{
				$standbycond = "";
			}
			else
			{
				$standbycond = " and isstandby = 0";
			}

			$newpatient = Doctrine_Query::create()
				->select("*,date_format(p.admission_date, '%d.%m.%Y') as admission_date, p.ipid as ipid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdelete = 0 AND isstandbydelete = 0 ' . $standbycond)
				->andWhere(str_replace('%date%', 'admission_date', $active_cond['date_sql']));
			$newpatient->leftJoin("p.EpidIpidMapping e");
			$newpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$newpatientar = $newpatient->fetchArray();

			foreach($newpatientar as $newpatient_ipid)
			{
				$newpatient_ipid_str .= '"' . $newpatient_ipid['ipid'] . '",';
				$newpatientarray[$newpatient_ipid['ipid']] = $newpatient_ipid;
			}

			foreach($newpatientarray as $key => $patient_item)
			{
				$epidipid = Doctrine::getTable('EpidIpidMapping')->findBy('ipid', $patient_item['ipid']);
				$epidipidarray = $epidipid->toArray();
				$gepid = $epidipidarray[0]['epid'];

				$data['data'][$key]['epid'] = $gepid;
				$data['data'][$key]['lastname'] = $patient_item['last_name'];
				$data['data'][$key]['firstname'] = $patient_item['first_name'];
				$data['data'][$key]['birthd'] = date('d.m.Y', strtotime($patient_item['birthd']));
				$data['data'][$key]['admissiondate'] = $patient_item['admission_date'];
				$data['data'][$key]['street'] = $patient_item['street1'] . ' ';
				$data['data'][$key]['zip'] = $patient_item['zip'] . ' ';
				$data['data'][$key]['city'] = $patient_item['city'] . ' ';
			}

			return $data;
		}

		private function geschlecht($params)
		{
			// report_id = 	23
			// report_name = Geschlecht;

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$all = $this->getClientPatientsByPeriod($clientid, $whereepid, $quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}


			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$patients = Doctrine_Query::create()
				->select("count(pm.ipid) as count, if(AES_DECRYPT(pm.sex,'" . Zend_Registry::get('salt') . "') != 1 AND AES_DECRYPT(pm.sex,'" . Zend_Registry::get('salt') . "') != 2, 0, AES_DECRYPT(pm.sex,'" . Zend_Registry::get('salt') . "')) as thesex")
				->from('PatientMaster pm')
				->where('pm.ipid IN ("999999",' . substr($ipids, 0, -1) . ')')
				->groupBy('thesex');
			$i = 0;
			$patarray = $patients->fetchArray();

			foreach($patarray as $genderarr)
			{
				$total += $genderarr['count'];
			}

			$genderarray = Pms_CommonData::getGender();

			foreach($patarray as $key => $genderarr)
			{
				$data[$key]['gender'] = $genderarray[$genderarr['thesex']];
				$data[$key]['count'] = $genderarr['count'];
				$data[$key]['percentage'] = round(($genderarr['count'] / $total * 100), 2) . ' %';
			}

			$alldata['extra']['sum'] = $total;
			$alldata['data'] = $data;
			return $alldata;
		}

		private function statstics($params)
		{
			// report_id = 	12
			// report_name = Statistik
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);


			$motnhs = array(
				'1' => 'Januar',
				'2' => 'Februar',
				'3' => 'März',
				'4' => 'April',
				'5' => 'Mai',
				'6' => 'Juni',
				'7' => 'Juli',
				'8' => 'August',
				'9' => 'September',
				'10' => 'Oktober',
				'11' => 'November',
				'12' => 'Dezember'
			);

			$quarters = array(
				'1' => 'Januar &raquo; März',
				'2' => 'April &raquo; Juni',
				'3' => 'Juli &raquo; September',
				'4' => 'Oktober &raquo; Dezember'
			);


			if($yeararr != 'only_now')
			{
				foreach($yeararr as $year)
				{
					if(is_array($quarterarr) && sizeof($quarterarr) > 0)
					{
						foreach($quarterarr as $quarter)
						{
							$period_str .= $quarters[$quarter] . ' ' . $year . '<br />';
						}
					}
					elseif(is_array($montharr) && sizeof($montharr) > 0)
					{
						foreach($montharr as $month)
						{
							$period_str .= $motnhs[$month] . ' ' . $year . '<br />';
						}
					}
					else
					{
						$period_str .= $year . '<br />';
					}
				}
			}
			else
			{
				$period_str = 'Alle';
			}


			$actpatient = Doctrine_Query::create()
				->select("count(*)")
				->from('PatientMaster p')
				->where("isdelete = 0 and isstandby = 0 and isstandbydelete = 0 ")
				->andWhere(' ' . str_replace('%date%', 'admission_date', $active_cond['date_sql']) . '')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$actpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$actipidarray = $actpatient->fetchArray();

			$noofpatients = $actipidarray[0]['count'];


			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where("isdelete = 0 and isstandby = 0 and isstandbydelete = 0 and isdischarged=1")
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$patient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$ipidarray = $patient->fetchArray();

			foreach($ipidarray as $key => $val)
			{
				$disipidval .= '"' . $val['ipid'] . '",';
			}
			if($disipidval)
			{
				$disquery = Doctrine_Query::create()
					->select("count(*)")
					->from('PatientDischarge')
					->where('ipid in (' . substr($disipidval, 0, -1) . ') AND ' . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . '');
				$disarray = $disquery->fetchArray();
				$noofdispatients = $disarray[0]['count'];
			}
			else
			{
				$noofdispatients = "0";
			}

			$data['data'][0]['Zeitraum'] = $period_str;
			$data['data'][0]['Aufnahmen'] = $noofpatients;
			$data['data'][0]['overalldispatients'] = $noofdispatients;

			return $data;
		}

		private function bielefeldt1($params)
		{
			// report_id = 32
			// report_name = Bielefeld T1;
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			/* ----------------------- Get active patients -------------------------------------- */
			$activeipids = $this->getActiveIpids();
			if(empty($activeipids))
			{
				$activeipids[] = "XXXXXX";
			}

			/* ----------------------- Get standby patients -------------------------------------- */
			$required_ipids = $activeipids;
			$required_ipids = array_unique($required_ipids);


			/* ----------------------- Get patient l entry -------------------------------------- */
			$qpa1 = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong != 1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("L")) . '"')
				->andWhereIn('ipid', $required_ipids)
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$qparray = $qpa1->fetchArray();

			foreach($qparray as $kc => $c_value)
			{
				$specialtext = "";
				$specialtext = trim(substr($c_value['course_title'], 0, 2));
				$entry_ipids[$specialtext][] = $c_value['ipid'];
			}

			if(empty($entry_ipids['t1']))
			{
				$entry_ipids['t1'][] = "XXXXXX";
			}

			$entry_ipids['t1'] = array_unique($entry_ipids['t1']);

			$patient = Doctrine_Query::create()
				->select("e.*,p.*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('p.isdelete = 0 ')
				->andWhere('p.isdischarged = 0')
				->andWhere('p.isstandbydelete = 0')
				->andWhereIn('p.ipid', $required_ipids)
				->andWhereNotIn('p.ipid', $entry_ipids['t1'])
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$patient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$ipidarray = $patient->fetchArray();

			/* ----------------------- Get family doctors ids -------------------------------- */
			foreach($ipidarray as $k => $patient)
			{
				$doctorids[] = $patient['familydoc_id'];
			}
			if(empty($doctorids))
			{
				$doctorids[] = "9999999999";
			}
			/* ----------------------- Get family doctor details-------------------------------- */
			$famdoc = new FamilyDoctor();
			$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

			foreach($familidoc as $fd_key => $fd_value)
			{
				$familydoctors[$fd_value['id']] = $fd_value;
			}


			/* ----------------------- Display all data-------------------------------- */
			foreach($ipidarray as $key => $val)
			{
				if(strlen($val['familydoc_id']) > 0 && !empty($familydoctors[$val['familydoc_id']]))
				{
					if(strlen($familydoctors[$val['familydoc_id']]['title']) > 0)
					{
						$Familydoctor[$val['ipid']] = $familydoctors[$val['familydoc_id']]['title'] . "  ";
					}
					if(strlen($familydoctors[$val['familydoc_id']]['first_name']) > 0 || strlen($familydoctors[$val['familydoc_id']]['last_name']) > 0)
					{
						$Familydoctor_name[$val['ipid']] = $familydoctors[$val['familydoc_id']]['last_name'] . ", " . $familydoctors[$val['familydoc_id']]['first_name'] . " ";
					}

					if(strlen($familydoctors[$val['familydoc_id']]['phone_practice']) > 0)
					{
						$Familydoctor_phone[$val['ipid']] = $familydoctors[$val['familydoc_id']]['phone_practice'] . " ";
					}
				}

				$admisiondate[$val['ipid']] = date("d.m.Y", strtotime($val['admission_date']));

				$patientphone = trim($val['phone']);
				$statdia_array = array();

				$statdia_array['epid'] = $val['EpidIpidMapping']['epid'];
				$statdia_array['lastname'] = ltrim($val["last_name"]);
				$statdia_array['firstname'] = ltrim($val["first_name"]);
				$statdia_array['admissiondate'] = $admisiondate[$val['ipid']];
				$statdia_array['familydoctor'] = ltrim($Familydoctor_name[$val['ipid']]);
				$statdia_array['familydoctorphone'] = ltrim($Familydoctor_phone[$val['ipid']]);

				$sortarray1[] = $statdia_array;
			}

			$data['data'] = $sortarray1;

			return $data;
		}

		private function hospizaufnahmewl($params)
		{
			// report_id = 41
			// report_name = Hospiz Aufnahme WL
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$qpa1 = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrongcomment!=1  and 	course_type="' . addslashes(Pms_CommonData::aesEncrypt("L")) . '" and 	AES_DECRYPT(course_title,"' . Zend_Registry::get('salt') . '")   LIKE "%92011%" ')
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$qparray = $qpa1->fetchArray();

			if($qparray)
			{
				foreach($qparray as $qvalue)
				{
					$ipidarr[] = $qvalue['ipid'];
				}
			}
			else
			{
				$ipidarr[] = '99999999';
			}
			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->wherein('ipid', $ipidarr)
				->andwhere(' isdelete = 0 and isstandby = 0 and isstandbydelete = 0 ')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$patient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$patientexec = $patient->execute();
			$ipidarray = $patientexec->toArray();

			foreach($ipidarray as $patient)
			{
				$patientMasterDetails[$patient['ipid']] = $patient;
			}

			//Get discharge dates
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->wherein("ipid", $ipidarr);
			$dispatarray = $dispat->fetchArray();

			foreach($dispatarray as $dis_patient)
			{
				$dischargedpatarray[$dis_patient['ipid']] = $dis_patient['discharge_date'];
			}

			//Get epids
			$epidspat = Doctrine_Query::create()
				->select("*")
				->from("EpidIpidMapping")
				->whereIn('ipid', $ipidarr);
			$epidspatarr = $epidspat->fetchArray();

			foreach($epidspatarr as $epidpatient)
			{
				$epidsPatients[$epidpatient['ipid']] = $epidpatient['epid'];
			}

			foreach($ipidarray as $val)
			{
				$patdet[$val['ipid']]['lastname'] = ltrim($val["last_name"]);
				$patdet[$val['ipid']]['firstname'] = ltrim($val["first_name"]);
				$patdet[$val['ipid']]['admissiondate'] = date("d.m.Y", strtotime($val['admission_date']));
				$patdet[$val['ipid']]['birthd'] = date("d.m.Y", strtotime($val['birthd']));
			}

			foreach($patientMasterDetails as $keypatient => $patient)
			{

				$MasterData['data'][$keypatient]['epid'] = $epidsPatients[$patient['ipid']];
				$MasterData['data'][$keypatient]['lastname'] = $patdet[$keypatient]['lastname'];
				$MasterData['data'][$keypatient]['firstname'] = $patdet[$keypatient]['firstname'];
				$MasterData['data'][$keypatient]['admissiondate'] = $patdet[$keypatient]['admissiondate'];
				$MasterData['data'][$keypatient]['birthd'] = $patdet[$keypatient]['birthd'];
				if(!empty($dischargedpatarray[$patient['ipid']]))
				{
					$dis_date = date("d.m.Y", strtotime($dischargedpatarray[$patient['ipid']]));
				}
				else
				{
					$dis_date = "-";
				}
				$MasterData['data'][$keypatient]['dischargedate'] = $dis_date;
			}
			return $MasterData;
		}

		private function cdspecialStats($params)
		{
			// report_id = 14
			// report_name = PKD Statistik Bielefeld
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];

			$patientmaster = new PatientMaster();

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			if($logininfo->clientid > 0)
			{
				$clientid = $logininfo->clientid;
			}
			else
			{
				$clientid = 0;
			}

			$time_period = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$where = "";
			$where = str_replace('%date%', 'course_date', $time_period['date_sql']);
			if(strlen($where) > 0)
			{
				$where = " and (" . $where . ")";
			}
			else
			{
				$where = "";
			}

			$statdia_array = array();

			$usergroup = new Usergroup();
			$DoctorGroups = array("4", "9");
			$doctorgroupids = $usergroup->getUserGroups($DoctorGroups);
			$CoordinatorsGroups = array("6");
			$cordgroupids = $usergroup->getUserGroups($CoordinatorsGroups);

			foreach($doctorgroupids as $key => $value)
			{
				$doctorgroupid = $value['id'];
			}

			foreach($cordgroupids as $key => $value)
			{
				$cordgroupid = $value['id'];
			}


			$usermod = new User();
			$docuserarray = $usermod->getuserbyGroupId($doctorgroupid, $clientid);
			$coruserarray = $usermod->getuserbyGroupId($cordgroupid, $clientid);


			$fromtilldates = $this->getQuarterperiods($quarterarr, $yeararr, $montharr);
			list($fromdate, $tilldate) = explode("-", $fromtilldates);

			if(is_array($docuserarray))
			{
				$pc = new PatientCourse();

				foreach($docuserarray as $key => $val)
				{
					$coursearray = $pc->getCourseDataForSpecialreport($val['id'], $where);
					$statdia_array = array();
					$statdia_array['userdata'] = $val['last_name'] . ", " . $val['first_name'];
					$hbcount = 0;
					$t1count = 0;
					$tpcount = 0;
					$tfcount = 0;
					$ngcount = 0;
					foreach($coursearray as $keyc => $valc)
					{
						$specialtext = "";
						$specialtext = trim(substr($valc['course_title'], 0, 3));
						switch($specialtext)
						{
							case hb : $hbcount++;
								$sumhb+=$hb;
								break;
							case t1 : $t1count++;
								$sumt1+=$t1;
								break;
							case tp : $tpcount++;
								$sumtp+=$tp;
								break;
							case tf : $tfcount++;
								$sumtf+=$tf;
								break;
							case ng : $ngcount++;
								$sumng+=$ng;
								break;
						}
					}
					$statdia_array['type'] = 'doctor';
					$statdia_array['hb'] = $hbcount;
					$statdia_array['t1'] = $t1count;
					$statdia_array['tp'] = $tpcount;
					$statdia_array['tf'] = $tfcount;
					$statdia_array['ng'] = $ngcount;

					$sortarray1[] = $statdia_array;
				}
			}

			################################################
			// get all client patients - non standby
			################################################
			$all_clients_non_standby_patients = $this->getClientPatients($clientid);


			################################################
			//query - get all client patients(non standby) admited in report period
			################################################
			$clientAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientMaster')
				->whereIn('ipid', $all_clients_non_standby_patients)
				->andWhere('isdelete="0"')
				->andWhere('isstandby="0"')
				->andWhere('isstandbydelete="0"')
				->andWhere('admission_date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmission = $clientAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmission as $patient)
			{
				$pat_admited_in_report[] = $patient['ipid'];
			}
			if(count($pat_admited_in_report) == 0)
			{
				$pat_admited_in_report[0] = "999999";
			}


			################################################
			//query - get all client patients(non standby) re-admited in report period
			################################################
			$clientReAdmissionPatients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->whereIn('ipid', $all_clients_non_standby_patients)
				->andWhere('date_type = "1"')
				->andWhere('date BETWEEN "' . date("Y-m-d H:i:s", strtotime($period['start'][0])) . '" AND "' . date("Y-m-d H:i:s", strtotime($period['end'][0])) . '"');
			$clientPatientsAdmissions = $clientReAdmissionPatients->fetchArray();

			foreach($clientPatientsAdmissions as $patientR)
			{
				$pat_readmited_in_report[] = $patientR['ipid'];
			}
			if(count($pat_readmited_in_report) == 0)
			{
				$pat_readmited_in_report[0] = "999999";
			}

			################################################
			//get all client patients(non standby) -admission, readmission details
			################################################
			$b_patient_admisions = $patientmaster->getTreatedDaysRealMultiple($all_clients_non_standby_patients);


			################################################
			//get all client patients(non standby) - re-admited outside the report period
			################################################
			$ipids_readmision_outisde[] = '9999999';
			foreach($b_patient_admisions as $k_admision => $v_admision)
			{
				if(!Pms_CommonData::isintersected(
						strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime(date('d-m-Y', strtotime($v_admision['admission_date']))), strtotime($period['start'][0]), strtotime($period['end'][0])))
				{
					$ipids_readmision_outisde[] = $k_admision;
				}
			}

			$patients_first_admited_in_report = array_merge($pat_admited_in_report, $all_clients_non_standby_patients);
			$patients_first_admited_in_report = array_merge($patients_first_admited_in_report, $pat_readmited_in_report);
			$patients_first_admited_in_report = array_values(array_unique($patients_first_admited_in_report));
			$patients_first_admited_in_report = array_values(array_diff($patients_first_admited_in_report, $ipids_readmision_outisde));
			$patients_first_admited_in_report = array_values(array_unique($patients_first_admited_in_report));

			if(count($patients_first_admited_in_report) == 0)
			{
				$patients_first_admited_in_report[0] = "999999";
			}

			################################################
			//query get all  private patients - from patients_first_admited_in_report
			################################################
			$ppC = Doctrine_Query::create()
				->select('*')
				->from('PatientHealthInsurance')
				->whereIn('ipid', $patients_first_admited_in_report)
				->andWhere('privatepatient = "1"');
			$pPatientsC = $ppC->fetchArray();

			foreach($pPatientsC as $PrivatePatient)
			{
				$private_patients[] = $PrivatePatient['ipid'];
			}
			if(empty($private_patients))
			{
				$private_patients[] = '9999999999';
			}
			// remove private form first time admited patients in report
			$patients_first_admited_in_report = array_values(array_diff($patients_first_admited_in_report, $private_patients));


			################################################
			//query    patients with L92011 - from patients_first_admited_in_report
			################################################
			$cl_patients_lentry = Doctrine_Query::create()
				->select("ipid")
				->from('PatientCourse')
				->whereIn('ipid', $patients_first_admited_in_report)
				->andwhere("wrongcomment!=1 and course_type='" . addslashes(Pms_CommonData::aesEncrypt('L')) . "' ")
				->andwhere('AES_DECRYPT(course_title,"' . Zend_Registry::get('salt') . '")   LIKE "%92011%" ')
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$cl_patients_lentry_array = $cl_patients_lentry->fetchArray();

			foreach($cl_patients_lentry_array as $clpatientl)
			{
				$l_entry_patients[] = $clpatientl['ipid'];
			}
			if(count($l_entry_patients) == 0)
			{
				$l_entry_patients[0] = "999999";
			}

			// remove l-entry form first time admited patients in report
			$patients_first_admited_in_report = array_values(array_diff($patients_first_admited_in_report, $l_entry_patients));



			#############################################################
			//get hospiz days of patient - first admited in report period
			############################################################
			$ploc = new PatientLocation();
			$loc = new Locations();

			foreach($patients_first_admited_in_report as $k_adm_pat => $v_adm_pat)
			{
				$p_first_location = $ploc->getFirstLocation(false, $v_adm_pat);

				if($p_first_location && in_array($v_adm_pat, $l_entry_patients))
				{
					$location_details = $loc->getLocationbyId($p_first_location[0]['location_id']);

					if($location_details[0]['location_type'] != '2')
					{
						$non_hospiz_patients[] = $v_adm_pat;
					}
					else
					{
						$hospiz_patients[] = $v_adm_pat;
					}
				}
				else //no admision location so is no hospiz
				{
					$non_hospiz_patients[] = $v_adm_pat;
				}
			}

			if(count($non_hospiz_patients) == 0)
			{
				$non_hospiz_patients[] = '999999';
			}
			if(count($new_hospiz_patients) == 0)
			{
				$hospiz_patients[] = '999999';
			}

			//ho hospiz
			if(count($non_hospiz_patients) == 1 && in_array('999999', $non_hospiz_patients))
			{
				$noofpatients = "0";
			}
			else
			{
				$noofpatients = count($non_hospiz_patients); // Neu-Aufnahme Kassenpatient ambulante
			}

			if(is_array($coruserarray))
			{

				$pc = new PatientCourse();
				foreach($coruserarray as $key => $val)
				{
					$statdia_array = array();
					$statdia_array['userdata'] = $val['user_title'] . " " . $val['last_name'] . ", " . $val['first_name'];
					$coursearray = $pc->getCourseDataForSpecialreport($val['id'], $where);
					$hb = 0;
					$t1 = 0;
					$tp = 0;
					$tf = 0;
					$ng = 0;
					foreach($coursearray as $keyc => $valc)
					{
						$specialtext = "";
						$specialtext = substr($valc['course_title'], 0, 2);
						switch($specialtext)
						{
							case hb : $hb++;
								$sumhb+=$hb;
								break;
							case t1 : $t1++;
								$sumt1+=$t1;
								break;
							case tp : $tp++;
								$sumtp+=$tp;
								break;
							case tf : $tf++;
								$sumtf+=$tf;
								break;
							case ng : $ng++;
								$sumng+=$ng;
								break;
						}
					}
					$statdia_array['hb'] = $hb;
					$statdia_array['t1'] = $t1;
					$statdia_array['tp'] = $tp;
					$statdia_array['tf'] = $tf;
					$statdia_array['ng'] = $ng;
					$statdia_array['sumhb'] = $hb;
					$statdia_array['sumt1'] = $t1;
					$statdia_array['sumtp'] = $tp;
					$statdia_array['sumtf'] = $tf;
					$statdia_array['sumng'] = $ng;
					$statdia_array['type'] = 'cordinator';
					$sortarray1[] = $statdia_array;
				}
			}

			$data['extra']['fromdate'] = $fromdate;
			$data['extra']['tilldate'] = $tilldate;
			$data['extra']['noofpatients'] = $noofpatients;

			$data['data'] = $sortarray1;

			return $data;
		}

		private function maindiagnosisstats($params)
		{
			// report_id = 7
			// report_name =  Hauptdiagnosen
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			
			foreach($period ['start'] as $keyd => $startDate)
			{
			    $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
			    if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
			    {
			        $report_period_array[$keyd]['end'] = date("Y-m-d");
			    }
			    else
			    {
			        $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
			    }
			}
			
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
				
			
			if($onlyactive != 1)
			{
			    $conditions['periods'] = $report_period_array;
			    $conditions['client'] = $clientid;
			    	

			    // if user selected - get only assigned to user
			    if($whereepid){
			        $patientMasterData = Doctrine_Query::create()
			        ->select("e.ipid")
			        ->from("EpidIpidMapping e")
			        ->where($whereepid . ' e.clientid = ' . $clientid);
			        $pmarr = $patientMasterData->fetchArray();
			         
			        $doctor_assigned_ipids = array();
			        foreach($pmarr as $patient)
			        {
			            $doctor_assigned_ipids[] =  $patient['ipid'];
			        }
			         
			        if(!empty($doctor_assigned_ipids)){
			            $conditions['ipids'] =  $doctor_assigned_ipids;
			        }
			    }
			    
			    if($includearr['standby'] == 1)
			    {
			        $conditions['include_standby'] = true;
			    }
			    
			    $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			    $ipidarr = array_keys($active_patient_details); // return ipids
			
			}
			else
			{
				$ipidarr_only_active = $this->getActiveIpids();
			    
		    	if(!empty($ipidarr_only_active)){
    			    $conditions['ipids'] = $ipidarr_only_active;
		    	} else{
    			    $conditions['ipids'] = array("9999999999");
		    	}
			    
			    $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			    $ipidarr = array_keys($active_patient_details); // return ipids
			}
			

			if(count($ipidarr) == 0)
			{
			    $ipidarr[] = "0";
			}
			
			foreach($ipidarr as $val)
			{
			    $ipids .= "'" . $val . "',";
			}
				
			

			$dg = new DiagnosisType();
			$diagarr = $dg->getDiagnosisTypes($logininfo->clientid, '"HD"');

			foreach($diagarr as $key => $valdiag)
			{
				$diagnosis_type .= '"' . $valdiag['id'] . '",';
			}

			$diag_pat = Doctrine_Query::create()
				->select('*, count(diagnosis_id) as sum_diagnos, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
				->from("PatientDiagnosis")
				->where('ipid in ("999999",' . substr($ipids, 0, -1) . ') and diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ')
				->groupBy('diagnosis_id')
				->orderBy('diagnosis_id DESC');
			$diag_patarr = $diag_pat->fetchArray();

			$i = 0;
			foreach($diag_patarr as $diag_patitem)
			{
				$data[$i]['icdprimary'] = '&nbsp;';
				$data[$i]['description'] = '&nbsp;';
				$data[$i]['tabname'] = $diag_patitem['a_tabname'];
				$data[$i]['count'] = $diag_patitem['sum_diagnos'];

				if($diag_patitem['diagnosis_id'] == '')
				{
					$diagnosis_id = 0;
				}
				else
				{
					$diagnosis_id = $diag_patitem['diagnosis_id'];
				}

				$data[$i]['diagnosis_id'] = $diagnosis_id;

				switch($diag_patitem['a_tabname'])
				{

					case 'diagnosis':
						$diagnosis_tab[] = $diagnosis_id;
						break;


					case 'diagnosis_freetext':
						$diagnosis_freetext_tab[] = $diagnosis_id;
						break;

					case 'diagnosis_icd':
						$diagnosis_icd_tab[] = $diagnosis_id;
						break;


					default:
						break;
				}

				$i++;
			}

			if(sizeof($diagnosis_tab) > 0)
			{
				$diagnosis = Doctrine_Query::create()
					->select("*")
					->from("Diagnosis")
					->where("id IN (9999999," . implode(',', $diagnosis_tab) . ")");
				$diagnosisarray = $diagnosis->fetchArray();
				foreach($diagnosisarray as $diagnosis_item)
				{
					$diagnosis_details[$diagnosis_item['id']] = $diagnosis_item;
				}
			}

			if(sizeof($diagnosis_freetext_tab) > 0)
			{
				$diagnosisfreetext = Doctrine_Query::create()
					->select('*')
					->from('DiagnosisText')
					->where("id IN (9999999," . implode(',', $diagnosis_freetext_tab) . ")");
				$diagnosisfreetextarray = $diagnosisfreetext->fetchArray();
				foreach($diagnosisfreetextarray as $diagnosisfreetext_item)
				{
					$diagnosis_freetext_details[$diagnosisfreetext_item['id']] = $diagnosisfreetext_item;
				}
			}

			if(sizeof($diagnosis_icd_tab) > 0)
			{
				$diagnosisicd = Doctrine_Query::create()
					->select('*')
					->from('DiagnosisIcd')
					->where("id IN (9999999," . implode(',', $diagnosis_icd_tab) . ")");
				$diagnosisicdarray = $diagnosisicd->fetchArray();
				foreach($diagnosisicdarray as $diagnosisicd_item)
				{
					$diagnosis_icd_details[$diagnosisicd_item['id']] = $diagnosisicd_item;
				}
			}

			$incr = "0";
			foreach($data as $key => $data_item)
			{

				switch($data_item['tabname'])
				{

					case 'diagnosis':
						if(!empty($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_details[$data_item['diagnosis_id']]['description'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;


					case 'diagnosis_freetext':
						if(!empty($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_freetext_details[$data_item['diagnosis_id']]['free_name'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;

					case 'diagnosis_icd':

						if(!empty($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = trim($diagnosis_icd_details[$data_item['diagnosis_id']]['description']);
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);

						$incr++;
						break;


					default:
						break;
				}

				if(empty($mdata[$icd]['icdprimary']))
				{
					$mdata[$icd]['icdprimary'] = ' -';
				}

				if(empty($mdata[$icd]['description']))
				{
					$mdata[$icd]['description'] = ' -';
				}

				unset($data[$icd]['diagnosis_id']);
				unset($data[$icd]['tabname']);
			}

			$alldata['extra']['sum'] = $total;
			$alldata['data'] = $mdata;

			return $alldata;
		}
		
		
		private function maindiagnosisstats_before160314($params)
		{
			// report_id = 7
			// report_name =  Hauptdiagnosen
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				$ipidarr = array_merge($active, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}


			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			$dg = new DiagnosisType();
			$diagarr = $dg->getDiagnosisTypes($logininfo->clientid, '"HD"');

			foreach($diagarr as $key => $valdiag)
			{
				$diagnosis_type .= '"' . $valdiag['id'] . '",';
			}

			$diag_pat = Doctrine_Query::create()
				->select('*, count(diagnosis_id) as sum_diagnos, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
				->from("PatientDiagnosis")
				->where('ipid in ("999999",' . substr($ipids, 0, -1) . ') and diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ')
				->groupBy('diagnosis_id')
				->orderBy('diagnosis_id DESC');
			$diag_patarr = $diag_pat->fetchArray();

			$i = 0;
			foreach($diag_patarr as $diag_patitem)
			{
				$data[$i]['icdprimary'] = '&nbsp;';
				$data[$i]['description'] = '&nbsp;';
				$data[$i]['tabname'] = $diag_patitem['a_tabname'];
				$data[$i]['count'] = $diag_patitem['sum_diagnos'];

				if($diag_patitem['diagnosis_id'] == '')
				{
					$diagnosis_id = 0;
				}
				else
				{
					$diagnosis_id = $diag_patitem['diagnosis_id'];
				}

				$data[$i]['diagnosis_id'] = $diagnosis_id;

				switch($diag_patitem['a_tabname'])
				{

					case 'diagnosis':
						$diagnosis_tab[] = $diagnosis_id;
						break;


					case 'diagnosis_freetext':
						$diagnosis_freetext_tab[] = $diagnosis_id;
						break;

					case 'diagnosis_icd':
						$diagnosis_icd_tab[] = $diagnosis_id;
						break;


					default:
						break;
				}

				$i++;
			}

			if(sizeof($diagnosis_tab) > 0)
			{
				$diagnosis = Doctrine_Query::create()
					->select("*")
					->from("Diagnosis")
					->where("id IN (9999999," . implode(',', $diagnosis_tab) . ")");
				$diagnosisarray = $diagnosis->fetchArray();
				foreach($diagnosisarray as $diagnosis_item)
				{
					$diagnosis_details[$diagnosis_item['id']] = $diagnosis_item;
				}
			}

			if(sizeof($diagnosis_freetext_tab) > 0)
			{
				$diagnosisfreetext = Doctrine_Query::create()
					->select('*')
					->from('DiagnosisText')
					->where("id IN (9999999," . implode(',', $diagnosis_freetext_tab) . ")");
				$diagnosisfreetextarray = $diagnosisfreetext->fetchArray();
				foreach($diagnosisfreetextarray as $diagnosisfreetext_item)
				{
					$diagnosis_freetext_details[$diagnosisfreetext_item['id']] = $diagnosisfreetext_item;
				}
			}

			if(sizeof($diagnosis_icd_tab) > 0)
			{
				$diagnosisicd = Doctrine_Query::create()
					->select('*')
					->from('DiagnosisIcd')
					->where("id IN (9999999," . implode(',', $diagnosis_icd_tab) . ")");
				$diagnosisicdarray = $diagnosisicd->fetchArray();
				foreach($diagnosisicdarray as $diagnosisicd_item)
				{
					$diagnosis_icd_details[$diagnosisicd_item['id']] = $diagnosisicd_item;
				}
			}

			$incr = "0";
			foreach($data as $key => $data_item)
			{

				switch($data_item['tabname'])
				{

					case 'diagnosis':
						if(!empty($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_details[$data_item['diagnosis_id']]['description'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;


					case 'diagnosis_freetext':
						if(!empty($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_freetext_details[$data_item['diagnosis_id']]['free_name'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;

					case 'diagnosis_icd':

						if(!empty($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = trim($diagnosis_icd_details[$data_item['diagnosis_id']]['description']);
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);

						$incr++;
						break;


					default:
						break;
				}

				if(empty($mdata[$icd]['icdprimary']))
				{
					$mdata[$icd]['icdprimary'] = ' -';
				}

				if(empty($mdata[$icd]['description']))
				{
					$mdata[$icd]['description'] = ' -';
				}

				unset($data[$icd]['diagnosis_id']);
				unset($data[$icd]['tabname']);
			}

			$alldata['extra']['sum'] = $total;
			$alldata['data'] = $mdata;

			return $alldata;
		}

		private function sidediagnosisstats($params)
		{
			// report_id = 20
			// report_name = Nebendiagnosen

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
 
			
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
				
			foreach($period ['start'] as $keyd => $startDate)
			{
			    $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
			    if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
			    {
			        $report_period_array[$keyd]['end'] = date("Y-m-d");
			    }
			    else
			    {
			        $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
			    }
			}
				
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			
				
			if($onlyactive != 1)
			{
			    $conditions['periods'] = $report_period_array;
			    $conditions['client'] = $clientid;
			
			
			    // if user selected - get only assigned to user
			    if($whereepid){
			        $patientMasterData = Doctrine_Query::create()
			        ->select("e.ipid")
			        ->from("EpidIpidMapping e")
			        ->where($whereepid . ' e.clientid = ' . $clientid);
			        $pmarr = $patientMasterData->fetchArray();
			
			        $doctor_assigned_ipids = array();
			        foreach($pmarr as $patient)
			        {
			            $doctor_assigned_ipids[] =  $patient['ipid'];
			        }
			
			        if(!empty($doctor_assigned_ipids)){
			            $conditions['ipids'] =  $doctor_assigned_ipids;
			        }
			    }
			     
			    if($includearr['standby'] == 1)
			    {
			        $conditions['include_standby'] = true;
			    }
			     
			    $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			    $ipidarr = array_keys($active_patient_details); // return ipids
			    	
			}
			else
			{
			    $ipidarr_only_active = $this->getActiveIpids();
			    
		    	if(!empty($ipidarr_only_active)){
    			    $conditions['ipids'] = $ipidarr_only_active;
		    	} else{
    			    $conditions['ipids'] = array("9999999999");
		    	}
			    $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			    $ipidarr = array_keys($active_patient_details); // return ipids
			}
				
			
			
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			$dg = new DiagnosisType();
			$diagarr = $dg->getDiagnosisTypes($logininfo->clientid, '"ND"');

			foreach($diagarr as $key => $valdiag)
			{
				$diagnosis_type .= '"' . $valdiag['id'] . '",';
			}

			$diag_pat = Doctrine_Query::create()
				->select('*, count(diagnosis_id) as sum_diagnos, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
				->from("PatientDiagnosis")
				->where('ipid in ("999999",' . substr($ipids, 0, -1) . ') and diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ')
				->groupBy('diagnosis_id')
				->orderBy('diagnosis_id DESC');
			$diag_patarr = $diag_pat->fetchArray();

			$i = 0;
			foreach($diag_patarr as $diag_patitem)
			{
				$data[$i]['icdprimary'] = '&nbsp;';
				$data[$i]['description'] = '&nbsp;';
				$data[$i]['tabname'] = $diag_patitem['a_tabname'];
				$data[$i]['count'] = $diag_patitem['sum_diagnos'];

				if($diag_patitem['diagnosis_id'] == '')
				{
					$diagnosis_id = 0;
				}
				else
				{
					$diagnosis_id = $diag_patitem['diagnosis_id'];
				}

				$data[$i]['diagnosis_id'] = $diagnosis_id;

				switch($diag_patitem['a_tabname'])
				{

					case 'diagnosis':
						$diagnosis_tab[] = $diagnosis_id;
						break;

					case 'diagnosis_freetext':
						$diagnosis_freetext_tab[] = $diagnosis_id;
						break;

					case 'diagnosis_icd':
						$diagnosis_icd_tab[] = $diagnosis_id;
						break;

					default:
						break;
				}

				$i++;
			}

			if(sizeof($diagnosis_tab) > 0)
			{
				$diagnosis = Doctrine_Query::create()
					->select("*")
					->from("Diagnosis")
					->where("id IN (9999999," . implode(',', $diagnosis_tab) . ")");
				$diagnosisarray = $diagnosis->fetchArray();
				foreach($diagnosisarray as $diagnosis_item)
				{
					$diagnosis_details[$diagnosis_item['id']] = $diagnosis_item;
				}
			}

			if(sizeof($diagnosis_freetext_tab) > 0)
			{
				$diagnosisfreetext = Doctrine_Query::create()
					->select('*')
					->from('DiagnosisText')
					->where("id IN (9999999," . implode(',', $diagnosis_freetext_tab) . ")");
				$diagnosisfreetextarray = $diagnosisfreetext->fetchArray();
				foreach($diagnosisfreetextarray as $diagnosisfreetext_item)
				{
					$diagnosis_freetext_details[$diagnosisfreetext_item['id']] = $diagnosisfreetext_item;
				}
			}

			if(sizeof($diagnosis_icd_tab) > 0)
			{
				$diagnosisicd = Doctrine_Query::create()
					->select('*')
					->from('DiagnosisIcd')
					->where("id IN (9999999," . implode(',', $diagnosis_icd_tab) . ")");
				$diagnosisicdarray = $diagnosisicd->fetchArray();
				foreach($diagnosisicdarray as $diagnosisicd_item)
				{
					$diagnosis_icd_details[$diagnosisicd_item['id']] = $diagnosisicd_item;
				}
			}

			$incr = "0";
			foreach($data as $key => $data_item)
			{

				switch($data_item['tabname'])
				{

					case 'diagnosis':
						if(!empty($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_details[$data_item['diagnosis_id']]['description'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;


					case 'diagnosis_freetext':
						if(!empty($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_freetext_details[$data_item['diagnosis_id']]['free_name'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;

					case 'diagnosis_icd':

						if(!empty($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = trim($diagnosis_icd_details[$data_item['diagnosis_id']]['description']);
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);

						$incr++;
						break;


					default:
						break;
				}

				if(empty($mdata[$icd]['icdprimary']))
				{
					$mdata[$icd]['icdprimary'] = ' -';
				}

				if(empty($mdata[$icd]['description']))
				{
					$mdata[$icd]['description'] = ' -';
				}

				unset($data[$icd]['diagnosis_id']);
				unset($data[$icd]['tabname']);
			}

			$alldata['extra']['sum'] = $total;
			$alldata['data'] = $mdata;

			return $alldata;
		}
		
		private function sidediagnosisstats_before160314($params)
		{
			// report_id = 20
			// report_name = Nebendiagnosen

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				$ipidarr = array_merge($active, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			$dg = new DiagnosisType();
			$diagarr = $dg->getDiagnosisTypes($logininfo->clientid, '"ND"');

			foreach($diagarr as $key => $valdiag)
			{
				$diagnosis_type .= '"' . $valdiag['id'] . '",';
			}

			$diag_pat = Doctrine_Query::create()
				->select('*, count(diagnosis_id) as sum_diagnos, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
				->from("PatientDiagnosis")
				->where('ipid in ("999999",' . substr($ipids, 0, -1) . ') and diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ')
				->groupBy('diagnosis_id')
				->orderBy('diagnosis_id DESC');
			$diag_patarr = $diag_pat->fetchArray();

			$i = 0;
			foreach($diag_patarr as $diag_patitem)
			{
				$data[$i]['icdprimary'] = '&nbsp;';
				$data[$i]['description'] = '&nbsp;';
				$data[$i]['tabname'] = $diag_patitem['a_tabname'];
				$data[$i]['count'] = $diag_patitem['sum_diagnos'];

				if($diag_patitem['diagnosis_id'] == '')
				{
					$diagnosis_id = 0;
				}
				else
				{
					$diagnosis_id = $diag_patitem['diagnosis_id'];
				}

				$data[$i]['diagnosis_id'] = $diagnosis_id;

				switch($diag_patitem['a_tabname'])
				{

					case 'diagnosis':
						$diagnosis_tab[] = $diagnosis_id;
						break;

					case 'diagnosis_freetext':
						$diagnosis_freetext_tab[] = $diagnosis_id;
						break;

					case 'diagnosis_icd':
						$diagnosis_icd_tab[] = $diagnosis_id;
						break;

					default:
						break;
				}

				$i++;
			}

			if(sizeof($diagnosis_tab) > 0)
			{
				$diagnosis = Doctrine_Query::create()
					->select("*")
					->from("Diagnosis")
					->where("id IN (9999999," . implode(',', $diagnosis_tab) . ")");
				$diagnosisarray = $diagnosis->fetchArray();
				foreach($diagnosisarray as $diagnosis_item)
				{
					$diagnosis_details[$diagnosis_item['id']] = $diagnosis_item;
				}
			}

			if(sizeof($diagnosis_freetext_tab) > 0)
			{
				$diagnosisfreetext = Doctrine_Query::create()
					->select('*')
					->from('DiagnosisText')
					->where("id IN (9999999," . implode(',', $diagnosis_freetext_tab) . ")");
				$diagnosisfreetextarray = $diagnosisfreetext->fetchArray();
				foreach($diagnosisfreetextarray as $diagnosisfreetext_item)
				{
					$diagnosis_freetext_details[$diagnosisfreetext_item['id']] = $diagnosisfreetext_item;
				}
			}

			if(sizeof($diagnosis_icd_tab) > 0)
			{
				$diagnosisicd = Doctrine_Query::create()
					->select('*')
					->from('DiagnosisIcd')
					->where("id IN (9999999," . implode(',', $diagnosis_icd_tab) . ")");
				$diagnosisicdarray = $diagnosisicd->fetchArray();
				foreach($diagnosisicdarray as $diagnosisicd_item)
				{
					$diagnosis_icd_details[$diagnosisicd_item['id']] = $diagnosisicd_item;
				}
			}

			$incr = "0";
			foreach($data as $key => $data_item)
			{

				switch($data_item['tabname'])
				{

					case 'diagnosis':
						if(!empty($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_details[$data_item['diagnosis_id']]['description'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;


					case 'diagnosis_freetext':
						if(!empty($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_freetext_details[$data_item['diagnosis_id']]['free_name'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;

					case 'diagnosis_icd':

						if(!empty($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary'];
						}
						else
						{
							$icd = '0';
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = trim($diagnosis_icd_details[$data_item['diagnosis_id']]['description']);
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);

						$incr++;
						break;


					default:
						break;
				}

				if(empty($mdata[$icd]['icdprimary']))
				{
					$mdata[$icd]['icdprimary'] = ' -';
				}

				if(empty($mdata[$icd]['description']))
				{
					$mdata[$icd]['description'] = ' -';
				}

				unset($data[$icd]['diagnosis_id']);
				unset($data[$icd]['tabname']);
			}

			$alldata['extra']['sum'] = $total;
			$alldata['data'] = $mdata;

			return $alldata;
		}

		private function verordnungenundartderbetreuung($params)
		{
			// report_id = 19
			// report_name = Verordnungen und Art der Betreuung
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$all = $this->getClientPatients($clientid, $whereepid);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			$sapv_statuses = SapvVerordnung::getSapvRadios();
			$sapv_verordnets = Pms_CommonData::getSapvCheckBox();
			$sapv_verordnets[0] = '';

			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');
			$int_cond = str_replace($s, $r, $active_cond['interval_sql']);
			$ordered = 'ipid, verordnungam, verordnungbis';
			//var_dump($int_cond);exit;

			/*$sapv = Doctrine_Query::create() - ISPC -1837
				->select('*')
				->from('SapvVerordnung')
				->where('ipid in ("999999",' . substr($ipids, 0, -1) . ') and isdelete=0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))')
				->orderBy("ipid, verordnungam, verordnungbis");
			
			$sapvarr = $sapv->fetchArray();*/
			$sapvarr = SapvVerordnung::get_all_sapvs_new($ipids, $clientid, ",", $int_cond, false, $ordered);
			
			if($sapvarr)
			{
				foreach($sapvarr as $sapv_entry)
				{
					$sapv_details[$sapv_entry['ipid']][] = $sapv_entry;
					$sapv_ipids_str .= '"' . $sapv_entry['ipid'] . '",';
					//$sapv_vons_str .= '"' . $sapv_entry['verordnet_von'] . '",';
				}

				//$family_doctors = FamilyDoctor::getFamilyDocMultiple(substr($sapv_vons_str, 0, -1));

				$patient = Doctrine_Query::create()
					->select("p.*, e.*, e.epid as theepid,p.ipid as theipid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
					->from('PatientMaster p')
					->leftJoin("p.EpidIpidMapping e")
					->where("p.ipid IN ('999999'," . substr($sapv_ipids_str, 0, -1) . ")")
					->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

				$patientarr = $patient->fetchArray();
				$i = 0;

				foreach($patientarr as $patient_item)
				{
					$patinfo = '';
					if(strlen($patient_item["first_name"]) > 0)
					{
						$patinfo .= $patient_item["first_name"] . " ";
					}
					if(strlen($patient_item['last_name']) > 0)
					{
						$patinfo .= $patient_item['last_name'] . ", ";
					}
					if(strlen($birthdatep) > 0)
					{
						$patinfo .= $birthdatep . ", ";
					}
					if(strlen($patient_item['street1']) > 0)
					{
						$patinfo .= $patient_item['street1'] . ", ";
					}
					if(strlen($patient_item['zip']) > 0)
					{
						$patinfo .=$patient_item['zip'] . ", ";
					}
					if(strlen($patient_item['city']) > 0)
					{
						$patinfo .= $patient_item['city'];
					}
					$patientinfo[$patient_item['theipid']]['epid'] = $patient_item['theepid'];
					$patientinfo[$patient_item['theipid']]['full_name'] = $patinfo;
					foreach($sapv_details[$patient_item['theipid']] as $sapv_key => $sapv_detail)
					{
						//$patientinfo[$patient_item['theipid']]['sapv'][$sapv_key]['verordnet_von'] = $family_doctors[$sapv_detail['verordnet_von']]['last_name'] . ', ' . $family_doctors[$sapv_detail['verordnet_von']]['first_name'];
						$patientinfo[$patient_item['theipid']]['sapv'][$sapv_key]['verordnet_von'] = $sapv_detail['verordner'];
						$patientinfo[$patient_item['theipid']]['sapv'][$sapv_key]['von-bis'] = date('d.m.Y', strtotime($sapv_detail['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($sapv_detail['verordnungbis']));
						$patientinfo[$patient_item['theipid']]['sapv'][$sapv_key]['verordnet'] = str_replace(array_keys($sapv_verordnets), $sapv_verordnets, $sapv_detail['verordnet']);
						$patientinfo[$patient_item['theipid']]['sapv'][$sapv_key]['status'] = $sapv_statuses[$sapv_detail['status']];
					}
				}
			}

			$data = $patientinfo;

			$alldata['data'] = $data;

			return $alldata;
		}

		private function verordnungenstatus($params)
		{
			// report_id = 47
			// report_name = Status Verordnungen
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$all = $this->getClientPatients($clientid, $whereepid);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}
			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}
			$sapv_statuses = SapvVerordnung::getSapvRadios();
			$sapv_verordnets = Pms_CommonData::getSapvCheckBox();
			$sapv_verordnets[0] = '';

			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');
			$int_cond = str_replace($s, $r, $active_cond['interval_sql']);
			$ordered = 'ipid, verordnungam, verordnungbis';

			/*$sapv = Doctrine_Query::create() ISPC - 1837
				->select('*')
				->from('SapvVerordnung')
				->where('ipid in ("999999",' . substr($ipids, 0, -1) . ') and isdelete=0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))')
				->orderBy("ipid, verordnungam, verordnungbis");
			$sapvarr = $sapv->fetchArray();*/
			$sapvarr = SapvVerordnung::get_all_sapvs_new($ipids, $clientid, ",", $int_cond, false, $ordered);
			
			if($sapvarr)
			{
				foreach($sapvarr as $sapv_entry)
				{
					$sapv_details[$sapv_entry['ipid']][] = $sapv_entry;
					$sapv_ipids_str .= '"' . $sapv_entry['ipid'] . '",';
					//$sapv_vons_str .= '"' . $sapv_entry['verordnet_von'] . '",';
				}

				//$family_doctors = FamilyDoctor::getFamilyDocMultiple(substr($sapv_vons_str, 0, -1));

				//		Get discharge dates
				$dispat = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->where("ipid IN ('999999'," . substr($sapv_ipids_str, 0, -1) . ")");
				$dispatarray = $dispat->fetchArray();

				foreach($dispatarray as $dis_patient)
				{
					$dischargedpatarray[$dis_patient['ipid']] = $dis_patient['discharge_date'];
				}

				// Get healthinsurance
				$Health = Doctrine_Query::create()
					->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
					->from('PatientHealthInsurance')
					->where("ipid IN ('999999'," . substr($sapv_ipids_str, 0, -1) . ")");
				$Healtharray = $Health->fetchArray();

				foreach($Healtharray as $patient_health)
				{
					$patienthelth[$patient_health['ipid']]['number'] = $patient_health["insurance_no"];
					$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
					$patienthelth[$patient_health['ipid']]['ik'] = $patient_health["institutskennzeichen"];
					$patienthelth[$patient_health['ipid']]['kasse_nr'] = $patient_health["kvk_no"];
				}
				/* ========================================================================== */
				$patient = Doctrine_Query::create()
					->select("p.*, e.*, e.epid as theepid,p.ipid as theipid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
					->from('PatientMaster p')
					->leftJoin("p.EpidIpidMapping e")
					->where("p.ipid IN ('999999'," . substr($sapv_ipids_str, 0, -1) . ")")
					->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

				$patientarr = $patient->fetchArray();

				$i = 0;

				$patient_fn = "";
				$patient_ln = "";
				$patient_bd = "";
				$patient_ad = "";
				$dischargedate = "";
				foreach($patientarr as $patient_item)
				{
					if(strlen($patient_item["first_name"]) > 0)
					{
						$patient_fn = $patient_item["first_name"];
					}
					if(strlen($patient_item['last_name']) > 0)
					{
						$patient_ln = $patient_item['last_name'];
					}
					if(strlen($patient_item['admission_date']) > 0)
					{
						$patient_ad = date("d.m.Y", strtotime($patient_item['admission_date']));
					}
					if(strlen($patient_item['birthd']) > 0)
					{
						$patient_bd = date("d.m.Y", strtotime($patient_item['birthd']));
					}
					if($patient_item['isdischarged'] == '1')
					{
						$dischargedate = date("d.m.Y", strtotime($dischargedpatarray[$patient_item["ipid"]]));
					}
					else
					{
						$dischargedate = "-";
					}
					$patientinfo[$patient_item['theipid']]['epid'] = $patient_item['theepid'];
					$patientinfo[$patient_item['theipid']]['firstname'] = $patient_fn;
					$patientinfo[$patient_item['theipid']]['lastname'] = $patient_ln;
					$patientinfo[$patient_item['theipid']]['birthd'] = $patient_bd;
					$patientinfo[$patient_item['theipid']]['admissiondate'] = $patient_ad;
					$patientinfo[$patient_item['theipid']]['dischargedate'] = $dischargedate;
					$patientinfo[$patient_item['theipid']]['healthinsurance'] = $patienthelth[$patient_item['theipid']]['company'];
					$patientinfo[$patient_item['theipid']]['healthinsurance_nr'] = $patienthelth[$patient_item['theipid']]['number'];
					foreach($sapv_details[$patient_item['theipid']] as $sapv_key => $sapv_detail)
					{
						$patientinfo[$patient_item['theipid']]['sapv'][$sapv_key]['verordnet'] = str_replace(array_keys($sapv_verordnets), $sapv_verordnets, $sapv_detail['verordnet']);
						$patientinfo[$patient_item['theipid']]['sapv'][$sapv_key]['von-bis'] = date('d.m.Y', strtotime($sapv_detail['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($sapv_detail['verordnungbis']));
						$patientinfo[$patient_item['theipid']]['sapv'][$sapv_key]['status'] = $sapv_statuses[$sapv_detail['status']];
					}
				}
			}

			$data = $patientinfo;

			$alldata['data'] = $data;
			return $alldata;
		}

		private function voluntaryworkersvisits160912($params)
		{
			// report_id = 35(OLD)
			// report_name = Ehrenamtliche Besuche
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$all = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			$ipids = "'999999',";
			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}
			$drop = Doctrine_Query::create()
				->select('*')
				->from('PatientHospizvizits')
				->where('ipid in (' . substr($ipids, 0, -1) . ') and isdelete=0');
			$hospizvizits = $drop->fetchArray();

			foreach($hospizvizits as $ipid)
			{
				$ipid_str .= '"' . $ipid['ipid'] . '",';
			}

			if($ipid_str)
			{
				
			}
			else
			{
				$ipid_str = '"0",';
			}

			$patientvw = Doctrine_Query::create()
				->select("e.epid, p.ipid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name, birthd")
				->from('PatientMaster p')
				->Where('p.ipid in ("999999",' . substr($ipid_str, 0, -1) . ') and isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->groupBy('p.ipid');
			$patientvw->leftJoin("p.EpidIpidMapping e");
			$patientvw->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$patientvwarray = $patientvw->fetchArray();

			foreach($patientvwarray as $pat)
			{
				$patdetails[$pat['ipid']]['ipid'] = $pat['ipid'];
				$patdetails[$pat['ipid']]['lastname'] = $pat['last_name'];
				$patdetails[$pat['ipid']]['firstname'] = $pat['first_name'];
				$patdetails[$pat['ipid']]['birthd'] = date("d.m.Y", strtotime($pat['birthd']));
				$patdetails[$pat['ipid']]['epid'] = $pat["EpidIpidMapping"]['epid'];
				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($pat['ipid']);
				$patdetails[$pat['ipid']]['healthinsurance'] = $healthinsu_array[0]['company_name'];
				$hospv = new PatientHospizvizits();
				$minviz = $hospv->getfirstdatePatienthospizvizits($pat['ipid']);
				$beginvisit = $minviz[0]['hospizvizit_date'];
				$maxviz = $hospv->getlastdatePatienthospizvizits($pat['ipid']);
				$endvisit = $maxviz[0]['hospizvizit_date'];
				$duration = $hospv->getdurationPatienthospizvizits($pat['ipid']);
				$patdetails[$pat['ipid']]['duration'] = $duration[0]['duration'];
				$distance = $hospv->getdistancePatienthospizvizits($pat['ipid']);
				$patdetails[$pat['ipid']]['distance'] = $distance[0]['distance'];
				$patdetails[$pat['ipid']]['beginvisit'] = date("d.m.Y", strtotime($beginvisit));
				$patdetails[$pat['ipid']]['endvisit'] = date("d.m.Y", strtotime($endvisit));
			}

			foreach($patdetails as $keypatient => $patient)
			{
				$masterdata['data'][$keypatient]['epid'] = $patdetails[$keypatient]['epid'];
				$masterdata['data'][$keypatient]['lastname'] = $patdetails[$keypatient]['lastname'];
				$masterdata['data'][$keypatient]['firstname'] = $patdetails[$keypatient]['firstname'];
				$masterdata['data'][$keypatient]['birthd'] = $patdetails[$keypatient]['birthd'];
				$masterdata['data'][$keypatient]['healthinsurance'] = $patdetails[$keypatient]['healthinsurance'];
				$masterdata['data'][$keypatient]['beginvisit'] = $patdetails[$keypatient]['beginvisit'];
				$masterdata['data'][$keypatient]['endvisit'] = $patdetails[$keypatient]['endvisit'];
				$masterdata['data'][$keypatient]['duration'] = $patdetails[$keypatient]['duration'];
				$masterdata['data'][$keypatient]['distance'] = $patdetails[$keypatient]['distance'];
			}
			return $masterdata;
		}
		
		private function voluntaryworkersvisits_170829($params)
		{
			// report_id = 35 NEW
			// report_name = Ehrenamtliche Besuche
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
				
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$all = array();
			$dead = array();
			$standby = array();
		
			if($onlyactive == 0)
			{
				$all = $this->getActivePatients($quarterarr, $yeararr, $montharr);
		
				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}
		
				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}
		
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}
		
			$ipids = "'999999',";
			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}
			$drop = Doctrine_Query::create()
			->select('*')
			->from('PatientHospizvizits')
			->where('ipid in (' . substr($ipids, 0, -1) . ') and isdelete=0')
			->andWhere('' . str_replace('%date%', 'hospizvizit_date', $active_cond['date_sql']) . '');
			$hospizvizits = $drop->fetchArray();
		
			foreach($hospizvizits as $k => $h_data)
			{
				$ipid_str .= '"' . $h_data['ipid'] . '",';
				$patinet_h_visits[$h_data['ipid']] [ strtotime($h_data['hospizvizit_date']) ] [] = $h_data;
			}
		
			if($ipid_str)
			{
		
			}
			else
			{
				$ipid_str = '"0",';
			}
		
				
			// patient health insurance
			// hvisits details
			$fdoc = new Voluntaryworkers();
			$docarray = $fdoc->getClientsVoluntaryworkers($clientid);
				
				
			foreach($docarray as $k=>$vw_data){
				$vw_details[$vw_data['id']]['name']  = trim($vw_data['last_name']) . ", " . trim($vw_data['first_name']);
			}
				
				
			foreach($patinet_h_visits as $hipid=>$hvisits_arr){
				ksort($hvisits_arr);
		
				foreach($hvisits_arr as $day => $hvis){
					foreach($hvis as $lk=>$vis){
						//         			    $spatient_h_visits[$hipid][$vis['id']] = $vis;
						$spatient_h_visits[$hipid][$vis['id']]['vw_worker'] = $vw_details[$vis['vw_id']]['name'];
						$spatient_h_visits[$hipid][$vis['id']]['beginvisit'] = date('d.m.Y',strtotime($vis['hospizvizit_date']));
						$spatient_h_visits[$hipid][$vis['id']]['endvisit'] = date('d.m.Y',strtotime($vis['hospizvizit_date']));;
						$spatient_h_visits[$hipid][$vis['id']]['duration'] = $vis['besuchsdauer'];
						$spatient_h_visits[$hipid][$vis['id']]['distance'] = $vis['fahrtkilometer'];
						 
					}
					 
				}
				// 			    $spatient_h_visits[$hipid]= array_values($hvisits_arr);
			}
			// 			print_r($spatient_h_visits); exit;
			 
			//fb94d5be84f76ee7d39e109b294e55acb7f6746e
			 
			/*
			 $fdoc = new Voluntaryworkers();
			 $docarray = $fdoc->getClientsVoluntaryworkers($clientid);
			 	
			 foreach($hospizvizits as $value)
			 {
			 foreach($docarray as $name_user)
			 {
			 if($value['vw_id'] == $name_user['id'])
			 {
			 $dataneeded[$value['vw_id']]['voluntaryworker'] = trim($name_user['last_name']) . ", " . trim($name_user['first_name']);
			 }
			 }
			 $dataneeded[$value['vw_id']]['nrpatienten'] = $value['ipids'];
			 $dataneeded[$value['vw_id']]['duration'] = $value['duration'];
			 $dataneeded[$value['vw_id']]['distance'] = $value['distance'];
			 }
			 */
				
			 
			$patientvw = Doctrine_Query::create()
			->select("e.epid, p.ipid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name, birthd")
			->from('PatientMaster p')
			->Where('p.ipid in ("999999",' . substr($ipid_str, 0, -1) . ') and isdelete = 0')
			->andWhere('isstandby = 0')
			->andWhere('isstandbydelete = 0')
			->groupBy('p.ipid');
			$patientvw->leftJoin("p.EpidIpidMapping e");
			$patientvw->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$patientvwarray = $patientvw->fetchArray();
		
			// 			print_r($patientvwarray); exit;
				
			foreach($patientvwarray as $pat)
			{
				$patdetails[$pat['ipid']]['ipid'] = $pat['ipid'];
				$patdetails[$pat['ipid']]['lastname'] = $pat['last_name'];
				$patdetails[$pat['ipid']]['firstname'] = $pat['first_name'];
				$patdetails[$pat['ipid']]['birthd'] = date("d.m.Y", strtotime($pat['birthd']));
				$patdetails[$pat['ipid']]['epid'] = $pat["EpidIpidMapping"]['epid'];
		
				$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($pat['ipid']);
		
				$patdetails[$pat['ipid']]['healthinsurance'] = $healthinsu_array[0]['company_name'];
		
		
				/* $hospv = new PatientHospizvizits();
				 $minviz = $hospv->getfirstdatePatienthospizvizits($pat['ipid']);
		
				 $beginvisit = $minviz[0]['hospizvizit_date'];
				 $maxviz = $hospv->getlastdatePatienthospizvizits($pat['ipid']);
		
				 $endvisit = $maxviz[0]['hospizvizit_date'];
				 $duration = $hospv->getdurationPatienthospizvizits($pat['ipid']);
		
				 $patdetails[$pat['ipid']]['duration'] = $duration[0]['duration'];
		
				 $distance = $hospv->getdistancePatienthospizvizits($pat['ipid']);
		
				 $patdetails[$pat['ipid']]['distance'] = $distance[0]['distance'];
				 $patdetails[$pat['ipid']]['beginvisit'] = date("d.m.Y", strtotime($beginvisit));
				 $patdetails[$pat['ipid']]['endvisit'] = date("d.m.Y", strtotime($endvisit)); */
		
				$patdetails[$pat['ipid']]['visits'] = array_values($spatient_h_visits[$pat['ipid']]);
			}
		
				
			foreach($patdetails as $keypatient => $patient)
			{
				$masterdata['data'][$keypatient]['epid'] = $patdetails[$keypatient]['epid'];
				$masterdata['data'][$keypatient]['lastname'] = $patdetails[$keypatient]['lastname'];
				$masterdata['data'][$keypatient]['firstname'] = $patdetails[$keypatient]['firstname'];
				$masterdata['data'][$keypatient]['birthd'] = $patdetails[$keypatient]['birthd'];
				$masterdata['data'][$keypatient]['healthinsurance'] = $patdetails[$keypatient]['healthinsurance'];
				$masterdata['data'][$keypatient]['visits'] = $patdetails[$keypatient]['visits'];
		
				/* $masterdata['data'][$keypatient]['beginvisit'] = $patdetails[$keypatient]['beginvisit'];
				 $masterdata['data'][$keypatient]['endvisit'] = $patdetails[$keypatient]['endvisit'];
				 $masterdata['data'][$keypatient]['duration'] = $patdetails[$keypatient]['duration'];
				 $masterdata['data'][$keypatient]['distance'] = $patdetails[$keypatient]['distance']; */
			}
		
				
			return $masterdata;
		}

		private function voluntaryworkersvisits($params)
		{
			// report_id = 35 NEW
			// report_name = Ehrenamtliche Besuche
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
				
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$all = array();
			$dead = array();
			$standby = array();
		
			if($onlyactive == 0)
			{
				$all = $this->getActivePatients($quarterarr, $yeararr, $montharr);
		
				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}
		
				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}
		
			$ipids = '';
			$masterdata = array();
		
			if(empty($ipidarr))
			{
				return $masterdata;
			}
				
			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}
				
			$drop = Doctrine_Query::create()
			->select('*')
			->from('PatientHospizvizits')
			->where('ipid in (' . substr($ipids, 0, -1) . ') and isdelete=0')
			->andWhere('' . str_replace('%date%', 'hospizvizit_date', $active_cond['date_sql']) . '');
			$hospizvizits = $drop->fetchArray();
		
			if (empty($hospizvizits))
			{
				return $masterdata;
			}
				
			$ipids_viz = array();
			// grund details
			// hvisits details
			$vrs = new HospizVisitsTypes();
			$vrsarray = $vrs->get_client_hospiz_visits_types($clientid);
			//var_dump($vrsarray); exit;
			foreach($hospizvizits as $k => $h_data)
			{
				$ipids_viz[] = $h_data['ipid'];
				$h_data['grunddet'] = $vrsarray[$h_data['grund']]['grund'];
				$patient_h_visits[$h_data['ipid']] [ strtotime($h_data['hospizvizit_date']) ] [] = $h_data;
			}
				
			$connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
			if($connected_client){
				$clientid_for_vw = $connected_client;
			} else{
				$clientid_for_vw = $logininfo->clientid;
			}
				
			$vws = new Voluntaryworkers();
			$vwsarray = $vws->getClientsVoluntaryworkers($clientid_for_vw);
				
			foreach($vwsarray as $k=>$vw_data){
				$vw_details[$vw_data['id']]['name']  = trim($vw_data['last_name']) . ", " . trim($vw_data['first_name']);
			}
				
			// patient health insurance
			$phelathinsurance = new PatientHealthInsurance();
			//$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($pat['ipid']);
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($ipids_viz);
			//var_dump($healthinsu_array); exit;
			foreach($healthinsu_array as $keyh=>$valh)
			{
				$pathealthinsuarr[$valh['ipid']] = $valh;
			}
				
			$patientvw = Doctrine_Query::create()
			->select("e.epid, p.ipid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name, birthd")
			->from('PatientMaster p')
			//->Where('p.ipid in ("999999",' . substr($ipid_str, 0, -1) . ') and isdelete = 0')
			->whereIn("ipid", $ipids_viz)
			->andWhere('isdelete = 0')
			->andWhere('isstandby = 0')
			->andWhere('isstandbydelete = 0')
			->groupBy('p.ipid');
			$patientvw->leftJoin("p.EpidIpidMapping e");
			$patientvw->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$patientvwarray = $patientvw->fetchArray();
				
			// 			print_r($patientvwarray); exit;
		
			foreach($patientvwarray as $pat)
			{
				$patdetails[$pat['ipid']]['ipid'] = $pat['ipid'];
				$patdetails[$pat['ipid']]['lastname'] = $pat['last_name'];
				$patdetails[$pat['ipid']]['firstname'] = $pat['first_name'];
				$patdetails[$pat['ipid']]['birthd'] = date("d.m.Y", strtotime($pat['birthd']));
				$patdetails[$pat['ipid']]['epid'] = $pat["EpidIpidMapping"]['epid'];
					
				/*$phelathinsurance = new PatientHealthInsurance();
				 $healthinsu_array = $phelathinsurance->getPatientHealthInsurance($pat['ipid']);*/
					
				//$patdetails[$pat['ipid']]['healthinsurance'] = $healthinsu_array[0]['company_name'];
				$patdetails[$pat['ipid']]['healthinsurance'] = $pathealthinsuarr[$pat['ipid']]['company_name'];
					
				//$patdetails[$pat['ipid']]['visits'] = array_values($spatient_h_visits[$pat['ipid']]);
			}
				
			//print_r($patdetails); exit;
			foreach($patient_h_visits as $hipid=>$hvisits_arr){
				ksort($hvisits_arr);
		
				foreach($hvisits_arr as $day => $hvis){
					foreach($hvis as $lk=>$vis){
						$spatient_h_visits[$hipid][$vis['id']]['vw_worker'] = $vw_details[$vis['vw_id']]['name'];
						$spatient_h_visits[$hipid][$vis['id']]['beginvisit'] = date('d.m.Y',strtotime($vis['hospizvizit_date']));
						$spatient_h_visits[$hipid][$vis['id']]['endvisit'] = date('d.m.Y',strtotime($vis['hospizvizit_date']));;
						$spatient_h_visits[$hipid][$vis['id']]['duration'] = $vis['besuchsdauer'];
						$spatient_h_visits[$hipid][$vis['id']]['distance'] = $vis['fahrtkilometer'];
						 
					}
					 
				}
			}
			//print_r($spatient_h_visits); exit;
				
			foreach($spatient_h_visits as $keypat => $visitspat)
			{
				$masterdata['data'][$keypat]['epid'] = $patdetails[$keypat]['epid'];
				$masterdata['data'][$keypat]['lastname'] = $patdetails[$keypat]['lastname'];
				$masterdata['data'][$keypat]['firstname'] = $patdetails[$keypat]['firstname'];
				$masterdata['data'][$keypat]['birthd'] = $patdetails[$keypat]['birthd'];
				$masterdata['data'][$keypat]['healthinsurance'] = $patdetails[$keypat]['healthinsurance'];
		
				foreach($visitspat as $kev=>$valv)
				{
					$masterdata['data'][$keypat]['visits'][] = $valv;
				}
		
			}			
		
			//print_r($masterdata); exit;
			return $masterdata;
		}		
		
		private function voluntaryworkersvisits3($params)
		{
			// report_id = 183 NEW
			// report_name = Ehrenamtliche Miterbeiter
			//ISPC-2050 - change the existing report Erhrenamtliche Besuche and add 2 colums for Fahrtzeit (drivetime) and Grund (reason); add an overall average for the time coloumn. 
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
 
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$all = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			$ipids = '';
			$masterdata = array();
				
			if(empty($ipidarr))
			{
				return $masterdata;
			}
			
			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}
			
			$drop = Doctrine_Query::create()
				->select('*')
				->from('PatientHospizvizits')
				->where('ipid in (' . substr($ipids, 0, -1) . ') and isdelete=0')
			     ->andWhere('' . str_replace('%date%', 'hospizvizit_date', $active_cond['date_sql']) . '');
			$hospizvizits = $drop->fetchArray();

			if (empty($hospizvizits))
			{
				return $masterdata;
			}
			
			$ipids_viz = array();
			// grund details
			// hvisits details
			$vrs = new HospizVisitsTypes();
			$vrsarray = $vrs->get_client_hospiz_visits_types($clientid);
			//var_dump($vrsarray); exit;
			foreach($hospizvizits as $k => $h_data)
			{
				$ipids_viz[] = $h_data['ipid'];
				$h_data['grunddet'] = $vrsarray[$h_data['grund']]['grund'];
				$patient_h_visits[$h_data['ipid']] [ strtotime($h_data['hospizvizit_date']) ] [] = $h_data; 
			}

			$connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
			if($connected_client){
				$clientid_for_vw = $connected_client;
			} else{
				$clientid_for_vw = $logininfo->clientid;
			}
			
			$vws = new Voluntaryworkers();
			$vwsarray = $vws->getClientsVoluntaryworkers($clientid_for_vw);
			
			foreach($vwsarray as $k=>$vw_data){
			    $vw_details[$vw_data['id']]['name']  = trim($vw_data['last_name']) . ", " . trim($vw_data['first_name']);
			}
			
			// patient health insurance
			$phelathinsurance = new PatientHealthInsurance();
			//$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($pat['ipid']);
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($ipids_viz);
			//var_dump($healthinsu_array); exit;
			foreach($healthinsu_array as $keyh=>$valh)
			{
				$pathealthinsuarr[$valh['ipid']] = $valh;
			}
			
			$patientvw = Doctrine_Query::create()
			->select("e.epid, p.ipid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name, birthd")
			->from('PatientMaster p')
			//->Where('p.ipid in ("999999",' . substr($ipid_str, 0, -1) . ') and isdelete = 0')
			->whereIn("ipid", $ipids_viz)
			->andWhere('isdelete = 0')
// 			->andWhere('isstandby = 0')
// 			->andWhere('isstandbydelete = 0')
			->groupBy('p.ipid');
			$patientvw->leftJoin("p.EpidIpidMapping e");
			$patientvw->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$patientvwarray = $patientvw->fetchArray();
			
			// 			print_r($patientvwarray); exit;
				
			foreach($patientvwarray as $pat)
			{
				$patdetails[$pat['ipid']]['ipid'] = $pat['ipid'];
				$patdetails[$pat['ipid']]['lastname'] = $pat['last_name'];
				$patdetails[$pat['ipid']]['firstname'] = $pat['first_name'];
				$patdetails[$pat['ipid']]['birthd'] = date("d.m.Y", strtotime($pat['birthd']));
				$patdetails[$pat['ipid']]['epid'] = $pat["EpidIpidMapping"]['epid'];
			
				/*$phelathinsurance = new PatientHealthInsurance();
				$healthinsu_array = $phelathinsurance->getPatientHealthInsurance($pat['ipid']);*/
			
				//$patdetails[$pat['ipid']]['healthinsurance'] = $healthinsu_array[0]['company_name'];
				$patdetails[$pat['ipid']]['healthinsurance'] = $pathealthinsuarr[$pat['ipid']]['company_name'];
			
				//$patdetails[$pat['ipid']]['visits'] = array_values($spatient_h_visits[$pat['ipid']]);
			}
			
			//print_r($patdetails); exit;
			foreach($patient_h_visits as $hipid=>$hvisits_arr){
			    ksort($hvisits_arr);

			    foreach($hvisits_arr as $day => $hvis){
			        foreach($hvis as $lk=>$vis){
        			    $spatient_h_visits[$hipid][$vis['id']]['vw_worker'] = $vw_details[$vis['vw_id']]['name'];
        			    $spatient_h_visits[$hipid][$vis['id']]['beginvisit'] = date('d.m.Y',strtotime($vis['hospizvizit_date']));
        			    $spatient_h_visits[$hipid][$vis['id']]['endvisit'] = date('d.m.Y',strtotime($vis['hospizvizit_date']));;
        			    $spatient_h_visits[$hipid][$vis['id']]['duration'] = $vis['besuchsdauer'];
        			    $spatient_h_visits[$hipid][$vis['id']]['distance'] = $vis['fahrtkilometer'];
        			    $spatient_h_visits[$hipid][$vis['id']]['driving_time_count'] = $vis['fahrtzeit'];
        			    $spatient_h_visits[$hipid][$vis['id']]['visit_reason'] = $vis['grunddet'];
        			    
			        }
			        
			    }
			}
 			//print_r($spatient_h_visits); exit;
			
			foreach($spatient_h_visits as $keypat => $visitspat)
			{
				$masterdata['data'][$keypat]['epid'] = $patdetails[$keypat]['epid'];
				$masterdata['data'][$keypat]['lastname'] = $patdetails[$keypat]['lastname'];
				$masterdata['data'][$keypat]['firstname'] = $patdetails[$keypat]['firstname'];
				$masterdata['data'][$keypat]['birthd'] = $patdetails[$keypat]['birthd'];
				$masterdata['data'][$keypat]['healthinsurance'] = $patdetails[$keypat]['healthinsurance'];
				
				foreach($visitspat as $kev=>$valv)
				{
					$masterdata['data'][$keypat]['visits'][] = $valv;
					$vw_sum['number_of_visits'] += 1;
					$vw_sum['visit_time_sum'] += $valv['duration'];
					$vw_sum['driving_time_sum'] += $valv['driving_time_count'];
				}
				
			}
			$masterdata['average_vizit_time'] = round($vw_sum['visit_time_sum']/$vw_sum['number_of_visits'], 2);
			$masterdata['average_driving_time'] = round($vw_sum['driving_time_sum']/$vw_sum['number_of_visits'], 2);
			

		//print_r($masterdata); exit;	
			return $masterdata;
		}

		private function voluntaryworkers($params)
		{
			// report_id = 36
			// report_name =Ehrenamtlichen / Koordinator
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();


			$connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
			if($connected_client){
				$clientid = $connected_client;
			} else{
				$clientid = $logininfo->clientid;
			}
			
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$all = $this->getActivePatients($quarterarr, $yeararr, $montharr);
				//			$all = $this->getClientPatientsByPeriod($clientid, $whereepid, $quarterarr, $yeararr, $montharr);
				$ipidarr = array_merge($all);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			$fdoc = new Voluntaryworkers();
			$docarray = $fdoc->getClientsVoluntaryworkers($clientid);
			$vw_details_arr = array();
			foreach($docarray  as $k=>$vwdata){
			    $vw_ids[] = $vwdata['id'];
			    $vw_details_arr[$vwdata['id']] = $vwdata;
			    
			}
            If(empty($vw_ids)){
                $vw_ids[] = "99999999999";
            }
			
			$drop = Doctrine_Query::create()
				->select('*, besuchsdauer as duration, fahrtkilometer as distance')
				->from('PatientHospizvizits')
				->where('ipid in ("999999",' . substr($ipids, 0, -1) . ') and isdelete=0 and (' . str_replace('%date%', 'hospizvizit_date', $active_cond['date_sql']) . ') ')
				->andWhereIn('vw_id',$vw_ids)
				->orderBy('vw_id, ipid');
				
			$hospizvizits = $drop->fetchArray();
			
 
			$vwid = '';
			foreach($hospizvizits as $value)
			{			

				if (isset($vw_details_arr[$value['vw_id']])) {
					$dataneeded[$value['vw_id']]['voluntaryworker'] = trim($vw_details_arr[$value['vw_id']]['last_name']) . ", " . trim($vw_details_arr[$value['vw_id']]['first_name']);
				}
				
				$dataneeded[$value['vw_id']]['duration'] += (int)$value['duration'];
				
				$dataneeded[$value['vw_id']]['distance'] += (int)$value['distance'];
				
				if (! isset($dataneeded[$value['vw_id']]['duration_nightshift'])){
					$dataneeded[$value['vw_id']]['duration_nightshift'] = 0;
				}
				if($value['nightshift'] == '1') {
					$dataneeded[$value['vw_id']]['duration_nightshift'] += (int)$value['duration'];
				}
				
				$dataneeded[$value['vw_id']]['my_ipids'][] = $value['ipid']; 
				
				$dataneeded[$value['vw_id']]['nrpatienten'] = count(array_unique($dataneeded[$value['vw_id']]['my_ipids']));
				
				continue;
				if($vwid != $value['vw_id'])
				{
					$vwid = $value['vw_id'];
					foreach($docarray as $name_user)
					{
						if($value['vw_id'] == $name_user['id'])
						{
							$dataneeded[$value['vw_id']]['voluntaryworker'] = trim($name_user['last_name']) . ", " . trim($name_user['first_name']);
						}
					}
					$valipid = $value['ipid'];
					$dataneeded[$value['vw_id']]['nrpatienten'] = 1;
					if($value['duration'] != '')
					{
						$dataneeded[$value['vw_id']]['duration'] = $value['duration'];
					}
					else 
					{
						$dataneeded[$value['vw_id']]['duration'] = 0;
					}
					if($value['distance'] != '')
					{
						$dataneeded[$value['vw_id']]['distance'] = $value['distance'];
					}
					else 
					{
						$dataneeded[$value['vw_id']]['distance'] = 0;
					}
					
					if($value['nightshift'] == '1')
					{						
						$dataneeded[$value['vw_id']]['duration_nightshift'] = $dataneeded[$value['vw_id']]['duration'];
					}
					else
					{
						$dataneeded[$value['vw_id']]['duration_nightshift'] = 0;
					}
				}
				else 
				{
					if($value['ipid'] != $valipid)
					{
						$dataneeded[$value['vw_id']]['nrpatienten'] += 1;
						$valipid = $value['ipid'];
					}
					$dataneeded[$value['vw_id']]['duration'] += $value['duration'];
					$dataneeded[$value['vw_id']]['distance'] += $value['distance'];
					if($value['nightshift'] == '1')
					{
					
						$dataneeded[$value['vw_id']]['duration_nightshift'] += $value['duration'];
					}
					else 
					{
						$dataneeded[$value['vw_id']]['duration_nightshift'] += 0;
					}
				}
			}

			foreach($dataneeded as $keyworker => $worker)
			{

				$masterdata['data'][$keyworker]['voluntaryworker'] = $dataneeded[$keyworker]['voluntaryworker'];
				$masterdata['data'][$keyworker]['nrpatienten'] = $dataneeded[$keyworker]['nrpatienten'];
				$masterdata['data'][$keyworker]['duration'] = $dataneeded[$keyworker]['duration'];
				$masterdata['data'][$keyworker]['duration_nightshift'] = $dataneeded[$keyworker]['duration_nightshift'];
				$masterdata['data'][$keyworker]['distance'] = $dataneeded[$keyworker]['distance'];
			}
			return $masterdata;
		}

		private function anfragendePerson($params)
		{
			// report_id = 22
			// report_name = Anfragende Person / Überwiesen durch
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$all = $this->getClientPatientsByPeriod($clientid, $whereepid, $quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}
				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$patients = Doctrine_Query::create()
				->select("count(pm.ipid) as count, pm.referred_by")
				->from('PatientMaster pm')
				->where('pm.ipid IN ("999999",' . substr($ipids, 0, -1) . ')')
				->groupBy('pm.referred_by');
			$i = 0;
			$patarray = $patients->fetchArray();

			foreach($patarray as $refarr)
			{
				$total += $refarr['count'];
			}

			$refarray = PatientReferredBy::getPatientReferredByreport($logininfo->clientid, 0);

			foreach($refarray as $refname)
			{
				$refnamearray[$refname['id']] = $refname['referred_name'];
			}
			$refnamearray[0] = 'keine Angabe';

			
			if($_REQUEST['dbg'] == "1"){

				$epidipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->where('ipid IN  ("999999",' . substr($ipids, 0, -1) . ')');
				$epidarr = $epidipid->fetchArray();
					
				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];
				}
					
				$patients_details = Doctrine_Query::create()
				->select("referred_by,ipid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name")
				->from('PatientMaster')
				->where('ipid IN ("999999",' . substr($ipids, 0, -1) . ')');
				$patarray_full = $patients_details->fetchArray();
				foreach($patarray_full as $k=>$datap){
					$details[$refnamearray[$datap['referred_by']]][] = $epid[$datap['ipid']].' ('.$datap['last_name'].', '.$datap['first_name'].')';
					$details_epids[$datap['referred_by']] .= $epid[$datap['ipid']].', ';
				}
				//print_r($details); exit;
			}
			
			
			foreach($patarray as $key => $refarr)
			{
				$data[$key]['referredby'] = $refnamearray[$refarr['referred_by']];
				if($_REQUEST['dbg'] == "1"){
					$data[$key]['count'] = $refarr['count'].' ('.$details_epids[$refarr['referred_by']].')';
				} else{
					$data[$key]['count'] = $refarr['count'];
				}
				$data[$key]['percentage'] = round(($refarr['count'] / $total * 100), 2) . ' %';
			}

			$alldata['extra']['sum'] = $total;
			$alldata['data'] = $data;

			return $alldata;
		}

		public function akutellepatient($params)
		{
			// report_id = 9
			// report_name = Aktuelle Patienten Version 1
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				//Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				$patientexec = $patientMasterData->fetchArray();

				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}

				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']] = $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
						}

						if(strlen($doc['street1']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
						}
						if(strlen($doc['street2']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
						}
						if(strlen($doc['postcode']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['postcode'] . ", ";
						}
						if(strlen($doc['city']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['city'];
						}
					}
				}

				$dropSapv = Doctrine_Query::create()
					->select('*, GROUP_CONCAT(verordnet) as vero')
					->from('SapvVerordnung')
					->where('ipid IN (' . $ipidsactive . ') and isdelete=0 and status != 1 ')
					->andWhere("verordnungbis >='" . date('Y-m-d', mktime(0, 0, 0, date('m'), date('d'), date('Y'))) . " 00:00:00'")
					->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();

				foreach($droparray as $verord)
				{
					$sapv = explode(',', $verord['vero']);
					$s = max($sapv);
					if($s == "1")
					{
						$sapv_value[$verord['ipid']] = "BE";
					}
					elseif($s == "2")
					{
						$sapv_value[$verord['ipid']] = "KO";
					}
					elseif($s == "3")
					{
						$sapv_value[$verord['ipid']] = "TV";
					}
					elseif($s == "4")
					{
						$sapv_value[$verord['ipid']] = "VO";
					}
					else
					{
						$sapv_value[$verord['ipid']] = "-";
					}
				}


				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}


				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');


				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}
				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');

				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();
				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
				}

				foreach($patientexec as $patient)
				{
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']];
					$MasterData['data'][$keypatient]['vo'] = $sapv_value[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['symptom'] = "  ";
					$MasterData['data'][$keypatient]['pflege'] = "  ";

					$treatedby = "";
					$inc = 1;
					foreach($treatedbyarray as $k_treated => $treatedbyy)
					{
						if($treatedbyy['epid'] == $epidarray[$keypatient]['epid'])
						{

							$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . "<br />";
						}
						$i++;
					}
					$MasterData['data'][$keypatient]['treatedby'] = substr($treatedby, 0, -6);
				}
				return $MasterData;
			}
		}

		public function akutellepatient_contact($params)
		{
			// report_id = 88
			// report_name = Aktuelle Patienten Nürnberger Land
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				/* -------------------------Get client Main Diagnosis type ------------------------------------------ */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";

				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}

				/* -------------------------Get Patient Master Data------------------------------------------ */
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				$patientexec = $patientMasterData->fetchArray();

				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}

				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['phone']) > 0)
					{
						$patientinfo[$patient['ipid']]['phone'] = $patient['phone'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['street1']) > 0)
					{
						$address[$patient['ipid']] .= $patient['street1'] . '<br />';
					}
					if(strlen($patient['zip']) > 0)
					{
						$address[$patient['ipid']] .= $patient['zip'] . ', ';
					}
					if(strlen($patient['city']) > 0)
					{
						$address[$patient['ipid']] .= $patient['city'];
					}

					$parient_address[$patient['ipid']]['address'] = $address[$patient['ipid']];
				}

				/* -------------------------Get contact persons------------------------------------------ */
				$Contactperson = array();
				$contact = new ContactPersonMaster();
				$contactpersons_array = $contact->getContactPersonsByIpids($activeipids, "ipid");

				foreach($contactpersons_array as $contact_item)
				{
					if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_last_name'] . ',';
					}

					if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
					}
					if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
					}
					if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
					}
					if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_city'] . '';
					}
					if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />Telefon: ' . $contact_item['cnt_phone'];
					}
				}

				/* -------------------------Get Family doctors details------------------------------------------ */
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']] = $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
						}

						if(strlen($doc['street1']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
						}
						if(strlen($doc['street2']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
						}
						if(strlen($doc['postcode']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['postcode'] . ", ";
						}
						if(strlen($doc['city']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['city'];
						}
					}
				}

				/* -------------------------Get SAPV details------------------------------------------ */
				$dropSapv = Doctrine_Query::create()
					->select('*, GROUP_CONCAT(verordnet) as vero')
					->from('SapvVerordnung')
					->where('ipid IN (' . $ipidsactive . ') and isdelete=0 and status != 1 ')
					->andWhere("verordnungbis >='" . date('Y-m-d', mktime(0, 0, 0, date('m'), date('d'), date('Y'))) . " 00:00:00'")
					->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();

				foreach($droparray as $verord)
				{
					$sapv = explode(',', $verord['vero']);
					$s = max($sapv);
					if($s == "1")
					{
						$sapv_value[$verord['ipid']] = "BE";
					}
					elseif($s == "2")
					{
						$sapv_value[$verord['ipid']] = "KO";
					}
					elseif($s == "3")
					{
						$sapv_value[$verord['ipid']] = "TV";
					}
					elseif($s == "4")
					{
						$sapv_value[$verord['ipid']] = "VO";
					}
					else
					{
						$sapv_value[$verord['ipid']] = "-";
					}
				}

				/* -------------------------Get Patients Epids------------------------------------------ */
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				/* -------------------------Get treated by ------------------------------------------ */
				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');
				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}

				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');
				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();

				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
				}

				/* ------------------------- DISPLAY MASTER DATA ------------------------------------------ */
				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['pat_addresse'] = $parient_address[$keypatient]['address'];
					$MasterData['data'][$keypatient]['phone'] = $patientinfo[$keypatient]['phone'];
					$MasterData['data'][$keypatient]['contactperson'] = $Contactperson[$keypatient];
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']];
					$MasterData['data'][$keypatient]['vo'] = $sapv_value[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['symptom'] = "  ";
					$MasterData['data'][$keypatient]['pflege'] = "  ";

					$treatedby = "";
					$inc = 1;
					foreach($treatedbyarray as $k_treated => $treatedbyy)
					{
						if($treatedbyy['epid'] == $epidarray[$keypatient]['epid'])
						{

							$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . "<br />";
						}
						$i++;
					}
					$MasterData['data'][$keypatient]['treatedby'] = substr($treatedby, 0, -6);
				}
				return $MasterData;
			}
		}

		public function akutellepatient_niedersachsen($params)
		{
			// report_id = 90
			// report_name = Aktuelle Patienten   Niedersachsen
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				/* -------------------------Get client Main Diagnosis type ------------------------------------------ */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";

				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )


				/* -------------------------Get Patients - Active locations------------------------------------------ */
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');
				$patlocs = $patloc->execute();

				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}
					if(strlen($patientlocationstr) == 0)
					{
						$patientlocationstr = "'0'";
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id IN (" . $patientlocationstr . ")")
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}

					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);

						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ';
								}

								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']] = $locationLastData[$v_loc['location_id']]['location'];
						}
					}
				}

				$actual_location = $locaray[0]['location'];

				/* -------------------------Get Patient Medication Data------------------------------------------ */
				$drugs = Doctrine_Query::create()
					->select('*')
					->from('PatientDrugPlan')
					->whereIn('ipid', $activeipids)
					->andWhere("isdelete = '0'")
					->orderBy("id ASC");
				$drugsarray = $drugs->fetchArray();

				foreach($drugsarray as $key => $drugp)
				{
					$master_meds[] = $drugp['medication_master_id'];
				}
				if(empty($master_meds))
				{
					$master_meds['999999999'] = 'XXXXX';
				}

				$medic = Doctrine_Query::create()
					->select('*')
					->from('Medication')
					->whereIn("id", $master_meds);
//			->andWhere('isdelete = "0"');
				$master_medication = $medic->fetchArray();

				foreach($master_medication as $k_medi => $v_medi)
				{
					$medications[$v_medi['id']] = $v_medi['name'];
				}

				foreach($drugsarray as $key => $drugp)
				{
					$patient_medication[$drugp['ipid']][] = $medications[$drugp['medication_master_id']] . ' | ' . $drugp['dosage'];
				}

				/* -------------------------Get Client Pflegedienst------------------------------------------ */
				$clpfle = Doctrine_Query::create()
					->select("*")
					->from('Pflegedienstes')
					->where('clientid = ' . $clientid);
				$clpflearray = $clpfle->fetchArray();

				foreach($clpflearray as $valo)
				{
					$pflegedienste[$valo['id']]['id'] = $valo['id'];
					$pflegedienste[$valo['id']]['name'] = $valo['nursing'];
				}

				/* -------------------------Get Patient Pflegedienst------------------------------------------ */
				$patientpfle = Doctrine_Query::create()
					->select("*")
					->from('PatientPflegedienste p')
					->whereIn('p.ipid', $activeipids)
					->andwhere('p.isdelete = 0');
				$patientpflearray = $patientpfle->fetchArray();

				$ppfle = array();
				foreach($patientpflearray as $key => $pfle)
				{
					$ppfle[$pfle['ipid']]['id'][] = $pfle['pflid'];
					$ppfle[$pfle['ipid']]['name'][] = $pflegedienste[$pfle['pflid']]['name'];
				}

				/* -------------------------Get Patient Master Data------------------------------------------ */
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				$patientexec = $patientMasterData->fetchArray();

				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}

				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['phone']) > 0)
					{
						$patientinfo[$patient['ipid']]['phone'] = $patient['phone'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['street1']) > 0)
					{
						$address[$patient['ipid']] .= $patient['street1'] . '<br />';
					}
					if(strlen($patient['zip']) > 0)
					{
						$address[$patient['ipid']] .= $patient['zip'] . ', ';
					}
					if(strlen($patient['city']) > 0)
					{
						$address[$patient['ipid']] .= $patient['city'];
					}

					$parient_address[$patient['ipid']]['address'] = $address[$patient['ipid']];
				}

				/* -------------------------Get contact persons------------------------------------------ */
				$Contactperson = array();
				$contact = new ContactPersonMaster();
				$contactpersons_array = $contact->getContactPersonsByIpids($activeipids, "ipid");

				foreach($contactpersons_array as $contact_item)
				{
					if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_last_name'] . ',';
					}
					if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
					}
					if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
					}
					if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
					}
					if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_city'] . '';
					}
					if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />Telefon: ' . $contact_item['cnt_phone'];
					}
				}

				/* -------------------------Get Patients Epids------------------------------------------ */
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				/* -------------------------Get treated by ------------------------------------------ */
				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');
				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}

				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');

				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();

				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " .$usertreated['last_name'] . ", " . $usertreated['first_name'];
				}

				/* ------------------------- DISPLAY MASTER DATA ------------------------------------------ */
				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['pat_addresse'] = $parient_address[$keypatient]['address'];
					$MasterData['data'][$keypatient]['phone'] = $patientinfo[$keypatient]['phone'];
					$MasterData['data'][$keypatient]['contactperson'] = $Contactperson[$keypatient];
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['medication'] = implode(',<hr/> ', $patient_medication[$keypatient]);
					$MasterData['data'][$keypatient]['pflegedienst'] = implode(', ', $ppfle[$keypatient]['name']);
					$treatedby = "";
					$inc = 1;
					foreach($treatedbyarray as $k_treated => $treatedbyy)
					{
						if($treatedbyy['epid'] == $epidarray[$keypatient]['epid'])
						{
							$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . "<br />";
						}
						$i++;
					}
					$MasterData['data'][$keypatient]['treatedby'] = substr($treatedby, 0, -6);
				}
				return $MasterData;
			}
		}

		public function akutellepatient_niedersachsen_amb($params)
		{
			// report_id = 91
			// report_name = Aktuelle Patienten   Niedersachsen amb
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				/* -------------------------Get client Main Diagnosis type ------------------------------------------ */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";

				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}

				/* -------------------------Get Patients - Contact persons for Locations ------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )

				/* -------------------------Get Patients - Active locations------------------------------------------ */
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');
				$patlocs = $patloc->execute();

				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}

					if(strlen($patientlocationstr) == 0)
					{
						$patientlocationstr = "'0'";
					}


					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id IN (" . $patientlocationstr . ")")
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();


					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}

					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);

						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];

							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ';
								}
								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']] = $locationLastData[$v_loc['location_id']]['location'];
						}

						$patient_location_type[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
					}
				}

				$actual_location = $locaray[0]['location'];
				/* -------------------------Get Patient Medication Data------------------------------------------ */

				$drugs = Doctrine_Query::create()
					->select('*')
					->from('PatientDrugPlan')
					->whereIn('ipid', $activeipids)
					->andWhere("isdelete = '0'")
					->orderBy("id ASC");
				$drugsarray = $drugs->fetchArray();

				foreach($drugsarray as $key => $drugp)
				{
					$master_meds[] = $drugp['medication_master_id'];
				}
				if(empty($master_meds))
				{
					$master_meds['999999999'] = 'XXXXX';
				}

				$medic = Doctrine_Query::create()
					->select('*')
					->from('Medication')
					->whereIn("id", $master_meds);
//			->andWhere('isdelete = "0"');
				$master_medication = $medic->fetchArray();

				foreach($master_medication as $k_medi => $v_medi)
				{
					$medications[$v_medi['id']] = $v_medi['name'];
				}


				foreach($drugsarray as $key => $drugp)
				{
					$patient_medication[$drugp['ipid']][] = $medications[$drugp['medication_master_id']] . ' | ' . $drugp['dosage'];
				}

				/* -------------------------Get Client Pflegedienst------------------------------------------ */
				$clpfle = Doctrine_Query::create()
					->select("*")
					->from('Pflegedienstes')
					->where('clientid = ' . $clientid);
				$clpflearray = $clpfle->fetchArray();

				foreach($clpflearray as $valo)
				{
					$pflegedienste[$valo['id']]['id'] = $valo['id'];
					$pflegedienste[$valo['id']]['name'] = $valo['nursing'];
				}

				/* -------------------------Get Patient Pflegedienst------------------------------------------ */
				$patientpfle = Doctrine_Query::create()
					->select("*")
					->from('PatientPflegedienste p')
					->whereIn('p.ipid', $activeipids)
					->andwhere('p.isdelete = 0');
				$patientpflearray = $patientpfle->fetchArray();

				$ppfle = array();
				foreach($patientpflearray as $key => $pfle)
				{
					$ppfle[$pfle['ipid']]['id'][] = $pfle['pflid'];
					$ppfle[$pfle['ipid']]['name'][] = $pflegedienste[$pfle['pflid']]['name'];
				}

				/* -------------------------Get Patient Master Data------------------------------------------ */
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				$patientexec = $patientMasterData->fetchArray();

				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}

				foreach($patientexec as $patient)
				{
					if($patient_location_type[$patient['ipid']]['location_type'] != '2')
					{

						$patientMasterDetails[$patient['ipid']] = $patient;
						if(strlen($patient["last_name"]) > 0)
						{
							$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
						}
						if(strlen($patient['first_name']) > 0)
						{
							$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
						}
						if(strlen($patient['phone']) > 0)
						{
							$patientinfo[$patient['ipid']]['phone'] = $patient['phone'];
						}
						if(strlen($patient['birthd']) > 0)
						{
							$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
						}

						if(strlen($patient['street1']) > 0)
						{
							$address[$patient['ipid']] .= $patient['street1'] . '<br />';
						}
						if(strlen($patient['zip']) > 0)
						{
							$address[$patient['ipid']] .= $patient['zip'] . ', ';
						}
						if(strlen($patient['city']) > 0)
						{
							$address[$patient['ipid']] .= $patient['city'];
						}

						$parient_address[$patient['ipid']]['address'] = $address[$patient['ipid']];
					}
				}

				/* -------------------------Get contact persons------------------------------------------ */
				$Contactperson = array();
				$contact = new ContactPersonMaster();
				$contactpersons_array = $contact->getContactPersonsByIpids($activeipids, "ipid");

				foreach($contactpersons_array as $contact_item)
				{
					if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_last_name'] . ',';
					}

					if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
					}

					if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
					}

					if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
					}
					if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_city'] . '';
					}
					if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />Telefon: ' . $contact_item['cnt_phone'];
					}
				}

				/* -------------------------Get Patients Epids------------------------------------------ */
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				/* -------------------------Get treated by ------------------------------------------ */
				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');
				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}

				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');

				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();

				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
				}


				/* ------------------------- DISPLAY MASTER DATA ------------------------------------------ */
				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['pat_addresse'] = $parient_address[$keypatient]['address'];
					$MasterData['data'][$keypatient]['phone'] = $patientinfo[$keypatient]['phone'];
					$MasterData['data'][$keypatient]['contactperson'] = $Contactperson[$keypatient];
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['medication'] = implode(',<hr/> ', $patient_medication[$keypatient]);
					$MasterData['data'][$keypatient]['pflegedienst'] = implode(', ', $ppfle[$keypatient]['name']);
					$treatedby = "";
					$inc = 1;
					foreach($treatedbyarray as $k_treated => $treatedbyy)
					{
						if($treatedbyy['epid'] == $epidarray[$keypatient]['epid'])
						{

							$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . "<br />";
						}
						$i++;
					}
					$MasterData['data'][$keypatient]['treatedby'] = substr($treatedby, 0, -6);
				}
				return $MasterData;
			}
		}

		public function akutellepatient_niedersachsen_hospiz($params)
		{
			// report_id = 92
			// report_name = Aktuelle Patienten Niedersachsen Hospiz
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				/* -------------------------Get client Main Diagnosis type ------------------------------------------ */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";

				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )

				/* -------------------------Get Patients - Active locations------------------------------------------ */
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');
				$patlocs = $patloc->execute();


				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}

					if(strlen($patientlocationstr) == 0)
					{
						$patientlocationstr = "'0'";
					}


					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id IN (" . $patientlocationstr . ")")
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();


					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}

					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);

						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ';
								}

								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']] = $locationLastData[$v_loc['location_id']]['location'];
						}

						$patient_location_type[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
					}
				}

				$actual_location = $locaray[0]['location'];
				/* -------------------------Get Patient Medication Data------------------------------------------ */

				$drugs = Doctrine_Query::create()
					->select('*')
					->from('PatientDrugPlan')
					->whereIn('ipid', $activeipids)
					->andWhere("isdelete = '0'")
					->orderBy("id ASC");
				$drugsarray = $drugs->fetchArray();

				foreach($drugsarray as $key => $drugp)
				{
					$master_meds[] = $drugp['medication_master_id'];
				}
				if(empty($master_meds))
				{
					$master_meds['999999999'] = 'XXXXX';
				}

				$medic = Doctrine_Query::create()
					->select('*')
					->from('Medication')
					->whereIn("id", $master_meds);
//			->andWhere('isdelete = "0"');
				$master_medication = $medic->fetchArray();

				foreach($master_medication as $k_medi => $v_medi)
				{
					$medications[$v_medi['id']] = $v_medi['name'];
				}


				foreach($drugsarray as $key => $drugp)
				{
					$patient_medication[$drugp['ipid']][] = $medications[$drugp['medication_master_id']] . ' | ' . $drugp['dosage'];
				}

				/* -------------------------Get Client Pflegedienst------------------------------------------ */
				$clpfle = Doctrine_Query::create()
					->select("*")
					->from('Pflegedienstes')
					->where('clientid = ' . $clientid);
				$clpflearray = $clpfle->fetchArray();

				foreach($clpflearray as $valo)
				{
					$pflegedienste[$valo['id']]['id'] = $valo['id'];
					$pflegedienste[$valo['id']]['name'] = $valo['nursing'];
				}

				/* -------------------------Get Patient Pflegedienst------------------------------------------ */
				$patientpfle = Doctrine_Query::create()
					->select("*")
					->from('PatientPflegedienste p')
					->whereIn('p.ipid', $activeipids)
					->andwhere('p.isdelete = 0');
				$patientpflearray = $patientpfle->fetchArray();

				$ppfle = array();
				foreach($patientpflearray as $key => $pfle)
				{
					$ppfle[$pfle['ipid']]['id'][] = $pfle['pflid'];
					$ppfle[$pfle['ipid']]['name'][] = $pflegedienste[$pfle['pflid']]['name'];
				}

				/* -------------------------Get Patient Master Data------------------------------------------ */
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				$patientexec = $patientMasterData->fetchArray();

				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}

				foreach($patientexec as $patient)
				{
					if($patient_location_type[$patient['ipid']]['location_type'] == '2')
					{

						$patientMasterDetails[$patient['ipid']] = $patient;
						if(strlen($patient["last_name"]) > 0)
						{
							$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
						}
						if(strlen($patient['first_name']) > 0)
						{
							$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
						}
						if(strlen($patient['phone']) > 0)
						{
							$patientinfo[$patient['ipid']]['phone'] = $patient['phone'];
						}
						if(strlen($patient['birthd']) > 0)
						{
							$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
						}


						if(strlen($patient['street1']) > 0)
						{
							$address[$patient['ipid']] .= $patient['street1'] . '<br />';
						}
						if(strlen($patient['zip']) > 0)
						{
							$address[$patient['ipid']] .= $patient['zip'] . ', ';
						}
						if(strlen($patient['city']) > 0)
						{
							$address[$patient['ipid']] .= $patient['city'];
						}

						$parient_address[$patient['ipid']]['address'] = $address[$patient['ipid']];
					}
				}

				/* -------------------------Get contact persons------------------------------------------ */
				$Contactperson = array();
				$contact = new ContactPersonMaster();
				$contactpersons_array = $contact->getContactPersonsByIpids($activeipids, "ipid");

				foreach($contactpersons_array as $contact_item)
				{
					if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_last_name'] . ',';
					}

					if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
					}

					if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
					}

					if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
					}
					if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_city'] . '';
					}
					if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />Telefon: ' . $contact_item['cnt_phone'];
					}
				}

				/* -------------------------Get Patients Epids------------------------------------------ */
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				/* -------------------------Get treated by ------------------------------------------ */
				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');
				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}

				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');

				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();

				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
				}

				/* ------------------------- DISPLAY MASTER DATA ------------------------------------------ */
				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['pat_addresse'] = $parient_address[$keypatient]['address'];
					$MasterData['data'][$keypatient]['phone'] = $patientinfo[$keypatient]['phone'];
					$MasterData['data'][$keypatient]['contactperson'] = $Contactperson[$keypatient];
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['medication'] = implode(',<hr/> ', $patient_medication[$keypatient]);
					$MasterData['data'][$keypatient]['pflegedienst'] = implode(', ', $ppfle[$keypatient]['name']);
					$treatedby = "";
					$inc = 1;
					foreach($treatedbyarray as $k_treated => $treatedbyy)
					{
						if($treatedbyy['epid'] == $epidarray[$keypatient]['epid'])
						{

							$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . "<br />";
						}
						$i++;
					}
					$MasterData['data'][$keypatient]['treatedby'] = substr($treatedby, 0, -6);
				}
				return $MasterData;
			}
		}

		public function akutellepatient_niedersachsen_nomeds($params)
		{
			// report_id = 93
			// report_name = Aktuelle NIEDS. ohne Medis
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				/* -------------------------Get client Main Diagnosis type ------------------------------------------ */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";

				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}

				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )

				/* -------------------------Get Patients - Active locations------------------------------------------ */
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');
				$patlocs = $patloc->execute();

				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}
						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}

					if(strlen($patientlocationstr) == 0)
					{
						$patientlocationstr = "'0'";
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id IN (" . $patientlocationstr . ")")
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}

					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ';
								}

								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']] = $locationLastData[$v_loc['location_id']]['location'];
						}
					}
				}
				$actual_location = $locaray[0]['location'];

				/* -------------------------Get Client Pflegedienst------------------------------------------ */
				$clpfle = Doctrine_Query::create()
					->select("*")
					->from('Pflegedienstes')
					->where('clientid = ' . $clientid);
				$clpflearray = $clpfle->fetchArray();

				foreach($clpflearray as $valo)
				{
					$pflegedienste[$valo['id']]['id'] = $valo['id'];
					$pflegedienste[$valo['id']]['name'] = $valo['nursing'];
				}

				/* -------------------------Get Patient Pflegedienst------------------------------------------ */
				$patientpfle = Doctrine_Query::create()
					->select("*")
					->from('PatientPflegedienste p')
					->whereIn('p.ipid', $activeipids)
					->andwhere('p.isdelete = 0');
				$patientpflearray = $patientpfle->fetchArray();

				$ppfle = array();
				foreach($patientpflearray as $key => $pfle)
				{
					$ppfle[$pfle['ipid']]['id'][] = $pfle['pflid'];
					$ppfle[$pfle['ipid']]['name'][] = $pflegedienste[$pfle['pflid']]['name'];
				}

				/* -------------------------Get Patient Master Data------------------------------------------ */
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				
				//ISPC-2045 - get kontact-phone
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();

				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}

				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
						
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}


					if(strlen($patient['street1']) > 0)
					{
						$address[$patient['ipid']] .= $patient['street1'] . '<br />';
					}
					if(strlen($patient['zip']) > 0)
					{
						$address[$patient['ipid']] .= $patient['zip'] . ', ';
					}
					if(strlen($patient['city']) > 0)
					{
						$address[$patient['ipid']] .= $patient['city'];
					}

					$parient_address[$patient['ipid']]['address'] = $address[$patient['ipid']];
				}

				/* -------------------------Get contact persons------------------------------------------ */
				$Contactperson = array();
				$contact = new ContactPersonMaster();
				$contactpersons_array = $contact->getContactPersonsByIpids($activeipids, "ipid");

				foreach($contactpersons_array as $contact_item)
				{
					if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_last_name'] . ',';
					}

					if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
					}

					if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
					}

					if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
					}
					if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_city'] . '';
					}
					if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />Telefon: ' . $contact_item['cnt_phone'];
					}
				}

				/* -------------------------Get Patients Epids------------------------------------------ */
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				/* -------------------------Get treated by ------------------------------------------ */
				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');
				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}

				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');

				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();

				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
				}

				/* ------------------------- DISPLAY MASTER DATA ------------------------------------------ */
				foreach($patientMasterDetails as $keypatient => $patient)
				{
					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['pat_addresse'] = $parient_address[$keypatient]['address'];
					$MasterData['data'][$keypatient]['phone'] = $patientinfo[$keypatient]['kontactnumber'];
					$MasterData['data'][$keypatient]['contactperson'] = $Contactperson[$keypatient];
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['pflegedienst'] = implode(', ', $ppfle[$keypatient]['name']);
					$treatedby = "";
					$inc = 1;
					foreach($treatedbyarray as $k_treated => $treatedbyy)
					{
						if($treatedbyy['epid'] == $epidarray[$keypatient]['epid'])
						{

							$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . "<br />";
						}
						$i++;
					}
					$MasterData['data'][$keypatient]['treatedby'] = substr($treatedby, 0, -6);
				}
				return $MasterData;
			}
		}

		public function akutellepatient_region($params)
		{
			// report_id = 56
			// report_name = Aktuelle Patienten Region10
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}
				//Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}
				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				
				//ISPC-2045
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();
				
				$idoc = 1;
// 				foreach($patientexec as $patient_doctor)
// 				{
// 					$doctorids[] = $patient_doctor['familydoc_id'];
// 				}

				$doctorids = array();
				$patientMasterDetails = array();
				
				foreach($patientexec as $patient)
				{
					$doctorids[] = $patient['familydoc_id'];
										
					$patientMasterDetails[$patient['ipid']] = $patient;
				}

				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']] = $doc['title'] . ", ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['first_name'] . " " . $doc['last_name'] . ", ";
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
						}

						if(strlen($doc['street1']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
						}
						if(strlen($doc['street2']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
						}
						if(strlen($doc['postcode']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['postcode'] . ", ";
						}
						if(strlen($doc['city']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['city'];
						}
					}
				}
				$dropSapv = Doctrine_Query::create()
					->select('*, GROUP_CONCAT(verordnet) as vero')
					->from('SapvVerordnung')
					->where('ipid IN (' . $ipidsactive . ') and isdelete=0 and status != 1 ')
					->andWhere("verordnungbis >='" . date('Y-m-d', mktime(0, 0, 0, date('m'), date('d'), date('Y'))) . " 00:00:00'")
					->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();

				foreach($droparray as $verord)
				{
					$sapv = explode(',', $verord['vero']);
					$s = max($sapv);
					if($s == "1")
					{
						$sapv_value[$verord['ipid']] = "BE";
					}
					elseif($s == "2")
					{
						$sapv_value[$verord['ipid']] = "KO";
					}
					elseif($s == "3")
					{
						$sapv_value[$verord['ipid']] = "TV";
					}
					elseif($s == "4")
					{
						$sapv_value[$verord['ipid']] = "VO";
					}
					else
					{
						$sapv_value[$verord['ipid']] = "-";
					}
				}


				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}


				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');
				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}
						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}
				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');

				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();
				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
				}

				foreach($patientexec as $patient)
				{

					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}

					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}

					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}

					if(strlen($patient["kontactnumber"]) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient["kontactnumber"];
					}

					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
							
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}

					if(strlen($patient['street1']) > 0)
					{
						$address[$patient['ipid']] .= $patient['street1'] . '<br />';
					}

					if(strlen($patient['zip']) > 0)
					{
						$address[$patient['ipid']] .= $patient['zip'] . ', ';
					}

					if(strlen($patient['city']) > 0)
					{
						$address[$patient['ipid']] .= $patient['city'];
					}

					$parient_address[$patient['ipid']]['address'] = $address[$patient['ipid']];
				}
				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['pat_addresse'] = $parient_address[$keypatient]['address'];
					$MasterData['data'][$keypatient]['vo'] = $sapv_value[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['contact_phone'] = $patientinfo[$keypatient]['kontactnumber'];

					$treatedby = "";
					$inc = 1;
					foreach($treatedbyarray as $k_treated => $treatedbyy)
					{
						if($treatedbyy['epid'] == $epidarray[$keypatient]['epid'])
						{

							$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . "<br />";
						}
						$i++;
					}
					$MasterData['data'][$keypatient]['treatedby'] = substr($treatedby, 0, -6);
				}
				return $MasterData;
			}
		}

		public function akutellepatientv2($params)
		{
			//report_id = 15
			//report_name = Aktuelle Patienten Version 2
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}
				// Get Patients - Contact persons
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
				//		Get locations
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');
				$patlocs = $patloc->execute();

				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id IN (" . $patientlocationstr . ")")
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}

					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];

							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ';
								}
								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']] = $locationLastData[$v_loc['location_id']]['location'];
						}
					}
				}

				$actual_location = $locaray[0]['location'];
				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');

				$patientexec = $patientMasterData->fetchArray();

				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}
				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']] = $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
						}

						if(strlen($doc['street1']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
						}
						if(strlen($doc['street2']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
						}
						if(strlen($doc['postcode']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['postcode'] . ", ";
						}
						if(strlen($doc['city']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['city'];
						}
					}
				}

				$dropSapv = Doctrine_Query::create()
					->select('*, GROUP_CONCAT(verordnet) as vero')
					->from('SapvVerordnung')
					->where('ipid IN (' . $ipidsactive . ') and isdelete=0 and status != 1 ')
					->andWhere("verordnungbis >='" . date('Y-m-d', mktime(0, 0, 0, date('m'), date('d'), date('Y'))) . " 00:00:00'")
					->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();

				foreach($droparray as $verord)
				{
					$sapv = explode(',', $verord['vero']);
					$s = max($sapv);
					if($s == "1")
					{
						$sapv_value[$verord['ipid']] = "BE";
					}
					elseif($s == "2")
					{
						$sapv_value[$verord['ipid']] = "KO";
					}
					elseif($s == "3")
					{
						$sapv_value[$verord['ipid']] = "TV";
					}
					elseif($s == "4")
					{
						$sapv_value[$verord['ipid']] = "VO";
					}
					else
					{
						$sapv_value[$verord['ipid']] = "-";
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}


				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');


				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}
				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');
				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();

				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['last_name'] . " " . $usertreated['first_name'];
				}
				foreach($patientexec as $patient)
				{
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']];
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient] . ' ';
				}
				return $MasterData;
			}
		}

		public function aktuellepatientfurth($params)
		{
			// report_id = 43
			// report_name = Aktuelle Patienten Furth
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}
				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				
				//ISPC-2045
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();
				

				foreach($patientexec as $patient)
				{
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}
				}

				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
				/* -------------------------Get Patients - Locations------------------------------------------ */
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');

				$patlocs = $patloc->execute();

				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id IN (" . $patientlocationstr . ")")
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}
					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}
								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
							}
						}
					}
				}
				$actual_location = $locaray[0]['location'];
				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}
				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}
				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'] . ' ';
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'] . ' ';
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'] . ' ';
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient]['location_name'] . '<br />' . $patlocarrayFinal[$keypatient]['location_street'] . '<br />' . $patlocarrayFinal[$keypatient]['location_zip'] . ' ' . $patlocarrayFinal[$keypatient]['location_city'];
					$MasterData['data'][$keypatient]['contact_number'] = $patientinfo[$keypatient]['kontactnumber'] . ' ';
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'] . ' ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['empty_fld'] = ' ';
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'] . ' ';
					$MasterData['data'][$keypatient]['familydoctorphone'] = $Familydoctor[$patient['familydoc_id']]['phone'] . ' ';
				}

				return $MasterData;
			}
		}

		public function actual_patients_nopain($params)
		{
			// report_id = 130
			// report_name = Montagsliste NoPain

			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$activeipids_array[]['ipid'] = $ipid;
					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}
				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				
				//ISPC-2045 - get kontact-phone
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();
				

				foreach($patientexec as $patient)
				{
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					$patientinfo[$patient['ipid']]['admissiondate'] = date('d.m.Y', strtotime($patient['admission_date']));

					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}
				}

				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
				/* -------------------------Get Patients - Locations------------------------------------------ */
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');

				$patlocs = $patloc->execute();

				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id IN (" . $patientlocationstr . ")")
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}
					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}
								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
							}
						}
					}
				}
				
				$actual_location = $locaray[0]['location'];
				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}
				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}
				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
					$epids_arr[] = $epids['epid'];
				}

				/* ----------------------- Get SAPV-------------------------------- */
				$verdoung = new SapvVerordnung();
				$verd = $verdoung->getPatientsSapvVerordnungDetails($activeipids_array, false, true);



				/* ----------------------- Get Treated By -------------------------------- */
				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');
				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}
						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}
				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')')
					->andWhere('clientid ="' . $logininfo->clientid . '" ');

				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();
				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
				}


				/* --------------------------------------------------------------------------- */
				//get healthinsurance
				$patientinsurance = new PatientHealthInsurance();
				$healthinsu_array = $patientinsurance->get_patients_healthinsurance($activeipids);

				foreach($healthinsu_array as $k_healthinsu => $v_healthinsu)
				{
					$patients_healthinsu[$v_healthinsu['ipid']] = $v_healthinsu;
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'] . ' ';
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'] . ' ';
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'] . ' ';
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient]['location_name'] . '<br />' . $patlocarrayFinal[$keypatient]['location_street'] . '<br />' . $patlocarrayFinal[$keypatient]['location_zip'] . ' ' . $patlocarrayFinal[$keypatient]['location_city'];
					$MasterData['data'][$keypatient]['contact_number'] = $patientinfo[$keypatient]['kontactnumber'] . ' ';
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'] . ' ';
					$MasterData['data'][$keypatient]['admissiondate'] = $patientinfo[$keypatient]['admissiondate'];
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'] . ' ';
					$MasterData['data'][$keypatient]['familydoctorphone'] = $Familydoctor[$patient['familydoc_id']]['phone'] . ' ';
					if($verd[$keypatient]['verordnet'] > 0)
					{
						$verordnet = $verd[$keypatient]['verordnet'];
						$verd_rep = array("1", "2", "3", "4");
						$verdounaray = array("BE", "KO", "TV", "VV");
						$MasterData['data'][$keypatient]['verordnung'] = str_replace($verd_rep, $verdounaray, $verordnet);
					}
					else
					{
						$MasterData['data'][$keypatient]['verordnung'] = 'keine';
					}

					$treatedby = "";
					$inc = 1;
					$used_uids[$keypatient] = array();
					foreach($treatedbyarray as $k_treated => $treatedbyy)
					{
						if($treatedbyy['epid'] == $epidarray[$keypatient]['epid'] && !in_array($treatedbyy['userid'],$used_uids[$keypatient]))
						{
							$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . "<br />";
							$used_uids[$keypatient][] = $treatedbyy['userid'];
						}
						$i++;
					}
					$MasterData['data'][$keypatient]['treatedby'] = substr($treatedby, 0, -6);
					if(array_key_exists($keypatient, $patients_healthinsu))
					{
						if(strlen($patients_healthinsu[$keypatient]['company_name']) > 0)
						{
							$MasterData['data'][$keypatient]['healthinsurance_name'] = $patients_healthinsu[$keypatient]['company_name'];
						}
						else
						{
							$MasterData['data'][$keypatient]['healthinsurance_name'] = ' - ';
						}

						if(strlen($patients_healthinsu[$keypatient]['insurance_no']) > 0)
						{
							$MasterData['data'][$keypatient]['healthinsurance_nr'] = $patients_healthinsu[$keypatient]['insurance_no'];
						}
						else
						{
							$MasterData['data'][$keypatient]['healthinsurance_nr'] = ' - ';
						}
					}
					else
					{
						$MasterData['data'][$keypatient]['healthinsurance_name'] = ' - ';
						$MasterData['data'][$keypatient]['healthinsurance_nr'] = ' - ';
					}
				}

				return $MasterData;
			}
		}

		public function aktuelpatientandstanby($params)
		{
			// report_id = 28
			// report_name = aktuelpatientandstanby
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				//Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');

				$patientexec = $patientMasterData->fetchArray();

				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}

				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']] = $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
						}

						if(strlen($doc['street1']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
						}
						if(strlen($doc['street2']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
						}
						if(strlen($doc['zip']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['zip'] . ", ";
						}
						if(strlen($doc['city']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['city'];
						}
					}
				}

				$dropSapv = Doctrine_Query::create()
					->select('*, GROUP_CONCAT(verordnet) as vero')
					->from('SapvVerordnung')
					->where('ipid IN (' . $ipidsactive . ') and isdelete=0 and status != 1 ')
					->andWhere("verordnungbis >='" . date('Y-m-d', mktime(0, 0, 0, date('m'), date('d'), date('Y'))) . " 00:00:00'")
					->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();

				foreach($droparray as $verord)
				{
					$sapv = explode(',', $verord['vero']);
					$s = max($sapv);
					if($s == "1")
					{
						$sapv_value[$verord['ipid']] = "BE";
					}
					elseif($s == "2")
					{
						$sapv_value[$verord['ipid']] = "KO";
					}
					elseif($s == "3")
					{
						$sapv_value[$verord['ipid']] = "TV";
					}
					elseif($s == "4")
					{
						$sapv_value[$verord['ipid']] = "VO";
					}
					else
					{
						$sapv_value[$verord['ipid']] = "-";
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}

				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}

				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];
					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}


				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');
				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}
						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxxx"';
				}

				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');
				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();

				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['last_name'] . " " . $usertreated['first_name'];
				}

				foreach($patientexec as $patient)
				{
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
				}

				$MasterData = array();
				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']];
					$MasterData['data'][$keypatient]['vo'] = $sapv_value[$keypatient];
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['symptompfle'] = " ";
				}
				return $MasterData;
			}
		}

		private function totalpatients($params)
		{
			// report_id = 24
			// report_name = Patienten gesamt
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$actpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex, e.epid as patepid")
				->from('PatientMaster p')
				->where('isdelete= "0" AND isstandbydelete = "0"')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$actpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$activearray = $actpatient->fetchArray();
			if(!empty($activearray))
			{
				foreach($activearray as $act_patient)
				{
					$activeipidsarray[] = $act_patient['ipid'];
				}
				$i = 1;
				foreach($activearray as $patient)
				{
					if($i != count($activearray))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$activeipids .= "'" . $patient['ipid'] . "'" . $end;
					$i++;
				}
				//		Get discharge dates
				$dispat = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->where("ipid IN (" . $activeipids . ")");
				$dispatarray = $dispat->fetchArray();

				foreach($dispatarray as $dis_patient)
				{
					$dischargedpatarray[$dis_patient['ipid']] = $dis_patient['discharge_date'];
				}

				$pm = new PatientMaster();
				$treated_days = $pm->getTreatedDaysRealMultiple($activeipidsarray, false);

				// get discharge method for patients dead
				$dm_dead = Doctrine_Query::create()
					->select("*")
					->from('DischargeMethod')
					->where("clientid = " . $clientid)
					->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
					->andwhere('isdelete = 0');
				$dm_deadarray = $dm_dead->fetchArray();

				$dm_deadfinal[] = '999999999';
				foreach($dm_deadarray as $key => $val)
				{
					$dm_deadfinal[] = $val['id'];
				}
				//get tod patients
				$todpatients = Doctrine_Query::create()
					->select('*')
					->from('PatientDischarge ')
					->whereIn('ipid', $activeipidsarray)
					->andWhereIn('discharge_method', $dm_deadfinal)
					->andWhere('isdelete = 0');
				$todpatientarray = $todpatients->fetchArray();

				$patients_tod_date = array();
				if($todpatientarray)
				{
					foreach($todpatientarray as $key => $todpatient)
					{
						$patients_tod_date[$todpatient['ipid']] = date("Y-m-d", strtotime($todpatient['discharge_date']));
					}
				}

				foreach($activearray as $active_patient)
				{
					$tod_date_patient = '';
					if(array_key_exists($active_patient['ipid'], $patients_tod_date))
					{
						$tod_date_patient = $patients_tod_date[$active_patient['ipid']];
					}
					else
					{
						$tod_date_patient = date("Y-m-d", time());
					}
					$age = $pm->GetAge($active_patient['birthd'], $tod_date_patient);
					$birthdyears = date("d.m.Y", strtotime($active_patient['birthd'])) . "(" . $age . ")";
					$MasterData[$active_patient['ipid']]['lastname'] = $active_patient['last_name'];
					$MasterData[$active_patient['ipid']]['firstname'] = $active_patient['first_name'];
					$MasterData[$active_patient['ipid']]['birthdyears'] = $birthdyears;
					$MasterData[$active_patient['ipid']]['admissiondate'] = date("d.m.Y", strtotime($active_patient['admission_date']));
					$MasterData[$active_patient['ipid']]['birthd'] = date("d.m.Y", strtotime($active_patient['birthd']));
					$MasterData['data'][$active_patient['ipid']]['epid'] = $active_patient['patepid'];
					$MasterData['data'][$active_patient['ipid']]['lastname'] = $active_patient['last_name'];
					$MasterData['data'][$active_patient['ipid']]['firstname'] = $active_patient['first_name'];
					$MasterData['data'][$active_patient['ipid']]['birthdyears'] = $birthdyears;
					$MasterData['data'][$active_patient['ipid']]['admissiondate'] = date("d.m.Y", strtotime($active_patient['admission_date']));
					if(!empty($dischargedpatarray[$active_patient['ipid']]))
					{
						$dis_date = date("d.m.Y", strtotime($dischargedpatarray[$active_patient['ipid']]));
					}
					else
					{
						$dis_date = "-";
					}
					$MasterData['data'][$active_patient['ipid']]['dischargedate'] = $dis_date;
					$MasterData['data'][$active_patient['ipid']]['treateddays'] = $treated_days[$active_patient['ipid']]['realActiveDays'];
				}
				return $MasterData;
			}
		}

		private function zipstats($params)
		{
			// report_id = 2
			// report_name = PLZ
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$active = array();
			$dead = array();
			$standby = array();

			if($onlyactive != 1)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				if(!is_array($active))
				{
					$active = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}
				if(!is_array($standby))
				{
					$standby = array();
				}
				$ipidarr = array_merge($active, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}
			$patient = Doctrine_Query::create()
				->select("ipid,AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') as zip, count(zip) as  zip_nr ")
				->from("PatientMaster p")
				->where('ipid in (' . substr($ipids, 0, -1) . ') and 	isstandbydelete = 0')
				->groupBy("convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$sortarray = $patient->fetchArray();

			foreach($sortarray as $k_row => $v_row)
			{
				if($v_row['zip'] != "")
				{
					$MasterData['data'][$k_row]['zip'] = $v_row['zip'];
				}
				else
				{
					$MasterData['data'][$k_row]['zip'] = "keine Angabe";
				}
				$MasterData['data'][$k_row]['count'] = $v_row['zip_nr'];
			}
			return $MasterData;
		}

		private function xlsBOF()
		{
			echo pack("ssssss", 0x809, 0x8, 0x0, 0x10, 0x0, 0x0);
			return;
		}

		private function xlsEOF()
		{
			echo pack("ss", 0x0A, 0x00);
			return;
		}

		private function xlsWriteNumber($Row, $Col, $Value)
		{
			echo pack("sssss", 0x203, 14, $Row, $Col, 0x0);
			echo pack("d", $Value);
			return;
		}

		private function xlsWriteLabel($Row, $Col, $Value)
		{
			$L = strlen($Value);
			echo pack("ssssss", 0x204, 8 + $L, $Row, $Col, 0x0, $L);
			echo $Value;
			return;
		}

		private function retainValues($values)
		{
			foreach($values as $key => $val)
			{
				$this->view->$key = $val;
			}
		}

		private function getReportFileData($clnt)
		{
			if($clnt > 0)
			{
				$whereclnt = " and ep.clientid=" . $clnt;
			}
			$ipid = Doctrine_Query::create()
				->select('ipid')
				->from('PatientMaster pm')
				->where('isdischarged = 1 and isdelete=0')
				->leftJoin('pm.EpidIpidMapping ep')
				->andWhere('ep.ipid=pm.ipid ' . $whereclnt)
				->orderBy('pm.admission_date DESC');
			$ipid->getSqlQuery();
			$ipidexec = $ipid->execute();
			$ipidarray = $ipidexec->toArray();

			$comma = ",";
			$disipidval = "'0'";
			foreach($ipidarray as $key => $val)
			{
				$disipidval .= $comma . "'" . $val['ipid'] . "'";
				$comma = ",";
			}
			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
					AES_DECRYPT(file_name,'" . Zend_Registry::get('salt') . "') as file_name,
					AES_DECRYPT(file_type,'" . Zend_Registry::get('salt') . "') as file_type")
				->from('PatientFileUpload')
				->where("ipid in(" . $disipidval . ") and (convert(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)='" . Pms_CommonData::aesEncrypt('Teilnahmeerkl?rung (Anlage 3)') . "' or convert(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1)='" . Pms_CommonData::aesEncrypt('Stammdatenblatt f?r den PKD (Anlage 3a)') . "' or convert(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1) ='" . Pms_CommonData::aesEncrypt('Basisdokumentation (Anlage 4)') . "' or convert(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1) ='" . Pms_CommonData::aesEncrypt('Palliativ Versorgung a7') . "' or convert(AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') using latin1) ='" . Pms_CommonData::aesEncrypt('Anlage 7') . "')");
			$fl = $patient->execute();
			$filearray = $fl->toArray();

			return $filearray;
		}

		function getClientPatients($clientid, $whereepid = '')
		{
			$actpatient = Doctrine_Query::create()
				->select("p.ipid")
				->from('PatientMaster p')
				->Where('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . 'e.clientid = ' . (int)$clientid);
			$actpatient->andWhere('p.isdelete = 0');
			$actipidarray = $actpatient->fetchArray();

			if($actipidarray)
			{
				foreach($actipidarray as $patient)
				{
					$finaldeadpatient[] = $patient['ipid'];
				}

				return $finaldeadpatient;
			}
		}

		function getClientPatientsByPeriod($clientid, $whereepid = '', $quarterarr, $yeararr, $montharr)
		{

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$actpatient = Doctrine_Query::create()
				->select("p.ipid")
				->from('PatientMaster p')
				->where('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['date_sql']) . ')');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . 'e.clientid = ' . (int)$clientid);

			$actipidarray = $actpatient->fetchArray();

			if($actipidarray)
			{
				foreach($actipidarray as $patient)
				{
					$finaldeadpatient[] = $patient['ipid'];
				}

				return $finaldeadpatient;
			}
		}

		//same as above without standby=0 and standbydelete=0
		function getClientPatientsInPeriod($clientid, $whereepid = '', $quarterarr, $yeararr, $montharr)
		{

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$actpatient = Doctrine_Query::create()
				->select("p.ipid")
				->from('PatientMaster p')
				->where('isdelete = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['date_sql']) . ')');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . 'e.clientid = ' . (int)$clientid);

			$actipidarray = $actpatient->fetchArray();

			if($actipidarray)
			{
				foreach($actipidarray as $patient)
				{
					$finaldeadpatient[] = $patient['ipid'];
				}

				return $finaldeadpatient;
			}
		}

		function getAllClientPatients($clientid, $whereepid = '', $nostandby = false)
		{
			if($nostandby === true)
			{
				$nostandby_sql = ' AND p.isstandby = 0 AND p.isstandbydelete = 0';
			}
			else
			{
				$nostandby_sql = '';
			}
			$actpatient = Doctrine_Query::create()
				->select("p.ipid")
				->from('PatientMaster p');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->where($whereepid . 'e.clientid = ' . (int)$clientid);
			$actpatient->andwhere('p.isdelete = 0' . $nostandby_sql);
			$actipidarray = $actpatient->fetchArray();

			return $actipidarray;
		}

		function allactivepatiens($quarterarr, $yeararr, $montharr)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$finalipidval = array();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$actpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 0')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['admission_sql']) . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$actpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$actipidarray = $actpatient->fetchArray();

			foreach($actipidarray as $key => $val)
			{
				$finalipidval[] = $val['ipid'];
			}

			$patient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('(' . str_replace('%date%', 'admission_date', $active_cond['admission_sql']) . ')')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$patient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$ipidarray = $patient->fetchArray();

			if(is_array($ipidarray) && sizeof($ipidarray) > 0)
			{

				foreach($ipidarray as $key => $val)
				{
					$disipidval .= '"' . $val['ipid'] . '",';
				}
				$disquery = Doctrine_Query::create()
					->select("*")
					->from('PatientDischarge')
					->where('ipid in (' . substr($disipidval, 0, -1) . ') AND (' . str_replace('%date%', 'discharge_date', $active_cond['active_sql']) . ')');
				$disarray = $disquery->fetchArray();

				foreach($disarray as $key => $val)
				{
					$finalipidval[] = $val['ipid'];
				}
			}

			$activeipid = "'0'";
			$comma = ",";
			foreach($finalipidval as $keyip => $valipid)
			{
				$activeipid.=$comma . "'" . $valipid . "'";
				$comma = ",";
			}

			return $activeipid;
		}

		private function getQuarterCondition($quarterarr, $yeararr, $montharr)
		{

			if(count($quarterarr) > 0)
			{
				foreach($quarterarr as $key => $val)
				{
					if($val == 1)
					{
						$startdate = $yeararr[0] . "-01-01";
						$enddate = $yeararr[0] . "-03-31";

						$where .= " (admission_date BETWEEN '" . $startdate . "' AND '" . $enddate . "')";
						$sep = " or ";
					}

					if($val == 2)
					{
						$startdate = $yeararr[0] . "-04-01";
						$enddate = $yeararr[0] . "-06-30";

						$where .= $sep . "(admission_date BETWEEN '" . $startdate . "' AND '" . $enddate . "')";
						$sep = " or ";
					}

					if($val == 3)
					{
						$startdate = $yeararr[0] . "-07-01";
						$enddate = $yeararr[0] . "-09-30";

						$where .= $sep . "(admission_date BETWEEN '" . $startdate . "' AND '" . $enddate . "')";
						$sep = " or ";
					}

					if($val == 4)
					{
						$startdate = $yeararr[0] . "-10-01";
						$enddate = $yeararr[0] . "-12-31";
						$where .= $sep . "(admission_date BETWEEN '" . $startdate . "' AND '" . $enddate . "')";
						$sep = " or ";
					}
				}
			}
			elseif(count($montharr) > 0)
			{
				$mcnt = count($montharr) - 1;
				$startdate = $yeararr[0] . "-" . $montharr[0] . "-01";
				$enddate = $yeararr[0] . "-" . $montharr[$mcnt] . "-31";
				$where = "(admission_date BETWEEN '" . $startdate . "' AND '" . $enddate . "')";
			}
			else
			{
				$startdate = $yeararr[0] . "-01-01";
				$enddate = $yeararr[0] . "-12-31";
				$where = "(admission_date BETWEEN '" . $startdate . "' AND '" . $enddate . "')";
			}
			return $where;
		}

		private function getDocCondition($user = false)
		{
			if($_POST['doctorname'] != 0)
			{
				if($user)
				{
					$whereepid = $_POST['doctorname'];
				}
				else
				{
					$eipd = Doctrine_Query::create()
						->select('*')
						->from('PatientQpaMapping')
						->where('userid = ?', $_POST['doctorname']);

					$epidarray = $eipd->fetchArray();

					if($epidarray && count($epidarray) > 0)
					{

						$comma = ",";
// 						$epidval = "'0'";
						$epidval = array();
						foreach($epidarray as $key => $val)
						{
// 							$epidval .= $comma . "'" . $val['epid'] . "'";
							$epidval[] = $val['epid'] ;
							$comma = ",";
						}
						$epidval =  implode("','", $epidval);
						$epidval = "'".$epidval."'";
						

						$whereepid = "epid in (" . $epidval . ") and ";
					}
					else
					{
// 						$whereepid = "epid in ('XXXXXXXXXX') and "; //force to get nothing
						$whereepid = "epid IS NULL AND "; //force to get nothing
					}
				}
			}
			return $whereepid;
		}
		
		private function getDocOrGroupCondition($return_user_patients = false, $return_group_patients = false)
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
			if($_POST['user_or_group'] != "0")
			{
			    $ug_info = explode("-",$_POST['user_or_group']);
			    
			    if($ug_info[0] == "user")
			    {
                    $user_id = $ug_info[1];			        
					$whereepid = $user_id;
			    } 
			    else if($ug_info[0] == "group")
			    {
                    $group_id = $ug_info[1];			        
    			    $user_groups = Usergroup::get_groups_users($group_id,$logininfo->clientid,true);
					$whereepid = $user_groups;
			    }
			    
				if($return_user_patients)
				{
				    
				    $eipd = Doctrine_Query::create()
				    ->select('*')
				    ->from('PatientQpaMapping')
				    ->whereIn('userid ' . $user_id);
				    
				    $epidarray = $eipd->fetchArray();
				    
				    if($epidarray)
				    {
				    
				        $comma = ",";
				        $epidval = "'0'";
				        foreach($epidarray as $key => $val)
				        {
				            $epidval .= $comma . "'" . $val['epid'] . "'";
				            $comma = ",";
				        }
				    
				        $whereepid = "epid in (" . $epidval . ") and ";
				    }
				    else
				    {
				        $whereepid = "epid in ('XXXXXXXXXX') and "; //force to get nothing
				    }
				    
				}
				elseif($return_group_patients)
				{
				     if(empty($user_groups))
				     {
				         $user_groups['XXXXXXXXXXXXXXX'] = "99999999";
				     }
				     
				    $eipd = Doctrine_Query::create()
				    ->select('*')
				    ->from('PatientQpaMapping')
				    ->whereIn('userid ' . $user_groups);
				    
				    $epidarray = $eipd->fetchArray();
				    
				    if($epidarray)
				    {
				    
				        $comma = ",";
				        $epidval = "'0'";
				        foreach($epidarray as $key => $val)
				        {
				            $epidval .= $comma . "'" . $val['epid'] . "'";
				            $comma = ",";
				        }
				    
				        $whereepid = "epid in (" . $epidval . ") and ";
				    }
				    else
				    {
				        $whereepid = "epid in ('XXXXXXXXXX') and "; //force to get nothing
				    }
				 }				    
			}
			return $whereepid;
		}

		private function dotfilter($params)
		{
			// report_id = 5
			// report_name = Verweildauer langer als...
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
			$daystreated = $params['custom']['tdays'];

			$active = array();
			$dead = array();
			if($onlyactive != 1)
			{
				$active = $this->getClientPatientsByPeriod($logininfo->clientid, $whereepid, $quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if(!is_array($active))
				{
					$active = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}
				$ipidarr = array_merge($active, $dead);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			$ipid_str = "'0',";
			foreach($ipidarr as $ipid)
			{
				$ipid_str .= "'" . $ipid . "',";
			}
//print_r($ipidarr);exit;
			$pipid = Doctrine_Query::create()
				->select("id, ipid, birthd, familydoc_id, admission_date, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex, ep.epid as patepid")
				->from('PatientMaster pm')
				->where('isdelete=0 and isstandby = 0 and isstandbydelete = 0 and ipid in (' . substr($ipid_str, 0, -1) . ')')
				->leftJoin('pm.EpidIpidMapping ep')
				->andWhere($whereepid . ' ep.clientid=' . $logininfo->clientid)
				->andWhere('ep.ipid=pm.ipid')
				->orderBy('pm.admission_date DESC')
				->groupBy('pm.ipid');
			$ipidarray = $pipid->fetchArray();

			$comma = ",";
			$ipidval = "'0'";
			foreach($ipidarray as $key => $val)
			{
				$ipidval .= $comma . "'" . $val['ipid'] . "'";
				$comma = ",";
				$ipidarray[] = $val['ipid'];
				$ipidpat[$val['ipid']] = $val;
				$doctorids[] = $val['familydoc_id'];
			}
			$ipidarray[] = '9999999999999';
			$pm = new PatientMaster();
			$patTreatedDays = $pm->getTreatedDaysRealMultiple($ipidarray, false);
//print_r($patTreatedDays);exit;
			$famdoc = new FamilyDoctor();
			$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

			foreach($familidoc as $fd_key => $fd_value)
			{
				$familydoctors[$fd_value['id']] = $fd_value;
			}
			// get discharge method for patients dead
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid = " . $logininfo->clientid)
				->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
				->andwhere('isdelete = 0');
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}
			//get tod patients
			$todpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge ')
				->whereIn('ipid', $ipidarr)
				->andWhereIn('discharge_method', $dm_deadfinal)
				->andWhere('isdelete = 0');
			$todpatientarray = $todpatients->fetchArray();

			$patients_tod_date = array();

			if($todpatientarray)
			{
				foreach($todpatientarray as $key => $todpatient)
				{
					$patients_tod_date[$todpatient['ipid']] = date("Y-m-d", strtotime($todpatient['discharge_date']));
				}
			}

			foreach($patTreatedDays as $key_ptreated => $val_ptreated)
			{
				if($val_ptreated['realActiveDays'] >= $daystreated)
				{
					$ipidpat[$key_ptreated]['treatment_details'] = $patTreatedDays[$key_ptreated];
					$tod_date_patient = '';
					if(array_key_exists($key_ptreated, $patients_tod_date))
					{
						$tod_date_patient = $patients_tod_date[$key_ptreated];
					}
					else
					{
						$tod_date_patient = date("Y-m-d", time());
					}
					$age = $pm->GetAge($ipidpat[$key_ptreated]['birthd'], $tod_date_patient);
					$birthdyears = date("d.m.Y", strtotime($ipidpat[$key_ptreated]['birthd'])) . "(" . $age . ")";
					$ipidpat[$key_ptreated]['familydoc_details'] = $familydoctors[$ipidpat[$key_ptreated]['familydoc_id']];
					$ipidpat[$key_ptreated]['birthdage'] = $birthdyears;
				}
				else
				{
					unset($patTreatedDays[$key_ptreated]);
					unset($ipidpat[$key_ptreated]);
				}
			}

			foreach($ipidpat as $ipid => $patient)
			{
				$MasterData['data'][$ipid]['epid'] = $patient['patepid'];
				$MasterData['data'][$ipid]['lastname'] = $patient['last_name'] . " ";
				$MasterData['data'][$ipid]['firstname'] = $patient['first_name'] . " ";
				$MasterData['data'][$ipid]['birthdyears'] = $patient['birthdage'];
				$MasterData['data'][$ipid]['zip'] = $patient['zip'] . " ";
				$MasterData['data'][$ipid]['admissiondate'] = date("d.m.Y", strtotime($patient['admission_date']));
				if($patient['familydoc_details'])
				{
					$MasterData['data'][$ipid]['familydoctor'] = $patient['familydoc_details']['last_name'] . ", " . $patient['familydoc_details']['first_name'] . " ";
				}
				else 
				{
					$MasterData['data'][$ipid]['familydoctor'] = "";
				}	
				$MasterData['data'][$ipid]['familydoctorphone'] = $patient['familydoc_details']['phone_practice'] . " ";
				$MasterData['data'][$ipid]['treateddays'] = $patient['treatment_details']['realActiveDays'];
			}
			return $MasterData;
		}

		public function permissionsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			if($this->getRequest()->isPost())
			{

				$doc = Doctrine_Query::create()
					->delete('ReportPermission')
					->where("clientid='" . $clientid . "'");
				$doc->execute();

				$over = new ReportPermission();
				$over->clientid = $clientid;
				$over->report_id = join(",", $_POST['boxid']);
				$over->save();
			}
			$cover = Doctrine::getTable('ReportPermission')->findBy('clientid', $clientid);
			$carray = $cover->toArray();
			$this->view->boxjs = $carray[0]['report_id'];

			$report = Doctrine_Query::create()
				->select('*')
				->from('Reportsnew')
				->where('isdelete = 0');
			$reportarray = $report->fetchArray();
			$this->view->permreportarray = $reportarray;
		}

		public function reportsdetailsAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			if($logininfo->usertype != 'SA')
			{
				$this->_redirect(APP_BASE . "reportsnew/exportlist");
			}
			if($this->getRequest()->isPost())
			{
				$doc = Doctrine_Query::create()
					->delete('ReportPermission')
					->where("clientid='" . $clientid . "'");
				$doc->execute();

				$over = new ReportPermission();
				$over->clientid = $clientid;
				$over->report_id = join(",", $_POST['boxid']);
				$over->save();
			}
			$cover = Doctrine::getTable('ReportPermission')->findBy('clientid', $clientid);
			$carray = $cover->toArray();
			$this->view->boxjs = $carray[0]['report_id'];

			$report = Doctrine_Query::create()
				->select('*')
				->from('Reportsnew');
			$reportarray = $report->fetchArray();
			$this->view->permreportarray = $reportarray;
		}

		public function editreportAction()
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$repid = $_REQUEST['repid'];

			$report = Doctrine_Query::create()
				->select('*')
				->from('Reportsnew')
				->andwhere('id = ' . $repid);
			$reportarray = $report->fetchArray();

			$this->view->name = $reportarray[0]['report'];
			$this->view->description = $reportarray[0]['description'];
			$this->view->columns = $reportarray[0]['columns'];
			$this->view->set_delete = $reportarray[0]['isdelete'];

			if($this->getRequest()->isPost())
			{
				$status = Doctrine::getTable('Reportsnew')->find($repid);
				$status->description = $_POST['description'];
				$status->columns = $_POST['columns'];
				$status->isdelete = $_POST['isdelete'];
				$status->save();

				$this->_redirect(APP_BASE . "reportsnew/reportsdetails");
			}
		}

		private function array_sort($array, $on = NULL, $order = SORT_ASC)
		{
			$new_array = array();
			$sortable_array = array();
			if(count($array) > 0)
			{
				foreach($array as $k => $v)
				{
					if(is_array($v))
					{
						foreach($v as $k2 => $v2)
						{
							if($k2 == $on)
							{
								if($on == 'birthd' || $on == 'admissiondate' || $on == 'admission_date' || $on == 'discharge_date' || $on == 'diedon' || $on == 'birthdyears' || $on == 'dischargedate' || $on == 'beginvisit' || $on == 'endvisit' || $on == 'dateofbirth' || $on == 'date' || $on == 'day' || $on == 'assessment_completed_date' || $on == 'visit_date' || $on == 'contact_form_date' || $on == 'first_sapv_active_day' || $on == 'patient_discharge_date' || $on == 'death_date' || $on == 'entry_date')
								{

									if($on == 'birthdyears')
									{
										$v2 = substr($v2, 0, 10);
									}
									$sortable_array[$k] = strtotime($v2);
								}
								elseif($on == 'epid')
								{
									$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v2);
								}
								elseif($on == 'percentage')
								{
									$sortable_array[$k] = preg_replace('/[^\d\.]/', '', $v2);
								}
								else
								{
									$sortable_array[$k] = ucfirst($v2);
								}
							}
						}
					}
					else
					{
						if($on == 'birthd' || $on == 'admission_date' || $on == 'admissiondate' || $on == 'discharge_date' || $on == 'diedon' || $on == 'birthdyears' || $on == 'dischargedate' || $on == 'beginvisit' || $on == 'endvisit' || $on == 'dateofbirth' || $on == 'date' || $on == 'day' || $on == 'assessment_completed_date' || $on == 'visit_date' || $on == 'contact_form_date' || $on == 'first_sapv_active_day' || $on == 'patient_discharge_date' || $on == 'death_date')
						{
							if($on == 'birthdyears')
							{
								$v = substr($v, 0, 10);
							}
							$sortable_array[$k] = strtotime($v);
						}
						elseif($on == 'epid' || $on == 'percentage')
						{
							$sortable_array[$k] = preg_replace('/[^\d\s]/', '', $v);
						}
						elseif($on == 'percentage')
						{
							$sortable_array[$k] = preg_replace('/[^\d\.]/', '', $v2);
						}
						else
						{
							$sortable_array[$k] = ucfirst($v);
						}
					}
				}
//			$collator = new Collator('de_DE');
				switch($order)
				{
					case SORT_ASC:
//					$collator->asort($sortable_array);
						$sortable_array = Pms_CommonData::a_sort($sortable_array);
						break;

					case SORT_DESC:
//					$collator->asort($sortable_array); //collator does not have a arsort equivalent
//					$sortable_array = array_reverse($sortable_array, true);
						$sortable_array = Pms_CommonData::ar_sort($sortable_array);

						break;
				}

				foreach($sortable_array as $k => $v)
				{
					$new_array[$k] = $array[$k];
				}
			}

			return $new_array;
		}

		public function getreportscolumns($reportid, $onlysort = false)
		{
			if($onlysort == true)
			{
				$sortsql = " AND sortby = '1'";
			}
			else
			{
				$sortsql = '';
			}

			$report = Doctrine_Query::create()
				->select('*')
				->from('ReportsColumns')
				->where("report_id='" . $reportid . "'" . $sortsql)
				->orderBy('column_order');
			$reportcolums = $report->fetchArray();
			return $reportcolums;
		}
		
		

		public function getreportscolumns_PHPExcel($reportid, $onlysort = false)
		{
			if($onlysort == true)
			{
				$sortsql = " AND sortby = '1'";
			}
			else
			{
				$sortsql = '';
			}

			$report = Doctrine_Query::create()
				->select('*')
				->from('ReportsColumns')
				->where("report_id='" . $reportid . "'" . $sortsql)
				->orderBy('column_order');
			$reportcolums = $report->fetchArray();
			
			foreach($reportcolums as $cl ){
			    $report_columns[ chr( $cl['column_order'] + 65) ] = $cl;
			}
			
			return $report_columns;
		}
		
		
		

		public function fetchreportsettingsAction()
		{
			$reportid = $_REQUEST['reportid'];
			$report = Doctrine_Query::create()
				->select('*')
				->from('Reportsnew')
				->where("id='" . $reportid . "'");
			$reportsettings = $report->fetchArray();
			$columns = $this->getreportscolumns($reportid, true);

			foreach($columns as $column)
			{
				$col_str .= '<option value="' . strtolower($column['column_name']) . '">' . $this->view->translate($column['column_name']) . '</option>' . "\n";
			}

			$reportsettings[0]['columns'] = $col_str;
			echo json_encode($reportsettings);
			exit;
		}

		public function fetchReportDetailsAction($reportid)
		{

			$report = Doctrine_Query::create()
				->select('*')
				->from('Reportsnew')
				->where("id='" . $reportid . "'");
			$reportdetails = $report->fetchArray();
			return $reportdetails;
		}

		private function powerdigit($params)
		{
			// report_id = 1
			// report_name = Leistungsziffern
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			if($logininfo->clientid > 0)
			{
				$clientid = $logininfo->clientid;
			}
			else
			{
				$clientid = 0;
			}

			$active = array();
			$standby = array();
			$activeFinal = array();
			if($onlyactive != 1)
			{
				$active = $this->getClientPatients($clientid, $whereepid);
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}
				$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
				$timeq = 'AND ' . str_replace('%date%', 'course_date', $timeperiod['date_sql']) . '';
				if(!is_array($standby))
				{
					$standby = array();
				}
				if(!is_array($active))
				{
					$active = array();
				}
				$ipidarr = array_merge($active, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
				$timeq = "";
			}
			$ipid_str = '"0",';
			foreach($ipidarr as $ipid)
			{
				$ipid_str .= '"' . $ipid . '",';
			}

			$qpa1 = Doctrine_Query::create()
				->select("count(*) as count, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') AS powerdigit")
				->from('PatientCourse')
				->where('ipid IN (' . substr($ipid_str, 0, -1) . ') ' . $timeq . ' AND AES_DECRYPT(course_title,"' . Zend_Registry::get('salt') . '") != "" AND course_type="' . addslashes(Pms_CommonData::aesEncrypt('L')) . '"')
				->andWhere('source_ipid = ""')
				->groupby('course_title');

			$sortarray = $qpa1->fetchArray();
			foreach($sortarray as $key => $value)
			{
				$totalafcount += $value['count'];
				$MasterData['data'][$key]['powerdigit'] = $value['powerdigit'];
				$MasterData['data'][$key]['count'] = $value['count'];
			}
			$MasterData['extra']['sum'] = $totalafcount;
			return $MasterData;
		}

		private function dischargeMethod($whereepid, $montharr, $quarterarr, $yeararr)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$ipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->where($whereepid . " clientid=" . $logininfo->clientid);
			$ipidarray = $ipid->fetchArray();

			$comma = ",";
			$disipidval = "'0'";
			foreach($ipidarray as $key => $val)
			{
				$disipidval .= $comma . "'" . $val['ipid'] . "'";
				$comma = ",";
			}

			$dis = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr='TOD' OR abbr='TODNA')");
			$disarray = $dis->fetchArray();

			$todid = "'X'";
			foreach($disarray as $dis)
			{
				$todid .= $comma . "'" . $dis['id'] . "'";
				$comma = ",";
			}


			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where('ipid in (' . $disipidval . ') and discharge_method IN (' . $todid . ') AND ' . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . '');
			$disipidarray = $dispat->fetchArray();

			$comma = ",";
			$ipidval = "'0'";
			foreach($disipidarray as $key => $val)
			{
				$ipidval .= $comma . "'" . $val['ipid'] . "'";
				$comma = ",";
			}

			return $ipidval;
		}

		public function deadstats($params)
		{
			// report_id = 3
			// report_name = Verstorben
			//ISPC - 2116 - add column voluntaryworker
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$whereepid = $this->getDocCondition();
			//$clientIpids = $this->getAllClientPatients($logininfo->clientid, $whereepid);

			$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);

			//$ipidsval = "'X'";
			/*$ipidsval = "";
			$comma = ",";
			foreach($ipidsarr as $ipid)
			{
				$ipidsval .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}
			foreach($clientIpids as $patient)
			{
				$clientPatientsIpids[] = $patient['ipid'];
			}*/

			//$ipidsArray = $ipidsarr;
			$deadIpidPatientsarr = $ipidsarr;
			$MasterData = array();
			//if(empty($ipidsArray))
			if(empty($deadIpidPatientsarr))
			{
				//$ipidsArray[] = "99999999999";
				return $MasterData;
			}

			$Q = Doctrine_Query::create()
				->select("*,
				AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
				convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
				convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
				convert(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
				convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city
			")
				->from('PatientMaster')
				//->whereIn('ipid', $ipidsArray)
				->whereIn('ipid', $deadIpidPatientsarr)
				->andWhere('isdelete = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy('admission_date DESC');

			$deadPatients = $Q->fetchArray();

			//$deadPatientFamilyDocStr = "'0',";
			$deadPatientFamilyDocStr = "";
			foreach($deadPatients as $patient)
			{
				$deadIpidPatients[$patient['ipid']] = $patient;
				$deadPatientFamilyDocStr .= "'" . $patient['familydoc_id'] . "',";
				//$deadIpidPatientsarr[] = $patient['ipid'];
			}
			//print_r($deadIpidPatientsarr); exit;
			$docarray = array();
			if($deadPatientFamilyDocStr != "")
			{
				$drop = Doctrine_Query::create()
					->select('*')
					->from('FamilyDoctor')
					->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '') AND id IN(" . substr($deadPatientFamilyDocStr, 0, -1) . ")");

				$docarray = $drop->fetchArray();
			}

			foreach($docarray as $doctor)
			{
				$doctorarry[$doctor['id']] = $doctor;
			}

			$pm = new PatientMaster();
			if(count($deadIpidPatientsarr) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($deadIpidPatientsarr, true);
			}

			$dispatloc = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge as p")
				//->whereIn('p.ipid', $ipidsArray);
				->whereIn('p.ipid', $deadIpidPatientsarr);
			$dispatlocarr = $dispatloc->fetchArray();

			//$locstr = "'X'";
			$locstr = "";
			$comma = "";
			foreach($dispatlocarr as $dischargedpat)
			{
				$dischargeLocationsArray[$dischargedpat['ipid']] = $dischargedpat;
				$locstr .= $comma . "'" . $dischargedpat['discharge_location'] . "'";
				$comma = ",";
			}

			$locarr = array();
			if($locstr != "")
			{
				$loc = Doctrine_Query::create()
					->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as dislocation")
					->from("DischargeLocation")
					->where('id in (' . $locstr . ')');
				$locarr = $loc->fetchArray();
			}

			foreach($locarr as $loc)
			{
				$Locations[$loc['id']] = $loc;
			}
			$dispatlocarr = $dispatloc->fetchArray();

			$epidIpid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				//->whereIn('ipid', $ipidsArray);
				->whereIn('ipid', $deadIpidPatientsarr);
			$epidIpidarr = $epidIpid->fetchArray();

			foreach($epidIpidarr as $pat_epid)
			{
				$epidsarr[$pat_epid['ipid']] = $pat_epid;
			}
			
			$pdws = Doctrine_Query::create()
				->select('*, last_name as last_name, first_name as first_name')
					->from('PatientVoluntaryworkers as pv')
					->leftJoin('Voluntaryworkers as v')
					->where("pv.vwid = v.id")
					->andWhereIn('pv.ipid', $deadIpidPatientsarr)
					->andWhere('pv.isdelete="0"')
					->orderBy('pv.ipid ASC');
			$pdws_res = $pdws->fetchArray();
			
			foreach($pdws_res as $kpdvw=>$vpdvw)
			{
				if(trim($vpdvw['first_name']) !='')
				{
					$patdeadvw[$vpdvw['ipid']][] = trim($vpdvw['first_name']) . " " . trim($vpdvw['last_name']);
				}
				else 
				{
					$patdeadvw[$vpdvw['ipid']][] = trim($vpdvw['last_name']);
				}
			}
			//print_r($patdeadvw); exit;
			$i = 0;

			foreach($deadIpidPatients as $k_dipid => $v_dpatient)
			{

				$MasterData['data'][$k_dipid]['epid'] = $epidsarr[$k_dipid]['epid'];
				$MasterData['data'][$k_dipid]['lastname'] = $v_dpatient['last_name'];
				$MasterData['data'][$k_dipid]['firstname'] = $v_dpatient['first_name'];
				//radu 16.10.2012
				if(!empty($v_dpatient['street2']))
				{
					$street = $v_dpatient['street1'] . ", " . $v_dpatient['street2'];
				}
				else
				{
					$street = $v_dpatient['street1'];
				}

				$MasterData['data'][$k_dipid]['street'] = $street;
				$MasterData['data'][$k_dipid]['zip'] = trim($v_dpatient['zip']);
				$MasterData['data'][$k_dipid]['city'] = $v_dpatient['city'];

				$diedage = $pm->GetTreatedDays(date("Y-m-d", strtotime($v_dpatient['birthd'])), date("Y-m-d", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date'])), true);
				$diedcnt += $diedage['years'];

				$MasterData['data'][$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd'])) . "(" . $diedage['years'] . ")";
				$MasterData['data'][$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($v_dpatient['admission_date']));
				//print_r($dischargeLocationsArray);
				$MasterData['data'][$k_dipid]['diedon'] = date("d.m.Y", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date']));
				if(!empty($doctorarry[$v_dpatient['familydoc_id']]['last_name']) && !empty($doctorarry[$v_dpatient['familydoc_id']]['first_name']))
				{
					$family_doctor = $doctorarry[$v_dpatient['familydoc_id']]['last_name'] . ", " . $doctorarry[$v_dpatient['familydoc_id']]['first_name'];
				}
				else if(!empty($doctorarry[$v_dpatient['familydoc_id']]['first_name']))
				{
					$family_doctor = $doctorarry[$v_dpatient['familydoc_id']]['first_name'];
				}
				else if(!empty($doctorarry[$v_dpatient['familydoc_id']]['last_name']))
				{
					$family_doctor = $doctorarry[$v_dpatient['familydoc_id']]['last_name'];
				}
				else
				{
					$family_doctor = '';
				}

				//			$MasterData['data'][$k_dipid]['familydoctor'] = $doctorarry[$v_dpatient['familydoc_id']]['first_name'].", ".$doctorarry[$v_dpatient['familydoc_id']]['last_name'];
				$MasterData['data'][$k_dipid]['familydoctor'] = $family_doctor;
				$MasterData['data'][$k_dipid]['dielocation'] = $Locations[$dischargeLocationsArray[$k_dipid]['discharge_location']]['dislocation'];
				$MasterData['data'][$k_dipid]['treateddays'] = $treatedarr[$k_dipid]['realActiveDays'];
				$MasterData['data'][$k_dipid]['voluntaryworkers'] = implode(',', $patdeadvw[$k_dipid]);

				$treatedcnt += $treatedarr[$k_dipid]['realActiveDays'];


				$i++;
			}

			$MasterData['extra']['avg_die'] = round($diedcnt / $i, 2);
			$MasterData['extra']['avg_treatment'] = round($treatedcnt / $i, 2);

			return $MasterData;
		}

		private function privatepatient($params)
		{
			//report_id = 27
			//report_name = Privatpatient
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$required_user = $this->getDocCondition(true);
			$clientid = $logininfo->clientid;

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			if($onlyactive == 1)
			{ // this is needed if now active
				$active_ipids = $this->getActiveIpids();
				if(!empty($active_ipids))
				{
					$conditions['ipids'] = $active_ipids;
				}
				else
				{
					$conditions['ipids'] = array("XXXXXX");
				}
			}
			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;



			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$ipidarr = array_keys($active_patient_details); // return ipids



			if(empty($ipidarr))
			{
				$ipidarr[] = "XXXXXX";
			}


			$check_assigned = "0";
			if($required_user)
			{
				$check_assigned = "1";
				// get patients asigned to users

				$pats_users = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('userid = ' . $required_user)
					->andWhere(' clientid = ' . $clientid)
					->andWhere('epid!=""');
				$assigned_epids_details = $pats_users->fetchArray();

				foreach($assigned_epids_details as $k => $as_data)
				{
					$assigned_epids[] = $as_data['epid'];
				}
				if(empty($assigned_epids))
				{
					$assigned_epids[] = "XXXXXX";
				}
			}

			// get privat patients
			$Health = Doctrine_Query::create()
				->select("ipid")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $ipidarr)
				->andWhere('privatepatient =1 ');
			$pv_ipidsarr = $Health->fetchArray();

			foreach($pv_ipidsarr as $k => $pvp)
			{
				$privat_patients_array[] = $pvp['ipid'];
			}

			foreach($active_patient_details as $ipid => $p_details)
			{
				if(in_array($ipid, $privat_patients_array))
				{
					$patient_data[$p_details['details'] ['ipid']]['epid'] = $p_details['details'] ['epid'];
					$patient_data[$p_details['details'] ['ipid']]['lastname'] = $p_details['details'] ['last_name'];
					$patient_data[$p_details['details'] ['ipid']]['firstname'] = $p_details['details'] ['first_name'];
				}
			}

			###########################
			$conditions_ov['periods'] = array('0' => array('start' => "2007-01-01", 'end' => date("Y-m-d")));
			$conditions_ov['client'] = $clientid;
			$conditions_ov['ipids'] = $ipidarr;
			$overall_patient_details = Pms_CommonData::patients_days($conditions_ov);


			foreach($overall_patient_details as $ipid => $op_details)
			{
				if(in_array($ipid, $privat_patients_array))
				{
					$patient_data [$op_details['details'] ['ipid']]['treateddays'] = $op_details['real_active_days_no'];
				}
			}

			if($check_assigned == "1")
			{
				foreach($patient_data as $pipid => $pdata)
				{
					if(!in_array($pdata['epid'], $assigned_epids))
					{
						unset($patient_data[$pipid]);
					}
				}
			}

			$MasterData['data'] = $patient_data;
			return $MasterData;
		}

		private function privatepatient_150121($params)
		{
			//report_id = 27
			//report_name = Privatpatient
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$active = array();
			$dead = array();
			if($onlyactive != 1)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if(!is_array($active))
				{
					$active = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}
				$ipidarr = array_merge($active, $dead);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			$ipid_str = "'0',";
			foreach($ipidarr as $ipid)
			{
				$ipid_str .= "'" . $ipid . "',";
			}

			$actpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex, e.epid as patepid")
				->from('PatientMaster p');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$actpatient->leftJoin("PatientHealthInsurance h");
			$actpatient->andWhere('h.ipid = p.ipid and h.privatepatient = 1 AND p.ipid IN (' . substr($ipid_str, 0, -1) . ')');
			$actpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$actpatients = $actpatient->fetchArray();
			$i = 1;

			$activeipids = "'0',";

			foreach($actpatients as $patient)
			{
				if($i != count($actpatients))
				{
					$end = ",";
				}
				else
				{
					$end = "";
				}
				$activeipids .= "'" . $patient['ipid'] . "'" . $end;
				$activeipidsarr[] = $patient['ipid'];
				$i++;
			}

			$pm = new PatientMaster();
			if(count($activeipidsarr) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($activeipidsarr, false);
			}

			foreach($actpatients as $activepatient)
			{
				$MasterData['data'][$activepatient['ipid']]['epid'] = $activepatient['patepid'];
				$MasterData['data'][$activepatient['ipid']]['lastname'] = $activepatient['last_name'];
				$MasterData['data'][$activepatient['ipid']]['firstname'] = $activepatient['first_name'];
				$MasterData['data'][$activepatient['ipid']]['treateddays'] = $treatedarr[$activepatient['ipid']]['realActiveDays'];
			}

			return $MasterData;
		}

		public function treatmentavgdays150706($params)
		{
			// report_id = 4
			// report_name = Durchschnittliche Behandlungsdauer
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$daysinperiod = $params['custom']['daysinperiod'];
			$onlyactive = $params['onlyactive'];


			$active = array();
			$dead = array();
			if($onlyactive != 1)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if(!is_array($active))
				{
					$active = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}
				$ipidarr = array_merge($active, $dead);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}
			$comma = ",";
			$ipidval = "'0'";
			foreach($ipidarr as $key => $val)
			{
				$ipidval .= $comma . "'" . $val . "'";
				$comma = ",";
			}
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = '9999999999';
			}

			$Q = Doctrine_Query::create()
				->select("*, year(CURRENT_DATE())-year(`birthd`) AS age,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip")
				->from('PatientMaster')
				->where("ipid in (" . $ipidval . ") ")
				->orderBy('admission_date DESC');
			$patients = $Q->fetchArray();

			$comma = ",";
			$doctorstr = "'0'";
			foreach($patients as $patient)
			{
				$ipidPatients[$patient['ipid']] = $patient;
				$doctorstr .= $comma . "'" . $patient['familydoc_id'] . "'";
				$comma = ",";

				$ipidPatientsArr[] = $patient['ipid'];
			}
			if(empty($ipidPatientsArr))
			{
				$ipidPatientsArr[] = '999999999';
			}
			$ipidarr = array_unique($ipidarr);

			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '') AND id IN(" . $doctorstr . ")");
			$docarray = $drop->fetchArray();
				
			foreach($docarray as $doctor)
				{
					$doctorarry[$doctor['id']] = $doctor;
				}
			
			$pm = new PatientMaster();
			if(count($ipidarr) > 0)
			{
				$patTreatedDays = $pm->getTreatedDaysRealMultiple($ipidarr, false);
			}

			if($daysinperiod == "1")
			{
				$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

				foreach($period ['start'] as $keyd => $startDate)
				{
					$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
				}
				foreach($periodDays as $keyp => $daysp)
				{
					foreach($daysp as $day)
					{
						$finalPeriodDays [] = $day;
					}
				}
				$finalPeriodDays = array_unique($finalPeriodDays);

				foreach($patTreatedDays as $patientTreatmentIpid => $patientTreatmentData)
				{
					if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
					{
						foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
						{
							if(count($patientTreatmentData ['admissionDates']) == 0)
							{
								$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
							}
							else
							{
								$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
							}
							$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
							$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
						}
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
					{

						if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
						{
							$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
						}
						else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
						{
							$dischargeDate = $patientTreatmentData ['discharge_date'];
						}

						if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
						{
							$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
							$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
						}
						else
						{
							$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
							$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
						}
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					}
					else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
					{
						foreach($patientTreatmentData ['admissionDates'] as $keyadmission => $admissionvalues)
						{
							if(empty($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']))
							{
								$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
								$discharge = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
							}
							else
							{
								$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
								$discharge = date("Y-m-d", strtotime($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']));
							}
							$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($admission));
							$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($discharge));
						}
					}
					else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
					{
						foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));

							$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
							$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
						}
					}

					if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					}
				}

				foreach($patientDateRange as $treatmentIpid => $range)
				{

					foreach($range as $ktreat => $treatmentarr)
					{

						foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
						{
							$startDate = date("Y-m-d", strtotime($treatmentval));
							$endDate = date("Y-m-d", strtotime($treatmentarr['end'][$keytreatval]));

							$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
						}
					}
				}
				//filter period days and treatment days
				foreach($treatmentDaysArray as $patientIpid => $patientDates)
				{
					$finalPatientArr = array();
					if(count($patientDates) > 1)
					{
						foreach($patientDates as $kp => $patientDatesArr)
						{
							foreach($patientDatesArr as $patientValues)
							{
								$finalPatientArr[] = $patientValues;
							}
						}

						$finalDays [$patientIpid] ['FinalCountDays'] = array_intersect($finalPeriodDays, $finalPatientArr);
					}
					else
					{
						$finalDays [$patientIpid] ['FinalCountDays'] = array_intersect($finalPeriodDays, $patientDates[0]);
					}
				}
			}

			$epidspat = Doctrine_Query::create()
				->select("*")
				->from("EpidIpidMapping")
				->whereIn('ipid', $ipidPatientsArr);
			$epidspatarr = $epidspat->fetchArray();

			foreach($epidspatarr as $epidpatient)
			{
				$epidsPatients[$epidpatient['ipid']] = $epidpatient['epid'];
			}

			//	highest verordung not denied in reported period
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$dropSapv = Doctrine_Query::create()
				->select('*, GROUP_CONCAT(verordnet) as vero')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipidPatientsArr)
				->andWhere(str_replace($s, $r, $active_cond['interval_sql']))
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->groupBy('ipid');
			$droparray = $dropSapv->fetchArray();

			foreach($droparray as $verord)
			{
				$sapv = explode(',', $verord['vero']);
				$s = max($sapv);
				if($s == "1")
				{
					$sapv_value[$verord['ipid']] = "BE";
				}
				elseif($s == "2")
				{
					$sapv_value[$verord['ipid']] = "KO";
				}
				elseif($s == "3")
				{
					$sapv_value[$verord['ipid']] = "TV";
				}
				elseif($s == "4")
				{
					$sapv_value[$verord['ipid']] = "VV";
				}
				else
				{
					$sapv_value[$verord['ipid']] = "-";
				}
			}
			//highest verordung not denied in reported period end!
			// get discharge method for patients dead
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid = " . $logininfo->clientid)
				->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
				->andwhere('isdelete = 0');
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}

			$todpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge ')
				->whereIn('ipid', $ipidPatientsArr)
				->andWhereIn('discharge_method', $dm_deadfinal)
				->andWhere('isdelete = 0');
			$todpatientarray = $todpatients->fetchArray();

			$patients_tod_date = array();
			if($todpatientarray)
			{
				foreach($todpatientarray as $key => $todpatient)
				{
					$patients_tod_date[$todpatient['ipid']] = date("Y-m-d", strtotime($todpatient['discharge_date']));
				}
			}

			$i = 0;
			foreach($ipidPatients as $k_ipid => $v_patient)
			{
				$end_date_patient = '';
				if(array_key_exists($k_ipid, $patients_tod_date))
				{
					$end_date_patient = $patients_tod_date[$k_ipid];
				}
				else
				{
					$end_date_patient = date("Y-m-d", time());
				}
				$MasterData['data'][$k_ipid]['epid'] = $epidsPatients[$v_patient['ipid']];
				$MasterData['data'][$k_ipid]['lastname'] = $v_patient['last_name'];
				$MasterData['data'][$k_ipid]['firstname'] = $v_patient['first_name'];
				/* $age = "";
				  $age = $pm->GetTreatedDays(date("Y-m-d", strtotime($v_patient['birthd'])),date("Y-m-d"),true);

				  $agecnt += $age['years']; */
				$age = $pm->GetAge($v_patient['birthd'], $end_date_patient, true);
				$MasterData['data'][$k_ipid]['birthd'] = date("d.m.Y", strtotime($v_patient['birthd']));
				$MasterData['data'][$k_ipid]['age'] = $age;
				$MasterData['data'][$k_ipid]['zip'] = $v_patient['zip'];
				$MasterData['data'][$k_ipid]['admissiondate'] = date("d.m.Y", strtotime($v_patient['admission_date']));
				if($doctorarry[$v_patient['familydoc_id']])
				{
				$MasterData['data'][$k_ipid]['familydoctor'] = $doctorarry[$v_patient['familydoc_id']]['last_name'] . ", " . $doctorarry[$v_patient['familydoc_id']]['first_name'];
				}
				else 
				{
					$MasterData['data'][$k_ipid]['familydoctor'] = "";
				}
				$MasterData['data'][$k_ipid]['familydoctorphone'] = $doctorarry[$v_patient['familydoc_id']]['phone_practice'] . ' ';
				
				if($daysinperiod == "1")
				{
					$treatedcnt += count($finalDays[$k_ipid]['FinalCountDays']);
					$MasterData['data'][$k_ipid]['treateddays'] = count($finalDays[$k_ipid]['FinalCountDays']);
				}
				else
				{
					$treatedcnt += $patTreatedDays[$k_ipid]['realActiveDays'];
					$MasterData['data'][$k_ipid]['treateddays'] = $patTreatedDays[$k_ipid]['realActiveDays'];
				}
				//high sapv show "-" if empty
				if(strlen($sapv_value[$k_ipid]) > 0)
				{
					$MasterData['data'][$k_ipid]['sapv'] = $sapv_value[$k_ipid];
				}
				else
				{
					$MasterData['data'][$k_ipid]['sapv'] = "-";
				}

				$i++;
			}
			$MasterData['extra']['avg_treatment'] = round($treatedcnt / $i, 2);
			return $MasterData;
		}
		
		
		public function treatmentavgdays($params)
		{
			// report_id = 4
			// report_name = Durchschnittliche Behandlungsdauer  // Re- done 06.07.2015 
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$clientid = $logininfo->clientid;
			
			
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$daysinperiod = $params['custom']['daysinperiod'];
			$onlyactive = $params['onlyactive'];

			
			
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
				
			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
				
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			

			if($onlyactive != 1)
			{
				$conditions['periods'] = $report_period_array;
				$conditions['client'] = $clientid;
					
				$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
				$ipidarr = array_keys($active_patient_details); // return ipids
				
			}
			else
			{
				$ipidarr_only_active = $this->getActivePatients($quarterarr, $yeararr, $montharr);
				
				$conditions['ipids'] = $ipidarr_only_active;
				$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
				$ipidarr = array_keys($active_patient_details); // return ipids
			}


			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth_ymd'] = $p_details['details'] ['birthd'];
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
				}
			
				$patientDetails [$p_details['details'] ['ipid']] ['zip'] = $p_details['details'] ['zip'];
				$family_doctors[] = $p_details['details'] ['familydoc_id'];
				$patientDetails [$p_details['details'] ['ipid']] ['familydoc_id'] = $p_details['details'] ['familydoc_id'];
				
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
			}

			
			if($daysinperiod != "1")
			{
				
				$conditions_all['periods'][0]['start'] = '2009-01-01';
				$conditions_all['periods'][0]['end'] = date('Y-m-d');
				$conditions_all['client'] = $clientid;
				$conditions_all['ipids'] = $ipidarr;
				$patient_days_overall = Pms_CommonData::patients_days($conditions_all, $sql);
				
			 
				foreach($patient_days_overall as $ipid => $p_details)
				{
					$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
					$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				}
			}
			
			if($_REQUEST['dbg'] == '1'){
				print_r(" \n  days ion period (1 /0) \n "); 
				print_r($daysinperiod);
				 
				print_r(" \n  patient details \n "); 
				print_r($patientDetails); 
				exit;
			}
			
			
			if(empty($family_doctors)){
				$family_doctors[] = "XXXXXX";
			}
 
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = '9999999999';
			}
			
			// Family Doctor
			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->whereIn("id",$family_doctors)
				->andWhere("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '')");
			$docarray = $drop->fetchArray();
				
			foreach($docarray as $doctor)
				{
					$doctorarry[$doctor['id']] = $doctor;
				}
			
			
			//	highest verordung not denied in reported period
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$dropSapv = Doctrine_Query::create()
				->select('*, GROUP_CONCAT(verordnet) as vero')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipidarr)
				->andWhere(str_replace($s, $r, $active_cond['interval_sql']))
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->groupBy('ipid');
			$droparray = $dropSapv->fetchArray();

			
			foreach($droparray as $verord)
			{
				$sapv = explode(',', $verord['vero']);
				$s = max($sapv);
				if($s == "1")
				{
					$sapv_value[$verord['ipid']] = "BE";
				}
				elseif($s == "2")
				{
					$sapv_value[$verord['ipid']] = "KO";
				}
				elseif($s == "3")
				{
					$sapv_value[$verord['ipid']] = "TV";
				}
				elseif($s == "4")
				{
					$sapv_value[$verord['ipid']] = "VV";
				}
				else
				{
					$sapv_value[$verord['ipid']] = "-";
				}
			}
			//highest verordung not denied in reported period end!
			
			
			// get discharge method for patients dead
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid = " . $logininfo->clientid)
				->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
				->andwhere('isdelete = 0');
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}

			$todpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge ')
				->whereIn('ipid', $ipidarr)
				->andWhereIn('discharge_method', $dm_deadfinal)
				->andWhere('isdelete = 0');
			$todpatientarray = $todpatients->fetchArray();

			$patients_tod_date = array();

			if($todpatientarray)
			{
				foreach($todpatientarray as $key => $todpatient)
				{
					$patients_tod_date[$todpatient['ipid']] = date("Y-m-d", strtotime($todpatient['discharge_date']));
				}
			}
			
			$i = 0;
			
			$pm = new PatientMaster();
			foreach($ipidarr as $key => $k_ipid)
			{
				$end_date_patient = '';
				if(array_key_exists($k_ipid, $patients_tod_date))
				{
					$end_date_patient = $patients_tod_date[$k_ipid];
				}
				else
				{
					$end_date_patient = date("Y-m-d", time());
				}
				
				$MasterData['data'][$k_ipid]['epid'] = $patientDetails [$k_ipid] ['epid'];
				$MasterData['data'][$k_ipid]['lastname'] = $patientDetails [$k_ipid] ['surname'];
				$MasterData['data'][$k_ipid]['firstname'] = $patientDetails [$k_ipid] ['firstname'];
				$MasterData['data'][$k_ipid]['birthd'] = $patientDetails [$k_ipid] ['dateofbirth'];
				
				$MasterData['data'][$k_ipid]['age'] = $pm->GetAge($patientDetails [$k_ipid] ['dateofbirth_ymd'], $end_date_patient, true);
				
				$MasterData['data'][$k_ipid]['zip'] = $patientDetails [$k_ipid] ['zip'];
				$MasterData['data'][$k_ipid]['admissiondate'] = $patientDetails [$k_ipid] ['admissiondate'];

				if($doctorarry[$patientDetails [$k_ipid] ['familydoc_id'] ])
				{
					$MasterData['data'][$k_ipid]['familydoctor'] = $doctorarry[$patientDetails [$k_ipid] ['familydoc_id']]['last_name'] . ", " . $doctorarry[$patientDetails [$k_ipid] ['familydoc_id']]['first_name'];
				}
				else 
				{
					$MasterData['data'][$k_ipid]['familydoctor'] = "";
				}
				
				$MasterData['data'][$k_ipid]['familydoctorphone'] = $doctorarry[$patientDetails [$k_ipid] ['familydoc_id']]['phone_practice'] . ' ';
				
				
				$MasterData['data'][$k_ipid]['treateddays'] = $patientDetails [$k_ipid]['real_active_days_no'] ;
				$treatedcnt +=  $patientDetails [$k_ipid]['real_active_days_no'] ;
				
				//high sapv show "-" if empty
				if(strlen($sapv_value[$k_ipid]) > 0)
				{
					$MasterData['data'][$k_ipid]['sapv'] = $sapv_value[$k_ipid];
				}
				else
				{
					$MasterData['data'][$k_ipid]['sapv'] = "-";
				}

				$i++;
			}
			$MasterData['extra']['avg_treatment'] = round($treatedcnt / $i, 2);
			return $MasterData;
		}

		public function behandeltePatienten($params)
		{
			// report_id = 39
			// report_name = behandeltePatienten
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$clientid = $logininfo->clientid; 
			
			
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];

			$onlyactive = $params['onlyactive'];
			$pm = new PatientMaster();

			$active = array();
			$dead = array();
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
			    $periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])));

			    $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
			    if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
			    {
			        $report_period_array[$keyd]['end'] = date("Y-m-d");
			    }
			    else
			    {
			        $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
			    }
			}
 
			foreach($periodDays as $keyp => $daysp)
			{
			    foreach($daysp as $day)
			    {
			        $finalPeriodDays [] = $day;
			    }
			}
			$finalPeriodDays = array_unique($finalPeriodDays);
			
			
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			
			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
			
			
			// if user selected - get only assigned to user
			if($whereepid){
    			$patientMasterData = Doctrine_Query::create()
    			->select("e.ipid")
    			->from("EpidIpidMapping e")
    			->where($whereepid . ' e.clientid = ' . $logininfo->clientid);
    			$pmarr = $patientMasterData->fetchArray();
    			
    			$doctor_assigned_ipids = array();
    			foreach($pmarr as $patient)
    			{
    			    $doctor_assigned_ipids[] =  $patient['ipid'];
    			}
    			
    			if(!empty($doctor_assigned_ipids)){
        			 $conditions['ipids'] =  $doctor_assigned_ipids;
    			}
			}
			
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			
			$doctorids = array();
			foreach($active_patient_details as $ipid => $p_details)
			{
			    $patient_details [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
			    $patient_details [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
			    $patient_details [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
			    $patient_details [$p_details['details'] ['ipid']] ['family_doctor'] = $p_details['details'] ['familydoc_id'];
			    $patient_details [$p_details['details'] ['ipid']] ['street'] = $p_details['details'] ['street1'];
			    $patient_details [$p_details['details'] ['ipid']] ['zip'] = $p_details['details'] ['zip'];
			    $patient_details [$p_details['details'] ['ipid']] ['city'] = $p_details['details'] ['city'];
			    $doctorids[] = $p_details['details'] ['familydoc_id']; 
			    
			    $patient_details [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
			    $patient_details [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
			    if($p_details['details']['isdischarged'] == '1')
			    {
			        $dischargedipid_arr[] = $p_details['details']['ipid'];
			        $patient_details [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
			        $patient_details [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
			    }
			    else
			    {
			        $patient_details [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
			    }

			    
			    $patient_details [$p_details['details'] ['ipid']]['real_active_days'] = array_values($p_details['real_active_days']);
			    $i = 0;
			    $current = false;
			    $date_1 = 0;
			    $date_2 = 0;
			    $datediff = 0;
			    $days_bewtween =0;
			     
			    foreach( $p_details['real_active_days']  as $rak=>$day){
			        
			        
			        if($current === false) {
			            $patient_details [$p_details['details'] ['ipid']]['real_days_intervals'][$i]['start'] = $day;
			        }
			        $date_1 = strtotime($day);
			        $date_2 = strtotime($p_details['real_active_days'][$rak-1]);
			        $datediff =  $date_1 - $date_2;
			        $days_bewtween =floor($datediff / (60 * 60 * 24));
			        
			        if($days_bewtween > 1 && $p_details['real_active_days'][$rak-1]){
			            $patient_details [$p_details['details'] ['ipid']]['real_days_intervals'][$i]['end'] = $current;
			            $i++;
			            $patient_details [$p_details['details'] ['ipid']]['real_days_intervals'][$i]['start'] = $day;
			        } else {
			             $patient_details [$p_details['details'] ['ipid']]['real_days_intervals'][$i]['end'] = $day;
			        }
			        $current = $day;
			    }
			

			    $patient_details [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
			    $patient_details [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
			    $patient_details [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
			    $patient_details [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}
			
			// sort details by admission date asc 
			$sortarr = 'admissiondate';
			$patient_details = $this->array_sort($patient_details, $sortarr, SORT_ASC);
			$final_ipid_array =  array_keys($patient_details);
 
			if(count($final_ipid_array) == 0)
			{
			    $final_ipid_array [] = "0";
			}

			if(count($doctorids) == 0)
			{
			    $doctorids [] = "0";
			}
			

			//get doctors details
			$Familydoctor = array();
			$famdoc = new FamilyDoctor();
			$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);
			
			foreach($familidoc as $fd_key => $fd_value)
			{
			    $familydoctors[$fd_value['id']] = $fd_value;
			}
			
			if(count($familidoc) > 0)
			{
			    foreach($familidoc as $doc)
			    {
			        if(strlen($doc['title']) > 0)
			        {
			            $Familydoctor[$doc['id']] = $doc['title'] . " ";
			        }
			        if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
			        {
			            $Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
			        }
			
			        if(strlen($doc['phone_practice']) > 0)
			        {
			            $Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
			        }
			
			        if(strlen($doc['street1']) > 0)
			        {
			            $Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
			        }
			        if(strlen($doc['street2']) > 0)
			        {
			            $Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
			        }
			        if(strlen($doc['zip']) > 0)
			        {
			            $Familydoctor[$doc['id']] .= $doc['zip'] . ", ";
			        }
			        if(strlen($doc['city']) > 0)
			        {
			            $Familydoctor[$doc['id']] .= $doc['city'];
			        }
			    }
			}
  
			foreach($final_ipid_array as $kid => $patient_ipid)
			{
				$MasterData['data'][$patient_ipid]['epid'] = $patient_details[$patient_ipid]['epid'];
				$MasterData['data'][$patient_ipid]['lastname'] = $patient_details[$patient_ipid]['surname'];;
				$MasterData['data'][$patient_ipid]['firstname'] =  $patient_details[$patient_ipid]['firstname'];;
				$MasterData['data'][$patient_ipid]['street'] =  $patient_details[$patient_ipid]['street'];
				$MasterData['data'][$patient_ipid]['zip'] = $patient_details[$patient_ipid]['zip'];
				$MasterData['data'][$patient_ipid]['city'] = $patient_details[$patient_ipid]['city'];
				$MasterData['data'][$patient_ipid]['birthd'] =  $patient_details[$patient_ipid]['dateofbirth'];
				$MasterData['data'][$patient_ipid]['admissiondate'] =  $patient_details[$patient_ipid]['admissiondate']; 
				$MasterData['data'][$patient_ipid]['dischargedate'] =  $patient_details[$patient_ipid]['dischargedate']; 
				$MasterData['data'][$patient_ipid]['activedays'] = count($patient_details[$patient_ipid]['real_active_days']);

				$periodActive = array();

				foreach($patient_details[$patient_ipid]['real_days_intervals'] as $kint => $int_values)
				{
					$periodActive[] = $int_values['start']." - ".$int_values['end'];
				}

				$MasterData['data'][$patient_ipid]['activeperiod'] = implode("<br />",$periodActive);
				$MasterData['data'][$patient_ipid]['familydoctor'] = $Familydoctor[$patient_details[$patient_ipid]['family_doctor']];
			}
			return $MasterData;
		}
		
		public function behandeltePatienten_150827($params)
		{
			// report_id = 39
			// report_name = behandeltePatienten
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];

			$onlyactive = $params['onlyactive'];
			$pm = new PatientMaster();

			$active = array();
			$dead = array();
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])));
			}
			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			if($onlyactive != 1)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if(!is_array($active))
				{
					$active = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}
				$ipidarr = array_merge($active, $dead);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			$comma = ",";
			$ipidval = "'0'";
			foreach($ipidarr as $key => $val)
			{
				$ipidval .= $comma . "'" . $val . "'";
				$comma = ",";
				$ipidarr[] = $val;
			}
			$ipidarr[] = '99999999999';

			$Q = Doctrine_Query::create()
				->select("*, year(CURRENT_DATE())-year(`birthd`) AS age,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city")
				->from('PatientMaster')
				->whereIn('ipid', $ipidarr)
				->orderBy('admission_date DESC');
			$patients = $Q->fetchArray();

			$comma = ",";
			$doctorstr = "'0'";
			foreach($patients as $patient)
			{
				$ipidPatients[$patient['ipid']] = $patient;
				$doctorstr .= $comma . "'" . $patient['familydoc_id'] . "'";
				$comma = ",";

				$ipidPatientsArr[] = $patient['ipid'];
				$doctorids[] = $patient['familydoc_id'];
			}
			$ipidPatientsArr[] = '999999999';

			//get doctors details
			$Familydoctor = array();
			$famdoc = new FamilyDoctor();
			$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

			foreach($familidoc as $fd_key => $fd_value)
			{
				$familydoctors[$fd_value['id']] = $fd_value;
			}

			if(count($familidoc) > 0)
			{
				foreach($familidoc as $doc)
				{
					if(strlen($doc['title']) > 0)
					{
						$Familydoctor[$doc['id']] = $doc['title'] . " ";
					}
					if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
					}

					if(strlen($doc['phone_practice']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
					}

					if(strlen($doc['street1']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
					}
					if(strlen($doc['street2']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
					}
					if(strlen($doc['zip']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['zip'] . ", ";
					}
					if(strlen($doc['city']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['city'];
					}
				}
			}

			//		Get discharge dates
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->whereIn('ipid', $ipidarr);
			$dispatarray = $dispat->fetchArray();

			foreach($dispatarray as $dis_patient)
			{
				$dischargedpatarray[$dis_patient['ipid']] = $dis_patient['discharge_date'];
			}

			if(count($ipidarr) > 0)
			{
				$patTreatedDays = $pm->getTreatedDaysRealMultiple($ipidarr, false);
			}


			//make array with days from patient treatment days
			foreach($patTreatedDays as $patientTreatmentIpid => $patientTreatmentData)
			{
				if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
					{
						if(count($patientTreatmentData ['admissionDates']) == 0)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						}
						else
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
						}

						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
				{

					if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = $patientTreatmentData ['discharge_date'];
					}

					if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
					else
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
				{

					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
				else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
				{
					foreach($patientTreatmentData ['admissionDates'] as $keyadmission => $admissionvalues)
					{
						if(empty($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']))
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
						}
						else
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']));
						}

						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($admission));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($discharge));
					}
				}
				else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
					{
						$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));

						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}

				if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])) && count($patientTreatmentData ['admissionDates']) == 0 && !in_array(date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])), $patientDateRange[$patientTreatmentIpid]['range']['start']))
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
			}

			foreach($patientDateRange as $treatmentIpid => $range)
			{
				foreach($range as $ktreat => $treatmentarr)
				{
					foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
					{
						$startDate = date("Y-m-d", strtotime($treatmentval));
						$endDate = date("Y-m-d", strtotime($treatmentarr['end'][$keytreatval]));

						if($startDate != "1970-01-01" && $endDate != "1970-01-01")
						{
							$startperiod = "";
							$endperiod = "";

							$r1start = strtotime($startDate);
							$r1end = strtotime($endDate);
							$r2start = strtotime($finalPeriodDays[0]);
							$r2end = strtotime(end($finalPeriodDays));

							$intersected = Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end);

							if($intersected)
							{
								if($r2start <= $r1start)
								{
									$finalStart = $r1start;
								}
								else
								{
									$finalStart = $r2start;
								}

								if($r2end <= $r1end)
								{
									$finalEnd = $r2end;
								}
								else
								{
									$finalEnd = $r1end;
								}

								$treatmentActivePeriod[$treatmentIpid][] = date("d.m.Y", $finalStart) . " - " . date("d.m.Y", $finalEnd) . "<br />";
							}
							$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
						}
					}
				}
			}

			foreach($treatmentDaysArray as $ipidPat => $treatmentDaysArrayF)
			{
				if(count($treatmentDaysArrayF) > 0)
				{
					foreach($treatmentDaysArrayF as $keyt => $treatmentDayValue)
					{
						$finalActiveDaysArray [$ipidPat][] = array_intersect($treatmentDayValue, $finalPeriodDays);
					}
				}
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{
				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $day)
					{
						$activeDaysFinal [$patIpid][] = $day;
					}
				}
			}


			$epidspat = Doctrine_Query::create()
				->select("*")
				->from("EpidIpidMapping")
				->whereIn('ipid', $ipidPatientsArr);
			$epidspatarr = $epidspat->fetchArray();

			foreach($epidspatarr as $epidpatient)
			{
				$epidsPatients[$epidpatient['ipid']] = $epidpatient['epid'];
			}
			foreach($ipidPatients as $k_ipid => $v_patient)
			{

				//seems to be faster than if i create a new foreach
				array_unique($finalPeriodDays);
				array_unique($activeDaysFinal[$k_ipid]);

				$finalDays [$k_ipid]['FinalCountDays'][] = array_intersect($finalPeriodDays, $activeDaysFinal[$k_ipid]);

				array_unique($finalDays [$k_ipid]['FinalCountDays']);

				$MasterData['data'][$k_ipid]['epid'] = $epidsPatients[$v_patient['ipid']];
				$MasterData['data'][$k_ipid]['lastname'] = $v_patient['last_name'];
				$MasterData['data'][$k_ipid]['firstname'] = $v_patient['first_name'];
				$MasterData['data'][$k_ipid]['street'] = $v_patient['street1'];
				$MasterData['data'][$k_ipid]['zip'] = $v_patient['zip'] . ' ';
				$MasterData['data'][$k_ipid]['city'] = $v_patient['city'] . ' ';
				$MasterData['data'][$k_ipid]['birthd'] = date("d.m.Y", strtotime($v_patient['birthd']));
				$MasterData['data'][$k_ipid]['admissiondate'] = date("d.m.Y", strtotime($v_patient['admission_date']));
				if(!empty($dischargedpatarray[$v_patient['ipid']]))
				{
					$dis_date = date("d.m.Y", strtotime($dischargedpatarray[$v_patient['ipid']]));
				}
				else
				{
					$dis_date = "-";
				}
				$MasterData['data'][$k_ipid]['dischargedate'] = $dis_date;

				$MasterData['data'][$k_ipid]['activedays'] = count($finalDays[$k_ipid]['FinalCountDays'][0]);

				$periodActive = "";

				foreach($treatmentActivePeriod[$k_ipid] as $period)
				{
					$periodActive .= $period;
				}

				$MasterData['data'][$k_ipid]['activeperiod'] = $periodActive;
				$MasterData['data'][$k_ipid]['familydoctor'] = $Familydoctor[$v_patient['familydoc_id']];
			}
			return $MasterData;
		}

		public function hospitalStats($params)
		{
			// report_id = 13
			// report_name = Anzahl KH Einweisungen
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period['start'] as $k_period_s => $v_period_s)
			{
				$periods_start[] = $v_period_s;
			}

			$pm = new PatientMaster();

			//Report period days list
			foreach($period ['start'] as $keyd => $startDate)
			{
				$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}

			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);


			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{ //unchecked aplicam filtre de time
				$all = $this->getClientPatients($clientid, $whereepid);

				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}

				if(!is_array($all))
				{
					$all = array();
				}
				if(!is_array($standby))
				{
					$standby = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}

				$ipidarr = array_merge($all, $standby, $dead);
			}
			else
			{ //checked toti pat activi fara filtre
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			$comma = ",";
			$ipidstr = "'X'";
			foreach($ipidarr as $ipid)
			{
				$ipidstr .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}

			//get location master
			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type =1');
			$hosparray = $hospitalids->fetchArray();

			$hospstr = "'X'";
			foreach($hosparray as $hospital)
			{
				$hospstr .= ", '" . $hospital['id'] . "'";
			}

			$comma = ",";
			$hospstr = "'X'";
			foreach($hosparray as $hospital)
			{

				$hospstr .= $comma . "'" . $hospital['id'] . "'";
				$comma = ",";
			}


			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
// 		$time_interval = str_replace ('%date%', 'valid_from', $timeperiod ['date_sql']);
			//get patient locations and ipids based on master hospital ids and into selected time period
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod['interval_location_sql_qtz']));

			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('location_id IN (' . $hospstr . ')')
				->andWhere('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('(' . $time_interval . ')')
				->andWhere('ipid != "" AND ipid IN (' . $ipidstr . ')')
				->orderBy('valid_from,id ASC');
			$locationsarr = $locations->fetchArray();

			$comma = ",";
			$ipidlocationstr = "'X'";
			foreach($locationsarr as $location)
			{
				$ipidloc[] = $location['ipid'];
				$ipidlocation[$location['ipid']][] = $location;
				$ipidlocationstr .= $comma . "'" . $location['ipid'] . "'";
				$comma = ",";
			}
			$ipidloc[] = "99999999999";

			//Get Patient Master Data
			$patientMasterData = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, e.epid as patepid")
				->from('PatientMaster p')
				->where('ipid IN (' . $ipidlocationstr . ') ');
			$patientMasterData->leftJoin("p.EpidIpidMapping e");
			$patientMasterData->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$pmarr = $patientMasterData->fetchArray();

			foreach($pmarr as $patient)
			{
				$patientMasterArray[$patient['ipid']] = $patient;
			}

			//		GET DEAD PATS DETAILS
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid='" . $logininfo->clientid . "' AND (abbr='TOD' OR abbr='TODNA')");
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal = "'X'";
			$comma = ",";
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal .= $comma . "'" . $val['id'] . "'";
				$dead_locations = $val['id'];
			}
			if(empty($dead_locations))
			{
				$dead_locations[] = "XXXXXXXX";
			}


			$dispatloc = Doctrine_Query::create()
				->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as dislocation")
				->from("DischargeLocation")
				->where('isdelete=0')
				->andWhere('clientid = "' . $logininfo->clientid . '" ');
			$dispatlocarr = $dispatloc->fetchArray();

			foreach($dispatlocarr as $k => $dis_loc)
			{
				$discharge_location_details[$dis_loc['id']] = $dis_loc;
			}

			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where('ipid in (' . $ipidlocationstr . ') AND isdelete=0');
			$dispat_arr = $dispat->fetchArray();

			foreach($dispat_arr as $k => $dis_patient)
			{
				if(in_array($dis_patient['discharge_method'], $dead_locations))
				{
					$dischargeLocationsArray[$dis_patient['ipid']] = $dis_patient;
					$dischargeLocationsArray[$dis_patient['ipid']]['dislocation'] = $discharge_location_details[$dis_patient['discharge_location']]['dislocation'];
				}
				$discharge_details[$dis_patient['ipid']]['discharge_date'] = $dis_patient['discharge_date'];
			}

			$reasonarr = array(
				'' => $blank,
				'1' => 'Notfall',
				'2' => 'palliative Chemo/Radiatio',
				'3' => 'unbekannt',
				'4' => 'Sonstiges',
				'5' => 'Sturzereignis/Verletzung',
				'6' => 'psychosoz. Gründe',
				'7' => 'Atemnot',
				'8' => 'Schmerz',
				'9' => 'palliativer Eingriff',
				'10' => 'Bluttransfusion'
			);

			$hospdocarr = array(
				'0' => '-',
				'1' => 'teil.HA oder Facharzt',
				'2' => 'QPA',
				'3' => 'Notarzt',
				'4' => 'unbekannt',
				'5' => 'SAPV',
				'6' => 'Selbsteinweisung / Krankenhausarzt'
			);
			$transportarr = array(
				'0' => '-',
				'1' => 'KTW',
				'2' => 'RTW',
				'3' => 'TAXI',
				'4' => 'Privatwagen',
				'5' => 'unbekannt'
			);
			if(count($ipidloc))
			{
				$pm = new PatientMaster();
				$treatedData = $pm->getTreatedDaysRealMultiple($ipidloc, false);
			}
			//highest verordung not denied in reported period

			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');


			$dropSapv = Doctrine_Query::create()
				->select('*, GROUP_CONCAT(verordnet) as vero')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipidloc)
				->andWhere(str_replace($s, $r, $timeperiod['interval_sql']))
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->groupBy('ipid');


			$droparray = $dropSapv->fetchArray();

			foreach($droparray as $verord)
			{
				$sapv = explode(',', $verord['vero']);
				$s = max($sapv);
				if($s == "1")
				{
					$sapv_value[$verord['ipid']] = "BE";
				}
				elseif($s == "2")
				{
					$sapv_value[$verord['ipid']] = "KO";
				}
				elseif($s == "3")
				{
					$sapv_value[$verord['ipid']] = "TV";
				}
				elseif($s == "4")
				{
					$sapv_value[$verord['ipid']] = "VV";
				}
				else
				{
					$sapv_value[$verord['ipid']] = "-";
				}
			}
			//highest verordung not denied in reported period end!

			foreach($patientMasterArray as $k_ipid => $v_patient)
			{
				//merge locations! start
				foreach($ipidlocation[$k_ipid] as $k_loc => $v_loc)
				{
					$hosp_locations[$k_ipid]['inhospital'][$k_loc] = $v_loc['valid_from'];
					$hosp_locations[$k_ipid]['outhospital'][$k_loc] = $v_loc['valid_till'];
				}

				foreach($hosp_locations[$k_ipid]['inhospital'] as $k_inhosp => $v_inhosp)
				{
					if(!in_array($v_inhosp, $hosp_locations[$k_ipid]['outhospital']))
					{
						$count_hosp[$k_ipid][$k_inhosp] = $v_inhosp;
					}
				}

				$merged_key = '0';
				foreach($ipidlocation[$k_ipid] as $k_location => $v_location)
				{
					if($v_location['valid_till'] == '0000-00-00 00:00:00')
					{
						if(strtotime($discharge_details[$k_ipid]['discharge_date']) < strtotime(date('Y-m-d H:i:s')) && $v_patient['isdischarged'] == "1")
						{
							$v_location['valid_till'] = $discharge_details[$k_ipid]['discharge_date'];
						}
						else
						{
							$v_location['valid_till'] = date('Y-m-d H:i:s');
						}
					}

					if(in_array($v_location['valid_from'], $count_hosp[$k_ipid]))
					{
						$merged_key++;
					}
					if(strtotime(date('Y-m-d', strtotime($v_location['valid_from']))) >= strtotime(date('Y-m-d', strtotime($treatedData[$k_ipid]['admissionDates']['0']['date']))))
					{
						if(date('Y-m-d', strtotime($v_location['valid_till'])) == date('Y-m-d', strtotime($ipidlocation[$k_ipid][($k_location + 1)]['valid_from'])))
						{
							//first entry always 0
							$merged_locations[$k_ipid][$merged_key][$v_location['id']] = $v_location;

							$next_loc_id = $ipidlocation[$k_ipid][($k_location + 1)]['id'];
							$merged_locations[$k_ipid][$merged_key][$ipidlocation[$k_ipid][($k_location + 1)]['id']] = $ipidlocation[$k_ipid][($k_location + 1)];
						}
						else
						{
							$merged_locations[$k_ipid][$merged_key][$v_location['id']] = $v_location;
						}
					}
				}

				if(count($merged_locations[$k_ipid]) > '0')
				{
					$MasterData['data'][$k_ipid]['epid'] = $v_patient['patepid'];
					$MasterData['data'][$k_ipid]['lastname'] = $v_patient['last_name'];
					$MasterData['data'][$k_ipid]['firstname'] = $v_patient['first_name'];
					$MasterData['data'][$k_ipid]['full_name'] = $v_patient['first_name'] . ' ' . $v_patient['last_name'];
					$MasterData['data'][$k_ipid]['treateddays'] = $treatedData[$k_ipid]['realActiveDays'];
					// number of hospital locations in selected period
					$hospitalLoc = (int) (count($ipidlocation[$k_ipid]));
					//	number of hospital locations in selected period
					$MasterData['data'][$k_ipid]['admissionsinhopital'] = count($merged_locations[$k_ipid]);
					// number of days per spitalization

					foreach($merged_locations[$k_ipid] as $key => $location)
					{

						$start_loc = reset($location);
						$end_loc = end($location);
						$from = date("d.m.Y", strtotime($start_loc['valid_from']));
						if($end_loc['valid_till'] != "0000-00-00 00:00:00")
						{
							if(empty($end_loc['valid_till']))
							{
								$till = date("d.m.Y");
							}
							else
							{
								$till = date("d.m.Y", strtotime($end_loc['valid_till']));
							}
						}
						else
						{
							$till = date("d.m.Y"); // limit to discharge
						}
						$diff_days = $pm->getDaysDiff($from, $till);
						$diff_days = intval($diff_days);
						$locationstats[$start_loc['ipid']][$key]['khtage'] = $diff_days;
						$locationstats[$start_loc['ipid']][$key]['locationstats'] = $from . " -> " . $till;
						$locationstats[$start_loc['ipid']][$key]['from'] = $from;
						$locationstats[$start_loc['ipid']][$key]['till'] = $till;
						if($start_loc['reason'] == '4')
						{
							$reason_txt = ":<br />" . $start_loc['reason_txt'];
						}
						else
						{
							$reason_txt = "";
						}
						$locationstats[$start_loc['ipid']][$key]['reason'] = $reasonarr[$start_loc['reason']] . $reason_txt;
						$locationstats[$start_loc['ipid']][$key]['hospdoc'] = $hospdocarr[$start_loc['hospdoc']];
						$locationstats[$start_loc['ipid']][$key]['transport'] = $transportarr[$start_loc['transport']];
					}
					//TODO-921 Plz check report "Anzahl KH Einweisungen" - in this report the selction of the period is not correct. The report shows patients which were discharged in another period.
					//remove patient that has open location, but he was discharged prior to our report period startdate
					$locationstats_bugfix = false;
					foreach($locationstats[$k_ipid] as $k=>$v) {
						if (strtotime($v['till']) >= strtotime($period['start'][0])) {
							$locationstats_bugfix = true;
						}
					}
					if ( ! $locationstats_bugfix) {
						//echo $MasterData['data'][$k_ipid]['epid']."<br>";
						unset($MasterData['data'][$k_ipid]);
						continue;
					}
					
					$MasterData['data'][$k_ipid]['locationstatsarr'] = $locationstats[$k_ipid];
					if(!empty($dischargeLocationsArray[$k_ipid]['dislocation']))
					{
						$disloc = $dischargeLocationsArray[$k_ipid]['dislocation'];
					}
					else
					{
						$disloc = "-";
					}
					$MasterData['data'][$k_ipid]['dielocation'] = $disloc;
					//high sapv show "-" if empty
					if(strlen($sapv_value[$k_ipid]) > 0)
					{
						$MasterData['data'][$k_ipid]['sapv'] = $sapv_value[$k_ipid];
					}
					else
					{
						$MasterData['data'][$k_ipid]['sapv'] = "-";
					}
				}
			}
			return $MasterData;
		}

		private function noRentries($params)
		{
			// report_id = 10
			// report_name = Patienten ohne Rechnung
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			if($logininfo->clientid > 0)
			{
				$clientid = $logininfo->clientid;
			}
			else
			{
				$clientid = 0;
			}

			$all = array();
			$dead = array();

			$all = $this->getClientPatients($clientid, $whereepid);
			if($includearr['dead'] == 1)
			{
				$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
			}
			if(!is_array($dead))
			{
				$dead = array();
			}
			$ipidarr = array_merge($all, $dead);

			$ipid_str = '"0",';
			foreach($ipidarr as $ipid)
			{
				$ipid_str .= '"' . $ipid . '",';
			}
			$qpa1 = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,
				AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('ipid in (' . substr($ipid_str, 0, -1) . ') and course_type ="' . addslashes(Pms_CommonData::aesEncrypt("XR")) . '"')
				->andWhere('source_ipid = ""');
			$norpatients = $qpa1->fetchArray();

			$noripid_str = '"0",';
			foreach($norpatients as $patient)
			{
				$noripid_str .= '"' . $patient['ipid'] . '",';
			}

			$pipid = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster pm')
				->where('isdelete=0 and isstandbydelete = 0')
				->andWhere('pm.ipid NOT IN (' . substr($noripid_str, 0, -1) . ')')
				->leftJoin('pm.EpidIpidMapping ep')
				->andWhere($whereepid . ' ep.clientid=' . $logininfo->clientid)
				->andWhere('ep.ipid=pm.ipid')
				->orderBy('pm.admission_date DESC');
			$allnorpatients = $pipid->fetchArray();

			$comma = ",";
			$doctorstr = "'0'";
			$ipidsval = "'0'";
			foreach($allnorpatients as $patient)
			{
				$ipidsval .= $comma . "'" . $patient['ipid'] . "'";
				$ipidPatients[$patient['ipid']] = $patient;
				$doctorstr .= $comma . "'" . $patient['familydoc_id'] . "'";
				$comma = ",";
			}
			$epidIpid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->where("ipid IN (" . $ipidsval . ")");
			$epidIpidarr = $epidIpid->fetchArray();

			foreach($epidIpidarr as $pat_epid)
			{
				$epidsarr[$pat_epid['ipid']] = $pat_epid;
			}

			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '') AND id IN(" . $doctorstr . ")");
			$docarray = $drop->fetchArray();

			foreach($docarray as $doctor)
			{
				$doctorarry[$doctor['id']] = $doctor;
			}

			// get discharge method for patients dead
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid = " . $logininfo->clientid)
				->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
				->andwhere('isdelete = 0');
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}
			// get tod patients	
			$todpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge ')
				->where("ipid IN (" . $ipidsval . ")")
				->andWhereIn('discharge_method', $dm_deadfinal)
				->andWhere('isdelete = 0');
			$todpatientarray = $todpatients->fetchArray();

			$patients_tod_date = array();
			if($todpatientarray)
			{
				foreach($todpatientarray as $key => $todpatient)
				{
					$patients_tod_date[$todpatient['ipid']] = date("Y-m-d", strtotime($todpatient['discharge_date']));
				}
			}

			$pm = new PatientMaster();

			$i = 0;

			foreach($ipidPatients as $k_ipid => $v_patient)
			{
				$end_date_patient = '';
				if(array_key_exists($k_ipid, $patients_tod_date))
				{
					$end_date_patient = $patients_tod_date[$k_ipid];
				}
				else
				{
					$end_date_patient = date("Y-m-d", time());
				}
				$age = $pm->GetAge($v_patient['birthd'], $end_date_patient, true);

				$MasterData['data'][$k_ipid]['epid'] = $epidsarr[$k_ipid]['epid'];
				$MasterData['data'][$k_ipid]['lastname'] = $v_patient['last_name'];
				$MasterData['data'][$k_ipid]['firstname'] = $v_patient['first_name'];
				/* $age = "";
				  $age = $pm->GetTreatedDays(date("Y-m-d", strtotime($v_patient['birthd'])),date("Y-m-d"),true);
				  $agecnt += $age['years']; */
				$MasterData['data'][$k_ipid]['birthdyears'] = date("d.m.Y", strtotime($v_patient['birthd'])) . '(' . $age . ')';
				$MasterData['data'][$k_ipid]['zip'] = $v_patient['zip'] . " ";
				$MasterData['data'][$k_ipid]['admissiondate'] = date("d.m.Y", strtotime($v_patient['admission_date']));
				$MasterData['data'][$k_ipid]['familydoctor'] = $doctorarry[$v_patient['familydoc_id']]['last_name'] . ", " . $doctorarry[$v_patient['familydoc_id']]['first_name'] . " ";
				$MasterData['data'][$k_ipid]['familydoctorphone'] = $doctorarry[$v_patient['familydoc_id']]['phone_practice'] . " ";
				$i++;
			}
			return $MasterData;
		}

		private function allRentries($params)
		{
			// report_id  = 37
			// report_name = Patienten mit Rechnung
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			if($logininfo->clientid > 0)
			{
				$clientid = $logininfo->clientid;
			}
			else
			{
				$clientid = 0;
			}

			$all = array();
			$dead = array();

			$all = $this->getClientPatientsByPeriod($clientid, $whereepid, $quarterarr, $yeararr, $montharr);

			if($includearr['dead'] == 1)
			{
				$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
			}
			if(!is_array($dead))
			{
				$dead = array();
			}
			$ipidarr = array_merge($all, $dead);

			$ipid_str = '"0",';
			foreach($ipidarr as $ipid)
			{
				$ipid_str .= '"' . $ipid . '",';
			}
			$qpa1 = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,
				AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('ipid in (' . substr($ipid_str, 0, -1) . ') and course_type ="' . addslashes(Pms_CommonData::aesEncrypt("XR")) . '"')
				->andWhere('source_ipid = ""');
			$allrpatients = $qpa1->fetchArray();

			$allripid_str = '"0",';
			foreach($allrpatients as $patient)
			{
				$allripid_str .= '"' . $patient['ipid'] . '",';
			}

			$pipid = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster pm')
				->where('isdelete=0 and isstandbydelete = 0')
				->andWhere('pm.ipid  IN (' . substr($allripid_str, 0, -1) . ')')
				->leftJoin('pm.EpidIpidMapping ep')
				->andWhere($whereepid . ' ep.clientid=' . $logininfo->clientid)
				->andWhere('ep.ipid=pm.ipid')
				->orderBy('pm.admission_date DESC');
			$allwithrpatients = $pipid->fetchArray();

			$comma = ",";
			$doctorstr = "'0'";
			$ipidsval = "'0'";
			foreach($allwithrpatients as $patient)
			{
				$ipidsval .= $comma . "'" . $patient['ipid'] . "'";
				$ipidPatients[$patient['ipid']] = $patient;
				$doctorstr .= $comma . "'" . $patient['familydoc_id'] . "'";
				$comma = ",";
			}
			$epidIpid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->where("ipid IN (" . $ipidsval . ")");
			$epidIpidarr = $epidIpid->fetchArray();

			foreach($epidIpidarr as $pat_epid)
			{
				$epidsarr[$pat_epid['ipid']] = $pat_epid;
			}

			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '') AND id IN(" . $doctorstr . ")");
			$docarray = $drop->fetchArray();

			foreach($docarray as $doctor)
			{
				$doctorarry[$doctor['id']] = $doctor;
			}

			// get discharge method for patients dead
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid = " . $logininfo->clientid)
				->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
				->andwhere('isdelete = 0');
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}
			//get tod patients	
			$todpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge ')
				->where("ipid IN (" . $ipidsval . ")")
				->andWhereIn('discharge_method', $dm_deadfinal)
				->andWhere('isdelete = 0');
			$todpatientarray = $todpatients->fetchArray();

			$patients_tod_date = array();
			if($todpatientarray)
			{
				foreach($todpatientarray as $key => $todpatient)
				{
					$patients_tod_date[$todpatient['ipid']] = date("Y-m-d", strtotime($todpatient['discharge_date']));
				}
			}
			$pm = new PatientMaster();
			$i = 0;

			foreach($ipidPatients as $k_ipid => $v_patient)
			{
				$end_date_patient = '';
				if(array_key_exists($k_ipid, $patients_tod_date))
				{
					$end_date_patient = $patients_tod_date[$k_ipid];
				}
				else
				{
					$end_date_patient = date("Y-m-d", time());
				}
				$age = $pm->GetAge($v_patient['birthd'], $end_date_patient, true);

				$MasterData['data'][$k_ipid]['epid'] = $epidsarr[$k_ipid]['epid'];
				$MasterData['data'][$k_ipid]['lastname'] = $v_patient['last_name'];
				$MasterData['data'][$k_ipid]['firstname'] = $v_patient['first_name'];
				/* $age = "";
				  $age = $pm->GetTreatedDays(date("Y-m-d", strtotime($v_patient['birthd'])),date("Y-m-d"),true);

				  $agecnt += $age['years']; */
				$MasterData['data'][$k_ipid]['birthdyears'] = date("d.m.Y", strtotime($v_patient['birthd'])) . '(' . $age . ')';
				$MasterData['data'][$k_ipid]['zip'] = $v_patient['zip'] . " ";
				$MasterData['data'][$k_ipid]['admissiondate'] = date("d.m.Y", strtotime($v_patient['admission_date']));
				$MasterData['data'][$k_ipid]['familydoctor'] = $doctorarry[$v_patient['familydoc_id']]['last_name'] . ", " . $doctorarry[$v_patient['familydoc_id']]['first_name'] . " ";
				$MasterData['data'][$k_ipid]['familydoctorphone'] = $doctorarry[$v_patient['familydoc_id']]['phone_practice'] . " ";
				$i++;
			}
			return $MasterData;
		}

		private function betreuungszeit($params)
		{
			// report_id = 25
			// report_name  = Betreuungszeit
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
			$all = array();
			$dead = array();

			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$timeq = 'AND ' . str_replace('%date%', 'create_date', $timeperiod['date_sql']) . '';

			if($onlyactive != 1)
			{
				$all = $this->getClientPatients($logininfo->clientid, $whereepid);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}

				if(!is_array($all))
				{
					$active = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}
				$ipidarr = array_merge($all, $dead);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}


			$ipid_str = '"0",';
			foreach($ipidarr as $ipid)
			{
				$ipid_str .= '"' . $ipid . '",';
			}

			$ben = Doctrine_Query::create()
				->select("s.ipid, sum( s.gesamt_zeit_in_minuten ) AS total_time, sum(s.davon_fahrtzeit ) AS travel_time, sum( s.gesamt_zeit_in_minuten - s.davon_fahrtzeit) AS diff_time")
				->from('Sapsymptom s')
				->where('ipid in (' . substr($ipid_str, 0, -1) . ') ' . $timeq . '')
				->andWhere("isdelete = 0")
				->groupBy('s.ipid')
				->orderBy('s.ipid');
			$sumtime = $ben->fetchArray();

			foreach($sumtime as $ipid)
			{
				$ipidsum_str .= '"' . $ipid['ipid'] . '",';
			}
			if(!empty($sumtime))
			{
				$actpatient = Doctrine_Query::create()
					->select("ipid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name")
					->from('PatientMaster p')
					->where('ipid in (' . substr($ipidsum_str, 0, -1) . ')')
					->orderBy('ipid');
				$actpatientarray = $actpatient->fetchArray();
			}

			foreach($sumtime as $sum)
			{
				$sumtimeipid[$sum['ipid']] = $sum;
			}

			foreach($actpatientarray as $key => $patient)
			{
				$epidipid = Doctrine::getTable('EpidIpidMapping')->findBy('ipid', $patient['ipid']);
				$epidipidarray = $epidipid->toArray();
				$gepid = $epidipidarray[0]['epid'];
				$actpatientarray['data'][$key]['epid'] = $gepid;
				$actpatientarray['data'][$key]['lastname'] = $patient['last_name'];
				$actpatientarray['data'][$key]['firstname'] = $patient['first_name'];
				$actpatientarray['data'][$key]['betreuungszeitinminut'] = trim($sumtimeipid[$patient['ipid']]['diff_time']);
				$totsum += trim($sumtimeipid[$patient['ipid']]['diff_time']);
			}
			$actpatientarray['extra']['sum'] = $totsum;
			return $actpatientarray;
		}

		private function fahrtzeitgefahrenekilometer($params)
		{
			// report_id = 17
			// report_name = Fahrtzeit & gefahrene Kilometer
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
			$all = array();
			$dead = array();
			$standby = array();

			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$timeq = 'AND ' . str_replace('%date%', 'create_date', $timeperiod['date_sql']) . '';

			if($onlyactive != 1)
			{
				$all = $this->getClientPatients($logininfo->clientid, $whereepid);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				if(!is_array($all))
				{
					$active = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}
				if(!is_array($standby))
				{
					$standby = array();
				}
				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			$ipid_str = '"0",';
			foreach($ipidarr as $ipid)
			{
				$ipid_str .= '"' . $ipid . '",';
				$ipidArr[] = $ipid;
			}
			$ipidArr[] = "999999999999";

			$ben = Doctrine_Query::create()
				->select("s.ipid, sum(if(s.gesamt_fahrstrecke_in_km <> 0 OR s.davon_fahrtzeit <> 0 ,1,0)) as rides, SUM( cast( replace( s.gesamt_zeit_in_minuten, ',', '.' ) AS DECIMAL( 10, 2 ) ) ) AS total_time, sum(cast(replace(s.davon_fahrtzeit,',','.') as DECIMAL(10,2))) AS travel_time, SUM( cast( replace( s.gesamt_fahrstrecke_in_km, ',', '.' ) AS DECIMAL( 10, 2 ) ) ) AS total_km, sum( s.gesamt_zeit_in_minuten - s.davon_fahrtzeit) AS diff_time")
				->from('Sapsymptom s')
				->where('s.ipid in (' . substr($ipid_str, 0, -1) . ') ' . $timeq . '')
				->andWhere("isdelete = 0")
				->groupBy('s.ipid')
				->orderBy('s.ipid');
			$sumtime = $ben->fetchArray();

			foreach($sumtime as $ipid)
			{
				$ipidsum_str .= '"' . $ipid['ipid'] . '",';
			}
			if(!empty($sumtime))
			{
				$actpatient = Doctrine_Query::create()
					->select("ipid,familydoc_id,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name")
					->from('PatientMaster p')
					->where('ipid in (' . substr($ipidsum_str, 0, -1) . ')')
					->orderBy('ipid');
				$actpatientarray = $actpatient->fetchArray();
			}

			$idoc = 1;
			foreach($actpatientarray as $patient_doctor)
			{
				$doctorids[] = $patient_doctor['familydoc_id'];
			}
			//get doctors details
			$Familydoctor = "";
			$famdoc = new FamilyDoctor();
			$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

			foreach($familidoc as $fd_key => $fd_value)
			{
				$familydoctors[$fd_value['id']] = $fd_value;
			}

			if(count($familidoc) > 0)
			{
				$Familydoctor = array();
				foreach($familidoc as $doc)
				{
					if(strlen($doc['title']) > 0)
					{
						$Familydoctor[$doc['id']] = $doc['title'] . " ";
					}
					if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br />";
					}

					if(strlen($doc['phone_practice']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
					}

					if(strlen($doc['street1']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
					}
					if(strlen($doc['street2']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
					}
					if(strlen($doc['postcode']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['postcode'] . ", ";
					}
					if(strlen($doc['city']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['city'];
					}
				}
			}

			//highest verordung not denied in reported period
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$dropSapv = Doctrine_Query::create()
				->select('*, GROUP_CONCAT(verordnet) as vero')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipidArr)
				->andWhere(str_replace($s, $r, $timeperiod['interval_sql']))
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->groupBy('ipid');
			$droparray = $dropSapv->fetchArray();

			foreach($droparray as $verord)
			{
				$sapv = explode(',', $verord['vero']);
				$s = max($sapv);
				if($s == "1")
				{
					$sapv_value[$verord['ipid']] = "BE";
				}
				elseif($s == "2")
				{
					$sapv_value[$verord['ipid']] = "KO";
				}
				elseif($s == "3")
				{
					$sapv_value[$verord['ipid']] = "TV";
				}
				elseif($s == "4")
				{
					$sapv_value[$verord['ipid']] = "VV";
				}
				else
				{
					$sapv_value[$verord['ipid']] = "-";
				}
			}
			//highest verordung not denied in reported period end!

			foreach($sumtime as $sum)
			{
				$sumtimeipid[$sum['ipid']] = $sum;
			}
			foreach($actpatientarray as $key => $patient)
			{
				$epidipid = Doctrine::getTable('EpidIpidMapping')->findBy('ipid', $patient['ipid']);
				$epidipidarray = $epidipid->toArray();
				$gepid = $epidipidarray[0]['epid'];
				$actpatientarray['data'][$key]['epid'] = $gepid;
				$actpatientarray['data'][$key]['lastname'] = $patient['last_name'];
				$actpatientarray['data'][$key]['firstname'] = $patient['first_name'];
				$actpatientarray['data'][$key]['familydoctor'] = $Familydoctor[$patient['familydoc_id']];
				$actpatientarray['data'][$key]['repmin'] = rtrim(rtrim(trim($sumtimeipid[$patient['ipid']]['travel_time']), '0'), '.');
				$actpatientarray['data'][$key]['repkm'] = rtrim(rtrim(trim($sumtimeipid[$patient['ipid']]['total_km']), '0'), '.');
				$actpatientarray['data'][$key]['reprides'] = trim($sumtimeipid[$patient['ipid']]['rides']);
				$totsum_min += trim($sumtimeipid[$patient['ipid']]['travel_time']);
				$totsum_km += trim($sumtimeipid[$patient['ipid']]['total_km']);
				$totsum_rides += trim($sumtimeipid[$patient['ipid']]['rides']);
				$actpatientarray['data'][$key]['sapv'] = $sapv_value[$patient['ipid']];
			}
			$actpatientarray['extra']['sum_min'] = $totsum_min . " (" . (int) ($totsum_min / 60) . " Stunden " . ($totsum_min % 60) . " Minuten) ";
			$actpatientarray['extra']['sum_km'] = $totsum_km;
			$actpatientarray['extra']['sum_rides'] = $totsum_rides;

			return $actpatientarray;
		}

		public function anzahlbesuchepropatient($params)
		{
			// report_id = 16
			// report_name = Anzahl Besuche pro Patient
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{ //unchecked
				$all = $this->getClientPatients($clientid, $whereepid);

				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				if($includearr['dead'] == 1)
				{

					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}

				if(!is_array($all))
				{
					$all = array();
				}
				if(!is_array($standby))
				{
					$standby = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}

				$ipidarr = array_merge($all, $standby, $dead);
			}
			else
			{ //checked toti pat activi fara filtre
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}


			$comma = ",";
			$ipidstr = "'X'";
			foreach($ipidarr as $ipid)
			{
				$ipidstr .= $comma . "'" . $ipid . "'";
				$comma = ",";
				$ipidsarray[] = $ipid;
			}
			$ipidsarray[] = "9999999999";

			//Get Patient Master Data
			$patientMasterData = Doctrine_Query::create()
				->select(
					"*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'"
					. Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt')
					. "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt')
					. "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt')
					. "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt')
					. "') using latin1) as phone, e.epid as patepid"
				)
				->from('PatientMaster p')
				->where('ipid IN (' . $ipidstr . ') ');
			$patientMasterData->leftJoin("p.EpidIpidMapping e");
			$patientMasterData->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$pmarr = $patientMasterData->fetchArray();
			$comma = ",";
			$doctorsIdsStr = "'X'";
			foreach($pmarr as $patient)
			{
				$patientMasterArray[$patient['ipid']] = $patient;
				$doctorsIdsStr .= $comma . "'" . $patient['familydoc_id'] . "'";
				$comma = ",";
				$doctorsIdsArr[] = $patient['familydoc_id'];
			}

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$sp = Doctrine_Query::create()
				->select('*')
				->from('Sapsymptom')
				->where('ipid IN (' . $ipidstr . ')')
				->andWhere('' . str_replace('%date%', 'create_date', $active_cond['date_sql']) . '')
				->andWhere("isdelete = 0")
				->orderBy('create_date ASC');
			$sparr = $sp->fetchArray();

			foreach($sparr as $sapkey => $sapsymptom)
			{
				$saparray[$sapsymptom['ipid']][] = $sapsymptom;
			}

			//	highest verordung not denied in reported period
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$dropSapv = Doctrine_Query::create()
				->select('*, GROUP_CONCAT(verordnet) as vero')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipidsarray)
				->andWhere(str_replace($s, $r, $active_cond['interval_sql']))
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->groupBy('ipid');
			$droparray = $dropSapv->fetchArray();

			foreach($droparray as $verord)
			{
				$sapv = explode(',', $verord['vero']);
				$s = max($sapv);
				if($s == "1")
				{
					$sapv_value[$verord['ipid']] = "BE";
				}
				elseif($s == "2")
				{
					$sapv_value[$verord['ipid']] = "KO";
				}
				elseif($s == "3")
				{
					$sapv_value[$verord['ipid']] = "TV";
				}
				elseif($s == "4")
				{
					$sapv_value[$verord['ipid']] = "VV";
				}
				else
				{
					$sapv_value[$verord['ipid']] = "-";
				}
			}
			// highest verordung not denied in reported period end!
			$fm = new FamilyDoctor();
			$fdocs = $fm->getFamilyDoctors(false, false, false, array_unique($doctorsIdsArr));

			foreach($fdocs as $key_doc => $val_doc)
			{
				$fdoctors[$val_doc['id']] = $val_doc;
			}

			if(count($fdoctors) > 0)
			{
				foreach(
				$fdoctors as $k_docid => $val_doc
				)
				{
					if(strlen($val_doc['title']) > 0)
					{
						$Familydoctor[$k_docid] = $val_doc['title'] . " ";
					}

					if(strlen($val_doc['first_name']) > 0 || strlen($val_doc['last_name']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['last_name'] . ", " . $val_doc['first_name'] . "<br /> ";
					}

					if(strlen($val_doc['phone_practice']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['phone_practice'] . ", ";
					}

					if(strlen($val_doc['street1']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['street1'] . ", ";
					}

					if(strlen($val_doc['street2']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['street2'] . ", ";
					}

					if(strlen($val_doc['postcode']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['postcode'] . ", ";
					}

					if(strlen($val_doc['city']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['city'];
					}
				}
			}
			foreach(
			$saparray as $k_ipid => $v_patient
			)
			{

				//	Loop through the sapvfb8symptoms
				foreach($saparray[$k_ipid] as $keysap => $valsap)
				{
					$explodearray = explode(",", $valsap['sapvalues']);
					foreach($explodearray as $keyexp => $valexp)
					{
						$sapvalues[$k_ipid][$valexp][] = $valexp;
					}
				}
				$MasterData['data'][$k_ipid]['epid'] = $patientMasterArray[$k_ipid]['patepid'];
				$MasterData['data'][$k_ipid]['lastname'] = $patientMasterArray[$k_ipid]['last_name'];
				$MasterData['data'][$k_ipid]['firstname'] = $patientMasterArray[$k_ipid]['first_name'];
				$MasterData['data'][$k_ipid]['familydoctor'] = $Familydoctor[$patientMasterArray[$k_ipid]['familydoc_id']];
				$MasterData['data'][$k_ipid]['visits']['1'] = (int) (count($sapvalues[$k_ipid][1]));
				$MasterData['data'][$k_ipid]['visits']['2'] = (int) (count($sapvalues[$k_ipid][2]));
				$MasterData['data'][$k_ipid]['visits']['3'] = (int) (count($sapvalues[$k_ipid][3]));
				$MasterData['data'][$k_ipid]['visits']['4'] = (int) (count($sapvalues[$k_ipid][4]));
				$MasterData['data'][$k_ipid]['sum'] = (int) (
					count($sapvalues[$k_ipid][1]) + count($sapvalues[$k_ipid][2]) + count($sapvalues[$k_ipid][3]) + count(
						$sapvalues[$k_ipid][4]
				));

				// high sapv show "-" if empty
				if(strlen($sapv_value[$k_ipid]) > 0)
				{
					$MasterData['data'][$k_ipid]['sapv'] = $sapv_value[$k_ipid];
				}
				else
				{
					$MasterData['data'][$k_ipid]['sapv'] = "-";
				}
				$total += $MasterData['data'][$k_ipid]['sum'];
			}
			$averege = round(($total / count($MasterData['data'])), 2);
			$MasterData['extra']['averege'] = $averege;
			return $MasterData;
		}

		function dischargemethodDead($params)
		{
			// report_id = 11
			// report_name = Sterbeorte
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);

			if(empty($ipidsarr))
			{
				$ipidsarr[] = "XXXXXXX";
			}

			$ipidsval = "'X'";
			$comma = ",";
			foreach($ipidsarr as $ipid)
			{
				$ipidsval .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}

			if($_REQUEST['ipids'] == 'show')
			{
				print_r("ipids for dead patients: \n");
				print_r($ipidsarr);
				$Health = Doctrine_Query::create()
					->select("ipid")
					->from('PatientHealthInsurance')
					->where('ipid IN (' . $ipidsval . ')')
					->andWhere('privatepatient =1 ');
				$pv_ipidsarr = $Health->fetchArray();

				print_r("ipids for dead patients width private patients == 1: \n");
				print_r($pv_ipidsarr);
				exit;
			}

			//new
			$dispatloc = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where('ipid in (' . $ipidsval . ')')
				->andWhere('isdelete = 0');
			$dispatlocarr = $dispatloc->fetchArray();

			$ipidsdis = "'X'";
			$comma = ",";

			foreach($dispatlocarr as $dis_key => $dis_val)
			{
				$ipidsdis .= $comma . "'" . $dis_val['ipid'] . "'";
				$comma = ",";
			}

			$loc = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as dislocation")
				->from("DischargeLocation")
				->where('clientid = "' . $clientid . '"')
				->andWhere('isdelete = 0');
			$locarr = $loc->fetchArray();

			foreach($locarr as $loc)
			{

				$Locations[0]['dislocation'] = "keine Angabe";
				$Locations[$loc['id']] = $loc;
			}


			foreach($dispatlocarr as $key => $value)
			{
				$groupedPatDischargeLocation[$value['discharge_location']][] = $value;
			}

			foreach($groupedPatDischargeLocation as $val)
			{
				$totalDeadPat += count($val);
			}

			ksort($Locations);
			ksort($groupedPatDischargeLocation);

			foreach($Locations as $dis_key_loc => $dis_val_loc)
			{
				$countPerLocation = count($groupedPatDischargeLocation[$dis_key_loc]);

				$percent = round(($countPerLocation * 100) / $totalDeadPat, 2);
				$dischargeLocationSortedArr['data'][$dis_key_loc]['dischargelocation'] = $dis_val_loc['dislocation'];
				$dischargeLocationSortedArr['data'][$dis_key_loc]['count'] = $countPerLocation;
				$dischargeLocationSortedArr['data'][$dis_key_loc]['percentage'] = $percent . " %";
			}
			$dischargeLocationSortedArr['extra']['total'] = $totalDeadPat;

			return $dischargeLocationSortedArr;
		}

		private function getCourseQuarterCondition($quarterarr, $yeararr, $montharr)
		{

			if(count($quarterarr) > 0)
			{
				foreach($quarterarr as $key => $val)
				{
					if($val == 1)
					{
						$startdate = $yeararr[0] . "-01-01 23.59.59";
						$enddate = $yeararr[0] . "-03-31 23.59.59";

						$where .= " (course_date >= '" . $startdate . "' AND course_date <='" . $enddate . "')";
						$sep = " or ";
					}

					if($val == 2)
					{
						$startdate = $yeararr[0] . "-04-01 23.59.59";
						$enddate = $yeararr[0] . "-06-30 23.59.59";

						$where .= $sep . "(course_date >= '" . $startdate . "' AND course_date <='" . $enddate . "')";
						$sep = " or ";
					}

					if($val == 3)
					{
						$startdate = $yeararr[0] . "-07-01 23.59.59";
						$enddate = $yeararr[0] . "-09-30 23.59.59";

						$where .= $sep . "(course_date >= '" . $startdate . "' AND course_date <='" . $enddate . "')";
						$sep = " or ";
					}

					if($val == 4)
					{
						$startdate = $yeararr[0] . "-10-01 23.59.59";
						$enddate = $yeararr[0] . "-12-31 23.59.59";
						$where .= $sep . "(course_date >= '" . $startdate . "' AND course_date <='" . $enddate . "')";
						$sep = " or ";
					}
				}
			}
			elseif(count($montharr) > 0)
			{
				$mcnt = count($montharr) - 1;
				$startdate = $yeararr[0] . "-" . $montharr[0] . "-01 23.59.59";
				$enddate = $yeararr[0] . "-" . $montharr[$mcnt] . "-31 23.59.59";

				$where = "(course_date >= '" . $startdate . "' AND course_date <='" . $enddate . "')";
			}
			else
			{

				$startdate = $yeararr[0] . "-01-01 23.59.59";
				$enddate = $yeararr[0] . "-12-31 23.59.59";

				$where = "(course_date >= '" . $startdate . "' AND course_date <='" . $enddate . "')";
			}
			return $where;
		}

		private function getQuarterperiods($quarterarr, $yeararr, $montharr)
		{

			if(count($quarterarr) > 0)
			{
				$startdate = "";
				foreach($quarterarr as $key => $val)
				{


					if($val == 1)
					{
						$startdate = $yeararr[0] . "-01-01";
						$enddate = $yeararr[0] . "-03-31";

						$where .= "'" . $startdate . "' - '" . $enddate . "'";
						$sep = " or ";
					}

					if($val == 2)
					{
						if(strlen($startdate) == 0)
						{
							$startdate = $yeararr[0] . "-04-01";
						}
						$enddate = $yeararr[0] . "-06-30";

						$where .= $sep . "'" . $startdate . "' - '" . $enddate . "'";
						$sep = " or ";
					}

					if($val == 3)
					{
						if(strlen($startdate) == 0)
						{
							$startdate = $yeararr[0] . "-07-01";
						}
						$enddate = $yeararr[0] . "-09-30";

						$where .= $sep . "'" . $startdate . "' - '" . $enddate . "'";
						$sep = " or ";
					}

					if($val == 4)
					{
						if(strlen($startdate) == 0)
						{
							$startdate = $yeararr[0] . "-10-01";
						}
						$enddate = $yeararr[0] . "-12-31";
						$where .= $sep . "'" . $startdate . "' - '" . $enddate . "'";
						$sep = " or ";
					}
				}
				return date("d.m.Y", strtotime($startdate)) . " - " . date("d.m.Y", strtotime($enddate));
			}
			elseif(count($montharr) > 0)
			{
				$mcnt = count($montharr) - 1;
				$startdate = $yeararr[0] . "-" . $montharr[0] . "-01";
				$enddate = $yeararr[0] . "-" . $montharr[$mcnt] . "-31";
				$where = date("d.m.Y", strtotime($startdate)) . " - " . date("d.m.Y", strtotime($enddate));
			}
			else
			{

				$startdate = $yeararr[0] . "-01-01";
				$enddate = $yeararr[0] . "-12-31";

				$where = date("d.m.Y", strtotime($startdate)) . " - " . date("d.m.Y", strtotime($enddate));
			}

			return $where;
		}

		public function anzahltelefonateemails($params)
		{
			// report_id = 18
			// report_name = Anzahl Telefonate / Emails
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{ //unchecked
				$all = $this->getClientPatients($clientid, $whereepid);

				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients("only_now", "only_now", "only_now");
				}

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients("only_now", "only_now", "only_now");
				}

				if(!is_array($all))
				{
					$all = array();
				}
				if(!is_array($standby))
				{
					$standby = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}
				$ipidarr = array_merge($all, $standby, $dead);
			}
			else
			{ //checked toti pat activi fara filtre
				$ipidarr = $this->getActivePatients("only_now", "only_now", "only_now");
			}

			$comma = ",";
			$ipidstr = "'X'";
			foreach($ipidarr as $ipid)
			{
				$ipidstr .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}

			//Get Patient Master Data
			$patientMasterData = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, e.epid as patepid")
				->from('PatientMaster p')
				->where('ipid IN (' . $ipidstr . ') ');
			$patientMasterData->leftJoin("p.EpidIpidMapping e");
			$patientMasterData->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$pmarr = $patientMasterData->fetchArray();
			$comma = ",";
			$doctorsIdsStr = "'X'";
			foreach($pmarr as $patient)
			{
				$patientMasterArray[$patient['ipid']] = $patient;
				$doctorsIdsStr .= $comma . "'" . $patient['familydoc_id'] . "'";
				$comma = ",";
				$doctorsIdsArr[] = $patient['familydoc_id'];
			}

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$sp = Doctrine_Query::create()
				->select('*, (gesamt_zeit_in_minuten - davon_fahrtzeit) as zeits')
				->from('Sapsymptom')
				->where('ipid IN (' . $ipidstr . ')')
				->andWhere('' . str_replace('%date%', 'create_date', $active_cond['date_sql']) . '')
				->andWhere("isdelete = 0")
				->orderBy('create_date ASC');
			$sparr = $sp->fetchArray();

			foreach($sparr as $sapkey => $sapsymptom)
			{
				$saparray[$sapsymptom['ipid']][] = $sapsymptom;
				$saparrayipids[] = $sapsymptom['ipid'];
			}

			$fm = new FamilyDoctor();
			$fdocs = $fm->getFamilyDoctors(false, false, false, array_unique($doctorsIdsArr));

			foreach($fdocs as $key_doc => $val_doc)
			{
				$fdoctors[$val_doc['id']] = $val_doc;
			}

			if(count($fdoctors) > 0)
			{
				foreach($fdoctors as $k_docid => $val_doc)
				{
					if(strlen($val_doc['title']) > 0)
					{
						$Familydoctor[$k_docid] = $val_doc['title'] . " ";
					}

					if(strlen($val_doc['first_name']) > 0 || strlen($val_doc['last_name']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['last_name'] . ", " . $val_doc['first_name'] . "<br /> ";
					}

					if(strlen($val_doc['phone_practice']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['phone_practice'] . ", ";
					}

					if(strlen($val_doc['street1']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['street1'] . ", ";
					}

					if(strlen($val_doc['street2']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['street2'] . ", ";
					}

					if(strlen($val_doc['postcode']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['postcode'] . ", ";
					}

					if(strlen($val_doc['city']) > 0)
					{
						$Familydoctor[$k_docid] .= $val_doc['city'];
					}
				}
			}

			foreach($patientMasterArray as $k_ipid => $v_patient)
			{
				//			Loop through the sapvfb8symptoms
				$sapvalues[$k_ipid]['zeit'] = 0;
				foreach($saparray[$k_ipid] as $keysap => $valsap)
				{
					$explodearray = explode(",", $valsap['sapvalues']);
					foreach($explodearray as $keyexp => $valexp)
					{
						$sapvalues[$k_ipid][$valexp][] = $valexp;
					}
					if(in_array("6", $explodearray))
					{
						$sapvalues[$k_ipid]['zeit'] += $valsap['zeits'];
					}
				}
				$MasterData['data'][$k_ipid]['epid'] = $v_patient['patepid'];
				$MasterData['data'][$k_ipid]['lastname'] = $v_patient['last_name'];
				$MasterData['data'][$k_ipid]['firstname'] = $v_patient['first_name'];
				$MasterData['data'][$k_ipid]['familydoctor'] = $Familydoctor[$v_patient['familydoc_id']];
				$MasterData['data'][$k_ipid]['nrtelefonemails'] = count($sapvalues[$k_ipid][6]);
				$MasterData['data'][$k_ipid]['zeitmin'] = $sapvalues[$k_ipid]['zeit'];
				$totalcalls += count($sapvalues[$k_ipid][6]);
				$totalzeit += $sapvalues[$k_ipid]['zeit'];
				if($sapvalues[$k_ipid]['zeit'] == "0" && $onlyactive == 0)
				{
					unset($MasterData['data'][$k_ipid]);
				}
			}
			$MasterData['extra']['totalactivity'] = $totalcalls;
			$MasterData['extra']['averageactivity'] = round(($totalcalls / count($MasterData['data'])), 2);
			$MasterData['extra']['totalminutes'] = $totalzeit;
			$MasterData['extra']['averageminutes'] = round(($totalzeit / count($MasterData['data'])), 2);
			return $MasterData;
		}

		public function sapvTage($params)
		{
			// report_id = 40
			// report_name = SAPV Tage
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			$ipidsarr[] = '99999999999';
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->andWhere('isdelete=0 and ((' . str_replace($s, $r, $active_cond ['interval_sql']) . '))')
				->andWhereIn('ipid', $ipidarr)
				->andWhere('status != "1"')
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();
			$pm = new PatientMaster ();
			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{
				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}

			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						$patientDataPseudo [$ipid] ['sapvDaysListFinal'] [] = $daysapv;
					}
				}
				$patientDataPseudo [$ipid] ['sapvDaysListFinal'] = array_unique($patientDataPseudo [$ipid] ['sapvDaysListFinal']);
				$patientData [$ipid] ['sapvDaysList'] = "";
				$patientData [$ipid] ['sapvDaysList'] = $patientDataPseudo [$ipid] ['sapvDaysListFinal'];
			}

			//TO DO : sapv days DONE
			//TO DO: hospital days in 1 level array and to do the check as is in formone DONE
			//Report period days list
			foreach($period ['start'] as $keyd => $startDate)
			{
				$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}

			$finalPeriodDays = array_unique($finalPeriodDays);

			//get location master
			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type =1');
			$hosparray = $hospitalids->fetchArray();

			$hospstr = "";
			foreach($hosparray as $hospital)
			{
				$hospstr .= "'" . $hospital ['id'] . "',";
				$hosp_arr[] = $hospital['id'];
			}
			$hosp_arr[] = '99999999999';
			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod ['interval_sql']));

			//get patient locations and ipids based on master hospital ids and into selected time period
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('location_id', $hosp_arr)
				->andWhere('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('' . $time_interval . '')
				->andWhereIn('ipid', $ipidarr);
			$locationsarr = $locations->fetchArray();

			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipidarr)
				->andwhere('p.isstandby = 0')
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$ipidarray = $patient->fetchArray();

			$dischargedipidstr = "'99999999999'";
			foreach($ipidarray as $patient)
			{
				$patientDetails [$patient ['ipid']] ['epid'] = $patient ['EpidIpidMapping'] ['epid'];
				$patientDetails [$patient ['ipid']] ['surname'] = $patient ['last_name'];
				$patientDetails [$patient ['ipid']] ['firstname'] = $patient ['first_name'];
				$patientDetails [$patient ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($patient ['birthd']));
				$patientDetails [$patient ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($patient ['admission_date']));

				if($patient ['isdischarged'] == 1)
				{
					$dischargedipidstr .= ",'" . $patient ['ipid'] . "'";
					$dischargedipid_arr[] = $patient['ipid'];
				}
			}
			$dischargedipid_arr[] = '99999999999';

			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "99999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $dischargedipid_arr)
				->andWhere('isdelete = 0');
			$patientdisarray = $patientdis->fetchArray();

			foreach($patientdisarray as $dischargedPatient)
			{
				if(in_array($dischargedPatient['discharge_method'], $todIds))
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				else
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				$patientDetails [$dischargedPatient ['ipid']] ['dischargedate_final'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
			}

			foreach($locationsarr as $location)
			{
				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$till = end($finalPeriodDays);
						$from = date('Y-m-d', strtotime($location ['valid_from']));
						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
					}
					else
					{
						$till = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
						$from = date('Y-m-d', strtotime($location ['valid_from']));
						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, date('Y-m-d'), false);
					}
				}
				else if(strtotime(date('Y-m-d', strtotime($location['valid_till']))) == strtotime(date('Y-m-d', strtotime($location ['valid_from']))))
				{
					$till = date('Y-m-d', strtotime('+1 day', strtotime($location ['valid_till'])));
					$from = date('Y-m-d', strtotime('-1 day', strtotime($location ['valid_till'])));
					$realfullhospitaldays [$location ['ipid']] [] = date('Y-m-d', strtotime($location ['valid_till']));
				}
				else
				{
					$till = date('Y-m-d', strtotime($location ['valid_till']));
					$from = date('Y-m-d', strtotime($location ['valid_from']));
					$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
				}
				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('+1 day', strtotime($from)));
				$patientData [$location ['ipid']] ['hospitalStartDays'][] = date("Y-m-d", strtotime($location ['valid_from']));
				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('-1 day', strtotime($till)));

				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = end($finalPeriodDays);
					}
					else
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
					}
				}
				else
				{
					$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime($location ['valid_till']));
				}

				$current_hosp_days = array(); //imbecile!
				//mort la iesire cu verificare metoda de discharge + data de discharge
				if(in_array(date('Y-m-d', strtotime($location['valid_till'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					in_array($patientDetails[$location ['ipid']]['dischargemtd'], $todIds) &&
					!in_array(date('Y-m-d', strtotime($location['valid_from'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					$patientDetails [$location ['ipid']] ['dischargedate_final'] == date('d.m.Y', strtotime($location['valid_till']))
				)
				{
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime($from)), date("Y-m-d", strtotime($till)), false);
					$diedinhospital [$location ['ipid']] = date('Y-m-d', strtotime($location['valid_till']));
					$patientDetails [$location ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime('-1 day', strtotime($patientDetails [$location ['ipid']] ['dischargedate'])));
				}
				else if($location ['valid_till'] == "0000-00-00 00:00:00")
				{ //daca nu e discharged ii dau zile (de spital) de la mineeeeeeeeeee
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime($from)), date("Y-m-d", strtotime($till)), false);
				}
				else
				{
					$diedinhospital [$location ['ipid']] = false;
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime($from)), date("Y-m-d", strtotime($till)), false);
				}
				$patientData [$location ['ipid']] ['hospitalDaysList'][] = $current_hosp_days;
			}

			foreach($patientData as $ipid => $hospata)
			{
				foreach($hospata ['hospitalDaysList'] as $group => $hdata)
				{
					foreach($hdata as $key => $dayh)
					{
						$patientDataPseudoH [$ipid] ['hospitalDaysList'] [] = $dayh;
					}
				}
				$patientDataPseudoH [$ipid] ['hospitalDaysList'] = array_unique($patientDataPseudoH [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['hospitalDaysList'] = "";
				$patientData [$ipid] ['hospitalDaysList'] = $patientDataPseudoH [$ipid] ['hospitalDaysList'];

				foreach($hospata['hospitalStartDays'] as $k_start_date => $v_start_date)
				{
					if(in_array($v_start_date, $hospata['hospitalEndDays']))
					{
						$patientData [$ipid] ['continuous_hospital'][] = $v_start_date;
						$patientData [$ipid] ['hospitalDaysList'][] = $v_start_date;
						if(array_search($v_start_date, $patientData[$ipid]['sapvDaysList']))
						{
							unset($patientData[$ipid]['sapvDaysList'][array_search($v_start_date, $patientData[$ipid]['sapvDaysList'])]);
						}
					}
				}

				foreach($hospata['hospitalEndDays'] as $k_end_date => $v_end_date)
				{
					if(in_array($patientDetails[$ipid]['dischargemtd'], $todIds) && $patientDetails [$ipid] ['dischargedate_final'] == date('d.m.Y', strtotime($v_end_date)))
					{
						$patientData [$ipid] ['hospitalDaysList'][] = $v_end_date;
					}
				}

				$patientData [$ipid] ['hospitalDaysList'] = array_unique($patientData [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['continuous_hospital'] = array_unique($patientData [$ipid] ['continuous_hospital']);
			}

			$patientTreatmentDays = $pm->getTreatedDaysRealMultiple($ipidarr, false);
			foreach($patientTreatmentDays as $patientTreatmentIpid => $patientTreatmentData)
			{
				if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
					{
						if(count($patientTreatmentData ['admissionDates']) == 0)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						}
						else
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
				{

					if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = $patientTreatmentData ['discharge_date'];
					}
					if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
					else
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
				else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
				{
					foreach($patientTreatmentData ['admissionDates'] as $keyadmission => $admissionvalues)
					{
						if(empty($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']))
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
						}
						else
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($admission));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($discharge));
					}
				}
				else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
					{
						$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}
				if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])))
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
			}
			foreach($patientDateRange as $treatmentIpid => $range)
			{
				foreach($range as $ktreat => $treatmentarr)
				{
					foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
					{
						$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
					}
				}
			}

			foreach($treatmentDaysArray as $ipidPat => $treatmentDaysArrayF)
			{
				if(count($treatmentDaysArrayF) > 0)
				{
					foreach($treatmentDaysArrayF as $keyt => $treatmentDayValue)
					{
						$finalActiveDaysArray [$ipidPat] ['activedays'][] = array_intersect($treatmentDayValue, $finalPeriodDays);
					}
				}
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{

				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{

							if(in_array($patientDetails[$patIpid]['dischargemtd'], $todIds))
							{ // check if day is in hospital
								$lastDischargeDate = date("Y-m-d", strtotime($patientDetails [$patIpid] ['dischargedate']));

								if(strtotime($day) <= strtotime($lastDischargeDate))
								{
									$activeDaysFinal[$patIpid][] = $day;
								}
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
							else
							{
								$activeDaysFinal[$patIpid][] = $day;
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
						}
					}
				}
				$activeDaysFinal[$patIpid] = array_unique($activeDaysFinal[$patIpid]);
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{

				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							$activeDaysFinalTotal[$patIpid][] = $day;
						}
					}
				}
				$activeDaysFinalTotal[$patIpid] = array_unique($activeDaysFinalTotal[$patIpid]);
			}


			foreach($patientData as $patientIpid => $patientDates)
			{
				$disthospdays[$patientIpid] = array();
				foreach($realfullhospitaldays[$patientIpid] as $realfullhospitaldays_per)
				{
					$disthospdays[$patientIpid] = array_merge($disthospdays[$patientIpid], (array) $realfullhospitaldays_per);
				}
				array_unique($disthospdays[$patientIpid]);

				array_unique($finalPeriodDays);
				array_unique($patientDates['sapvDaysList']);
				array_unique($activeDaysFinal[$patientIpid]);
				array_unique($patientDates['hospitalDaysList']);
				$sapv_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $patientDates['sapvDaysList']);
				$activ_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $activeDaysFinal[$patientIpid]);
				$sapv_activ_in_perioada[$patientIpid] = array_intersect($activ_in_perioada[$patientIpid], $sapv_in_perioada[$patientIpid]);

				foreach($sapv_activ_in_perioada[$patientIpid] as $sapvActiveDay)
				{
					if(!in_array($sapvActiveDay, $patientDates['hospitalDaysList']))
					{
						$finalDays [$patientIpid]['FinalCountDays'][] = $sapvActiveDay;
					}
				}
				array_unique($finalDays [$patientIpid]['FinalCountDays']);

				if(!is_array($finalDays [$patientIpid]['FinalCountDays']))
				{
					$finalDays [$patientIpid]['FinalCountDays'] = array();
				}

				$disthospdayz[$patientIpid] = array_diff($disthospdays[$patientIpid], $finalDays [$patientIpid]['FinalCountDays']);

				$daysofhostpitalinperiod[$patientIpid] = array_intersect($disthospdayz[$patientIpid], $activ_in_perioada[$patientIpid]);

				if($_REQUEST['dbg'] && $patientIpid == '19aff8bf2768d208f00157c2957cf79a476e2516')
				{
					print_r("AAAAAA\n");
					print_r($patientData[$patientIpid]);

					print_r('BBBBBB\n');
					print_r($activeDaysFinal[$patientIpid]);

					print_r("A+B\n");
					print_r($activ_in_perioada[$patientIpid]);

					print_r('CCCCCCCC\n');
					print_r($activeDaysFinalWithHeads[$patientIpid]);

					print_r('FHD\n');
					var_dump($disthospdays[$patientIpid]);

					print_r('FHDF\n');
					var_dump($daysofhostpitalinperiod[$patientIpid]);

					print_r('FHDZ\n');
					var_dump($disthospdayz[$patientIpid]);
				}
			}

			/* ------------------------- Get Highest Verordnet ------------------------------------------ */
			//		third parameter is shows max verordnet value or all verordnets, default is (false)max_verordnet value
			$highest_sapv_values = $this->get_highest_sapv($ipidarr, str_replace($s, $r, $active_cond ['interval_sql']), false);

			//final sapv tags and days of treatment
			foreach($patientDetails as $ipidPatient => $patientDataValue)
			{
				$patientDetails [$ipidPatient] ['sapvtage'] = sizeof($finalDays [$ipidPatient] ['FinalCountDays']);
				$patientDetails [$ipidPatient] ['daysoftreatment'] = sizeof($activeDaysFinalTotal[$ipidPatient]);
			}

			foreach($patientDetails as $ipid => $patDet)
			{
				$MasterData ['data'] [$ipid] ['epid'] = $patientDetails [$ipid] ['epid'];
				$MasterData ['data'] [$ipid] ['lastname'] = $patientDetails [$ipid] ['surname'];
				$MasterData ['data'] [$ipid] ['firstname'] = $patientDetails [$ipid] ['firstname'];
				$MasterData ['data'] [$ipid] ['dateofbirth'] = $patientDetails [$ipid] ['dateofbirth'];
				$MasterData ['data'] [$ipid] ['admissiondate'] = $patientDetails [$ipid] ['admissiondate'];
				if(empty($patientDetails [$ipid] ['dischargedate_final']))
				{
					$disDate = " - ";
				}
				else
				{
					$disDate = $patientDetails [$ipid] ['dischargedate_final'];
				}
				$MasterData ['data'] [$ipid] ['dischargedate'] = $disDate;
				$MasterData ['data'] [$ipid] ['verordnungen'] = $highest_sapv_values[$ipid];

				if(empty($patientDetails [$ipid] ['sapvtage']))
				{
					$sapvtage = "0";
				}
				else
				{
					$sapvtage = $patientDetails [$ipid] ['sapvtage'];
				}
				$MasterData ['data'] [$ipid] ['sapvtage'] = $sapvtage;

				if(empty($patientDetails [$ipid] ['daysoftreatment']))
				{
					$dot = "0";
				}
				else
				{
					$dot = $patientDetails [$ipid] ['daysoftreatment'];
				}
				$MasterData ['data'] [$ipid] ['treateddays'] = $dot;

				//add died in hospital
				$daysofhostpitalinperiod[$ipid] = array_values(array_unique($daysofhostpitalinperiod[$ipid]));
				if($diedinhospital [$ipid] && !in_array($diedinhospital [$ipid], $daysofhostpitalinperiod[$ipid]))
				{
					$daysofhostpitalinperiod[$ipid][] = $diedinhospital [$ipid];
				}

				$MasterData['data'] [$ipid] ['dotminushospitaldays'] = ($dot - count($daysofhostpitalinperiod[$ipid]));
				$MasterData['data'] [$ipid] ['hospitaldays'] = count($daysofhostpitalinperiod[$ipid]);
			}
			return $MasterData;
		}

		public function sapv_tage_ii($params)
		{
			// report id = 117
			// report_name = SAPT TAGE II
			// copy after report id = 40
			// hospital admission adn hospital discharged counted as sapv days

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);

			$ipidarr = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
				}

				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}
			/* --------------------------- Get Report period days list ---------------------------------- */
			$pm = new PatientMaster ();
			foreach($period ['start'] as $keyd => $startDate)
			{
				$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);
			/* --------------------------- Get all sapv days of patients ---------------------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->andWhere('isdelete=0 and ((' . str_replace($s, $r, $active_cond ['interval_sql']) . '))')
				->andWhereIn('ipid', $ipidarr)
				->andWhere('status != "1"')
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();
			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{
				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}

			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days'])  // active day
							&& !in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['hospital_days_cs']) // not in hospital days
							&& !in_array(date('Y-m-d', strtotime($daysapv)), $patientDetails [$ipid] ['sapv_active_days']) // does not exist already in array
						)
						{
							$patientDetails [$ipid] ['sapv_active_days'] [] = $daysapv;
						}
					}
				}
			}


			foreach($patientDetails as $ipid => $patDet)
			{
				$MasterData ['data'] [$ipid] ['epid'] = $patientDetails [$ipid] ['epid'];
				$MasterData ['data'] [$ipid] ['lastname'] = $patientDetails [$ipid] ['surname'];
				$MasterData ['data'] [$ipid] ['firstname'] = $patientDetails [$ipid] ['firstname'];
				$MasterData ['data'] [$ipid] ['dateofbirth'] = $patientDetails [$ipid] ['dateofbirth'];
				$MasterData ['data'] [$ipid] ['admissiondate'] = $patientDetails [$ipid] ['admissiondate'];
				$MasterData ['data'] [$ipid] ['dischargedate'] = $patientDetails [$ipid] ['dischargedate'];
				$MasterData ['data'] [$ipid] ['sapvtage'] = count($patientDetails [$ipid] ['sapv_active_days']);
				$MasterData ['data'] [$ipid] ['treateddays'] = $patientDetails [$ipid]['real_active_days_no'];
				$MasterData['data'] [$ipid] ['dotminushospitaldays'] = $patientDetails [$ipid]['active_days_no_hospital_days'];
				$MasterData['data'] [$ipid] ['hospitaldays'] = $patientDetails [$ipid]['hospital_days_cs_no'];
			}
// 	print_r($MasterData);exit;
			return $MasterData;
		}

		public function masterdataanalysis($params)
		{
			// report_id = 44
			// report_name = ISPC Stammdatenauswertung
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			// if user selected - get only assigned to user
			if($whereepid){
			    $patientMasterData = Doctrine_Query::create()
			    ->select("e.ipid")
			    ->from("EpidIpidMapping e")
			    ->where($whereepid . ' e.clientid = ' . $logininfo->clientid);
			    $pmarr = $patientMasterData->fetchArray();
			
			    $doctor_assigned_ipids = array();
			    foreach($pmarr as $patient)
			    {
			        $doctor_assigned_ipids[] =  $patient['ipid'];
			    }
			
			    if(!empty($doctor_assigned_ipids)){
			        $conditions_ipids['ipids'] =  $doctor_assigned_ipids;
			    }
			    
			} else{
			    $conditions_ipids['ipids'] = false;
			}
			
			

			if($onlyactive == 1)
			{
			    
    			 $sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,p.familydoc_id,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)  as first_name,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex,";
    			 $sql .= "CONVERT(AES_DECRYPT(p.kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1)  as kontactnumber";
//               $active_patient_details = Pms_CommonData::patients_active($select = "*", $client = nulz = false, $page = '0', $include_standby = false);
    			 $active_patients_data = Pms_CommonData::patients_active($sql, $logininfo->clientid, null, $conditions_ipids['ipids'], "p.last_name", "ASC", "p.isdischarged = 0", false,"0",false);
    			 
    			 
    			 foreach($active_patients_data as $k_active => $v_active)
    			 {
    			     $active_patient_details[$v_active['ipid']]['details']  = $v_active['PatientMaster']; 
    			     $active_patient_details[$v_active['ipid']]['details']['epid']  = $v_active['epid']; 
    			     $ipidarr[] = $v_active['ipid'];
    			 }
    			 
    			 if(empty($ipidarr)){
    			     $ipidarr []  = "9999999999";
    			 }
			
    			 if($_REQUEST['dbg'] ==1){
    			     print_r($sql);
    			 }
    			 
    			 
			} else {
			    
			    foreach($period ['start'] as $keyd => $startDate)
			    {
			        $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
			        // 			$report_period_array[$keyd]['end'] = date ( "Y-m-d", strtotime ( $period ['end'] [$keyd] ) );
			        if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
			        {
			            $report_period_array[$keyd]['end'] = date("Y-m-d");
			        }
			        else
			        {
			            $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
			        }
			    }
    			// get active patients new methos - faster!!!
    			 $sql_tp = 'e.epid, p.ipid, e.ipid,p.familydoc_id,';
	             $sql_tp .= "CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)  as first_name,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex,";
    			 $sql_tp .= "CONVERT(AES_DECRYPT(p.kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1)  as kontactnumber,";
    			
    			$conditions['periods'] = $report_period_array;
    			$conditions['client'] = $clientid;
    			
    			if( !empty($conditions_ipids['ipids']) ){
                    $conditions['ipids'] = $conditions_ipids['ipids'];
    			}
    			
    			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql_tp);
    			$ipidarr = array_keys($active_patient_details); // return ipids
			}
			if($_REQUEST['dbg'] ==1){
			     print_r($active_patient_details);
			     exit;
			}
			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			$ipidsarr[] = '99999999999';
			/* -------------------------Get Patients - Contact persons------------------------------------------ */
			$contact = new ContactPersonMaster();
			$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($ipidarr, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )

			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod['interval_location_sql_qtz']));
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->Where('isdelete = 0')
				->andWhere('discharge_location = 0')
				->andwhere('' . $time_interval . '')
				->andWhereIn('ipid', $ipidarr);
			$locationaarr = $locations->fetchArray();
			//  here the location interval form time period it is used
			if($locationaarr)
			{
				$locinc = 1;
				foreach($locationaarr as $patloc)
				{
					$locationaarripid[$patloc['ipid']] = $patloc;
					if($locinc != count($locationaarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
					$locinc++;
				}

				$floc = Doctrine_Query::create()
					->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where("id IN (" . $patientlocationstr . ")")
					->andWhere('isdelete=0')
					->orderBy('location ASC');
				$locationdata = $floc->fetchArray();

				foreach($locationdata as $kloc => $vloc)
				{
					$locationLastData[$vloc['id']] = $vloc;
				}

				foreach($locationaarr as $k_loc => $v_loc)
				{

					$locid = substr($v_loc['location_id'], 0, 4);
					if($locid == "8888")
					{
						$patient_location_id = $v_loc['location_id'];
						$z = 1;
						$cnt_number = 1;
						foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
						{
							if($value_cnt['isdelete'] == '0')
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
								$cnt_number++;
							}
							else
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ';
							}

							$z++;
						}
						$locationaarrFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
					}
					else
					{
						$locationaarrFinal[$v_loc['ipid']] = $locationLastData[$v_loc['location_id']]['location'];
					}

					if($locationLastData[$v_loc['location_id']]['location_type'] == 2)
					{
						$locationHospiz[$v_loc['ipid']] = 1;
					}
					else
					{
						$locationHospiz[$v_loc['ipid']] = 0;
					}
					if($locationLastData[$v_loc['location_id']]['location_type'] == 4)
					{
						$locationAltheim[$v_loc['ipid']] = 1;
					}
					else
					{
						$locationAltheim[$v_loc['ipid']] = 0;
					}
				}
			}

			//Patient more info
			$patientmore = Doctrine_Query::create()
				->select("*")
				->from('PatientMoreInfo p')
				->whereIn('p.ipid', $ipidarr);
			$patientmorearray = $patientmore->fetchArray();

			$moreinfo = array();
			foreach($patientmorearray as $more)
			{
				if($more['peg'] == 1)
				{
					if(!empty($more['pegmore']))
					{
						$moreinfo[$more['ipid']]['peg'] = "Peg (" . $more['pegmore'] . "), ";
					}
					else
					{
						$moreinfo[$more['ipid']]['peg'] = "Peg, ";
					}
				}
				else
				{
					$moreinfo[$more['ipid']]['peg'] = "";
				}

				if($more['port'] == 1)
				{
					if(!empty($more['portmore']))
					{
						$moreinfo[$more['ipid']]['port'] = "Port (" . $more['portmore'] . "), ";
					}
					else
					{
						$moreinfo[$more['ipid']]['port'] = "Port, ";
					}
				}
				else
				{
					$moreinfo[$more['ipid']]['port'] = "";
				}

				if($more['pumps'] == 1)
				{
					$moreinfo[$more['ipid']]['pumps'] = 1;
				}

				if($more['magensonde'] == 1)
				{
					$moreinfo[$more['ipid']]['magensonde'] = "Magensonde, ";
				}
				else
				{
					$moreinfo[$more['ipid']]['magensonde'] = "";
				}
				if($more['zvk'] == 1)
				{
					$moreinfo[$more['ipid']]['zvk'] = "ZVK, ";
				}
				else
				{
					$moreinfo[$more['ipid']]['zvk'] = "";
				}
				if($more['dk'] == 1)
				{
					$moreinfo[$more['ipid']]['dk'] = "DK, ";
				}
				else
				{
					$moreinfo[$more['ipid']]['dk'] = "";
				}
			}

			$stam = new Stammdatenerweitert();
			//Familistad -radio
			$familienstands = $stam->getFamilienstandfun();
			//Staatsangehorigkeit -radio
			$stastszugehorigkeits = $stam->getStastszugehorigkeitfun();
			//Vigilanz -radio
			$vigilanzs = $stam->getVigilanzfun();
			//Orientierung -checkbox
			$orientierungs = $stam->getOrientierungfun();
			//Ernahrungssituation -checkbox
			$ernahrungs = $stam->getErnahrungfun();
			//Hilfsmitteleinsatz -checkbox
			$hilfsmittel = array('1' => "O2", '2' => "Toilettensitz", '3' => "Pflegebett", '4' => "Rollstuhl", "5" => "Rollator", "6" => "Nachtstuhl", "7" => "Wechseldruckmatratze");
			//Wunsch des Patienten -checkbox
			$wunsch = array("1" => "Zu Hause bleiben können", "2" => "kein Krankenhaus", "3" => "Autonomie", "4" => "Leidenslinderung", "5" => "Symptomlinderung",
				"6" => "mehr Kraft", "7" => "wieder aufstehen können", "8" => "noch eine Reise machen",
				"9" => "In Ruhe gelassen werden", "10" => "Keine Angabe", "11" => "Frage nach aktiver Sterbehilfe",
				"12" => "Lebensbeendigung", "13" => "Expliziter Wunsch");

			$patientstamdat = Doctrine_Query::create()
				->select("*")
				->from('Stammdatenerweitert s')
				->whereIn('s.ipid', $ipidarr);
			$patientstamdatarray = $patientstamdat->fetchArray();

			foreach($patientstamdatarray as $stammdata)
			{
				$wunschstr = "";
				$wunschstrall = "";
				$wunschmore = "";
				$wunscharr = array();
				$orientation = "";
				$orientarr = array();
				$sprachlich = "";
				$kognitiv = "";
				$horprobleme = "";
				$hilfsmittelarr = '';
				$hilfsmittelarr = array();
				$ernahrungstr = "";
				$ernahrungarr = array();
				$patientDetails[$stammdata['ipid']]['maritalstatus'] = $familienstands[$stammdata['familienstand']];
				$patientDetails[$stammdata['ipid']]['vigilance'] = $vigilanzs[$stammdata['vigilanz']];

				if($stammdata['stastszugehorigkeit'] == 2)
				{
					if(!empty($stammdata['anderefree']))
					{
						$patientDetails[$stammdata['ipid']]['nationality'] = $stastszugehorigkeits[$stammdata['stastszugehorigkeit']] . ' (' . $stammdata['anderefree'] . ')';
					}
				}
				else
				{
					$patientDetails[$stammdata['ipid']]['nationality'] = $stastszugehorigkeits[$stammdata['stastszugehorigkeit']];
				}

				if(strlen($stammdata['wunsch']) > 1)
				{
					$wunscharr = explode(",", $stammdata['wunsch']);
					foreach($wunscharr as $vak)
					{
						$wunschstr .= $wunsch[$vak] . ', ';
					}
				}
				else if($stammdata['wunsch'] == 0)
				{
					$wunschstr = '';
				}
				else
				{
					$wunscharr = $stammdata['wunsch'];
					$wunschstr = $wunsch[$wunscharr] . ', ';
				}
				if(in_array('13', $wunscharr))
				{
					if(!empty($stammdata['wunschmore']))
					{
						$wunschmore = '(' . $stammdata['wunschmore'] . '), ';
					}
				}
				$wunschstrall = $wunschstr . $wunschmore;
				$patientDetails[$stammdata['ipid']]['patientrequest'] = substr($wunschstrall, 0, -2);

				if(strlen($stammdata['orientierung']) > 1)
				{
					$orientarr = explode(",", $stammdata['orientierung']);
					foreach($orientarr as $vak)
					{
						$orientation .= $orientierungs[$vak] . ', ';
					}
				}
				else if($stammdata['orientierung'] == 0)
				{
					$orientation = '';
				}
				else
				{
					$orientarr = $stammdata['orientierung'];
					$orientation = $orientierungs[$orientarr] . ', ';
				}

				if($stammdata['sprachlich'] == 1)
				{
					$sprachlich = 'sprachlich, ';
				}
				else
				{
					$sprachlich = '';
				}
				if($stammdata['kognitiv'] == 1)
				{
					$kognitiv = 'kognitiv, ';
				}
				else
				{
					$kognitiv = '';
				}
				if($stammdata['horprobleme'] == 1)
				{
					$horprobleme = 'Hörprobleme, ';
				}
				else
				{
					$horprobleme = '';
				}
				$orientation = $orientation . $sprachlich . $kognitiv . $horprobleme;
				$patientDetails[$stammdata['ipid']]['orientation'] = substr($orientation, 0, -2);

				if(strlen($stammdata['hilfsmittel']) > 1)
				{
					$hilfsmittelarr = explode(",", $stammdata['hilfsmittel']);
					foreach($hilfsmittelarr as $vak)
					{
						$hilfsmittelstr .= $hilfsmittel[$vak] . ', ';
					}
				}
				else if($stammdata['hilfsmittel'] == 0)
				{
					$hilfsmittelstr = '';
				}
				else
				{
					$hilfsmittelarr = $stammdata['hilfsmittel'];
					$hilfsmittelstr = $hilfsmittel[$hilfsmittelarr] . ', ';
				}

				if($moreinfo[$stammdata['ipid']]['pumps'] == 1)
				{
					$patientDetails[$stammdata['ipid']]['tooluse'] = $hilfsmittelstr . 'Pumpe';
				}
				else
				{
					$patientDetails[$stammdata['ipid']]['tooluse'] = substr($hilfsmittelstr, 0, -2);
				}


				if(strlen($stammdata['ernahrung']) > 1)
				{
					$ernahrungarr = explode(",", $stammdata['ernahrung']);
					foreach($ernahrungarr as $vak)
					{
						$ernahrungstr .= $ernahrungs[$vak] . ', ';
					}
				}
				else if($stammdata['ernahrung'] == 0)
				{
					$ernahrungstr = '';
				}
				else
				{
					$ernahrungarr = $stammdata['ernahrung'];
					$ernahrungstr = $ernahrungs[$ernahrungarr] . ', ';
				}

				$moreinfostr = "";
				if(!empty($moreinfo[$stammdata['ipid']]['peg']))
				{
					$moreinfostr .= $moreinfo[$stammdata['ipid']]['peg'];
				}
				if(!empty($moreinfo[$stammdata['ipid']]['port']))
				{
					$moreinfostr .= $moreinfo[$stammdata['ipid']]['port'];
				}
				if(!empty($moreinfo[$stammdata['ipid']]['zvk']))
				{
					$moreinfostr .= $moreinfo[$stammdata['ipid']]['zvk'];
				}
				if(!empty($moreinfo[$stammdata['ipid']]['magensonde']))
				{
					$moreinfostr .= $moreinfo[$stammdata['ipid']]['magensonde'];
				}

				if(strlen($moreinfostr) > 0)
				{
					$patientDetails[$stammdata['ipid']]['nutritionsituation'] = $ernahrungstr . substr($moreinfostr, 0, -2);
				}
				else
				{
					$patientDetails[$stammdata['ipid']]['nutritionsituation'] = substr($ernahrungstr, 0, -2);
				}
			}

			//Religionszugehörigkeit -radio
			$patientrel = Doctrine_Query::create()
				->select("*")
				->from('PatientReligions p')
				->whereIn('p.ipid', $ipidarr);
			$patientrelarray = $patientrel->fetchArray();
			$religion = new PatientReligions();
			$religionname = $religion->getReligionsNames();
			foreach($patientrelarray as $rel)
			{
				$patientDetails[$rel['ipid']]['religion'] = $religionname[$rel['religion']];
			}

			//Pflegestufe
			$patientstage = Doctrine_Query::create()
				->select("*")
				->from('PatientMaintainanceStage p')
				->whereIn('p.ipid', $ipidarr);
			$patientstagearray = $patientstage->fetchArray();

			foreach($patientstagearray as $stage)
			{
				$stagestr = "";
				if($stage['stage'] > 0)
				{
					$stagestr .=$stage['stage'] . '<br />';
					if($stage['erstantrag'] == 1)
					{
						$stagestr .="Erstantrag<br />";
					}
					if($stage['horherstufung'] == 1)
					{
						$stagestr .="Höherstufung beantragt <br />";
					}
				}
				$patientDetails[$stage['ipid']]['carelevel'] = $stagestr;
			}

			//Vorausschauende Therapieplanung
			$patienttherapy = Doctrine_Query::create()
				->select("*")
				->from('PatientTherapieplanung p')
				->whereIn('p.ipid', $ipidarr);
			$patienttherapyarray = $patienttherapy->fetchArray();
			foreach($patienttherapyarray as $therapy)
			{
				$therapystr = "";
				if($therapy['ernahrungstherapie'] == 1)
				{
					$therapystr .= "Keine Ernährungstherapie, ";
				}
				if($therapy['infusionstherapie'] == 1)
				{
					$therapystr .= "Keine Infusionstherapie, ";
				}
				if($therapy['antibiose_bei_pneumonie'] == 1)
				{
					$therapystr .= "Keine Antibiose bei Pneumonie, ";
				}
				if($therapy['antibiose_bei_HWI'] == 1)
				{
					$therapystr .= "Keine Antibiose bei HWI, ";
				}
				if($therapy['tumorreduktionstherapie_chemo'] == 1)
				{
					$therapystr .= "Keine Tumorreduktionstherapie / Chemo, ";
				}
				if($therapy['krankenhausverlegung'] == 1)
				{
					$therapystr .= "Keine Krankenhausverlegung im Notfall (z.B. Harnverhalt), ";
				}
				if($therapy['lagerung_durch_pflege'] == 1)
				{
					$therapystr .= "Keine Lagerung durch Pflege, ";
				}
				if($therapy['orale_medikation_mehr'] == 1)
				{
					$therapystr .= "Keine orale Medikation mehr, ";
				}
				if($therapy['blut_volumenersatztherapie'] == 1)
				{
					$therapystr .= "Keine Blut- / Volumenersatztherapie, ";
				}
				if($therapy['palliative'] == 1)
				{
					$therapystr .= "Palliative Sedierung bei unkontrollierbaren Symptomen, ";
				}
				if(!empty($therapy['freetext']))
				{
					$therapystr .= $therapy['freetext'] . ', ';
				}
				$patientDetails[$therapy['ipid']]['treatmentplanning'] = substr($therapystr, 0, -2);
			}


			//Mobilitat -checkbox
			$patientmob = Doctrine_Query::create()
				->select("*")
				->from('PatientMobility m')
				->whereIn('m.ipid', $ipidarr);
			$patientmobarray = $patientmob->fetchArray();

			foreach($patientmobarray as $mobilitat)
			{

				$mobilitatstr = "";
				if($mobilitat['bed'] == '1')
				{
					if(!empty($mobilitat['bedmore']))
					{
						$mobilitatstr .= "Bett (" . $mobilitat['bedmore'] . "), ";
					}
					else
					{
						$mobilitatstr .= "Bett, ";
					}
				}
				if($mobilitat['walker'] == '1')
				{
					if(!empty($mobilitat['walkermore']))
					{
						$mobilitatstr .= "Rollator (" . $mobilitat['walkermore'] . "), ";
					}
					else
					{
						$mobilitatstr .= "Rollator, ";
					}
				}
				if($mobilitat['wheelchair'] == '1')
				{
					if(!empty($mobilitat['wheelchairmore']))
					{
						$mobilitatstr .= "Rollstuhl (" . $mobilitat['wheelchairmore'] . "), ";
					}
					else
					{
						$mobilitatstr .= "Rollstuhl, ";
					}
				}
				if($mobilitat['goable'] == '1')
				{
					if(!empty($mobilitat['goablemore']))
					{
						$mobilitatstr .= "gehfähig (" . $mobilitat['goablemore'] . "), ";
					}
					else
					{
						$mobilitatstr .= "gehfähig, ";
					}
				}
				if($mobilitat['nachtstuhl'] == '1')
				{
					if(!empty($mobilitat['nachtstuhlmore']))
					{
						$mobilitatstr .= "Nachtstuhl  (" . $mobilitat['nachtstuhlmore'] . "), ";
					}
					else
					{
						$mobilitatstr .= "Nachtstuhl, ";
					}
				}
				if($mobilitat['wechseldruckmatraze'] == '1')
				{
					if(!empty($mobilitat['wechseldruckmatrazemore']))
					{
						$mobilitatstr .= "Wechseldruckmatraze  (" . $mobilitat['wechseldruckmatrazemore'] . "), ";
					}
					else
					{
						$mobilitatstr .= "Wechseldruckmatraze, ";
					}
				}

				$patientDetails[$mobilitat['ipid']]['mobility'] = substr($mobilitatstr, 0, -2);
			}

			//Wohnsituation -checkbox
			$patientlives = Doctrine_Query::create()
				->select("*")
				->from('PatientLives p')
				->whereIn('p.ipid', $ipidarr);
			$patientlivesarray = $patientlives->fetchArray();

			foreach($patientlivesarray as $patientlives)
			{
				$housingsituation = "";
				if($patientlives['alone'] == '1')
				{
					$housingsituation .= "alleine, ";
				}
				if($patientlives['house_of_relatives'] == '1')
				{
					$housingsituation .= "im Haus der Angehörigen, ";
				}
				if($patientlives['apartment'] == '1')
				{
					$housingsituation .= "Wohnung, ";
				}
				if($patientlives['home'] == '1')
				{
					$housingsituation .= "Heim, ";
				}
				if($patientlives['hospiz'] == '1')
				{
					$housingsituation .= "Hospiz, ";
				}
				if($patientlives['sonstiges '] == '1')
				{
					$housingsituation .= "Sonstiges, ";
				}
				$patientDetails[$patientlives['ipid']]['housingsituation'] = substr($housingsituation, 0, -2);
			}

			//Versorgung durch das Bezugssystem -checkbox
			$patientsupply = Doctrine_Query::create()
				->select("*")
				->from('PatientSupply p')
				->whereIn('p.ipid', $ipidarr);
			$patientsupplyarray = $patientsupply->fetchArray();

			foreach($patientsupplyarray as $patientsupply)
			{
				$patientsupplystr = "";
				if($patientsupply['even'] == '1')
				{
					$patientsupplystr .= "Selbst, ";
				}
				if($patientsupply['spouse'] == '1')
				{
					$patientsupplystr .= "Ehepartner, ";
				}
				if($patientsupply['member'] == '1')
				{
					$patientsupplystr .= "Angehörige, ";
				}
				if($patientsupply['private_support'] == '1')
				{
					$patientsupplystr .= "Private Hilfe, ";
				}
				if($patientsupply['nursing'] == '1')
				{
					$patientsupplystr .= "Pflegedienst, ";
				}
				if($patientsupply['palliativpflegedienst '] == '1')
				{
					$patientsupplystr .= "Palliativpflegedienst, ";
				}
				if($patientsupply['heimpersonal '] == '1')
				{
					$patientsupplystr .= "Heimpersonal, ";
				}
				$patientDetails[$patientsupply['ipid']]['patientsupply'] = substr($patientsupplystr, 0, -2);
			}

			//Client Pflegedienste
			$clpfle = Doctrine_Query::create()
				->select("*")
				->from('Pflegedienstes')
				->where('clientid = ' . $clientid);
			$clpflearray = $clpfle->fetchArray();

			foreach($clpflearray as $valo)
			{
				$pflegedienste[$valo['id']]['id'] = $valo['id'];
				$pflegedienste[$valo['id']]['name'] = $valo['nursing'];
			}

			//Patient Pflegedienste
			$patientpfle = Doctrine_Query::create()
				->select("*")
				->from('PatientPflegedienste p')
				->whereIn('p.ipid', $ipidarr)
				->andwhere('p.isdelete = 0');
			$patientpflearray = $patientpfle->fetchArray();

			$ppfle = array();
			foreach($patientpflearray as $key => $pfle)
			{
				$ppfle[$pfle['ipid']]['id'][] = $pfle['pflid'];
				$ppfle[$pfle['ipid']]['name'][] = $pflegedienste[$pfle['pflid']]['name'];
			}

			//Patient details
 
			$genders = Pms_CommonData::getGender();

			foreach($active_patient_details as $kipid => $patient)
			{
				$patientDetails[$patient['details']['ipid']]['epid'] = $patient['details']['epid'];
				if($patient['details']['sex'] == '1' || $patient['details']['sex'] == '2')
				{
					$patientDetails[$patient['details']['ipid']]['sex'] = $genders[$patient['details']['sex']];
				}
				else
				{
					$patientDetails[$patient['details']['ipid']]['sex'] = '0'; // not mentioned
				}

				if($patient['details']['living_will'] == '1')
				{
					if($patient['living_will_from'] != "0000-00-00:00:00")
					{
					    $will_date[$patient['ipid']] = date('d.m.Y', strtotime($patient['living_will_from']));
					} else{
					    $will_date[$patient['ipid']] = "-";
					}
					
					if($patient['details']['living_will_from'] != "0000-00-0000:00:00" && !empty($patient['details']['living_will_deposited']))
					{
						$patientDetails[$patient['details']['ipid']]['livingwill'] = 'Vorhanden<br />von wann: ' . date('d.m.Y', strtotime($patient['details']['living_will_from'])) . '<br />' . $patient['details']['living_will_deposited'];
					}
					else
					{
						$patientDetails[$patient['details']['ipid']]['livingwill'] = "Vorhanden";
					}
				}
				else
				{
					$patientDetails[$patient['details']['ipid']]['livingwill'] = "-";
				}

				$allpflegedienst = '';
				if($ppfle[$patient['details']['ipid']]['id'])
				{
					$patientDetails[$patient['details']['ipid']]['professionalver'] = "Pflegedienst";
					foreach($ppfle[$patient['details']['ipid']]['name'] as $val_name)
					{
						$allpflegedienst .= $val_name . ', ';
					}
					$patientDetails[$patient['details']['ipid']]['pflegedienst'] = substr($allpflegedienst, 0, -2);
				}
				else if($locationAltheim[$patient['details']['ipid']] != 0)
				{
					$patientDetails[$patient['details']['ipid']]['professionalver'] = "Altenheim";
				}
				else if($locationHospiz[$patient['details']['ipid']] != 0)
				{
					$patientDetails[$patient['details']['ipid']]['professionalver'] = "Hospiz";
				}
				else
				{
					$patientDetails[$patient['details']['ipid']]['professionalver'] = "keine";
				}
					$patientDetails[$patient['details']['ipid']]['familydoc_id'] = $patient['details']['familydoc_id'];
				
				$doctorids[] = $patient['details']['familydoc_id'];
			}
 
			/* ----------------------- Get family doctor details-------------------------------- */
			if(empty($doctorids)){
			    $doctorids[] = "9999999999";
			}
			$Familydoctor = "";
			$famdoc = new FamilyDoctor();
			$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);
			
			foreach($familidoc as $fd_key => $fd_value)
			{
			    $familydoctors[$fd_value['id']] = $fd_value;
			}
			
			if(count($familidoc) > 0)
			{
				$Familydoctor = array();
			    foreach($familidoc as $doc)
			    {
			        if(strlen($doc['title']) > 0)
			        {
			            $Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
			        }
			        if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
			        {
			            $Familydoctor[$doc['id']]['name'] .= trim($doc['last_name']) . ", " . trim($doc['first_name']);
			        }
			
			        if(strlen($doc['phone_practice']) > 0)
			        {
			            $Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
			        }
			    }
			}
			
			foreach($patientDetails as $ipid => $patDet)
			{
				$MasterData['data'][$ipid]['epid'] = $patientDetails[$ipid]['epid'];
				$MasterData['data'][$ipid]['gender'] = $patientDetails[$ipid]['sex'];
				$MasterData['data'][$ipid]['maritalstatus'] = $patientDetails[$ipid]['maritalstatus'];
				$MasterData['data'][$ipid]['nationality'] = $patientDetails[$ipid]['nationality'];
				$MasterData['data'][$ipid]['religion'] = $patientDetails[$ipid]['religion'];
				$MasterData['data'][$ipid]['location'] = $locationaarrFinal[$ipid];
				$MasterData['data'][$ipid]['housingsituation'] = $patientDetails[$ipid]['housingsituation'];
				$MasterData['data'][$ipid]['carelevel'] = $patientDetails[$ipid]['carelevel'];
				$MasterData['data'][$ipid]['patientsupply'] = $patientDetails[$ipid]['patientsupply'];
				$MasterData['data'][$ipid]['professionalver'] = $patientDetails[$ipid]['professionalver'];
				$MasterData['data'][$ipid]['patientrequest'] = $patientDetails[$ipid]['patientrequest'];
				$MasterData['data'][$ipid]['treatmentplanning'] = $patientDetails[$ipid]['treatmentplanning'];
				$MasterData['data'][$ipid]['vigilance'] = $patientDetails[$ipid]['vigilance'];
				$MasterData['data'][$ipid]['orientation'] = $patientDetails[$ipid]['orientation'];
				$MasterData['data'][$ipid]['mobility'] = $patientDetails[$ipid]['mobility'];
				$MasterData['data'][$ipid]['tooluse'] = $patientDetails[$ipid]['tooluse'];
				$MasterData['data'][$ipid]['nutritionsituation'] = $patientDetails[$ipid]['nutritionsituation'];
				$MasterData['data'][$ipid]['livingwill'] = $patientDetails[$ipid]['livingwill'];
				$MasterData['data'][$ipid]['nursing'] = $patientDetails[$ipid]['pflegedienst'];
				$MasterData['data'][$ipid]['familydoctor'] = $Familydoctor[$patDet['familydoc_id']]['name'] . ' ';
			}
			return $MasterData;
		}

		public function vollversorgung($params)
		{
			// report_id = 45
			// report_name = Vollversorgung / Tag
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];

			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;


			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$patientMaster = new PatientMaster();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
// 			$report_period_array[$keyd]['end'] = date ( "Y-m-d", strtotime ( $period ['end'] [$keyd] ) );
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$ipidarr = array_keys($active_patient_details); // return ipids


			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}

			/* --------------------------- Get Report period days list ---------------------------------- */
			$pm = new PatientMaster ();
			foreach($period ['start'] as $keyd => $startDate)
			{
				$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* --------------------------- Get all sapv days of patients ---------------------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->andWhere('isdelete=0 and ((' . str_replace($s, $r, $active_cond ['interval_sql']) . '))')
				->andwhere('verordnet LIKE "%4%"')
				->andWhereIn('ipid', $ipidarr)
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();
			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{

				if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00')
				{
					$verordisablenext = strtotime('+1 day', strtotime($sapv['verorddisabledate']));
					$sapv ['verordnungbis'] = date('Y-m-d', $verordisablenext);
				}
				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}

			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days'])  // active day
							&& !in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['hospital_days_cs']) // not in hospital days
							&& !in_array(date('Y-m-d', strtotime($daysapv)), $patientDetails [$ipid] ['sapv_active_days']) // does not exist already in array
						)
						{
							$patientDetails [$ipid] ['sapv_active_days'] [] = $daysapv;
							$patient_sapv_details [$ipid] [] = $daysapv;
						}
					}
				}
			}

			foreach($finalPeriodDays as $kPd => $period_day)
			{
				foreach($patient_sapv_details as $ipid => $sapv_days)
				{
					if(in_array($period_day, $sapv_days))
					{
						$patients2day[$period_day][] = $ipid;
						$patients2day_dbg[$period_day][] = $patientDetails [$ipid] ['epid'];
					}
				}
			}

			if($_REQUEST['dbg'] == 'show_epids')
			{
				print_r("\n new");
				print_r("\n");
				print_r($patients2day_dbg);
				exit;
			}



			$daysNumber = count($patients2day);
			$total_patients = 0;
			foreach($patients2day as $day => $patient)
			{
				$MasterData['data'][$day]['date'] = date("d.m.Y", strtotime($day));
				$MasterData['data'][$day]['nrpatientenvv'] = count($patients2day[$day]);
				$total_patients += count($patients2day[$day]);
			}
			$MasterData['extra']['avg_patients_days'] = round($total_patients / $daysNumber, 2);
			return $MasterData;
		}

		public function vollversorgung_old($params)
		{
			// report_id = 45
			// report_name = Vollversorgung / Tag-old
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];

			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			$ipidarr[] = "9999999999";

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$patientMaster = new PatientMaster();
			$periodDays = $patientMaster->getDaysInBetween($period['start'][0], $period['end'][0]);

			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod ['interval_sql']));

			$time_interval_discharged = str_replace('%date_end%', 'discharge_date', str_replace('%date_start%', 'discharge_date', $timeperiod ['interval_sql']));

			//Patient details
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipidarr)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$debugepidarray = $patient->fetchArray();

			foreach($debugepidarray as $dpatient)
			{
				$debugepids[$dpatient['ipid']]['epid'] = $dpatient['EpidIpidMapping']['epid'];
			}

			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid='" . $logininfo->clientid . "' AND (abbr='TOD' OR abbr='TODNA')");

			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}
			//discharged without dead
			$disquery = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $ipidarr)
				->andWhere('isdelete = 0');
			$disarray = $disquery->fetchArray();

			foreach($disarray as $key => $val)
			{
				$disipidarray[$val['ipid']] = strtotime($val['discharge_date']);
			}

			//discharged with dead in reported period
			$disquery->andWhereIn('discharge_method', $dm_deadfinal);
			$disquery->andWhere('' . $time_interval_discharged . '');
			$disdeadarray = $disquery->fetchArray();

			foreach($disdeadarray as $deaddischarged)
			{
				$deadPatients[$deaddischarged['ipid']] = date("Y-m-d", strtotime($deaddischarged['discharge_date']));
			}

			//Hospital ids
			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type =1');
			$hosparray = $hospitalids->fetchArray();

			$hosparrids[] = "99999999";

			foreach($hosparray as $hospital)
			{
				$hosparrids[] = $hospital['id'];
			}

			//Hospital locations based on hosparrids
			$locations = Doctrine_Query::create()
				->select('*, DATE(valid_from) as valid_from_headless, DATE(valid_till) as valid_till_headless, DATE(valid_till) as valid_till, DATE(valid_from) as valid_from')
				->from('PatientLocation pl')
				->whereIn('pl.location_id', $hosparrids) //arrays with hospital ids
				->andWhereIn('pl.ipid', $ipidarr) //arrays with active users in reported period
				->andWhere('pl.isdelete="0"')
				->andWhere('' . $time_interval . '')
				->orderBy('id DESC');

			$locationsarr = $locations->fetchArray();

			//Hospitals for active patients in reported period
			if(count($locationsarr) > 0)
			{
				$z = 0;
				foreach($locationsarr as $location)
				{
					if(($location['valid_till'] == date("Y-m-d") || $location['valid_till'] == "0000-00-00") && !array_key_exists($location['ipid'], $disipidarray))
					{
						$hospitalPatientsIpids[date("Y-m-d")][] = $location['ipid'];
					}

					if($location['valid_till'] == "0000-00-00")
					{
						$endDate = date("Y-m-d", strtotime("+1 day"));
					}
					else
					{
						$endDate = $location['valid_till'];
					}

					$normalHospitalDays[$location['ipid']][$z]['valid_from'] = $location['valid_from'];
					$normalHospitalDays[$location['ipid']][$z]['valid_till'] = $endDate;

					$normal_hospital_days = $patientMaster->getDaysInBetween($location['valid_from'], $endDate);
					$full_hospital_days = $patientMaster->getDaysInBetween($location['valid_from'], $endDate);
					//array with in/out hospitals
					$hospital_dates[$location['ipid']]['inhospital'][] = $location['valid_from'];
					$hospital_dates[$location['ipid']]['outhospital'][] = $location['valid_till'];

					$hospital_start_day_key = array_pop(array_reverse(array_keys($full_hospital_days)));
					$hospital_end_day_key = array_pop(array_keys($full_hospital_days));

					unset($full_hospital_days[$hospital_start_day_key]);
					unset($full_hospital_days[$hospital_end_day_key]);


					reset($full_hospital_days);
					$normalHospitalPeriodDays[$location['ipid']][] = $normal_hospital_days;
					$fullHospitalPeriodDays[$location['ipid']][] = $full_hospital_days;
					$z++;
				}
			}
			$hospitalPatientsIpids[] = '99999999999';
			//maintain continuous hospitals timeline, if out of hosp and enters again in hosp, middle date is hospital date
			foreach($hospital_dates as $k_ipid => $v_hosp_dates)
			{
				foreach($v_hosp_dates['inhospital'] as $k_date_inhosp => $v_date_inhosp)
				{
					if(in_array($v_date_inhosp, $v_hosp_dates['outhospital']))
					{
						$continuous_dates[$k_ipid][] = $v_date_inhosp;
						//this the real limited array, rest is for debug only
						$hospitalPatientsIpids[$v_date_inhosp][] = $k_ipid;
					}
				}

				$fullHospitalPeriodDays[$k_ipid][] = $continuous_dates[$k_ipid];
				$normalHospitalPeriodDays[$k_ipid][] = $continuous_dates[$k_ipid];
			}

			//get dead in hospital patients => date=>array(ipids)
			foreach($deadPatients as $deadipid => $deadPatDate)
			{
				if(array_key_exists($deadipid, $normalHospitalDays))
				{//check if dead patient has hospital
					foreach($normalHospitalDays[$deadipid] as $locationcnt => $locationdata)
					{
						if(strtotime($deadPatDate) == strtotime($locationdata['valid_till']) && strtotime($deadPatDate) != strtotime($locationdata['valid_from']))
						{ //we have dead patient in hospital last day
							$deadInHospital[$deadPatDate][] = $deadipid;
							$fullHospitalDays[$location['ipid']]['deadInHospital'] = $deadPatDate; // debug
						}
					}
				}
			}

			//get hospital patients date=>array(ipids)
			foreach($fullHospitalPeriodDays as $patientHospitalIpid => $patientData)
			{
				foreach($patientData as $pdata)
				{
					$ts_valid_from = strtotime(current($pdata)); //curent array element(reset from above)
					$ts_valid_till = strtotime(end($pdata)); //last element of array

					foreach($periodDays as $curentDay)
					{
						$ts_curentDay = strtotime($curentDay);
						if(Pms_CommonData::isintersected($ts_curentDay, $ts_curentDay, $ts_valid_from, $ts_valid_till))
						{
							$hospitalPatientsIpids[$curentDay][] = $patientHospitalIpid;
						}
					}
				}
			}
			ksort($hospitalPatientsIpids);
			$patientsReadmission = $patientMaster->getTreatedDaysRealMultiple($ipidarr, true);

			foreach($patientsReadmission as $ipid => $data)
			{
				if(count($data['admissionDates']) > 0)
				{
					foreach($data['admissionDates'] as $keyAdm => $admitedDate)
					{
						if(!empty($patientsReadmission[$ipid]['dischargeDates'][$keyAdm]['date']))
						{
							$dischargeDate = $patientsReadmission[$ipid]['dischargeDates'][$keyAdm]['date'];
						}
						else
						{
							$dischargeDate = date("d.m.Y");
						}

						$admissionsCycles[$ipid][$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
						$admissionsCycles[$ipid][$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));
					}
				}
				else
				{
					$admissionsCycles[$ipid][0]['start'] = date("d.m.Y", strtotime($data['admission_date']));
					$admissionsCycles[$ipid][0]['end'] = date("d.m.Y", strtotime($data['discharge_date']));
				}
			}

			foreach($periodDays as $kPd => $periodDay)
			{
				$patientsapv = Doctrine_Query::create()
					->select("*")
					->from('SapvVerordnung sv')
					->whereIn('ipid', $ipidarr)
					->andwhere('sv.verordnet LIKE "%4%"')
					->andWhere('sv.isdelete = 0')
					->andWhere('"' . $periodDay . '" BETWEEN date(sv.verordnungam) and date(sv.verordnungbis)');
				if(count($deadInHospital) > 0)
				{
					if(array_key_exists($periodDay, $deadInHospital))
					{
						$patientsapv->andWhereNotIn('ipid', $deadInHospital[$periodDay]);
					}
				}

				if(count($hospitalPatientsIpids) > 0)
				{
					if(array_key_exists($periodDay, $hospitalPatientsIpids))
					{
						$patientsapv->andWhereNotIn('ipid', $hospitalPatientsIpids[$periodDay]);
					}
				}

				$patientsapvarr = $patientsapv->fetchArray();
				foreach($patientsapvarr as $patient)
				{
					$verordisablenext = strtotime('+1 day', strtotime($patient['verorddisabledate']));
					$verordisable = strtotime(date('Y-m-d', $verordisablenext));

					if($disipidarray[$patient['ipid']])
					{
						$dischargedatenext = strtotime('+1 day', $disipidarray[$patient['ipid']]);
						$dischargedate = strtotime(date('Y-m-d', $dischargedatenext));
					}
					else
					{
						$dischargedate = false;
					}

					$verordnungbisnext = strtotime('+1 day', strtotime($patient['verordnungbis']));
					$verordnungbis = strtotime(date('Y-m-d', $verordnungbisnext));

					if($patient['status'] == "1")
					{
						if($dischargedate && $dischargedate <= $verordisable)
						{
							if($dischargedate <= $verordnungbis)
							{
								$vvcut = $dischargedate;
							}
							else
							{
								$vvcut = $verordnungbis;
							}
						}
						else
						{
							$vvcut = $verordisable;
						}
					}
					elseif($dischargedate && $dischargedate <= $verordnungbis)
					{
						$vvcut = $dischargedate;
					}
					else
					{
						$vvcut = $verordnungbis;
					}


					//construct final ipids array and debug array pt ancuta
					if($vvcut)
					{
						if($vvcut > strtotime($periodDay))
						{
							foreach($admissionsCycles[$patient['ipid']] as $kadm => $value)
							{
								if(Pms_CommonData::isintersected(strtotime($periodDay), strtotime($periodDay), strtotime($value['start']), strtotime($value['end'])))
								{
									$patientsapvarray[$periodDay][$patient['ipid']][] = $patient;

									$debug[$periodDay][$patient['ipid']][] = $patient['ipid'];
									$debug[$periodDay][$patient['ipid']]['epid'] = $debugepids[$patient['ipid']]['epid'];
									$debug[$periodDay][$patient['ipid']]['admissionCycles'] = $admissionsCycles[$patient['ipid']];

									$debug_days[$periodDay][] = $debugepids[$patient['ipid']]['epid'];
								}
							}
						}
					}
					else
					{
						foreach($admissionsCycles[$patient['ipid']] as $kadm => $value)
						{
							if(Pms_CommonData::isintersected(strtotime($periodDay), strtotime($periodDay), strtotime($value['start']), strtotime($value['end'])))
							{
								$patientsapvarray[$periodDay][$patient['ipid']][] = $patient;

								$debug[$periodDay][$patient['ipid']][] = $patient['ipid'];
								$debug[$periodDay][$patient['ipid']]['epid'] = $debugepids[$patient['ipid']]['epid'];
								$debug[$periodDay][$patient['ipid']]['admissionCycles'] = $admissionsCycles[$patient['ipid']];
								$debug_days[$periodDay][] = $debugepids[$patient['ipid']]['epid'];
							}
						}
					}
				}
			}

			if($_REQUEST['show_epids'] == "1")
			{
				print_r("\n old");
				print_r("\n");
				print_r($debug_days);
				exit;
			}


			if($_REQUEST['dbg'] == "1")
			{
				print_r('\nFinal Query Array\n');
				print_r($dbg);
				exit;
			}
			$daysNumber = count($patientsapvarray);
			$total_patients = 0;
			foreach($patientsapvarray as $day => $patient)
			{
				$MasterData['data'][$day]['date'] = date("d.m.Y", strtotime($day));
				$MasterData['data'][$day]['nrpatientenvv'] = count($patientsapvarray[$day]);
				$total_patients += count($patientsapvarray[$day]);
			}


			$MasterData['extra']['avg_patients_days'] = round($total_patients / $daysNumber, 2);
			return $MasterData;
		}

		public function wlanlage7($params)
		{
			// report_id = 46
			// report_name = WL Anlage 7 ausgefullt

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$ipids_disarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);
			if(empty($ipids_disarr))
			{
				$ipids_disarr[] = 'XXX';
			}
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $ipids_disarr);
			$disipidarray = $patientdis->fetchArray();

			foreach($disipidarray as $dis_patient)
			{
				$patientDetails[$dis_patient['ipid']]['dischargedate'] = date('d.m.Y', strtotime($dis_patient['discharge_date']));
			}

			//Patient details
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipids_disarr)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$ipidarray = $patient->fetchArray();

			foreach($ipidarray as $patient)
			{
				$patientDetails[$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
				$patientDetails[$patient['ipid']]['firstname'] = $patient['first_name'];
				$patientDetails[$patient['ipid']]['lastname'] = $patient['last_name'];
				$patientDetails[$patient['ipid']]['admissiondate'] = date('d.m.Y', strtotime($patient['admission_date']));
				if($patient['wlanlage7completed'] == 1)
				{
					$patientDetails[$patient['ipid']]['wlanlage7completed'] = "Ja";
				}
				else
				{
					$patientDetails[$patient['ipid']]['wlanlage7completed'] = "Nein";
				}
			}

			foreach($patientDetails as $ipid => $patDet)
			{
				$MasterData['data'][$ipid]['epid'] = $patientDetails[$ipid]['epid'];
				$MasterData['data'][$ipid]['lastname'] = $patientDetails[$ipid]['lastname'];
				$MasterData['data'][$ipid]['firstname'] = $patientDetails[$ipid]['firstname'];
				$MasterData['data'][$ipid]['admissiondate'] = $patientDetails[$ipid]['admissiondate'];
				$MasterData['data'][$ipid]['dischargedate'] = $patientDetails[$ipid]['dischargedate'];
				$MasterData['data'][$ipid]['wlanlage7completed'] = $patientDetails[$ipid]['wlanlage7completed'];
			}
			return $MasterData;
		}

		public function anfrage($params)
		{
			// report_id = 48
			// report_name = Anfrage
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];

			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];
			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ------------ Get all standby patients with create_date in report periode---------- */
			$actpatient = Doctrine_Query::create()
				->select("p.ipid")
				->from('PatientMaster p')
				->Where('isstandby = 1')
				->andWhere('isstandbydelete = 0')
				->andWhere('isarchived = 0')
				->andWhere('isdischarged = 0')
				->andWhere('isdelete = 0')
				->andWhere('(' . str_replace('%date%', 'create_date', $timeperiod['date_sql']) . ')');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$ipid_standby_arr = $actpatient->fetchArray();

			$ipids_standby[] = '99999999';
			foreach($ipid_standby_arr as $k_pat => $v_patient)
			{
				$ipids_standby[] = $v_patient['ipid'];
			}

			/* ------------ Get all active patients  in report periode---------- */
			$ipids_active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			if(empty($ipids_active))
			{
				$ipids_active[] = '99999999';
			}

			/* ------------- GET ALL NEEDED PATIENTS -> ACTIVE AND STANDBY ---------------- */
			$ipidsarr = array_merge($ipids_standby, $ipids_active);

			/* ------------ Get ipids of client patients which have verordnung ---------- */
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipidsarr)
				->groupBy('ipid');
			$vv_ipid = $dropSapv->fetchArray();

			$vv_ipids[] = '999999999';
			foreach($vv_ipid as $vv_key => $vv_values)
			{
				$vv_ipids[] = $vv_values['ipid'];
			}


			//		filter the patients with sapv from client patients
			$ipids_no_sapv = array_unique(array_diff($ipidsarr, $vv_ipids));

			//		prepare time period
			$timeq = str_replace('%date%', 'create_date', $timeperiod['date_sql']) . '';

			//		get minutes from sapvfb3 of patients without sapv
			$q = Doctrine_Query::create()
				->select("*, sum(s.gesamt_zeit_in_minuten ) AS total_time, sum(s.davon_fahrtzeit ) AS travel_time")
				->from('Sapsymptom s')
				->whereIn('ipid', $ipids_no_sapv)
				->andWhere($timeq)
				->andWhere("isdelete = 0")
				->groupBy('s.ipid')
				->orderBy('s.ipid');
			$sumtime = $q->fetchArray();

			foreach($sumtime as $s_key => $s_values)
			{
				$time_array[$s_values['ipid']] = $s_values;
			}


			//		Get discharge dates
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->whereIn('ipid', $ipids_no_sapv);
			$dispatarray = $dispat->fetchArray();
			foreach($dispatarray as $dis_patient)
			{
				$dischargedpatarray[$dis_patient['ipid']] = $dis_patient['discharge_date'];
			}
			//		get details of patients without sapv
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipids_no_sapv)
				->andwhere('p.isdelete = 0')
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$ipidarray = $patient->fetchArray();

			foreach($ipidarray as $p_key => $p_details)
			{
				$patient_details[$p_details['ipid']] = $p_details;
			}

			//		prepare final array
			foreach($patient_details as $ipid => $patDet)
			{
				$MasterData['data'][$ipid]['epid'] = $patDet['EpidIpidMapping']['epid'];
				$MasterData['data'][$ipid]['lastname'] = $patDet['last_name'];
				$MasterData['data'][$ipid]['firstname'] = $patDet['first_name'];
				$MasterData['data'][$ipid]['birthd'] = date('d.m.Y', strtotime($patDet['birthd']));

				if(!empty($time_array[$patDet['ipid']]['total_time']))
				{
					$MasterData['data'][$ipid]['minutes_gz'] = $time_array[$patDet['ipid']]['total_time'];
				}
				else
				{
					$MasterData['data'][$ipid]['minutes_gz'] = '0';
				}

				if(!empty($time_array[$patDet['ipid']]['travel_time']))
				{
					$MasterData['data'][$ipid]['minutes_fz'] = $time_array[$patDet['ipid']]['travel_time'];
				}
				else
				{
					$MasterData['data'][$ipid]['minutes_fz'] = '0';
				}
				if($_REQUEST['dbg'] == '1')
				{
					if($patDet['isdischarged'] == '1')
					{
						$disdate = date("d.m.Y", strtotime($dischargedpatarray[$patDet['ipid']]));
					}
					else
					{
						$disdate = '--';
					}

					$MasterData['data'][$ipid]['status'] = '
				admission date->' . date('d.m.Y', strtotime($patDet['admission_date'])) . '<br />
				create date->' . date('d.m.Y', strtotime($patDet['create_date'])) . '<br />
				<br />
				isdischarged = ' . $patDet['isdischarged'] . '->' . $disdate . '
				<br />
				isstandby->' . $patDet['isstandby'] . '<br />
				isstandbydelete->' . $patDet['isstandbydelete'] . '<br />
				isarchived->' . $patDet['isarchived'] . '<br />
				isdelete->' . $patDet['isdelete'] . '<br />
				';
				}
			}

			return $MasterData;
		}

		public function aktuellepatientGottingen($params)
		{
			// report_id = 174
			// report_name = Aktuelle Patienten Göttingen
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');
		
			if($activeipids)
			{
				$i = 1;
				$activeipidsarr = array();
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$activeipidsarr[]['ipid'] = $ipid;
					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}
		
				/* ----------------------- Get Patient Master Data-------------------------------- */
				$patientMasterData = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
				->from('PatientMaster p')
				->where('ipid IN (' . $ipidsactive . ') ');
				
				//ISPC-2045 - get kontact-phone
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();
		
				
				foreach($patientexec as $patient)
				{
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}
				}
		
				/* ----------------------- Get Health Insurance-------------------------------- */
				$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->where('ipid IN (' . $ipidsactive . ')');
				$Healtharray = $Health->fetchArray();
		
				foreach($Healtharray as $patient_health)
				{
					$patienthelth[$patient_health['ipid']]['number'] = $patient_health["insurance_no"];
					$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
					$patienthelth[$patient_health['ipid']]['ik'] = $patient_health["institutskennzeichen"];
					$patienthelth[$patient_health['ipid']]['kasse_nr'] = $patient_health["kvk_no"];
				}
		
				/* ----------------------- Get SAPV-------------------------------- - ISPC - 1859
				$verdoung = new SapvVerordnung();
				$verd = $verdoung->getPatientsSapvVerordnungDetails($activeipidsarr, false, true); */
				
				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
		
				/* ----------------------- Get Patient location-------------------------------- */
				$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid IN (' . $ipidsactive . ')')
				->andWhere('isdelete="0"')
				->andWhere("valid_till='0000-00-00 00:00:00'")
				->orderBy('id DESC');
				$patlocs = $patloc->execute();
		
				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}
		
						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}
		
					if(strlen($patientlocationstr) == "0"){
					    $patientlocationstr = "0";
					}
					
					$floc = Doctrine_Query::create()
					->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where("id IN (" . $patientlocationstr . ")")
					->andWhere('isdelete=0')
					->orderBy('location ASC');
					$locationdata = $floc->fetchArray();
		
					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}
		
		
					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}
		
								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
							}
						}
					}
				}
				$actual_location = $locaray[0]['location'];
				/* ----------------------- Get family doctors ids -------------------------------- */
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}
		
				/* ----------------------- Get family doctor details-------------------------------- */
				$Familydoctor = "";
				$doctorids = array_unique($doctorids);
				if (empty($doctorids)){
					$doctorids = array('999999');
				}
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->get_family_doctors_multiple($doctorids);
				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}
		
				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}
		
						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}
		
				/* ----------------------- Get disgnosis type -------------------------------- */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}
		
				/* ----------------------- Get Diagnostics-------------------------------- */
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);
		
				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
		
				/* ----------------------- Get Epids -------------------------------- */
				$epidipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();
		
				$x = 1;
				foreach($epidarr as $epids)
				{
					$patient_epids[] = $epids['epid'];
					$epid[$epids['ipid']] = $epids['epid'];
		
					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;
		
					$epidarray[$epids['ipid']] = $epids;
				}				
				
				/* ----------------------- Get Treated By -------------------------------- - ISPC - 1859
				$treatedbyQ = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->whereIn('epid', $patient_epids);
				$treatedbyarr = $treatedbyQ->fetchArray();
		
				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $key => $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}
						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
		
						$treatedbyarray[$treatedby['epid']][] = $treatedby['userid'];
		
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}
				foreach($treatedbyarray as $ku => $vusers)
				{
					$treatedby_arr[$ku] = array_unique($vusers);
				}
		
				//print_r($treatedby_arr);exit;
		
				$treatedbyUsersQ = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('id IN (' . $treatedbystr . ')');
		
				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();
				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
					$treatedbyUsername[$usertreated['id']] = $usertreated['id'] .'-'.$usertreated['username'];
				}
		
				foreach($treatedby_arr as $k_treated => $treatedbyy)
				{
					foreach($treatedbyy as $user)
					{
						$treatedby_users[$k_treated][] = $treatedbyUsers[$user];
						$treatedby_usr[$k_treated] = implode('<br />', $treatedby_users[$k_treated]);
					}
				}*/
		
				/* ------------------ Get nurse_service pflegedienste---------------------- */
				//get pflegedienste nurse_service
				$nursing = new PatientPflegedienste();
				$patient_nursing_arr = $nursing->get_multiple_patient_pflegedienste($activeipids);
				$patient_nursing_arr = $patient_nursing_arr['results']; //print_r($patient_nursing_arr);
				$nurse_service = array();
				foreach($patient_nursing_arr as $k => $v){
					$comma = "";
					$nurse_service[$k] = '';
					foreach($v as $x => $y){
						if($y['phone_practice'] != "") 
						{
							$nurse_service[$k] .= $comma . $y['nursing'].', '.$y['phone_practice'];
						}
						else {
							$nurse_service[$k] .= $comma . $y['nursing'];
						}
						$comma = "; <br>";
					}
				}
				/* ------------------ Get $last_contact_form ---------------------- */
				
				$pat_course = new PatientCourse();
				$excluded_cf = $pat_course->get_deleted_contactforms($activeipids, false);
						
				$contact_form_create_user = array();
				$last_contact_form = array();
				
				$cf = new ContactForms();
				$cf = $cf->get_multiple_contact_form_period($activeipids, false, $excluded_cf, 'start_date', 'DESC');
				foreach($cf as $k => $v){
					$last_contact_form[$k]['start_date'] = date('d.m.Y', strtotime($v[0]['start_date'])); 
					$last_contact_form[$k]['create_user'] = $v[0]['create_user'];
					$contact_form_create_user[] = $v[0]['create_user'];
				}
				
				$user_details = new User();
				$user_details = $user_details->getMultipleUserDetails($contact_form_create_user);
				foreach($last_contact_form as $k => $v){
					$last_contact_form[$k]['username'] = $user_details[$v['create_user']]['username'];
				}
				
				foreach($patientMasterDetails as $keypatient => $patient)
				{
					//$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'] . ' ';
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'] . ' ';
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'] . ' ';
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient]['location_name'] . '<br />' . $patlocarrayFinal[$keypatient]['location_street'] . '<br />' . $patlocarrayFinal[$keypatient]['location_zip'] . ' ' . $patlocarrayFinal[$keypatient]['location_city'];
					$MasterData['data'][$keypatient]['contact_number'] = $patientinfo[$keypatient]['kontactnumber'] . ' ';
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'] . ' ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['empty_fld'] = ' ';
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'] . ' ';
					$MasterData['data'][$keypatient]['familydoctorphone'] = $Familydoctor[$patient['familydoc_id']]['phone'] . ' ';
					/*if($verd[$keypatient]['verordnet'] > 0)  -  ISPC - 1859
					{
						$verordnet = $verd[$keypatient]['verordnet'];
						$verd_rep = array("1", "2", "3", "4");
						$verdounaray = array("B", "K", "TV", "VV");
						$MasterData['data'][$keypatient]['verordnung'] = str_replace($verd_rep, $verdounaray, $verordnet);
					}
					else
					{
						$MasterData['data'][$keypatient]['verordnung'] = 'keine';
					} */
		
					 /*$treatedby = "";
					 $inc = 1;
					 foreach ($treatedbyarray as $k_treated => $treatedbyy)
					 {
					 if ($treatedbyy['epid'] == $epidarray[$keypatient]['epid'])
					 {
					 $treatedby .= $treatedbyUsers[$treatedbyy['userid']] . ", ";
					 }
					 $i++;
					 }
					 $MasterData['data'][$keypatient]['treatedby'] = substr($treatedby, 0, -2); */
		
		
					//$MasterData['data'][$keypatient]['treatedby'] = $treatedby_usr[$epidarray[$keypatient]['epid']]; - ISPC - 1859
		/*
					$insurance_str = '';
					if(!empty($patienthelth[$keypatient]['company']))
					{
						$insurance_str = $patienthelth[$keypatient]['company'];
					}
					if(!empty($patienthelth[$keypatient]['number']))
					{
						$insurance_str .= '<br />Versicherungsnummer: ' . $patienthelth[$keypatient]['number'] . '';
					}
					if(!empty($patienthelth[$keypatient]['ik']))
					{
						$insurance_str .= '<br />IK: ' . $patienthelth[$keypatient]['ik'] . '';
					}
		
					if(!empty($patienthelth[$keypatient]['kasse_nr']))
					{
						$insurance_str .= '<br />Kassennummer: ' . $patienthelth[$keypatient]['kasse_nr'] . '';
					}
		
					$MasterData['data'][$keypatient]['healthinsurance_company'] = $insurance_str;
					*///print_r($patient_nursing_arr[$keypatient]);
					$MasterData['data'][$keypatient]['nurse_service'] = $nurse_service[$keypatient]; //"insert_nurse_service";
					$MasterData['data'][$keypatient]['last_contactform'] =  $last_contact_form[$keypatient]['start_date'] .' '. $last_contact_form[$keypatient]['username'];
				}//print_r($MasterData);die();
				return $MasterData;
			}
		}
		
		
		public function aktuellepatientDachau($params)
		{
			// report_id = 49
			// report_name = Aktuelle Patienten Dachau
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($activeipids)
			{
				$i = 1;
				$activeipidsarr = array();
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$activeipidsarr[]['ipid'] = $ipid;
					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				/* ----------------------- Get Patient Master Data-------------------------------- */
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				
				//ISPC-2045 - get kontact-phone
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();

				foreach($patientexec as $patient)
				{
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}
				}

				/* ----------------------- Get Health Insurance-------------------------------- */
				$Health = Doctrine_Query::create()
					->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
					->from('PatientHealthInsurance')
					->where('ipid IN (' . $ipidsactive . ')');
				$Healtharray = $Health->fetchArray();

				foreach($Healtharray as $patient_health)
				{
					$patienthelth[$patient_health['ipid']]['number'] = $patient_health["insurance_no"];
					$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
					$patienthelth[$patient_health['ipid']]['ik'] = $patient_health["institutskennzeichen"];
					$patienthelth[$patient_health['ipid']]['kasse_nr'] = $patient_health["kvk_no"];
				}

				/* ----------------------- Get SAPV-------------------------------- */
				$verdoung = new SapvVerordnung();
				$verd = $verdoung->getPatientsSapvVerordnungDetails($activeipidsarr, false, true);
				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )

				/* ----------------------- Get Patient location-------------------------------- */
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');
				$patlocs = $patloc->execute();

				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id IN (" . $patientlocationstr . ")")
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}


					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}

								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
							}
						}
					}
				}
				$actual_location = $locaray[0]['location'];
				/* ----------------------- Get family doctors ids -------------------------------- */
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}

				/* ----------------------- Get family doctor details-------------------------------- */
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}

				/* ----------------------- Get disgnosis type -------------------------------- */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				/* ----------------------- Get Diagnostics-------------------------------- */
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}

				/* ----------------------- Get Epids -------------------------------- */
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$patient_epids[] = $epids['epid'];
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				/* ----------------------- Get Treated By -------------------------------- */
				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->whereIn('epid', $patient_epids);
				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $key => $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}
						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;

						$treatedbyarray[$treatedby['epid']][] = $treatedby['userid'];

						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}
				foreach($treatedbyarray as $ku => $vusers)
				{
					$treatedby_arr[$ku] = array_unique($vusers);
				}

				//print_r($treatedby_arr);exit;

				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');

				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();

				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
				}

				foreach($treatedby_arr as $k_treated => $treatedbyy)
				{
					foreach($treatedbyy as $user)
					{
						$treatedby_users[$k_treated][] = $treatedbyUsers[$user];
						$treatedby_usr[$k_treated] = implode('<br />', $treatedby_users[$k_treated]);
					}
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{
					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'] . ' ';
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'] . ' ';
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'] . ' ';
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient]['location_name'] . '<br />' . $patlocarrayFinal[$keypatient]['location_street'] . '<br />' . $patlocarrayFinal[$keypatient]['location_zip'] . ' ' . $patlocarrayFinal[$keypatient]['location_city'];
					$MasterData['data'][$keypatient]['contact_number'] = $patientinfo[$keypatient]['kontactnumber'] . ' ';
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'] . ' ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['empty_fld'] = ' ';
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'] . ' ';
					$MasterData['data'][$keypatient]['familydoctorphone'] = $Familydoctor[$patient['familydoc_id']]['phone'] . ' ';
					if($verd[$keypatient]['verordnet'] > 0)
					{
						$verordnet = $verd[$keypatient]['verordnet'];
						$verd_rep = array("1", "2", "3", "4");
						$verdounaray = array("B", "K", "TV", "VV");
						$MasterData['data'][$keypatient]['verordnung'] = str_replace($verd_rep, $verdounaray, $verordnet);
					}
					else
					{
						$MasterData['data'][$keypatient]['verordnung'] = 'keine';
					}

					/* $treatedby = "";
					  $inc = 1;
					  foreach ($treatedbyarray as $k_treated => $treatedbyy)
					  {
					  if ($treatedbyy['epid'] == $epidarray[$keypatient]['epid'])
					  {
					  $treatedby .= $treatedbyUsers[$treatedbyy['userid']] . ", ";
					  }
					  $i++;
					  }
					  $MasterData['data'][$keypatient]['treatedby'] = substr($treatedby, 0, -2); */


					$MasterData['data'][$keypatient]['treatedby'] = $treatedby_usr[$epidarray[$keypatient]['epid']];

					$insurance_str = '';
					if(!empty($patienthelth[$keypatient]['company']))
					{
						$insurance_str = $patienthelth[$keypatient]['company'];
					}
					if(!empty($patienthelth[$keypatient]['number']))
					{
						$insurance_str .= '<br />Versicherungsnummer: ' . $patienthelth[$keypatient]['number'] . '';
					}
					if(!empty($patienthelth[$keypatient]['ik']))
					{
						$insurance_str .= '<br />IK: ' . $patienthelth[$keypatient]['ik'] . '';
					}

					if(!empty($patienthelth[$keypatient]['kasse_nr']))
					{
						$insurance_str .= '<br />Kassennummer: ' . $patienthelth[$keypatient]['kasse_nr'] . '';
					}

					$MasterData['data'][$keypatient]['healthinsurance_company'] = $insurance_str;
				}
				return $MasterData;
			}
		}

		public function dischargepatients($params)
		{
			// report_id = 89
			// report_name = Entlassungen
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];

			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,
				AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();

			$allfinal_str = "'000000000000',";
			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}

			if(empty($allfinal))
			{
				$allfinal[] = 'X';
			}

			/* ----------------- Get ALL client discharge methodes -------------------- */
			$dis_method = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0  and clientid="' . $logininfo->clientid . '" ');
			$dis_method_array = $dis_method->fetchArray();
			$stti_methode_str = '"0",';
			foreach($dis_method_array as $key => $val)
			{
				$discharge_methode_array[$val['id']]['name'] = $val['description'];
			}

			/* ----------------- Get ALL client discharge locations -------------------- */
			$dis_locat = Doctrine_Query::create()
				->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('DischargeLocation')
				->where('clientid="' . $logininfo->clientid . '"')
				->andWhere('isdelete = 0');
			$dis_locat_array = $dis_locat->fetchArray();

			foreach($dis_locat_array as $key => $val)
			{
				$discharge_location_array[$val['id']]['name'] = $val['location'];
			}

			/* ----------------- Get Discharged Patients in report period -------------------- */
			$dispatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->whereIn("ipid", $allfinal)
				->andWhere("(" . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ")")
				->andWhere("isdelete=0");
			$deadpatientarray = $dispatients->fetchArray();

			foreach($deadpatientarray as $key => $val)
			{
				$ipidsArray[] = $val['ipid'];
				$dischargedetails[$val['ipid']]['dischargedate'] = $val['discharge_date'];
				$dischargedetails[$val['ipid']]['dischargemethod'] = $discharge_methode_array[$val['discharge_method']]['name'];
				$dischargedetails[$val['ipid']]['dischargelocation'] = $discharge_location_array[$val['discharge_location']]['name'];
			}

			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}

			/* ----------------- Get Patients details     --------------------------- */
			$Q = Doctrine_Query::create()
				->select("*,
				AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
				convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip")
				->from('PatientMaster')
				->whereIn('ipid', $ipidsArray)
				->andWhere('isdelete = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy('admission_date DESC');
			$discharged_patients = $Q->fetchArray();

			$patient_familydoc_str = "'0',";

			foreach($discharged_patients as $patient)
			{
				$patients_ipids[$patient['ipid']] = $patient;
				$doctorids[] = $patient['familydoc_id'];
			}

			/* ------------------------- Get Epid -------------------------------- */
			$epidipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->whereIn('ipid', $ipidsArray);
			$epidarr = $epidipid->fetchArray();


			$epidstr = "'0',";
			foreach($epidarr as $epids)
			{
				$epid[$epids['ipid']] = $epids['epid'];
				$epidstr .= "'" . $epids['epid'] . "',";
				$epidarray[$epids['ipid']] = $epids;
			}
			if(empty($epidarray))
			{
				$epidarray[999999]['ipid'] = 'X';
			}
			$epidstr = substr($epidstr, 0, -1);
			/* ------------------------ Get familydoctor ----------------------------------- */

			$Familydoctor = array();
			$famdoc = new FamilyDoctor();
			$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

			foreach($familidoc as $fd_key => $fd_value)
			{
				$familydoctors[$fd_value['id']] = $fd_value;
			}

			if(count($familidoc) > 0)
			{
				foreach($familidoc as $doc)
				{
					if(strlen($doc['title']) > 0)
					{
						$Familydoctor[$doc['id']] = $doc['title'] . " ";
					}
					if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
					}

					if(strlen($doc['phone_practice']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
					}

					if(strlen($doc['street1']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
					}
					if(strlen($doc['street2']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
					}
					if(strlen($doc['zip']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['zip'] . ", ";
					}
					if(strlen($doc['city']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['city'];
					}
				}
			}

			/* ----------------------- DISPLAY MASTER DATA -------------------------------- */

			foreach($patients_ipids as $k_dipid => $v_dpatient)
			{
				$MasterData['data'][$k_dipid]['epid'] = $epidarray[$k_dipid]['epid'];
				$MasterData['data'][$k_dipid]['lastname'] = $v_dpatient['last_name'];
				$MasterData['data'][$k_dipid]['firstname'] = $v_dpatient['first_name'];
				$MasterData['data'][$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd']));
				$MasterData['data'][$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($v_dpatient['admission_date']));
				$MasterData['data'][$k_dipid]['dischargedate'] = date("d.m.Y", strtotime($dischargedetails[$k_dipid]['dischargedate']));
				$MasterData['data'][$k_dipid]['discharge_methode'] = $dischargedetails[$k_dipid]['dischargemethod'];
				$MasterData['data'][$k_dipid]['dischargelocation'] = $dischargedetails[$k_dipid]['dischargelocation'];
				$MasterData['data'][$k_dipid]['familydoctor'] = $Familydoctor[$v_dpatient['familydoc_id']];
			}
			return $MasterData;
		}

		public function treatmentinterruption($params)
		{
			// report_id = 50
			// report_name = Behandlungsunterbrechung
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];

			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("id, ipid") //ispc 1865 - fetch only the columns you need
				//->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0');
				//ispc 1865 disabled next line
				//->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			//ispc 1865 disabled next line
			//$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
	
			$allarray = $allpatient->fetchArray();

			//ISPC-1865 eliminate dead ipids that have NOT died in the hospital
			$allarray_ipid = array();
			if (!empty($allarray)) {
				$allarray_ipid =  array_column($allarray, 'ipid');
				
				$deadpatients = Doctrine_Query::create()
				->select('ipid')
				->from('PatientDeath')
				->Where('isdelete = ?' , "0")
				->andWhereIn('ipid', $allarray_ipid)
				->fetchArray();
			
				if (!empty($deadpatients)) {
					$deadpatients_ipid  =  array_column($deadpatients, 'ipid');
					$allarray_ipid = array_diff($allarray_ipid, $deadpatients_ipid);
				}
			}

			foreach($allarray_ipid as $val)
			{
				$allfinal[] = $val;
				$allfinal_str .= "'" . $val . "',";
			}
			/*
			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}
			*/
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}
			/* ----------------- Get discharge methode treatment interrupion (Stti)-------------------- */
			$dis_method = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0  and clientid="' . $logininfo->clientid . '" and (abbr = "STTI" or abbr = "stti") ');
			$dis_method_array = $dis_method->fetchArray();
			$stti_methode_str = '"0",';
			foreach($dis_method_array as $key => $val)
			{
				$stti_methode_str .= '"' . $val['id'] . '",';
			}

			$stti_methode_str = substr($stti_methode_str, 0, -1);

			/* ----------------- Get Discharged Patients in report period -------------------- */
			$dispatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ") AND (" . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ") AND isdelete=0")
				->andWhere('discharge_method IN (' . $stti_methode_str . ')  ');
			$deadpatientarray = $dispatients->fetchArray();

			foreach($deadpatientarray as $key => $val)
			{
				$ipidsArray[] = $val['ipid'];
				$dischargedate[$val['ipid']]['dischargedate'] = $val['discharge_date'];
			}

			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}

			/* ----------------- Get Patients details     --------------------------- */
			$Q = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip")
				->from('PatientMaster')
				->whereIn('ipid', $ipidsArray)
				->andWhere('isdelete = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy('admission_date DESC');
			$discharged_patients = $Q->fetchArray();

			$patient_familydoc_str = "'0',";

			foreach($discharged_patients as $patient)
			{
				$patients_ipids[$patient['ipid']] = $patient;
				$patient_familydoc_str .= "'" . $patient['familydoc_id'] . "',";
			}

			/* ------------ Get Family doctor name -------------------------------- */
			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '') AND id IN(" . substr($patient_familydoc_str, 0, -1) . ")");
			$docarray = $drop->fetchArray();

			foreach($docarray as $doctor)
			{
				$doctorarry[$doctor['id']]['familydoctor'] = $doctor['last_name'] . ', ' . $doctor['first_name'];
			}

			/* ------------------------- Get Epid -------------------------------- */
			$epidipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->whereIn('ipid', $ipidsArray);
			$epidarr = $epidipid->fetchArray();

			$epidstr = "'0',";
			foreach($epidarr as $epids)
			{
				$epid[$epids['ipid']] = $epids['epid'];
				$epidstr .= "'" . $epids['epid'] . "',";
				$epidarray[$epids['ipid']] = $epids;
			}
			if(empty($epidarray))
			{
				$epidarray[999999]['ipid'] = 'X';
			}
			$epidstr = substr($epidstr, 0, -1);

			/* ----------------------- Get Treated By -------------------------------- */
			$treatedbyQ = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('epid IN (' . $epidstr . ')');
			$treatedbyarr = $treatedbyQ->fetchArray();

			$xx = 1;
			if($treatedbyarr)
			{
				foreach($treatedbyarr as $treatedby)
				{
					if($xx != count($treatedbyarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
					$treatedbyarray[] = $treatedby;
					$xx++;
				}
			}
			else
			{
				$treatedbystr = '"xxx"';
			}
			$treatedbyUsersQ = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('id IN (' . $treatedbystr . ')');
			$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();
			foreach($treatedbyUsersarr as $usertreated)
			{
				$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
			}

			foreach($patients_ipids as $k_dipid => $v_dpatient)
			{
				$MasterData['data'][$k_dipid]['epid'] = $epidarray[$k_dipid]['epid'];
				$MasterData['data'][$k_dipid]['lastname'] = $v_dpatient['last_name'];
				$MasterData['data'][$k_dipid]['firstname'] = $v_dpatient['first_name'];
				$MasterData['data'][$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd']));
				$MasterData['data'][$k_dipid]['dischargedate'] = date("d.m.Y", strtotime($dischargedate[$k_dipid]['dischargedate']));
				$MasterData['data'][$k_dipid]['familydoctor'] = $doctorarry[$v_dpatient['familydoc_id']]['familydoctor'];
				$treatedby = "";
				$inc = 1;
				foreach($treatedbyarray as $k_treated => $treatedbyy)
				{
					if($treatedbyy['epid'] == $epidarray[$k_dipid]['epid'])
					{
						$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . ", ";
					}
					$i++;
				}
				$MasterData['data'][$k_dipid]['treatedby'] = substr($treatedby, 0, -2);
			}

			return $MasterData;
		}

		public function treatmentinterruptionDeath($params)
		{
			// report_id : 52
			// report_name: Behandlungsunterbrechung verstorben
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];

			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get discharge methode treatment interrupion (Stti)-------------------- */
			$dis_method = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0  and clientid="' . $logininfo->clientid . '" and (abbr = "STTI" or abbr = "stti") ');
			$dis_method_array = $dis_method->fetchArray();
			$stti_methode_str = '"0",';
			foreach($dis_method_array as $key => $val)
			{
				$stti_methode_str .= '"' . $val['id'] . '",';
			}

			$stti_methode_str = substr($stti_methode_str, 0, -1);

			/* ----------------- Get STTI Discharged Patients in report period -------------------- */
			$discharge_stti = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ") AND isdelete=0")
				->andWhere('discharge_method IN (' . $stti_methode_str . ')');
			$discharge_sttiarray = $discharge_stti->fetchArray();

			$stti_allfinal_str = "'xxxx',";
			foreach($discharge_sttiarray as $key => $val)
			{
				$stti_allfinal_str .= "'" . $val['ipid'] . "',";
			}

			/* ----------------- Get DEAD Patients in report period -------------------- */

			$deadpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDeath p')
				->where(" ipid IN (" . substr($stti_allfinal_str, 0, -1) . ") AND (" . str_replace('%date%', 'death_date', $active_cond['date_sql']) . ") AND isdelete=0");
			$deadpatientarray = $deadpatients->fetchArray();

			foreach($deadpatientarray as $key => $val)
			{
				$ipidsArray[] = $val['ipid'];
				$deathdate[$val['ipid']]['death_date'] = $val['death_date'];
			}

			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}

			/* ----------------- Get Patients details     --------------------------- */
			$Q = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip")
				->from('PatientMaster')
				->whereIn('ipid', $ipidsArray)
				->andWhere('isdelete = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy('admission_date DESC');
			$discharged_patients = $Q->fetchArray();

			$patient_familydoc_str = "'0',";

			foreach($discharged_patients as $patient)
			{
				$patients_ipids[$patient['ipid']] = $patient;
				$patient_familydoc_str .= "'" . $patient['familydoc_id'] . "',";
			}

			/* ----------------- Get Patients discharge details     --------------------------- */
			$dispatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge')
				->whereIn('ipid', $ipidsArray)
				->andwhere("isdelete=0");
			$dispatientarray = $dispatients->fetchArray();

			foreach($dispatientarray as $key => $val)
			{
				$dischargedate[$val['ipid']]['dischargedate'] = $val['discharge_date'];
			}

			/* ------------ Get Family doctor name -------------------------------- */
			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '') AND id IN(" . substr($patient_familydoc_str, 0, -1) . ")");
			$docarray = $drop->fetchArray();

			foreach($docarray as $doctor)
			{
				$doctorarry[$doctor['id']]['familydoctor'] = $doctor['last_name'] . ', ' . $doctor['first_name'];
			}


			/* ------------------------- Get Epid -------------------------------- */
			$epidipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->whereIn('ipid', $ipidsArray);
			$epidarr = $epidipid->fetchArray();


			$epidstr = "'0',";
			foreach($epidarr as $epids)
			{
				$epid[$epids['ipid']] = $epids['epid'];
				$epidstr .= "'" . $epids['epid'] . "',";
				$epidarray[$epids['ipid']] = $epids;
			}
			if(empty($epidarray))
			{
				$epidarray[999999]['ipid'] = 'X';
			}
			$epidstr = substr($epidstr, 0, -1);

			/* ----------------------- Get Treated By -------------------------------- */
			$treatedbyQ = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('epid IN (' . $epidstr . ')');
			$treatedbyarr = $treatedbyQ->fetchArray();

			$xx = 1;
			if($treatedbyarr)
			{
				foreach($treatedbyarr as $treatedby)
				{
					if($xx != count($treatedbyarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
					$treatedbyarray[] = $treatedby;
					$xx++;
				}
			}
			else
			{
				$treatedbystr = '"xxx"';
			}
			$treatedbyUsersQ = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('id IN (' . $treatedbystr . ')');

			$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();
			foreach($treatedbyUsersarr as $usertreated)
			{
				$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
			}


			foreach($patients_ipids as $k_dipid => $v_dpatient)
			{
				$MasterData['data'][$k_dipid]['epid'] = $epidarray[$k_dipid]['epid'];
				$MasterData['data'][$k_dipid]['lastname'] = $v_dpatient['last_name'];
				$MasterData['data'][$k_dipid]['firstname'] = $v_dpatient['first_name'];
				$MasterData['data'][$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd']));
				$MasterData['data'][$k_dipid]['dischargedate'] = date("d.m.Y", strtotime($dischargedate[$k_dipid]['dischargedate']));
				$MasterData['data'][$k_dipid]['diedon'] = date("d.m.Y", strtotime($deathdate[$k_dipid]['death_date']));
				$MasterData['data'][$k_dipid]['familydoctor'] = $doctorarry[$v_dpatient['familydoc_id']]['familydoctor'];
				$treatedby = "";
				$inc = 1;
				foreach($treatedbyarray as $k_treated => $treatedbyy)
				{
					if($treatedbyy['epid'] == $epidarray[$k_dipid]['epid'])
					{
						$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . "<br />";
					}
					$i++;
				}
				$MasterData['data'][$k_dipid]['treatedby'] = substr($treatedby, 0, -6);
			}

			return $MasterData;
		}

		public function treatmentinterruptionNoDeadActive($params)
		{
			// report_id : 51
			// report_name: Behandlungsunterbrechung Nachfrage
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];

			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get ->method dead of client-------------------- */
			$Dismethod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0")
				->andwhere("clientid=" . $logininfo->clientid . "")
				->andwhere("(abbr='TOD' OR abbr='TODNA')");
			$Dismethodarray = $Dismethod->fetchArray();

			foreach($Dismethodarray as $key => $val)
			{
				$deadmth[] = $val['id'];
				$deadmth_str .= "'" . $val['id'] . "',";
			}

			if(empty($deadmth))
			{
				$deadmth[999999] = 'X';
			}

			/* ----------------- Get discharge methode treatment interrupion (Stti)-------------------- */
			$dis_method = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0  and clientid="' . $logininfo->clientid . '" and (abbr = "STTI" or abbr = "stti") ');
			$dis_method_array = $dis_method->fetchArray();
			$stti_methode_str = '"0",';
			foreach($dis_method_array as $key => $val)
			{
				$stti_methode_str .= '"' . $val['id'] . '",';
			}
			$stti_methode_str = substr($stti_methode_str, 0, -1);
			/* ----------------- Get Discharged Patients in report period -------------------- */
			$dispatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where("ipid IN (" . substr($allfinal_str, 0, -1) . ") ")
				->andwhere("discharge_method IN (" . $stti_methode_str . ") ")
				->andwhere("discharge_method NOT IN (" . substr($deadmth_str, 0, -1) . ")") // remove dead by method patients
				->andwhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andwhere("isdelete=0");
			$deadpatientarray = $dispatients->fetchArray();

			foreach($deadpatientarray as $key => $val)
			{
				$ipidsArray[] = $val['ipid'];
				$dischargedate[$val['ipid']]['dischargedate'] = $val['discharge_date'];
			}

			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}
			/* ----------------- Get Dead patients By Button     --------------------------- */
			$dead = Doctrine_Query::create()
				->select("*")
				->from('PatientDeath')
				->whereIn('ipid', $ipidsArray)
				->andWhere('isdelete = 0');
			$dead_patients = $dead->fetchArray();


			$dead_str = '"0",';
			foreach($dead_patients as $key => $val)
			{
				$dead_str .= "'" . $val['ipid'] . "',";
			}

			/* ----------------- Get Patients details     --------------------------- */
			$Q = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip")
				->from('PatientMaster')
				->whereIn('ipid', $ipidsArray)
				->andwhere("ipid NOT IN (" . substr($dead_str, 0, -1) . ")") // remove dead by button patients
				->andWhere('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy('admission_date DESC');
			$discharged_patients = $Q->fetchArray();

			$patient_familydoc_str = "'0',";

			foreach($discharged_patients as $patient)
			{
				$patients_ipids[$patient['ipid']] = $patient;
				$patient_familydoc_str .= "'" . $patient['familydoc_id'] . "',";
			}

			/* ------------ Get Family doctor name -------------------------------- */
			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '') AND id IN(" . substr($patient_familydoc_str, 0, -1) . ")");
			$docarray = $drop->fetchArray();

			foreach($docarray as $doctor)
			{
				$doctorarry[$doctor['id']]['familydoctor'] = $doctor['last_name'] . ', ' . $doctor['first_name'];
			}

			/* ------------------------- Get Epid -------------------------------- */
			$epidipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->whereIn('ipid', $ipidsArray);
			$epidarr = $epidipid->fetchArray();


			$epidstr = "'0',";
			foreach($epidarr as $epids)
			{
				$epid[$epids['ipid']] = $epids['epid'];
				$epidstr .= "'" . $epids['epid'] . "',";
				$epidarray[$epids['ipid']] = $epids;
			}
			if(empty($epidarray))
			{
				$epidarray[999999]['ipid'] = 'X';
			}
			$epidstr = substr($epidstr, 0, -1);

			/* ----------------------- Get Treated By -------------------------------- */
			$treatedbyQ = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->where('epid IN (' . $epidstr . ')');
			$treatedbyarr = $treatedbyQ->fetchArray();

			$xx = 1;
			if($treatedbyarr)
			{
				foreach($treatedbyarr as $treatedby)
				{
					if($xx != count($treatedbyarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
					$treatedbyarray[] = $treatedby;
					$xx++;
				}
			}
			else
			{
				$treatedbystr = '"xxx"';
			}
			$treatedbyUsersQ = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('id IN (' . $treatedbystr . ')');

			$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();
			foreach($treatedbyUsersarr as $usertreated)
			{
				$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'] . " " . $usertreated['last_name'] . ", " . $usertreated['first_name'];
			}


			foreach($patients_ipids as $k_dipid => $v_dpatient)
			{
				$MasterData['data'][$k_dipid]['epid'] = $epidarray[$k_dipid]['epid'];
				$MasterData['data'][$k_dipid]['lastname'] = $v_dpatient['last_name'];
				$MasterData['data'][$k_dipid]['firstname'] = $v_dpatient['first_name'];
				$MasterData['data'][$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd']));
				$MasterData['data'][$k_dipid]['dischargedate'] = date("d.m.Y", strtotime($dischargedate[$k_dipid]['dischargedate']));
				$MasterData['data'][$k_dipid]['familydoctor'] = $doctorarry[$v_dpatient['familydoc_id']]['familydoctor'];
				$treatedby = "";
				$inc = 1;
				foreach($treatedbyarray as $k_treated => $treatedbyy)
				{
					if($treatedbyy['epid'] == $epidarray[$k_dipid]['epid'])
					{
						$treatedby .= $treatedbyUsers[$treatedbyy['userid']] . "<br />";
					}
					$i++;
				}
				$MasterData['data'][$k_dipid]['treatedby'] = substr($treatedby, 0, -6);
			}

			return $MasterData;
		}

		public function patientswithvoluntary($params)
		{
			// report_id = 53
			// report_name =Ehrenamtliche Bielefeld
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];

			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			//	get all active ipids in reported period
			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			$ipidarr[] = "9999999999";
			//get patient who have workers assigned
			$get_patient_workers = Doctrine_Query::create()
				->select("*")
				->from('PatientVoluntaryworkers pv')
				->whereIn('pv.ipid', $ipidarr)
				->andWhere('pv.isdelete = "0"');
			$patient_workers = $get_patient_workers->fetchArray();

			$ipids_w_voluntary[] = '999999999999';
			$patients_with_workers[] = '999999999';
			$voluntary_ids[] = '9999999';
			if(!empty($patient_workers))
			{
				foreach($patient_workers as $k_patient => $v_patient)
				{
					$ipids_w_voluntary[] = $v_patient['ipid'];
					$patients_with_workers[$v_patient['ipid']][] = $v_patient['vwid'];
					$voluntary_ids[] = $v_patient['vwid'];
				}
			}

			//get patients details
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipids_w_voluntary)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$patients_data = $patient->fetchArray();

			//gather discharged patients
			foreach($patients_data as $kd_patient => $vd_patient)
			{
				if($vd_patient['isdischarged'] == "1")
				{
					$discharged_ipids[] = $vd_patient['ipid'];
				}
			}

			if(!empty($discharged_ipids))
			{
				//get discharged data
				$get_discharge_data = Doctrine_Query::create()
					->select("*")
					->from('PatientDischarge')
					->whereIn('ipid', $discharged_ipids);

				$discharge_data = $get_discharge_data->fetchArray();

				foreach($discharge_data as $k_dis => $v_dis)
				{
					$patient_discharge[$v_dis['ipid']] = $v_dis['discharge_date'];
				}
			}

			//get workers details
			$get_workers = Doctrine_Query::create()
				->select("id, clientid, first_name, last_name, isdelete")
				->from('Voluntaryworkers vw')
				->whereIn('vw.id', $voluntary_ids)
				->andWhere('vw.isdelete = "0"')
				->andWhere('vw.clientid="' . $clientid . '"');
			$workers_data = $get_workers->fetchArray();


			$workers_details[] = '9999999999';
			foreach($workers_data as $k_worker => $v_worker)
			{
				$workers_details[$v_worker['id']] = $v_worker;
			}

			//loop through the patients with voluntary assigned
			foreach($patients_data as $k_patient => $v_patient)
			{
				$MasterData['data'][$v_patient['ipid']]['epid'] = strtoupper($v_patient['EpidIpidMapping']['epid']);
				$MasterData['data'][$v_patient['ipid']]['lastname'] = $v_patient['last_name'];
				$MasterData['data'][$v_patient['ipid']]['firstname'] = $v_patient['first_name'];
				$MasterData['data'][$v_patient['ipid']]['birthd'] = date("d.m.Y", strtotime($v_patient['birthd']));
				$MasterData['data'][$v_patient['ipid']]['admissiondate'] = date("d.m.Y", strtotime($v_patient['admission_date']));

				if($v_patient['isdischarged'] == "1")
				{
					$MasterData['data'][$v_patient['ipid']]['dischargedate'] = date("d.m.Y", strtotime($patient_discharge[$v_patient['ipid']]));
				}
				else
				{
					$MasterData['data'][$v_patient['ipid']]['dischargedate'] = '-';
				}

				foreach($patients_with_workers[$v_patient['ipid']] as $kp_worker => $vp_worker)
				{
					$curent_worker_details = $workers_details[$vp_worker];
					$patient_workers_name[$v_patient['ipid']][] = $curent_worker_details['last_name'] . ', ' . $curent_worker_details['first_name'];
				}
				$MasterData['data'][$v_patient['ipid']]['voluntaryworker'] = implode(', ', $patient_workers_name[$v_patient['ipid']]);
			}

			return $MasterData;
		}

		public function readmitedpatients($params)
		{
			// report_id = 54
			// report_name = Wieder aufgenommen
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$s = array('%date_start%', '%date_end%');
			$r = array('`date`', '`date`');

			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$clientIpids = $this->getAllClientPatients($logininfo->clientid, $whereepid);
			$clientPatientsIpids[] = "9999999999";

			$clientPatientsIpids[] = '9999999';
			foreach($clientIpids as $patient)
			{
				$clientPatientsIpids[] = $patient['ipid'];
			}


			//get ipids with readmission date between the reported period
			$get_readm_patients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->where('date_type = "1"')
				->andWhere('' . str_replace($s, $r, $active_cond['interval_sql']) . '')
				->whereIn('ipid', $clientPatientsIpids)
				->groupBy('ipid')
				->orderBy('date DESC');
			$readm_patients_data = $get_readm_patients->fetchArray();
			$readm_ipids[] = '9999999999';
			foreach($readm_patients_data as $k_rpat => $v_rpat)
			{
				$readm_ipids[] = $v_rpat['ipid'];
			}


			$readm_ipids = array_unique($readm_ipids);
			//get patients master data
			$patientMasterData = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, e.epid as patepid")
				->from('PatientMaster p')
				->whereIn('ipid', $readm_ipids);
			$patientMasterData->leftJoin("p.EpidIpidMapping e");
			$patientMasterData->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$pmarr = $patientMasterData->fetchArray();
			//PATIENT MASTER DATA ARR
			foreach($pmarr as $patient)
			{
				$patientMasterArray[$patient['ipid']] = $patient;
			}

			//PATIENT READM DATA

			$readmission_dates = new PatientReadmission();

			$admisiondatesarray = $readmission_dates->getPatientReadmission($readm_ipids, "1");
			$dischargedatesarray = $readmission_dates->getPatientReadmission($readm_ipids, "2");
			foreach($admisiondatesarray as $k_adm => $v_adm)
			{
				$patient_admissions[$v_adm['ipid']][] = $v_adm['date'];
			}

			foreach($dischargedatesarray as $k_dis => $v_dis)
			{
				$patient_discharges[$v_dis['ipid']][] = $v_dis['date'];
			}


			foreach($patient_admissions as $ipid => $pat_adm)
			{
				$nr_admissions = count($pat_adm);
				if($nr_admissions > "1") //exclude those who have only one entry in PR(admitted not readmited)
				{
					foreach($pat_adm as $k_admission => $v_admision)
					{

						if($k_admission > '0') //skip first admision date
						{
							foreach($reportPeriod['start'] as $k_start => $v_start)
							{
								if(Pms_CommonData::isintersected(strtotime($v_admision), strtotime($v_admision), strtotime($v_start), strtotime($reportPeriod['end'][$k_start])))
								{
									$final_patient_data[$ipid]['adm'][$k_admission] = date('d.m.Y', strtotime($v_admision));

									if(!empty($patient_discharges[$ipid][$k_admission]))
									{
										$final_patient_data[$ipid]['dis'][$k_admission] = date('d.m.Y', strtotime($patient_discharges[$ipid][$k_admission]));
									}
									else
									{
										$final_patient_data[$ipid]['dis'][$k_admission] = "-";
									}
								}
							}
						}
					}
				}
			}

			//MASTER DATA
			foreach($final_patient_data as $ipid => $v_patient)
			{

				$MasterData['data'][$ipid]['epid'] = strtoupper($patientMasterArray[$ipid]['patepid']);
				$MasterData['data'][$ipid]['lastname'] = $patientMasterArray[$ipid]['last_name'];
				$MasterData['data'][$ipid]['firstname'] = $patientMasterArray[$ipid]['first_name'];
				$MasterData['data'][$ipid]['birthd'] = date("d.m.Y", strtotime($patientMasterArray[$ipid]['birthd']));
				$MasterData['data'][$ipid]['dischargedate'] = $v_patient['dis'];
				$MasterData['data'][$ipid]['admissiondate'] = $v_patient['adm'];
			}

			return $MasterData;
		}

		public function vollversorgung_wl($params)
		{
			// report_id = 55
			// report_name = Vollversorgung WL
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$all = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$all = $this->getClientPatients($clientid, $whereepid);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}
			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}
			if($_REQUEST['dbg'] == '1')
			{
				var_dump($ipids);
				exit;
			}
			/* -------------------------- Get patients that have Vollversorgung  in periode (the Vollversorgung started from Anlage 4 WL)------------------------------------ */
			$voll_add = Doctrine_Query::create()
				->select("p.ipid as theipid, p.date AS date_start, id")
				->addSelect("if((SELECT r.date FROM VollversorgungHistory r WHERE r.date_type = 2 and r.date >= p.date and p.ipid=r.ipid order by r.date ASC limit 1) <> '' ,(SELECT z.date FROM VollversorgungHistory z WHERE z.date_type = 2 and z.date >= p.date and p.ipid=z.ipid order by z.date ASC limit 1),'" . date('Y-m-d H:i:s') . "') as date_end, if((SELECT x.date FROM VollversorgungHistory x WHERE x.date_type = 2 and x.date >= p.date and p.ipid=x.ipid order by x.date ASC limit 1) <> '' , 1, 0) as real_end_date")
				->from("VollversorgungHistory p")
				->whereIn('p.ipid', $ipidarr)
				->andWhere('p.date_type = 1')
				->having(str_replace('%', '', $active_cond['interval_sql']))
				->orderBy("theipid asc, date_start, date_end");
			$add_array = $voll_add->fetchArray();

			if(sizeof($add_array) > 0)
			{
				foreach($add_array as $kh => $add_pat)
				{

					$start_date = date('d.m.Y', strtotime($add_pat['date_start']));
					if($add_pat['date_end'] !== null && $add_pat['real_end_date'] != '0')
					{
						$end_date = date('d.m.Y', strtotime($add_pat['date_end']));
					}
					else
					{
						$end_date = ' -- ';
					}
					$total_patients[$add_pat['theipid']][$kh]['date_start'] = $start_date;
					$total_patients[$add_pat['theipid']][$kh]['date_end'] = $end_date;
				}
			}

			$voll_del = Doctrine_Query::create()
				->select("p.ipid as theipid, p.date AS date_start, id")
				->addSelect("if((SELECT r.date FROM VollversorgungHistory r WHERE r.date_type = 1 and r.date >= p.date and p.ipid=r.ipid order by r.date ASC limit 1) <> '' ,(SELECT z.date FROM VollversorgungHistory z WHERE z.date_type = 1 and z.date >= p.date and p.ipid=z.ipid order by z.date ASC limit 1),'" . date('Y-m-d H:i:s') . "') as date_end, if((SELECT x.date FROM VollversorgungHistory x WHERE x.date_type = 2 and x.date >= p.date and p.ipid=x.ipid order by x.date ASC limit 1) <> '' , 1, 0) as real_end_date")
				->from("VollversorgungHistory p")
				->where('p.ipid IN (' . $ipids . '"0000")')
				->andWhere('p.date_type = 2')
				->having(str_replace('%', '', $active_cond['readmission_delete_sql']))
				->orderBy("theipid asc, date_start, date_end");
			$del_array = $voll_del->fetchArray();

			if(sizeof($del_array) > 0)
			{
				foreach($del_array as $del_pat)
				{
					$thekey = array_search($del_pat['theipid'], $total_patients);
					if($thekey !== false)
					{
						unset($total_patients[$thekey]);
					}
				}
			}
			foreach($total_patients as $kh => $val)
			{
				$pat_ipids_array[] = $kh;
				$pat_ipids_str .= "'" . $kh . "',";
			}
			if(count($pat_ipids_array) == 0)
			{
				$pat_ipids_array['0000'] = '000000';
			}
			/* --------------------------------------------------------------------------------------------------------------------------------------------------- */
			$patient = Doctrine_Query::create()
				->select("p.*, e.*, e.epid as theepid,p.ipid as theipid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->leftJoin("p.EpidIpidMapping e")
				->whereIN("p.ipid ", $pat_ipids_array)
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$patientarr = $patient->fetchArray();

			$i = 0;
			foreach($patientarr as $key_patient => $patient_item)
			{
				$birthd = date("d.m.Y", strtotime($patient_item['birthd']));
				$MasterData['data'][$patient_item['theipid']]['epid'] = $patient_item['theepid'];
				$MasterData['data'][$patient_item['theipid']]['firstname'] = $patient_item["first_name"];
				$MasterData['data'][$patient_item['theipid']]['lastname'] = $patient_item['last_name'];
				$MasterData['data'][$patient_item['theipid']]['birthd'] = $birthd;
				foreach($total_patients[$patient_item['theipid']] as $sapv_key => $sapv_detail)
				{
					$MasterData['data'][$patient_item['theipid']]['sapv'][$sapv_key]['sapv_startdate'] = $sapv_detail['date_start'];
					$MasterData['data'][$patient_item['theipid']]['sapv'][$sapv_key]['sapv_enddate'] = $sapv_detail['date_end'];
				}
			}
			return $MasterData;
		}

		private function direct_billing_healthinsurance($params)
		{
			// report_id = 57
			// report_name = Direktabrechnung Krankenkasse
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$active = array();
			$dead = array();

			$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			if($includearr['dead'] == 1)
			{
				$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
			}
			if(!is_array($active))
			{
				$active = array();
			}
			if(!is_array($dead))
			{
				$dead = array();
			}
			$ipidarr = array_merge($active, $dead);

			$ipid_str = "'0',";
			foreach($ipidarr as $ipid)
			{
				$ipid_str .= "'" . $ipid . "',";
			}

			$actpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex, e.epid as patepid")
				->from('PatientMaster p');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$actpatient->leftJoin("PatientHealthInsurance h");
			$actpatient->andWhere('h.ipid = p.ipid and h.direct_billing = 1 AND p.ipid IN (' . substr($ipid_str, 0, -1) . ')');
			$actpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$actpatients = $actpatient->fetchArray();

			$activeipids = "'0',";
			foreach($actpatients as $patient)
			{
				$activeipids .= "'" . $patient['ipid'] . "',";
				$activeipidsarr[] = $patient['ipid'];
			}
			$activeipids = substr($activeipids, 0, -1);

			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->where('ipid IN (' . $activeipids . ')');
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['number'] = $patient_health["insurance_no"];
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
				$patienthelth[$patient_health['ipid']]['ik'] = $patient_health["institutskennzeichen"];
				$patienthelth[$patient_health['ipid']]['kasse_nr'] = $patient_health["kvk_no"];
			}

			/* ----------------------- Get Client discharge method dead-------------------------------- */
			$dis = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr='TOD' OR abbr='TODNA')");
			$disarray = $dis->fetchArray();

			$todid = "'X',";
			foreach($disarray as $dis)
			{
				$todid .= "'" . $dis['id'] . "',";
			}
			$todid = substr($todid, 0, -1);

			/* ----------------------- Get Dead by discharge  Patients -------------------------------- */
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->where('ipid in (' . $activeipids . ') and discharge_method IN (' . $todid . ') ');
			$disipidarray = $dispat->fetchArray();

			foreach($disipidarray as $dis_tod)
			{
				$patient_deadeon[$dis_tod['ipid']]['diedon'] = date("d.m.Y", strtotime($dis_tod["discharge_date"]));
			}

			foreach($actpatients as $activepatient)
			{
				$MasterData['data'][$activepatient['ipid']]['epid'] = $activepatient['patepid'];
				$MasterData['data'][$activepatient['ipid']]['lastname'] = $activepatient['last_name'];
				$MasterData['data'][$activepatient['ipid']]['firstname'] = $activepatient['first_name'];
				$MasterData['data'][$activepatient['ipid']]['birthd'] = date("d.m.Y", strtotime($activepatient['birthd']));

				if(!empty($patient_deadeon[$activepatient['ipid']]['diedon']))
				{
					$MasterData['data'][$activepatient['ipid']]['died_on'] = $patient_deadeon[$activepatient['ipid']]['diedon'];
				}
				elseif(!empty($patient_deatheon[$activepatient['ipid']]['diedon']))
				{
					$MasterData['data'][$activepatient['ipid']]['died_on'] = $patient_deatheon[$activepatient['ipid']]['diedon'];
				}
				else
				{
					$MasterData['data'][$activepatient['ipid']]['died_on'] = "-";
				}
				$insurance_str = '';
				if(!empty($patienthelth[$activepatient['ipid']]['company']))
				{
					$insurance_str = $patienthelth[$activepatient['ipid']]['company'];
				}
				if(!empty($patienthelth[$activepatient['ipid']]['number']))
				{
					$insurance_str .= '<br />Versicherungsnummer: ' . $patienthelth[$activepatient['ipid']]['number'] . '';
				}
				if(!empty($patienthelth[$activepatient['ipid']]['ik']))
				{
					$insurance_str .= '<br />IK: ' . $patienthelth[$activepatient['ipid']]['ik'] . '';
				}

				if(!empty($patienthelth[$activepatient['ipid']]['kasse_nr']))
				{
					$insurance_str .= '<br />Kassennummer: ' . $patienthelth[$activepatient['ipid']]['kasse_nr'] . '';
				}

				$MasterData['data'][$activepatient['ipid']]['healthinsurance_case'] = $insurance_str;
			}
			return $MasterData;
		}

		public function admitedpatients($params)
		{
			// report_id = 58
			// report_name = Erst-Aufnahmen
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$s = array('%date_start%', '%date_end%');
			$r = array('`date`', '`date`');

			
			$whereepid = $this->getDocCondition();
			
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$clientIpids = $this->getAllClientPatients($clientid, $whereepid,true);
// 			$clientPatientsIpids[] = "9999999999";

// 			$clientPatientsIpids[] = '9999999';
			$clientPatientsIpids = array();
			foreach($clientIpids as $patient)
			{
				$clientPatientsIpids[] = $patient['ipid'];
			}

			
			//get patients master data
			if ( ! empty($clientPatientsIpids)) {
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, e.epid as patepid")
					->from('PatientMaster p')
					->whereIn('ipid', $clientPatientsIpids);
				$patientMasterData->leftJoin("p.EpidIpidMapping e");
				$patientMasterData->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
				$pmarr = $patientMasterData->fetchArray();
			}
			//PATIENT MASTER DATA ARR
			$patientMasterArray = array();
			foreach($pmarr as $patient)
			{
				$patientMasterArray[$patient['ipid']] = $patient;
			}
			//OLD+NEW PATIENTS (with/without entry in readmission!)
			$treated_days = array();
			if ( ! empty($clientPatientsIpids)) {
				$pm = new PatientMaster();
				$treated_days = $pm->getTreatedDaysRealMultiple($clientPatientsIpids);
			}
			foreach($treated_days as $k_ipid => $v_patient)
			{
				if(!empty($v_patient['admissionDates']))
				{
					//get from admisison
					if(count($v_patient['admissionDates']) >= '1')
					{
						$patient_admissions[$k_ipid][] = $v_patient['admissionDates'][0];
					}

					if(!empty($v_patient['dischargeDates'][0]))
					{
						$patient_discharges[$k_ipid][] = $v_patient['dischargeDates'][0];
					}
					else
					{
						$patient_discharges[$k_ipid][] = '-';
					}
				}
				else
				{
					//get old data
					$patient_admissions[$k_ipid][] = $v_patient['admission_date'];
					$patient_discharges[$k_ipid][] = $v_patient['discharge_date'];
				}
			}



			foreach($patient_admissions as $ipid => $pat_adm)
			{
				$nr_admissions = count($pat_adm);
				if($nr_admissions >= "1") //exclude those who have more than one entry in PR(readmitted not admited)
				{
					foreach($pat_adm as $k_admission => $v_admision)
					{
						foreach($reportPeriod['start'] as $k_start => $v_start)
						{



							if(Pms_CommonData::isintersected(strtotime($v_admision['date']), strtotime($v_admision['date']), strtotime($v_start), strtotime($reportPeriod['end'][$k_start] . ' 23:59:59')))
							{
								$final_patient_data[$ipid]['adm'][$k_admission] = date('d.m.Y', strtotime($v_admision['date']));

								if($patient_discharges[$ipid][$k_admission]['date'] != '-')
								{
									$final_patient_data[$ipid]['dis'][$k_admission] = date('d.m.Y', strtotime($patient_discharges[$ipid][$k_admission]['date']));
								}
								else
								{
									$final_patient_data[$ipid]['dis'][$k_admission] = "-";
								}
							}
							else
							{
								
							}
						}
					}
				}
			}
			//MASTER DATA
			foreach($final_patient_data as $kp_ipid => $val_patient)
			{

				$MasterData['data'][$kp_ipid]['epid'] = strtoupper($patientMasterArray[$kp_ipid]['patepid']);
				$MasterData['data'][$kp_ipid]['lastname'] = $patientMasterArray[$kp_ipid]['last_name'];
				$MasterData['data'][$kp_ipid]['firstname'] = $patientMasterArray[$kp_ipid]['first_name'];
				$MasterData['data'][$kp_ipid]['birthd'] = date("d.m.Y", strtotime($patientMasterArray[$kp_ipid]['birthd']));
				$MasterData['data'][$kp_ipid]['admissiondate'] = $val_patient['adm'];
				$MasterData['data'][$kp_ipid]['dischargedate'] = $val_patient['dis'];
			}
			return $MasterData;
		}

		public function patientsage($params)
		{
			// report_id = 59
			// report_name = Alter
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$whereepid = $this->getDocCondition();
			$s = array('%date_start%', '%date_end%');
			$r = array('`date`', '`date`');

			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$activeIpids = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			//get patients master data
			$patientMasterData = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, e.epid as patepid")
				->from('PatientMaster p')
				->whereIn('ipid', $activeIpids);
			$patientMasterData->leftJoin("p.EpidIpidMapping e");
			$patientMasterData->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$pmarr = $patientMasterData->fetchArray();

			//PATIENT MASTER DATA ARR
			foreach($pmarr as $patient)
			{
				$patientMasterArray[$patient['ipid']] = $patient;
			}
			// get discharge method for patients dead
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid = " . $clientid)
				->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
				->andwhere('isdelete = 0');
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}
			//get tod patients
			$todpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge ')
				->whereIn('ipid', $activeIpids)
				->andWhereIn('discharge_method', $dm_deadfinal)
				->andWhere('isdelete = 0');
			$todpatientarray = $todpatients->fetchArray();

			$patients_tod_date = array();
			if($todpatientarray)
			{
				foreach($todpatientarray as $key => $todpatient)
				{
					$patients_tod_date[$todpatient['ipid']] = date("Y-m-d", strtotime($todpatient['discharge_date']));
				}
			}

//print_r($patientMasterArray);exit;
			$patientmaster = new PatientMaster();

			foreach($patientMasterArray as $ipid => $pat_data)
			{
				$tod_date_patient = '';
				if(array_key_exists($ipid, $patients_tod_date))
				{
					$tod_date_patient = $patients_tod_date[$ipid];
				}
				else
				{
					$tod_date_patient = date("Y-m-d", time());
				}
				$final_patient_data[$ipid]['age'] = $patientmaster->GetAge($pat_data['birthd'], $tod_date_patient, true);
			}
			if($_REQUEST['dbg'] == "1")
			{
				print_r("\n Master data: ");
				print_r($patientMasterArray);
			}
			//MASTER DATA
			foreach($final_patient_data as $kp_ipid => $val_patient)
			{

				$MasterData['data'][$kp_ipid]['epid'] = strtoupper($patientMasterArray[$kp_ipid]['patepid']);
				$MasterData['data'][$kp_ipid]['lastname'] = $patientMasterArray[$kp_ipid]['last_name'];
				$MasterData['data'][$kp_ipid]['firstname'] = $patientMasterArray[$kp_ipid]['first_name'];
				$MasterData['data'][$kp_ipid]['birthd'] = date("d.m.Y", strtotime($patientMasterArray[$kp_ipid]['birthd']));
				$MasterData['data'][$kp_ipid]['alter'] = $val_patient['age'];
			}

			return $MasterData;
		}

		public function wlanlage7uncompleted($params)
		{
			// report_id = 60
			// report_name = Anlage 7 nicht ausgefallt

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();


			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);


			$ipids_arr = $this->getAllClientPatients($logininfo->clientid, $whereepid);

			if(empty($ipids_arr))
			{
				$ipids_array[] = 'XXX';
			}
			foreach($ipids_arr as $k_ipid => $v_ipid)
			{
				$ipids_array[] = $v_ipid['ipid'];
			}

			/* ------------------------ Get Client discharge method Dead   -------------------------------- */
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid='" . $logininfo->clientid . "'")
				->andWhere("abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN' ");
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}

			/* -------------------------Get patients DEAD BY DISCHARGE in report period--------------- */
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $ipids_array)
				->andWhereIn('discharge_method', $dm_deadfinal)
				->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andWhere("isdelete=0");
			$dead_ipidarray = $patientdis->fetchArray();

			foreach($dead_ipidarray as $dis_patient)
			{
				$valid_ipids_array[] = $dis_patient['ipid'];
			}

			if(empty($valid_ipids_array))
			{
				$valid_ipids_array[] = 'XXXX';
			}

			/* -------------------------Get  Patient details--------------- */
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->WhereIn('p.ipid', $valid_ipids_array)
				->andwhere('wlanlage7completed ="0"')
				->andWhere('isdelete = "0"')
				->andWhere('isstandby = "0"')
				->andWhere('isstandbydelete = "0"')
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$ipidarray = $patient->fetchArray();
			$patients_ipids[] = '99999999';
			foreach($ipidarray as $patient)
			{
				$patients_ipids[] = $patient['ipid'];
				$family_doctors[] = $patient['familydoc_id'];
				$patientDetails[$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
				$patientDetails[$patient['ipid']]['firstname'] = $patient['first_name'];
				$patientDetails[$patient['ipid']]['lastname'] = $patient['last_name'];
				$patientDetails[$patient['ipid']]['admissiondate'] = date('d.m.Y', strtotime($patient['admission_date']));
				$patientDetails[$patient['ipid']]['familydoc_id'] = $patient['familydoc_id'];
			}
			/* -------------------------Get  discharge  Patient details--------------- */
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $patients_ipids);
			$disipidarray = $patientdis->fetchArray();
			if(empty($family_doctors))
			{
				$family_doctors[] = 'XXXX';
			}

			/* ------------ Get Family doctor name -------------------------------- */
			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $clientid . "' AND (first_name != '' or last_name != '')")
				->andWhereIn('id', $family_doctors);
			$docarray = $drop->fetchArray();

			foreach($docarray as $doc)
			{
				if(strlen($doc['title']) > 0)
				{
					$Familydoctor[$doc['id']] = $doc['title'] . " ";
				}
				if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
				{
					$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
				}
				if(strlen($doc['street1']) > 0)
				{
					$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
				}
				if(strlen($doc['street2']) > 0)
				{
					$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
				}
				if(strlen($doc['postcode']) > 0)
				{
					$Familydoctor[$doc['id']] .= $doc['postcode'] . ", ";
				}
				if(strlen($doc['city']) > 0)
				{
					$Familydoctor[$doc['id']] .= $doc['city'] . ", ";
				}

				if(strlen($doc['phone_practice']) > 0)
				{
					$Familydoctor[$doc['id']] .= $doc['phone_practice'];
				}
			}

			foreach($docarray as $doctor)
			{
				$doctorarry[$doctor['id']]['familydoctor'] = $doctor['last_name'] . ', ' . $doctor['first_name'];
			}

			foreach($disipidarray as $dead_patient)
			{
				$patientDetails[$dead_patient['ipid']]['dischargedate'] = date('d.m.Y', strtotime($dead_patient['discharge_date']));
			}

			foreach($patientDetails as $ipid => $patDet)
			{
				$MasterData['data'][$ipid]['epid'] = $patientDetails[$ipid]['epid'];
				$MasterData['data'][$ipid]['lastname'] = $patientDetails[$ipid]['lastname'];
				$MasterData['data'][$ipid]['firstname'] = $patientDetails[$ipid]['firstname'];
				$MasterData['data'][$ipid]['admissiondate'] = $patientDetails[$ipid]['admissiondate'];
				$MasterData['data'][$ipid]['dischargedate'] = $patientDetails[$ipid]['dischargedate'];
				$MasterData['data'][$ipid]['familydoctor'] = $Familydoctor[$patientDetails[$ipid]['familydoc_id']];
			}
			return $MasterData;
		}

		public function familydoctorlistreport()
		{
			// report_id = 61
			// report_name = Hausarztliste

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$fdoctors = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where('isdelete= "0"')
				->andWhere('clientid="' . $clientid . '"')
				->andWhere("valid_till='0000-00-00' and (first_name!='' or last_name!='')")
				->andWhere('indrop = "0"');

			$results = $fdoctors->fetchArray();

			foreach($results as $key => $doctor)
			{
				$MasterData['data'][$key]['practice'] = $doctor['practice'];
				$MasterData['data'][$key]['firstname'] = $doctor['first_name'];
				$MasterData['data'][$key]['lastname'] = $doctor['last_name'];
				$MasterData['data'][$key]['title'] = $doctor['title'];
				$MasterData['data'][$key]['street1'] = $doctor['street1'];
				$MasterData['data'][$key]['street2'] = $doctor['street2'];
				$MasterData['data'][$key]['city'] = $doctor['city'];
				$MasterData['data'][$key]['zip'] = $doctor['zip'];
				$MasterData['data'][$key]['doctornumber'] = $doctor['doctornumber'];
				$MasterData['data'][$key]['practice_phone'] = $doctor['phone_practice'];
				$MasterData['data'][$key]['private_phone'] = $doctor['phone_private'];
				$MasterData['data'][$key]['fax'] = $doctor['fax'];
				$MasterData['data'][$key]['email'] = $doctor['email'];
				$MasterData['data'][$key]['medicalspeciality'] = $doctor['medical_speciality'];
			}
			return $MasterData;
		}

		public function pflegedienstlistreport()
		{
			// report_id = 62
			// report_name  = Pflegedienst-Liste
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$pflegedienst = Doctrine_Query::create()
				->select('*')
				->from('Pflegedienstes')
				->where('isdelete= "0"')
				->andWhere('clientid="' . $clientid . '"')
				->andWhere('indrop = "0"');

			$results = $pflegedienst->fetchArray();


			foreach($results as $key => $pfle)
			{
				$MasterData['data'][$key]['nursing_suspplier'] = $pfle['nursing'];
				$MasterData['data'][$key]['lastname'] = $pfle['last_name'];
				$MasterData['data'][$key]['firstname'] = $pfle['first_name'];
				$MasterData['data'][$key]['title'] = $pfle['title'];
				$MasterData['data'][$key]['street1'] = $pfle['street1'];
				$MasterData['data'][$key]['city'] = $pfle['city'];
				$MasterData['data'][$key]['zip'] = $pfle['zip'];
				$MasterData['data'][$key]['doctornumber'] = $pfle['doctornumber'];
				$MasterData['data'][$key]['phone'] = $pfle['phone_practice'];
				$MasterData['data'][$key]['emergency_phone'] = $pfle['phone_emergency'];
				$MasterData['data'][$key]['fax'] = $pfle['fax'];
				$MasterData['data'][$key]['medicalspeciality'] = $pfle['medical_speciality'];
				$MasterData['data'][$key]['email'] = $pfle['email'];
			}
			return $MasterData;
		}

		public function locationlistreport()
		{
			// report_id = 63
			// report_name = Liste Aufenthaltsorte
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$locations = Doctrine_Query::create()
				->select('*')
				->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete= "0"')
				->andWhere('client_id="' . $clientid . '"');
			$results = $locations->fetchArray();

			$lc = new Locations();
			$location_types = $lc->getLocationTypes();

			foreach($results as $key => $location)
			{
				$MasterData['data'][$key]['location'] = $location['location'];
				$MasterData['data'][$key]['locationtype'] = $location_types[$location['location_type']];
				$MasterData['data'][$key]['street'] = $location['street'];
				$MasterData['data'][$key]['city'] = $location['city'];
				$MasterData['data'][$key]['zip'] = $location['zip'];
				$MasterData['data'][$key]['phone'] = $location['phone1'];
				$MasterData['data'][$key]['mobile'] = $location['phone2'];
				$MasterData['data'][$key]['fax'] = $location['fax'];
			}
			return $MasterData;
		}

		public function pharmacylistreport()
		{
			// report_id = 64
			// report_name = Apotheke Liste
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$pharmacies = Doctrine_Query::create()
				->select('*')
				->from('Pharmacy')
				->where('isdelete= "0"')
				->andWhere('clientid="' . $clientid . '"')
				->andWhere('indrop = "0"');
			$results = $pharmacies->fetchArray();

			foreach($results as $key => $pharm)
			{
				$MasterData['data'][$key]['pharmacy'] = $pharm['pharmacy'];
				$MasterData['data'][$key]['lastname'] = $pharm['last_name'];
				$MasterData['data'][$key]['firstname'] = $pharm['first_name'];
				$MasterData['data'][$key]['street1'] = $pharm['street1'];
				$MasterData['data'][$key]['city'] = $pharm['city'];
				$MasterData['data'][$key]['zip'] = $pharm['zip'];
				$MasterData['data'][$key]['phone'] = $pharm['phone'];
				$MasterData['data'][$key]['fax'] = $pharm['fax'];
			}
			return $MasterData;
		}

		public function voluntaryworkerslistreport()
		{
			// report_id = 65
			// report_name = Ehrenamtliche Liste
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$Voluntaryworkers = Doctrine_Query::create()
				->select('*')
				->from('Voluntaryworkers')
				->where('isdelete= "0"')
				->andWhere('clientid="' . $clientid . '"')
				->andWhere('indrop = "0"');
			$results = $Voluntaryworkers->fetchArray();

			
/*
			$Voluntaryworkers = Doctrine_Query::create() +++=status
			->select('*')
			->from('Voluntaryworkers')
			->where('isdelete= "0"')
			->andWhere('clientid="' . $clientid . '"')
			->andWhere('indrop = "0"');
			$results = $Voluntaryworkers->fetchArray();
*/				
			$color_statuses = array(
					'g'=>'green',
					'y'=>'yellow',
					'r'=>'red',
					'b'=>'black'
			);
			
       $color_details = VwColorStatuses::get_vw_ids_color_statuses_filter(false,$clientid,true);
       
       foreach($color_details['statuses'] as $vw_id=>$stat ){
       	if($stat[0]['status']){
	       	$color_status[$vw_id] = $this->view->translate($color_statuses[$stat[0]['status']]);
       	} 
       }
       
//        print_r(  	$color_status); exit;
			
			$h_association = Doctrine_Query::create()
				->select('*')
				->from('Hospiceassociation')
				->where("indrop= 0 and isdelete = 0 ")
				->andWhere('clientid="' . $clientid . '"');
			$h_association_array = $h_association->fetchArray();
			foreach($h_association_array as $khas => $h_assoc_item)
			{
				$h_assoc_data[$h_assoc_item['id']] = $h_assoc_item['hospice_association'];
			}

			foreach($results as $key => $workers)
			{
				$MasterData['data'][$key]['lastname'] = $workers['last_name'];
				$MasterData['data'][$key]['firstname'] = $workers['first_name'];
				$MasterData['data'][$key]['hospice_association'] = $h_assoc_data[$workers['hospice_association']];
				$MasterData['data'][$key]['street'] = $workers['street'];
				$MasterData['data'][$key]['city'] = $workers['city'];
				$MasterData['data'][$key]['zip'] = $workers['zip'];
				$MasterData['data'][$key]['phone'] = $workers['phone'];
				$MasterData['data'][$key]['mobile'] = $workers['mobile'];
				$MasterData['data'][$key]['email'] = $workers['email'];
				$MasterData['data'][$key]['vw_status'] = $color_status[$workers['id']];
				//linie  nou 
			}
			return $MasterData;
		}

		public function kv_numberofcases($params)
		{
			// report_id  = 67
			// report_name =  KV Nordrhein - Fallzahlen
			// show a coloumn with AMMOUNT of Patients with Verordnung "Vollversorgung".
			// show a coloumn with AMMOUNT of Patients with Verordnung "Teilversorgung".
			// show a coloumn with AMMOUNT of Patients with Verordnung "Beratung"
			// show a coloumn with AMMOUNT of Patients with Verordnung "BERATUNG AND TEILVERSORGUNG" . (<-- these are not shown in the other 2 reports)
			// show the average in a sum line at end of report. show too the ammount of unique patients in that report.
			// + 5 lines:
			// Ammount of unique patients with vollversorgung
			// Ammount of unique patients with Teilversorgung
			// Ammount of unique patients with Beratung
			// Ammount of unique patients with Koordination <-- removed
			// Ammount of unique patients with Koordination and Beratung  <-- changed to BERATUNG AND TEILVERSORGUNG

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];

			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$patientMaster = new PatientMaster();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$s = array('%date_start%', '%date_end%');
			$r = array('`verordnungam`', '`verordnungbis`');

			$periodDays = array();
			foreach($period['start'] as $k_speriod => $v_speriod)
			{
				$periodDays = array_merge($periodDays, $patientMaster->getDaysInBetween($v_speriod, $period['end'][$k_speriod]));
			}

			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod ['interval_location_sql_qtz']));
			$time_interval_discharged = str_replace('%date_end%', 'discharge_date', str_replace('%date_start%', 'discharge_date', $timeperiod ['interval_sql']));

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
// 			$report_period_array[$keyd]['end'] = date ( "Y-m-d", strtotime ( $period ['end'] [$keyd] ) );
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$ipidarr = array_keys($active_patient_details); // return ipids


			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}

			/* --------------------------- Get Report period days list ---------------------------------- */
			$pm = new PatientMaster ();
			foreach($period ['start'] as $keyd => $startDate)
			{
				$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);


			/* --------------------------- Get sapv ---------------------------------- */

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('ipid', $ipidarr)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.isdelete = 0');
			$patientsapvarr_res = $patientsapv->fetchArray();

			foreach($patientsapvarr_res as $keys => $sapv)
			{

				if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv_item['verorddisabledate'] != '1970-01-01 00:00:00')
				{
					$verordisablenext = strtotime('+1 day', strtotime($patient['verorddisabledate']));
					$sapv ['verordnungbis'] = date('Y-m-d', $verordisablenext);
				}

				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);

				//construct final ipids array and debug array pt ancuta
				$verordnet = explode(",", $sapv['verordnet']);

				$vv = '';
				$vv_second = '';

				//maintain sapv order!
				if(in_array('4', $verordnet))
				{
					$vv = 'VV';
					$patientData [$sapv ['ipid']] ['VV'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
				}
				else if(in_array('1', $verordnet) && in_array('3', $verordnet))
				{
					$vv = 'BETV';
					$patientData [$sapv ['ipid']] ['BETV'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
				}
				else if(in_array('3', $verordnet) && !in_array('1', $verordnet))
				{
					$vv = 'TV';
					$patientData [$sapv ['ipid']] ['TV'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
				}
				else if(in_array('1', $verordnet) && !in_array('3', $verordnet))
				{
					$vv = 'BE';
					$patientData [$sapv ['ipid']] ['BE'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
				}
			}

			$all_patients = array();
			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days'])  // active day
							&& !in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['hospital_days_cs']) // not in hospital days
						)
						{

							if(!in_array($patientDetails [$ipid] ['epid'], $patient2sapv_day [$daysapv]['sapv_active_days']))
							{
								$patient2sapv_day [$daysapv]['sapv_active_days'] [] = $patientDetails [$ipid] ['epid'];
							}
							if(!in_array($ipid, $all_patients))
							{
								$all_patients[] = $ipid;
							}
						}
					}
				}
			}

			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['VV'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days'])  // active day
							&& !in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['hospital_days_cs']) // not in hospital days
						)
						{
							if(!in_array($daysapv, $patient_sapv_details [$ipid]['VV']))
							{
								$patient_sapv_details [$ipid]['VV'] [] = $daysapv;
							}

							if(!in_array($patientDetails [$ipid] ['epid'], $patient2sapv_day [$daysapv]['VV']))
							{
								$patient2sapv_day [$daysapv]['VV'] [] = $patientDetails [$ipid] ['epid'];
							}

							if(!in_array($patientDetails [$ipid] ['epid'], $overall_sapv ['VV']))
							{
								$overall_sapv ['VV'] [] = $patientDetails [$ipid] ['epid'];
							}
						}
					}
				}
			}
			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['BETV'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days'])  // active day
							&& !in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['hospital_days_cs']) // not in hospital days
						)
						{
							if(!in_array($daysapv, $patient_sapv_details [$ipid]['BETV']))
							{
								$patient_sapv_details [$ipid]['BETV'] [] = $daysapv;
							}

							if(!in_array($patientDetails [$ipid] ['epid'], $patient2sapv_day [$daysapv]['BETV']))
							{
								$patient2sapv_day [$daysapv]['BETV'] [] = $patientDetails [$ipid] ['epid'];
							}

							if(!in_array($patientDetails [$ipid] ['epid'], $overall_sapv ['BETV']))
							{
								$overall_sapv ['BETV'] [] = $patientDetails [$ipid] ['epid'];
							}
						}
					}
				}
			}

			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['TV'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days'])  // active day
							&& !in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['hospital_days_cs']) // not in hospital days
						)
						{
							if(!in_array($daysapv, $patient_sapv_details [$ipid]['TV']))
							{
								$patient_sapv_details [$ipid]['TV'] [] = $daysapv;
							}

							if(!in_array($patientDetails [$ipid] ['epid'], $patient2sapv_day [$daysapv]['TV']))
							{
								$patient2sapv_day [$daysapv]['TV'] [] = $patientDetails [$ipid] ['epid'];
							}

							if(!in_array($patientDetails [$ipid] ['epid'], $overall_sapv ['TV']))
							{
								$overall_sapv ['TV'] [] = $patientDetails [$ipid] ['epid'];
							}
						}
					}
				}
			}
			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['BE'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days'])  // active day
							&& !in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['hospital_days_cs']) // not in hospital days
						)
						{
							if(!in_array($daysapv, $patient_sapv_details [$ipid]['BE']))
							{
								$patient_sapv_details [$ipid]['BE'] [] = $daysapv;
							}

							if(!in_array($patientDetails [$ipid] ['epid'], $patient2sapv_day [$daysapv]['BE']))
							{
								$patient2sapv_day [$daysapv]['BE'] [] = $patientDetails [$ipid] ['epid'];
							}

							if(!in_array($patientDetails [$ipid] ['epid'], $overall_sapv ['BE']))
							{
								$overall_sapv ['BE'] [] = $patientDetails [$ipid] ['epid'];
							}
						}
					}
				}
			}



			$total_patients = count($all_patients);
			$daysNumber = sizeof($patient2sapv_day);

			foreach($finalPeriodDays as $k => $day)
			{
				$MasterData['data'][$day]['day'] = date("d.m.Y", strtotime($day));
				$MasterData['data'][$day]['epids'] = implode(', ', $patient2sapv_day[$day]['sapv_active_days']);
				$MasterData['data'][$day]['nrpatientenbe'] = count($patient2sapv_day[$day]['BE']);
				$sum_master_be += count($patient2sapv_day[$day]['BE']);

				$MasterData['data'][$day]['nrpatiententv'] = count($patient2sapv_day[$day]['TV']);
				$sum_master_tv += count($patient2sapv_day[$day]['TV']);

				$MasterData['data'][$day]['nrpatientenbetv'] = count($patient2sapv_day[$day]['BETV']);
				$sum_master_betv += count($patient2sapv_day[$day]['BETV']);

				$MasterData['data'][$day]['nrpatientenvv2'] = count($patient2sapv_day[$day]['VV']);
				$sum_master_vv += count($patient2sapv_day[$day]['VV']);
			}
			//add extra lines
			$MasterData['extra']['total_unique_patients'] = $total_patients;
			$MasterData['extra']['sum_master_be'] = round($sum_master_be / $daysNumber, 2);
			$MasterData['extra']['sum_master_tv'] = round($sum_master_tv / $daysNumber, 2);
			$MasterData['extra']['sum_master_betv'] = round($sum_master_betv / $daysNumber, 2);
			$MasterData['extra']['sum_master_vv'] = round($sum_master_vv / $daysNumber, 2);

			$MasterData['unique_patients']['beratung']['count'] = count($overall_sapv['BE']);
			$MasterData['unique_patients']['beratung']['epids'] = implode(', ', $overall_sapv['BE']);

			$MasterData['unique_patients']['teilversorgung']['count'] = count($overall_sapv['TV']);
			$MasterData['unique_patients']['teilversorgung']['epids'] = implode(', ', $overall_sapv['TV']);

			$MasterData['unique_patients']['vollversorgung']['count'] = count($overall_sapv['VV']);
			$MasterData['unique_patients']['vollversorgung']['epids'] = implode(', ', $overall_sapv['VV']);

			$MasterData['unique_patients']['betv']['count'] = count($overall_sapv['BETV']);
			$MasterData['unique_patients']['betv']['epids'] = implode(', ', $overall_sapv['BETV']);

			return $MasterData;
		}

		public function kv_numberofcases_old($params)
		{
			// report_id  = 67
			// report_name =  KV Nordrhein - Fallzahlen
			// show a coloumn with AMMOUNT of Patients with Verordnung "Vollversorgung".
			// show a coloumn with AMMOUNT of Patients with Verordnung "Teilversorgung".
			// show a coloumn with AMMOUNT of Patients with Verordnung "Beratung"
			// show a coloumn with AMMOUNT of Patients with Verordnung "BERATUNG AND TEILVERSORGUNG" . (<-- these are not shown in the other 2 reports)
			// show the average in a sum line at end of report. show too the ammount of unique patients in that report.
			// + 5 lines:
			// Ammount of unique patients with vollversorgung
			// Ammount of unique patients with Teilversorgung
			// Ammount of unique patients with Beratung
			// Ammount of unique patients with Koordination <-- removed
			// Ammount of unique patients with Koordination and Beratung  <-- changed to BERATUNG AND TEILVERSORGUNG

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];

			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			$ipidarr[] = "9999999999";

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$patientMaster = new PatientMaster();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$s = array('%date_start%', '%date_end%');
			$r = array('`verordnungam`', '`verordnungbis`');

			$periodDays = array();
			foreach($period['start'] as $k_speriod => $v_speriod)
			{
				$periodDays = array_merge($periodDays, $patientMaster->getDaysInBetween($v_speriod, $period['end'][$k_speriod]));
			}

			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod ['interval_location_sql_qtz']));
			$time_interval_discharged = str_replace('%date_end%', 'discharge_date', str_replace('%date_start%', 'discharge_date', $timeperiod ['interval_sql']));

			//Patient details
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipidarr)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$debugepidarray = $patient->fetchArray();

			foreach($debugepidarray as $dpatient)
			{
				$debugepids[$dpatient['ipid']]['epid'] = $dpatient['EpidIpidMapping']['epid'];
			}

			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid='" . $logininfo->clientid . "' AND (abbr='TOD' OR abbr='TODNA')");
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}
			//discharged without dead
			$disquery = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $ipidarr)
				->andWhere('isdelete = 0');

			$disarray = $disquery->fetchArray();

			foreach($disarray as $key => $val)
			{
				$disipidarray[$val['ipid']] = strtotime($val['discharge_date']);
			}

			//discharged with dead in reported period
			$disquery->andWhereIn('discharge_method', $dm_deadfinal);
			$disquery->andWhere('' . $time_interval_discharged . '');
			$disdeadarray = $disquery->fetchArray();

			foreach($disdeadarray as $deaddischarged)
			{
				$deadPatients[$deaddischarged['ipid']] = date("Y-m-d", strtotime($deaddischarged['discharge_date']));
			}

			//Hospital ids
			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type =1');
			$hosparray = $hospitalids->fetchArray();

			$hosparrids[] = "99999999";

			foreach($hosparray as $hospital)
			{
				$hosparrids[] = $hospital['id'];
			}

			if($_REQUEST['dbg'] == "1")
			{
				print_r("\n Hospital Ids: ");
				print_r(implode(",", $hosparrids) . "\n\n");
			}

			//Hospital locations based on hosparrids
			$locations = Doctrine_Query::create()
				->select('*, DATE(valid_from) as valid_from_headless, DATE(valid_till) as valid_till_headless, DATE(valid_till) as valid_till, DATE(valid_from) as valid_from')
				->from('PatientLocation pl')
				->whereIn('pl.location_id', $hosparrids) //arrays with hospital ids
				->andWhereIn('pl.ipid', $ipidarr) //arrays with active users in reported period
				->andWhere('pl.isdelete="0"')
				->andWhere('' . $time_interval . '')
				->orderBy('id DESC');

			if($_REQUEST['dbg'])
			{
				print_r($locations->getSqlQuery());
			}
			$locationsarr = $locations->fetchArray();

			if($_REQUEST['dbg'])
			{
				print_r("\n Time interval \n");
				print_r($time_interval);

				print_r("\n Active patients \n");
				print_r($ipidarr);

				print_r("\n Hospital Locations \n");
				print_r($locationsarr);
			}
			//Hospitals for active patients in reported period
			if(count($locationsarr) > 0)
			{
				$z = 0;
				foreach($locationsarr as $location)
				{
					if(($location['valid_till'] == date("Y-m-d") || $location['valid_till'] == "0000-00-00") && !array_key_exists($location['ipid'], $disipidarray))
					{
						$hospitalPatientsIpids[date("Y-m-d")][] = $location['ipid'];
					}

					if($location['valid_till'] == "0000-00-00")
					{
						$endDate = date("Y-m-d", strtotime("+1 day"));
					}
					else
					{
						$endDate = $location['valid_till'];
					}

					$normalHospitalDays[$location['ipid']][$z]['valid_from'] = $location['valid_from'];
					$normalHospitalDays[$location['ipid']][$z]['valid_till'] = $endDate;

					$normal_hospital_days = $patientMaster->getDaysInBetween($location['valid_from'], $endDate);
					$full_hospital_days = $patientMaster->getDaysInBetween($location['valid_from'], $endDate);
					//array with in/out hospitals
					$hospital_dates[$location['ipid']]['inhospital'][] = $location['valid_from'];
					$hospital_dates[$location['ipid']]['outhospital'][] = $location['valid_till'];


					$hospital_start_day_key = array_pop(array_reverse(array_keys($full_hospital_days)));
					$hospital_end_day_key = array_pop(array_keys($full_hospital_days));

					unset($full_hospital_days[$hospital_start_day_key]);
					unset($full_hospital_days[$hospital_end_day_key]);

					reset($full_hospital_days);
					$normalHospitalPeriodDays[$location['ipid']][] = $normal_hospital_days;
					$fullHospitalPeriodDays[$location['ipid']][] = $full_hospital_days;

					$z++;
				}
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\nHospital dates\n");
				print_r($hospital_dates);
			}
			$hospitalPatientsIpids[] = '99999999999';
			//maintain continuous hospitals timeline, if out of hosp and enters again in hosp, middle date is hospital date
			foreach($hospital_dates as $k_ipid => $v_hosp_dates)
			{
				foreach($v_hosp_dates['inhospital'] as $k_date_inhosp => $v_date_inhosp)
				{
					if(in_array($v_date_inhosp, $v_hosp_dates['outhospital']))
					{
						$continuous_dates[$k_ipid][] = $v_date_inhosp;
						//this the real limited array, rest is for debug only
						$hospitalPatientsIpids[$v_date_inhosp][] = $k_ipid;
					}
				}

				$fullHospitalPeriodDays[$k_ipid][] = $continuous_dates[$k_ipid];
				$normalHospitalPeriodDays[$k_ipid][] = $continuous_dates[$k_ipid];
			}

			//get dead in hospital patients => date=>array(ipids)
			foreach($deadPatients as $deadipid => $deadPatDate)
			{
				if(array_key_exists($deadipid, $normalHospitalDays))
				{//check if dead patient has hospital
					foreach($normalHospitalDays[$deadipid] as $locationcnt => $locationdata)
					{
						if(strtotime($deadPatDate) == strtotime($locationdata['valid_till']) && strtotime($deadPatDate) != strtotime($locationdata['valid_from']))
						{ //we have dead patient in hospital last day
							$deadInHospital[$deadPatDate][] = $deadipid;
							$fullHospitalDays[$location['ipid']]['deadInHospital'] = $deadPatDate; // debug
						}
					}
				}
			}

			//get hospital patients date=>array(ipids)
			foreach($fullHospitalPeriodDays as $patientHospitalIpid => $patientData)
			{
				foreach($patientData as $pdata)
				{

					$ts_valid_from = strtotime(current($pdata)); //curent array element(reset from above)
					$ts_valid_till = strtotime(end($pdata)); //last element of array

					foreach($periodDays as $curentDay)
					{
						$ts_curentDay_start = strtotime(date("Y-m-d 00:00:00", strtotime($curentDay)));
						$ts_curentDay_end = strtotime(date("Y-m-d 23:59:59", strtotime($curentDay)));
						if(Pms_CommonData::isintersected($ts_curentDay_start, $ts_curentDay_end, $ts_valid_from, $ts_valid_till))
						{
							$hospitalPatientsIpids[$curentDay][] = $patientHospitalIpid;
						}
					}
				}
			}
			ksort($hospitalPatientsIpids);
			$patientsReadmission = $patientMaster->getTreatedDaysRealMultiple($ipidarr, true);

			foreach($patientsReadmission as $ipid => $data)
			{
				if(count($data['admissionDates']) > 0)
				{
					foreach($data['admissionDates'] as $keyAdm => $admitedDate)
					{
						if(!empty($patientsReadmission[$ipid]['dischargeDates'][$keyAdm]['date']))
						{
							$dischargeDate = $patientsReadmission[$ipid]['dischargeDates'][$keyAdm]['date'];
						}
						else
						{
							$dischargeDate = date("d.m.Y");
						}
						$admissionsCycles[$ipid][$keyAdm]['start'] = date("d.m.Y", strtotime($admitedDate['date']));
						$admissionsCycles[$ipid][$keyAdm]['end'] = date("d.m.Y", strtotime($dischargeDate));
					}
				}
				else
				{
					$admissionsCycles[$ipid][0]['start'] = date("d.m.Y", strtotime($data['admission_date']));
					$admissionsCycles[$ipid][0]['end'] = date("d.m.Y", strtotime($data['discharge_date']));
				}
			}

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('ipid', $ipidarr)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.isdelete = 0');
			$patientsapvarr_res = $patientsapv->fetchArray();

			foreach($periodDays as $k_pd => $v_pd)
			{
				$r1start = strtotime(date("Y-m-d 00:00:00", strtotime($v_pd)));
				$r1end = strtotime(date("Y-m-d 23:59:59", strtotime($v_pd)));
				foreach($patientsapvarr_res as $sapv_res)
				{
					$r2start = strtotime($sapv_res['verordnungam']);
					$r2end = strtotime($sapv_res['verordnungbis']);

					if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
					{
						$exclude = false;

						if(count($deadInHospital) > 0)
						{
							if(array_key_exists($v_pd, $deadInHospital))
							{
								if(in_array($sapv_res['ipid'], $deadInHospital[$v_pd]))
								{
									$exclude = true;
								}
							}
						}

						if(count($hospitalPatientsIpids) > 0)
						{
							if(array_key_exists($v_pd, $hospitalPatientsIpids))
							{
								if(in_array($sapv_res['ipid'], $hospitalPatientsIpids[$v_pd]))
								{
									$exclude = true;
								}
							}
						}

						if(!$exclude)
						{
							$patientsapvarr[$v_pd][] = $sapv_res;
						}
					}
				}
			}

			if($_REQUEST['dbg'])
			{
				print_r("\nHospital \n");
				print_r($hospitalPatientsIpids);

				print_r("\nFinal array \n");
				print_r($patientsapvarr);

				print_r("\n Period Days \n");
				print_r($periodDays);

				exit;
			}

			$all_patients = array();
			foreach($patientsapvarr as $day => $patients)
			{
				foreach($patients as $p_key => $patient)
				{
					$verordisablenext = strtotime('+1 day', strtotime($patient['verorddisabledate']));
					$verordisable = strtotime(date('Y-m-d', $verordisablenext));

					if($disipidarray[$patient['ipid']])
					{
						$dischargedatenext = strtotime('+1 day', $disipidarray[$patient['ipid']]);
						$dischargedate = strtotime(date('Y-m-d', $dischargedatenext));
					}
					else
					{
						$dischargedate = false;
					}

					$verordnungbisnext = strtotime('+1 day', strtotime($patient['verordnungbis']));
					$verordnungbis = strtotime(date('Y-m-d', $verordnungbisnext));

					if($patient['status'] == "1")
					{
						if($dischargedate && $dischargedate <= $verordisable)
						{
							if($dischargedate <= $verordnungbis)
							{
								$vvcut = $dischargedate;
							}
							else
							{
								$vvcut = $verordnungbis;
							}
						}
						else
						{
							$vvcut = $verordisable;
						}
					}
					elseif($dischargedate && $dischargedate <= $verordnungbis)
					{
						$vvcut = $dischargedate;
					}
					else
					{
						$vvcut = $verordnungbis;
					}


					//construct final ipids array and debug array pt ancuta
					$verordnet = explode(",", $patient['verordnet']);

					$vv = '';
					$vv_second = '';

					//maintain sapv order!
					if(in_array('4', $verordnet))
					{
						$vv = 'VV';
					}
					else if(in_array('1', $verordnet) && in_array('3', $verordnet))
					{
						$vv = 'BETV';
					}
					else if(in_array('3', $verordnet) && !in_array('1', $verordnet))
					{
						$vv = 'TV';
					}
					else if(in_array('1', $verordnet) && !in_array('3', $verordnet))
					{
						$vv = 'BE';
					}
					else
					{
						$vv = 'OTHERS';
					}
					$vv_second = $vv;

					if($vvcut)
					{
						if($vvcut > strtotime($day))
						{
							foreach($admissionsCycles[$patient['ipid']] as $kadm => $value)
							{
								if(Pms_CommonData::isintersected(strtotime($day), strtotime($day), strtotime($value['start']), strtotime($value['end'])))
								{
									if($vv != 'OTHERS')
									{
										$patientsapvarray[$day][$vv][] = $patient['ipid'];

										$all_patients[] = $patient['ipid'];
										$patients_second_sapv[$vv_second][] = $patient['ipid'];

										$patient_epids[$day][] = strtoupper(trim($debugepids[$patient['ipid']]['epid']));
										$patient_second_epids[$vv_second][] = strtoupper(trim($debugepids[$patient['ipid']]['epid']));
									}

									$debug[$day][$vv][$patient['ipid']]['ipid'] = $patient['ipid'];
									$debug[$day][$vv][$patient['ipid']]['epid'] = $debugepids[$patient['ipid']]['epid'];
									$debug[$day][$vv][$patient['ipid']]['admissionCycles'] = $admissionsCycles[$patient['ipid']];
									$debug[$day][$vv][$patient['ipid']]['sapv'] = $patient;
								}
							}
						}
						$patientsapvarray[$day][$vv] = array_unique($patientsapvarray[$day][$vv]);
						$patient_epids[$day] = array_unique($patient_epids[$day]);
					}
					else
					{
						foreach($admissionsCycles[$patient['ipid']] as $kadm => $value)
						{
							if(Pms_CommonData::isintersected(strtotime($day), strtotime($day), strtotime($value['start']), strtotime($value['end'])))
							{

								if($vv != 'OTHERS')
								{
									$patientsapvarray[$day][$vv][] = $patient['ipid'];
									$all_patients[] = $patient['ipid'];
									$patient_epids[$day][] = strtoupper(trim($debugepids[$patient['ipid']]['epid']));

									$patients_second_sapv[$vv_second][] = $patient['ipid'];
									$patient_second_epids[$vv_second][] = strtoupper(trim($debugepids[$patient['ipid']]['epid']));
								}

								$debug[$day][$vv][$patient['ipid']]['ipid'] = $patient['ipid'];
								$debug[$day][$vv][$patient['ipid']]['epid'] = $debugepids[$patient['ipid']]['epid'];
								$debug[$day][$vv][$patient['ipid']]['admissionCycles'] = $admissionsCycles[$patient['ipid']];
								$debug[$day][$vv][$patient['ipid']]['sapv'] = $patient;
							}
						}
						$patientsapvarray[$day][$vv] = array_unique($patientsapvarray[$day][$vv]);
						$patient_epids[$day] = array_unique($patient_epids[$day]);
					}


					$patients_second_sapv[$vv_second] = array_unique($patients_second_sapv[$vv_second]);
					$patient_second_epids[$vv_second] = array_unique($patient_second_epids[$vv_second]);
					asort($patient_epids[$day]);
					asort($patient_second_epids[$vv_second]);
				}
			}

			foreach($periodDays as $k_day_period => $v_day_period)
			{
				if(!array_key_exists($v_day_period, $patientsapvarray))
				{
					$patientsapvarray[$v_day_period] = array();
				}
			}
			ksort($patientsapvarray);
			$all_patients = array_unique($all_patients);
			array_values($all_patients);

			$daysNumber = count($patientsapvarray);

			$total_patients = count($all_patients);

			foreach($patientsapvarray as $day => $patient)
			{

				$MasterData['data'][$day]['day'] = date("d.m.Y", strtotime($day));
				$MasterData['data'][$day]['epids'] = implode(', ', $patient_epids[$day]);
				$MasterData['data'][$day]['nrpatientenbe'] = count($patientsapvarray[$day]['BE']);
				$sum_master_be += count($patientsapvarray[$day]['BE']);

				$MasterData['data'][$day]['nrpatiententv'] = count($patientsapvarray[$day]['TV']);
				$sum_master_tv += count($patientsapvarray[$day]['TV']);

				$MasterData['data'][$day]['nrpatientenbetv'] = count($patientsapvarray[$day]['BETV']);
				$sum_master_betv += count($patientsapvarray[$day]['BETV']);

				$MasterData['data'][$day]['nrpatientenvv2'] = count($patientsapvarray[$day]['VV']);
				$sum_master_vv += count($patientsapvarray[$day]['VV']);
			}
			//add extra lines
			$MasterData['extra']['total_unique_patients'] = $total_patients;
			$MasterData['extra']['sum_master_be'] = round($sum_master_be / $daysNumber, 2);
			$MasterData['extra']['sum_master_tv'] = round($sum_master_tv / $daysNumber, 2);
			$MasterData['extra']['sum_master_betv'] = round($sum_master_betv / $daysNumber, 2);
			$MasterData['extra']['sum_master_vv'] = round($sum_master_vv / $daysNumber, 2);

			$MasterData['unique_patients']['beratung']['count'] = count($patients_second_sapv['BE']);
			$MasterData['unique_patients']['beratung']['epids'] = implode(', ', $patient_second_epids['BE']);

			$MasterData['unique_patients']['teilversorgung']['count'] = count($patients_second_sapv['TV']);
			$MasterData['unique_patients']['teilversorgung']['epids'] = implode(', ', $patient_second_epids['TV']);

			$MasterData['unique_patients']['vollversorgung']['count'] = count($patients_second_sapv['VV']);
			$MasterData['unique_patients']['vollversorgung']['epids'] = implode(', ', $patient_second_epids['VV']);

			$MasterData['unique_patients']['betv']['count'] = count($patients_second_sapv['BETV']);
			$MasterData['unique_patients']['betv']['epids'] = implode(', ', $patient_second_epids['BETV']);

			return $MasterData;
		}

		public function kv_admissionswithassessment($params)
		{
			// report_id = 68
			// report_name = 3) KV Nordrhein - Neuaufnahmen
			// list every patient that was ADMITTED in report period (NO standby) AND has a completed first ASSESSMENT.

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];

			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$s_adm = array('%date%');
			$r_adm = array('`admission_date`');

			$s_readm = array('%date%');
			$r_readm = array('`date`');

			$s_assessment = array('%date%');
			$r_assessment = array('`completed_date`');

			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$clientPatientsIpids[] = "9999999999";
			$clientPatientsIpids = $this->getClientPatients($logininfo->clientid, $whereepid); //this is getting patients without

			if(empty($clientPatientsIpids))
			{
				$clientPatientsIpids[] = '9999999999';
			}
			//get ipids with readmission date between the reported period
			$get_readm_patients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->where('date_type = "1"')
				->andWhere('' . str_replace($s_readm, $r_readm, $active_cond['date_sql']) . '')
				->whereIn('ipid', $clientPatientsIpids)
				->groupBy('ipid')
				->orderBy('date DESC');
			$readm_patients_data = $get_readm_patients->fetchArray();
			$readm_ipids[] = '9999999999';
			foreach($readm_patients_data as $k_rpat => $v_rpat)
			{
				$readm_ipids[] = $v_rpat['ipid'];
			}

			$all_admited_pateints = array_merge($clientPatientsIpids, $readm_ipids);
			//get ipids with admissions from admission but not with first admission in readmision table
			$get_adm_pat = Doctrine_Query::create()
				->select("*, e.epid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $clientPatientsIpids)
				->andWhere('p.isstandby=0')
				->andWhere('p.isstandby=0')
				->andWhere('p.isstandbydelete=0')
				->andWhere('' . str_replace($s_adm, $r_adm, $active_cond['date_sql']) . '')
				->orwhereIn('p.ipid', $readm_ipids)
				->leftJoin("p.EpidIpidMapping e");
			$admited_pats = $get_adm_pat->fetchArray();
			$admited_patients[] = '9999999999';
			foreach($admited_pats as $k_adm_pat => $v_adm_pat)
			{
				$admited_patients[] = $v_adm_pat['ipid'];
				$patients_details[$v_adm_pat['ipid']] = $v_adm_pat;
			}

			$get_first_assessments = Doctrine_Query::create()
				->select('*')
				->from('KvnoAssessment')
				->where('iscompleted=1')
				->andWhere('status=0')
				->andWhere(str_replace($s_assessment, $r_assessment, $active_cond['date_sql']))
				->andWhereIn('ipid', $admited_patients);
			$resulted_assessments = $get_first_assessments->fetchArray();

			if($_REQUEST['dbgx'])
			{
				print_r($active_cond);
				print_r("\n\n<br /><br />");
				print_r("\nAssessments query\n");
				print_r($get_first_assessments->getSqlQuery());
				print_r("\nAdmission Query\n");
				print_r($get_adm_pat->getSqlQuery());
				print_r("\nReadmission Query\n");
				print_r($get_readm_patients->getSqlQuery());
				print_r("\nAdmitted Patients\n");
				print_r($admited_patients);
				print_r("\nReAdmitted Patients\n");
				print_r($readm_patients_data);
				print_r("\nSQL Assessments\n");
				print_r($get_first_assessments->getSqlQuery());
				print_r("\nPeriod\n");
				print_r(str_replace($s_assessment, $r_assessment, $active_cond['interval_sql']));
				print_r("\nResulted assessments\n");
				print_r($resulted_assessments);
				print_r("Patient Details\n");
				print_r($patients_details);
			}

			foreach($resulted_assessments as $key => $patient)
			{
				$MasterData['data'][$key]['epid'] = strtoupper($patients_details[$patient['ipid']]['EpidIpidMapping']['epid']);
				$MasterData['data'][$key]['firstname'] = $patients_details[$patient['ipid']]['first_name'];
				$MasterData['data'][$key]['lastname'] = $patients_details[$patient['ipid']]['last_name'];
				$MasterData['data'][$key]['assessment_completed_date'] = date('d.m.Y', strtotime($patient['completed_date']));
			}
			return $MasterData;
		}

		public function kv_standbywithoutvv($params)
		{
			// report_id = 69
			// report_name = 4) KV Nordrhein - Standby ohne Verordnung
			// 	show the complete AMMOUNT of all STANDBY patients in report period which NEVER EVER got a Verordnung(no matter if in report period or not).
			// 	show the overall ammount of STANDBY days in the report period. (3 standby patients with a 3 day report would deliver 9 standby days)

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];

			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$clientStandbyPatientsIpids = $this->getStandbyPatients($quarterarr, $yeararr, $montharr, 'create_date');
			$clientStandbyPatientsIpids[] = "9999999999";

			$get_pat_data = Doctrine_Query::create()
				->select("*, e.epid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $clientStandbyPatientsIpids)
				->andWhere('p.isdelete=0')
				->andWhere('p.isstandbydelete=0')
				->leftJoin("p.EpidIpidMapping e");
			$pat_data = $get_pat_data->fetchArray();

			foreach($pat_data as $k_pat_data => $v_pat_data)
			{
				$patient_details[$v_pat_data['ipid']] = $v_pat_data;
			}

			$patients_sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $clientStandbyPatientsIpids);
			$patients_with_sapv_res = $patients_sapv->fetchArray();

			$patients_with_sapv[] = '9999999999';
			foreach($patients_with_sapv_res as $k_p_sapv => $v_p_sapv)
			{
				if($v_p_sapv != '9999999999')
				{
					$patients_with_sapv[] = $v_p_sapv['ipid'];
				}
			}

			$patients_without_vv = array_values(array_diff($clientStandbyPatientsIpids, $patients_with_sapv));

			$pm = new PatientMaster();
			foreach($patients_without_vv as $k_pat => $v_pat)
			{
				if($v_pat != '9999999999')
				{
					$start = $patient_details[$v_pat]['create_date'];
					if(strtotime(end($reportPeriod['end'])) >= strtotime('now'))
					{
						$end = date('d.m.Y');
					}
					else
					{
						$end = end($reportPeriod['end']);
					}
					$patients_epid[$v_pat] = strtoupper($patient_details[$v_pat]['EpidIpidMapping']['epid']);
					$patients_standby_days[$v_pat] = $pm->getDaysInBetween($start, $end, 'number');
				}
			}

			$MasterData['data'][1]['standby_no_sapv'] = $this->view->translate('patients_out_vv');
			$MasterData['data'][1]['amount'] = count($patients_without_vv);
			$MasterData['data'][1]['epids'] = implode(", ", $patients_epid);

			$MasterData['data'][2]['standby_no_sapv'] = $this->view->translate('standby_period');
			$MasterData['data'][2]['amount'] = array_sum($patients_standby_days);
			$MasterData['data'][2]['epids'] = implode(", ", $patients_epid);
			return $MasterData;
		}

		public function kv_standbywithvv($params)
		{
			// report_id = 70
			// report_name = 5) KV Nordrhein - Standby mit Verordnung
			// show the complete AMMOUNT of all STANDBY patients in report period which GOT a Verordnung later (no matter if in report period or not).
			// show the overall ammount of STANDBY days in the report period. (3 standby patients with a 3 day report would deliver 9 standby days)

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];

			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$clientStandbyPatientsIpids = $this->getStandbyPatients($quarterarr, $yeararr, $montharr, 'create_date');
			$clientStandbyPatientsIpids[] = "9999999999";

			$get_pat_data = Doctrine_Query::create()
				->select("*, e.epid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $clientStandbyPatientsIpids)
				->andWhere('p.isdelete=0')
				->andWhere('p.isstandbydelete=0')
				->leftJoin("p.EpidIpidMapping e");
			$pat_data = $get_pat_data->fetchArray();

			foreach($pat_data as $k_pat_data => $v_pat_data)
			{
				$patient_details[$v_pat_data['ipid']] = $v_pat_data;
			}

			$patients_sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $clientStandbyPatientsIpids);
			$patients_with_sapv_res = $patients_sapv->fetchArray();

			$patients_with_sapv_res[] = '9999999999';
			foreach($patients_with_sapv_res as $k_p_sapv => $v_p_sapv)
			{
				if($v_p_sapv != '9999999999')
				{
					$patients_with_sapv[] = $v_p_sapv['ipid'];
				}
			}

			$pm = new PatientMaster();
			foreach($patients_with_sapv as $k_pat => $v_pat)
			{
				if($v_pat != '9999999999')
				{
					$start = $patient_details[$v_pat]['create_date'];
					if(strtotime(end($reportPeriod['end'])) >= strtotime('now'))
					{
						$end = date('d.m.Y');
					}
					else
					{
						$end = end($reportPeriod['end']);
					}
					$patients_epid[$v_pat] = strtoupper($patient_details[$v_pat]['EpidIpidMapping']['epid']);
					$patients_standby_days[$v_pat] = $pm->getDaysInBetween($start, $end, 'number');
				}
			}

			//first line
			$MasterData['data'][1]['standby_with_sapv'] = $this->view->translate('patients_with_vv');
			$MasterData['data'][1]['amount'] = count($patients_with_sapv);

			if($patients_epid)
			{
				$MasterData['data'][1]['epids'] = implode(", ", $patients_epid);
			}
			else
			{
				$MasterData['data'][1]['epids'] = ' - ';
			}

			//second line
			$MasterData['data'][2]['patients_with_vv'] = $this->view->translate('standby_period');
			if($patients_standby_days)
			{
				$MasterData['data'][2]['amount'] = array_sum($patients_standby_days);
			}
			else
			{
				$MasterData['data'][2]['amount'] = '0';
			}

			if($patients_epid)
			{
				$MasterData['data'][2]['epids'] = implode(", ", $patients_epid);
			}
			else
			{
				$MasterData['data'][2]['epids'] = ' - ';
			}
			return $MasterData;
		}

		public function kv_maindiagnosisstats($params)
		{
			// report_id = 71
			// report_name = 6) KV Nordrhein - Hauptdiagnosen
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG ARE used for the following report
			// This report is a copy of the existing report "Hauptdiagnosen" but showing only ACTUAL MAIN DIAGNOSIS of patients which have active days in report period.

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				$ipidarr = array_merge($active, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			// get only patients that have SAPV
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			$valid_ipids_str = "'0',";
			$valid_ipids_arr[] = 'xxxx';
			foreach($valid_ipids as $key => $val_ip)
			{
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}

			$dg = new DiagnosisType();
			$diagarr = $dg->getDiagnosisTypes($logininfo->clientid, '"HD"');

			foreach($diagarr as $key => $valdiag)
			{
				$diagnosis_type .= '"' . $valdiag['id'] . '",';
			}

			$diag_pat = Doctrine_Query::create()
				->select('*, count(diagnosis_id) as sum_diagnos, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
				->from("PatientDiagnosis")
				->whereIn('ipid', $valid_ipids_arr)
				->andWhere('diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ')
				->groupBy('diagnosis_id')
				->orderBy('diagnosis_id DESC');
			$diag_patarr = $diag_pat->fetchArray();


			$i = 0;
			foreach($diag_patarr as $diag_patitem)
			{
				$data[$i]['icdprimary'] = '&nbsp;';
				$data[$i]['description'] = '&nbsp;';
				$data[$i]['tabname'] = $diag_patitem['a_tabname'];
				$data[$i]['count'] = $diag_patitem['sum_diagnos'];

				if($diag_patitem['diagnosis_id'] == '')
				{
					$diagnosis_id = 0;
				}
				else
				{
					$diagnosis_id = $diag_patitem['diagnosis_id'];
				}

				$data[$i]['diagnosis_id'] = $diagnosis_id;

				switch($diag_patitem['a_tabname'])
				{

					case 'diagnosis':
						$diagnosis_tab[] = $diagnosis_id;
						break;

					case 'diagnosis_freetext':
						$diagnosis_freetext_tab[] = $diagnosis_id;
						break;

					case 'diagnosis_icd':
						$diagnosis_icd_tab[] = $diagnosis_id;
						break;


					default:
						break;
				}

				$diagnosis_idsarray[] = $diagnosis_id;

				$i++;
			}
			if(count($diagnosis_idsarray) == 0)
			{
				$diagnosis_idsarray[] = '0';
			}

			//Patient details
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $valid_ipids_arr)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$debugepidarray = $patient->fetchArray();

			foreach($debugepidarray as $dpatient)
			{
				$debugepids[$dpatient['ipid']]['epid'] = $dpatient['EpidIpidMapping']['epid'];
			}

			$ipids_q = Doctrine_Query::create()
				->select('diagnosis_id,ipid')
				->from("PatientDiagnosis")
				->whereIn('diagnosis_id', $diagnosis_idsarray)
				->where('ipid in (' . substr($valid_ipids_str, 0, -1) . ') and diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ');
			$diagnosis_ipids_array = $ipids_q->fetchArray();

			foreach($diagnosis_ipids_array as $kh => $values)
			{
				$dg_ipids[$values['diagnosis_id']][] = $debugepids[$values['ipid']]['epid'];
			}
			// --------------------------------------------------------------------------------------

			if(sizeof($diagnosis_tab) > 0)
			{
				$diagnosis_icds = Doctrine_Query::create()
					->select("*")
					->from("Diagnosis")
					->whereIn('id', $diagnosis_idsarray);
				$diagnosis_icds_array = $diagnosis_icds->fetchArray();
				foreach($diagnosis_icds_array as $diagnosis_icd_item)
				{
					if($diagnosis_icd_item['icd_primary'] != "")
					{
						$diagnosis_icd_details_main[$diagnosis_icd_item['icd_primary']][] = $diagnosis_icd_item['id'];
					}
					else
					{
						$diagnosis_icd_details_main['primary_diagnosis'][] = $diagnosis_icd_item['id'];
					}
					$diagnosis_details[$diagnosis_icd_item['id']] = $diagnosis_icd_item;
				}
			}

			if(sizeof($diagnosis_freetext_tab) > 0)
			{
				$diagnosis_icds_text = Doctrine_Query::create()
					->select("*")
					->from("DiagnosisText")
					->whereIn('id', $diagnosis_idsarray)
					->andWhere('clientid = ' . $clientid);
				$diagnosis_icds_text_array = $diagnosis_icds_text->fetchArray();

				foreach($diagnosis_icds_text_array as $diagnosis_icd_text_item)
				{
					if($diagnosis_icd_text_item['icd_primary'] != "")
					{
						$diagnosis_icd_details_main[$diagnosis_icd_text_item['icd_primary']][] = $diagnosis_icd_text_item['id'];
					}
					else
					{
						$diagnosis_icd_details_main['primary_free'][] = $diagnosis_icd_text_item['id'];
					}
					$diagnosis_freetext_details[$diagnosis_icd_text_item['id']] = $diagnosis_icd_text_item;
				}
			}

			if(sizeof($diagnosis_icd_tab) > 0)
			{

				$icd_diagnosis = Doctrine_Query::create()
					->select("*")
					->from("DiagnosisIcd")
					->whereIn('id', $diagnosis_idsarray)
					->andWhere('clientid = ' . $clientid);
				$icd_diagnosis_array = $icd_diagnosis->fetchArray();

				foreach($icd_diagnosis_array as $icd_diagnosis_item)
				{
					if($icd_diagnosis_item['icd_primary'] != " ")
					{
						$diagnosis_icd_details_main[$icd_diagnosis_item['icd_primary']][] = $icd_diagnosis_item['id'];
					}
					else
					{
						$diagnosis_icd_details_main['primary_icd'][] = $icd_diagnosis_item['id'];
					}

					$diagnosis_icd_details[$icd_diagnosis_item['id']] = $icd_diagnosis_item;
				}
			}

			//---------------------	de optimizat
			unset($by_primary);
			unset($total_epids);
			unset($all_nonicds);
			unset($all_icds);
			unset($all_diagnosis);

			foreach($diagnosis_icd_details_main as $kyh => $dg_id)
			{
				$by_primary[$kyh] = $dg_id;
				foreach($by_primary[$kyh] as $dg_epid)
				{
					$total_epids[$kyh][] = $dg_ipids[$dg_epid];
					if($kyh == 'primary_free')
					{
						foreach($total_epids['primary_free'] as $kjx => $vlx)
						{
							foreach($vlx as $epsx)
							{
								$all_nonicds[] = $epsx;
							}
						}
					}
					elseif($kyh == 'primary_icd')
					{
						foreach($total_epids['primary_icd'] as $kjy => $vly)
						{
							foreach($vly as $epsy)
							{
								$all_icds[] = $epsy;
							}
						}
					}
					elseif($kyh == 'primary_diagnosis')
					{
						foreach($total_epids['primary_diagnosis'] as $kjz => $vlz)
						{
							foreach($vlz as $epsz)
							{
								$all_diagnosis[] = $epsz;
							}
						}
					}
					else
					{
						$total_epids[$kyh][] = $dg_ipids[$dg_epid];
					}

					foreach($total_epids[$kyh] as $kj => $vl)
					{
						foreach($vl as $eps)
						{
							$total_pr_epids[$kyh][] = $eps;
						}
					}
				}
			}
			// --------------------------------------------------------------------------------------

			$incr = "0";
			foreach($data as $key => $data_item)
			{

				switch($data_item['tabname'])
				{

					case 'diagnosis':
						if(!empty($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_details[$data_item['diagnosis_id']]['icd_primary'];
							$primary = $diagnosis_details[$data_item['diagnosis_id']]['icd_primary'];
							$epids = implode(', ', array_unique($total_pr_epids[$primary]));
						}
						else
						{
							$icd = '0';
							$primary = 'primary_diagnosis';
							$epids = implode(', ', array_unique($all_diagnosis));
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_details[$data_item['diagnosis_id']]['description'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);
						$mdata[$icd]['epids'] = $epids;
						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;


					case 'diagnosis_freetext':
						if(!empty($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary'];
							$primary = $diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary'];
							$epids = implode(', ', array_unique($total_pr_epids[$primary]));
						}
						else
						{
							$icd = '0';
							$primary = 'primary_free';
							$epids = implode(', ', array_unique($all_nonicds));
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_freetext_details[$data_item['diagnosis_id']]['free_name'];
						$mdata[$icd]['count'] = $data_item['count'] + $mdata[$icd]['count'];
						$mdata[$icd]['epids'] = $epids;

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;

					case 'diagnosis_icd':

						if(!empty($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary'];
							$primary = $diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary'];
							$epids = implode(', ', array_unique($total_pr_epids[$primary]));
						}
						else
						{
							$icd = '0';
							$primary = 'primary_icd';
							$epids = implode(', ', array_unique($all_icds));
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = trim($diagnosis_icd_details[$data_item['diagnosis_id']]['description']);
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);
						$mdata[$icd]['epids'] = $epids;

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);

						$incr++;
						break;


					default:
						break;
				}

				if(empty($mdata[$icd]['icdprimary']))
				{
					$mdata[$icd]['icdprimary'] = ' -';
				}

				if(empty($mdata[$icd]['description']))
				{
					$mdata[$icd]['description'] = ' -';
				}

				unset($data[$icd]['diagnosis_id']);
				unset($data[$icd]['tabname']);
				unset($data[$icd]['count']);
			}

			$alldata['extra']['sum'] = $total;
			$alldata['data'] = $mdata;

			return $alldata;
		}

		public function kv_sidediagnosisstats($params)
		{
			// report_id = 72
			// report_name = 7) KV Nordrhein - Nebendiagnosen
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG ARE used for the following report
			// This report is a copy of the existing report "Nebendiagnosen" but showing only ACTUAL SIDE DIAGNOSIS of patients which have active days in report period.

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);
				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}
				$ipidarr = array_merge($active, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			// get only patients that have SAPV
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			$valid_ipids_str = "'0',";
			$valid_ipids_arr[] = 'xxxx';
			foreach($valid_ipids as $key => $val_ip)
			{
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}

			$dg = new DiagnosisType();
			$diagarr = $dg->getDiagnosisTypes($logininfo->clientid, '"ND"');

			foreach($diagarr as $key => $valdiag)
			{
				$diagnosis_type .= '"' . $valdiag['id'] . '",';
			}

			$diag_pat = Doctrine_Query::create()
				->select('*, count(diagnosis_id) as sum_diagnos, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
				->from("PatientDiagnosis")
				->whereIn('ipid', $valid_ipids_arr)
				->andWhere('diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ')
				->groupBy('diagnosis_id')
				->orderBy('diagnosis_id DESC');
			$diag_patarr = $diag_pat->fetchArray();

			$i = 0;
			foreach($diag_patarr as $diag_patitem)
			{
				$data[$i]['icdprimary'] = '&nbsp;';
				$data[$i]['description'] = '&nbsp;';
				$data[$i]['tabname'] = $diag_patitem['a_tabname'];
				$data[$i]['count'] = $diag_patitem['sum_diagnos'];
				if($diag_patitem['diagnosis_id'] == '')
				{
					$diagnosis_id = 0;
				}
				else
				{
					$diagnosis_id = $diag_patitem['diagnosis_id'];
				}
				$data[$i]['diagnosis_id'] = $diagnosis_id;

				switch($diag_patitem['a_tabname'])
				{

					case 'diagnosis':
						$diagnosis_tab[] = $diagnosis_id;
						break;


					case 'diagnosis_freetext':
						$diagnosis_freetext_tab[] = $diagnosis_id;
						break;

					case 'diagnosis_icd':
						$diagnosis_icd_tab[] = $diagnosis_id;
						break;


					default:
						break;
				}

				$diagnosis_idsarray[] = $diagnosis_id;
				$i++;
			}

			if(count($diagnosis_idsarray) == 0)
			{
				$diagnosis_idsarray[] = '0';
			}

			//Patient details
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $valid_ipids_arr)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$debugepidarray = $patient->fetchArray();

			foreach($debugepidarray as $dpatient)
			{
				$debugepids[$dpatient['ipid']]['epid'] = $dpatient['EpidIpidMapping']['epid'];
			}

			$ipids_q = Doctrine_Query::create()
				->select('diagnosis_id,ipid')
				->from("PatientDiagnosis")
				->whereIn('diagnosis_id', $diagnosis_idsarray)
				->where('ipid in (' . substr($valid_ipids_str, 0, -1) . ') and diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ');
			$diagnosis_ipids_array = $ipids_q->fetchArray();

			foreach($diagnosis_ipids_array as $kh => $values)
			{
				$dg_ipids[$values['diagnosis_id']][] = $debugepids[$values['ipid']]['epid'];
			}
			// --------------------------------------------------------------------------------------
			if(sizeof($diagnosis_tab) > 0)
			{
				$diagnosis_icds = Doctrine_Query::create()
					->select("*")
					->from("Diagnosis")
					->whereIn('id', $diagnosis_idsarray);
				$diagnosis_icds_array = $diagnosis_icds->fetchArray();

				foreach($diagnosis_icds_array as $diagnosis_icd_item)
				{
					if($diagnosis_icd_item['icd_primary'] != "")
					{
						$diagnosis_icd_details_main[$diagnosis_icd_item['icd_primary']][] = $diagnosis_icd_item['id'];
					}
					else
					{
						$diagnosis_icd_details_main['primary_diagnosis'][] = $diagnosis_icd_item['id'];
					}
					$diagnosis_details[$diagnosis_icd_item['id']] = $diagnosis_icd_item;
				}
			}


			if(sizeof($diagnosis_freetext_tab) > 0)
			{
				$diagnosis_icds_text = Doctrine_Query::create()
					->select("*")
					->from("DiagnosisText")
					->whereIn('id', $diagnosis_idsarray)
					->andWhere('clientid = ' . $clientid);
				$diagnosis_icds_text_array = $diagnosis_icds_text->fetchArray();

				foreach($diagnosis_icds_text_array as $diagnosis_icd_text_item)
				{
					if($diagnosis_icd_text_item['icd_primary'] != "")
					{
						$diagnosis_icd_details_main[$diagnosis_icd_text_item['icd_primary']][] = $diagnosis_icd_text_item['id'];
					}
					else
					{
						$diagnosis_icd_details_main['primary_free'][] = $diagnosis_icd_text_item['id'];
					}
					$diagnosis_freetext_details[$diagnosis_icd_text_item['id']] = $diagnosis_icd_text_item;
				}
			}
			if(sizeof($diagnosis_icd_tab) > 0)
			{

				$icd_diagnosis = Doctrine_Query::create()
					->select("*")
					->from("DiagnosisIcd")
					->whereIn('id', $diagnosis_idsarray)
					->andWhere('clientid = ' . $clientid);
				$icd_diagnosis_array = $icd_diagnosis->fetchArray();

				foreach($icd_diagnosis_array as $icd_diagnosis_item)
				{
					if($icd_diagnosis_item['icd_primary'] != " ")
					{
						$diagnosis_icd_details_main[$icd_diagnosis_item['icd_primary']][] = $icd_diagnosis_item['id'];
					}
					else
					{
						$diagnosis_icd_details_main['primary_icd'][] = $icd_diagnosis_item['id'];
					}

					$diagnosis_icd_details[$icd_diagnosis_item['id']] = $icd_diagnosis_item;
				}
			}


			unset($by_primary);
			unset($total_epids);
			unset($all_nonicds);
			unset($all_icds);
			unset($all_diagnosis);
			foreach($diagnosis_icd_details_main as $kyh => $dg_id)
			{
				$by_primary[$kyh] = $dg_id;
				foreach($by_primary[$kyh] as $dg_epid)
				{
					if($kyh == 'primary_free')
					{
						$total_epids[$kyh][] = $dg_ipids[$dg_epid];
						foreach($total_epids['primary_free'] as $kjx => $vlx)
						{
							foreach($vlx as $epsx)
							{
								$all_nonicds[] = $epsx;
							}
						}
					}
					elseif($kyh == 'primary_icd')
					{
						$total_epids[$kyh][] = $dg_ipids[$dg_epid];
						foreach($total_epids['primary_icd'] as $kjy => $vly)
						{
							foreach($vly as $epsy)
							{
								$all_icds[] = $epsy;
							}
						}
					}
					elseif($kyh == 'primary_diagnosis')
					{
						$total_epids[$kyh][] = $dg_ipids[$dg_epid];

						foreach($total_epids['primary_diagnosis'] as $kjz => $vlz)
						{
							foreach($vlz as $epsz)
							{
								$all_diagnosis[] = $epsz;
							}
						}
					}
					else
					{
						$total_epids[$kyh][] = $dg_ipids[$dg_epid];
					}

					foreach($total_epids[$kyh] as $kj => $vl)
					{
						foreach($vl as $eps)
						{
							$total_pr_epids[$kyh][] = $eps;
						}
					}
				}
			}
			$total_noicd_epids = array_unique($total_noicd_epids);
			// --------------------------------------------------------------------------------------

			$incr = "0";
			foreach($data as $key => $data_item)
			{

				switch($data_item['tabname'])
				{

					case 'diagnosis':
						if(!empty($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_details[$data_item['diagnosis_id']]['icd_primary'];
							$primary = $diagnosis_details[$data_item['diagnosis_id']]['icd_primary'];
							$epids = implode(', ', array_unique($total_pr_epids[$primary]));
						}
						else
						{
							$icd = '0';
							$primary = 'primary_diagnosis';
							$epids = implode(', ', array_unique($all_diagnosis));
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_details[$data_item['diagnosis_id']]['description'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);
						$mdata[$icd]['epids'] = $epids;
						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;


					case 'diagnosis_freetext':
						if(!empty($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary'];
							$primary = $diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary'];
							$epids = implode(', ', array_unique($total_pr_epids[$primary]));
						}
						else
						{
							$icd = '0';
							$primary = 'primary_free';
							$epids = implode(', ', array_unique($all_nonicds));
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = $diagnosis_freetext_details[$data_item['diagnosis_id']]['free_name'];
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);
						$mdata[$icd]['epids'] = $epids;

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);
						$incr++;
						break;

					case 'diagnosis_icd':

						if(!empty($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']))
						{
							$icd = $diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary'];
							$primary = $diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary'];
							$epids = implode(', ', array_unique($total_pr_epids[$primary]));
						}
						else
						{
							$icd = '0';
							$primary = 'primary_icd';
							$epids = implode(', ', array_unique($all_icds));
						}

						$mdata[$icd]['icdprimary'] = strtoupper($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']);
						$mdata[$icd]['description'][$incr] = trim($diagnosis_icd_details[$data_item['diagnosis_id']]['description']);
						$mdata[$icd]['count'] = ($data_item['count'] + $mdata[$icd]['count']);
						$mdata[$icd]['epids'] = $epids;

						$mdata[$icd]['description'] = array_unique($mdata[$icd]['description']);

						$incr++;
						break;


					default:
						break;
				}

				if(empty($mdata[$icd]['icdprimary']))
				{
					$mdata[$icd]['icdprimary'] = ' -';
				}

				if(empty($mdata[$icd]['description']))
				{
					$mdata[$icd]['description'] = ' -';
				}

				unset($data[$icd]['diagnosis_id']);
				unset($data[$icd]['tabname']);
			}

			$alldata['extra']['sum'] = $total;
			$alldata['data'] = $mdata;

			return $alldata;
		}

		public function kv_metastasen($params)
		{
			// report_id = 73
			// report_name = KV Nordrhein - Metastasen
			// 8)ONLY PATIENTS WITH A VALID SAPV VERORDNUNG ARE used for the following report
			// check all patient with active days in report period.
			// count ammount of patients who have a ICD starting with "C"
			// Show this ammount in report as N (ammount)
			// Now search IN THESE patients for METASTASEN (the dropdowns in diagnosis screen) and show every option with AMMOUNT and % of N.

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$ipidarray = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			if(count($ipidarray) == '0')
			{
				$ipidarray[] = '99999999999';
			}

			// get only patients that have SAPV
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarray)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			foreach($valid_ipids as $k_valid_sapv => $v_valid_sapv)
			{
				$ipidarr[] = $v_valid_sapv['ipid'];
			}

			if(count($ipidarr) == '0')
			{
				$ipidarr[] = '999999999';
			}

			$cust = Doctrine_Query::create()
				->select("*,AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientDiagnosis')
				->whereIn('ipid', $ipidarr)
				->orderBy('id ASC');
			$diagarr = $cust->fetchArray();

			foreach($diagarr as $k_pat_diag => $v_pat_diag)
			{
				//all diagnosis ids from diagnosis tables
				if($v_pat_diag['diagnosis_id'] || $v_pat_diag['icd_id'])
				{
					if(!$v_pat_diag['tabname'])
					{
						$v_pat_diag['tabname'] = 'other';
					}
					$master_icd_diag[$v_pat_diag['tabname']][] = $v_pat_diag['diagnosis_id'];
					$master_icd_diag[$v_pat_diag['tabname']] = array_values(array_unique($master_icd_diag[$v_pat_diag['tabname']]));
					//map diagnosis tabname and id with ipids
					$mapped_ipid_diag[$v_pat_diag['tabname']][$v_pat_diag['ipid']][] = $v_pat_diag['diagnosis_id'];
					$mapped_ipid_diag[$v_pat_diag['tabname']][$v_pat_diag['ipid']] = array_values(array_unique($mapped_ipid_diag[$v_pat_diag['tabname']][$v_pat_diag['ipid']]));
					//map patient diagnosis id with diagnosis id (used in metastasis if only icd C% is used in meta source)
					$mapped_pdid_did[$v_pat_diag['id']][] = $v_pat_diag['diagnosis_id'];
					$mapped_pdid_did[$v_pat_diag['id']] = array_values(array_unique($mapped_pdid_did[$v_pat_diag['id']]));
				}
			}

			//process each tabname(table) and get results if icd starts with "C"
			foreach($master_icd_diag as $k_tabname => $v_tabname_ids)
			{
				if($k_tabname == 'diagnosis_freetext')
				{
					$dg = Doctrine_Query::create()
						->select('*')
						->from('DiagnosisText')
						->where('icd_primary LIKE "C%"')
						->whereIn('id', $v_tabname_ids);

					$res = $dg->fetchArray();

					foreach($res as $diag_freetext)
					{
						$allowed_diag_icd['diagnosis_freetext'][] = $diag_freetext['id'];
					}
				}
				if($k_tabname == 'diagnosis')
				{
					$dg = Doctrine_Query::create()
						->select('*')
						->from('Diagnosis')
						->where('icd_primary LIKE "C%"')
						->whereIn('id', $v_tabname_ids);

					$res = $dg->fetchArray();
					foreach($res as $diagnosis)
					{
						$allowed_diag_icd['diagnosis'][] = $diagnosis['id'];
					}
				}
				if($k_tabname == 'diagnosis_icd')
				{
					$dg = Doctrine_Query::create()
						->select('*')
						->from('DiagnosisIcd')
						->where('icd_primary LIKE "C%"')
						->whereIn('id', $v_tabname_ids);

					$res = $dg->fetchArray();

					foreach($res as $diagnosis_icd)
					{
						$allowed_diag_icd['diagnosis_icd'][] = $diagnosis_icd['id'];
					}
				}
			}


			foreach($mapped_ipid_diag['diagnosis'] as $d_ipid => $v_pat_diagnosis)
			{
				foreach($v_pat_diagnosis as $diag_id)
				{
					if(in_array($diag_id, $allowed_diag_icd['diagnosis']))
					{
						$patients_c_icd[] = $d_ipid;
					}
				}
			}


			foreach($mapped_ipid_diag['diagnosis_icd'] as $di_ipid => $v_pat_diagnosisicd)
			{
				foreach($v_pat_diagnosisicd as $diag_icd_id)
				{
					if(in_array($diag_icd_id, $allowed_diag_icd['diagnosis_icd']))
					{
						$patients_c_icd[] = $di_ipid;
					}
				}
			}


			foreach($mapped_ipid_diag['diagnosis_freetext'] as $df_ipid => $v_pat_diagnosisfree)
			{
				foreach($v_pat_diagnosisfree as $diag_free_id)
				{
					if(in_array($diag_free_id, $allowed_diag_icd['diagnosis_freetext']))
					{
						$patients_c_icd[] = $df_ipid;
					}
				}
			}

			//array with all C% icd diagnosis
			if(count($patients_c_icd) == '0')
			{
				$patients_c_icd[] = '9999999999';
			}
			$patients_c_icd = array_values(array_unique($patients_c_icd)); //ipids
			//start META DIAGNOSIS
			$master_meta = Doctrine_Query::create()
				->select('*')
				->from('DiagnosisMeta')
				->orderBy('meta_title ASC');

			$mastermeta_array = $master_meta->fetchArray();

			$meta_ids[] = '99999999999';
			foreach($mastermeta_array as $k_meta => $v_meta)
			{
				$meta_ids[] = $v_meta['id'];
				$meta_details[$v_meta['id']] = $v_meta;
			}

			$cust_meta = Doctrine_Query::create()
				->select("*")
				->from('PatientDiagnosisMeta')
				->whereIn('ipid', $patients_c_icd)
				->andWhereIn('metaid', $meta_ids)
				->andWhere('diagnoid != 0')
				->orderBy('id ASC');
			$meta_diag = $cust_meta->fetchArray();



			foreach($meta_diag as $k_pat_meta => $v_pat_meta)
			{
				foreach($mapped_pdid_did[$v_pat_meta['diagnoid']] as $key_pat_diag => $value_pat_diag)
				{
					if(in_array($value_pat_diag, $allowed_diag_icd['diagnosis']) || in_array($value_pat_diag, $allowed_diag_icd['diagnosis_icd']) || in_array($value_pat_diag, $allowed_diag_icd['diagnosis_freetext']))
					{
						$patient_metas[$v_pat_meta['metaid']][] = $v_pat_meta['ipid'];
						$all_metastasen_ipids[] = $v_pat_meta['ipid'];
					}
				}
			}

			if(empty($all_metastasen_ipids))
			{
				$all_metastasen_ipids[] = '999999999';
			}
			$all_res_ipids = array_merge($patients_c_icd, $all_metastasen_ipids);

			//get epids for all resulted patients
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $all_res_ipids)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$res_ipid_array = $patient->fetchArray();

			foreach($res_ipid_array as $r_patient)
			{
				$res_patient_detail[$r_patient['ipid']]['epid'] = strtoupper($r_patient['EpidIpidMapping']['epid']);
			}


			if($_REQUEST['dbgc'])
			{
				print_r("\nAll Patient Diagnosis\n");
				print_r($diagarr);
				print_r("\nAll diagnosis ids\n");
				print_r($master_icd_diag);

				print_r($allowed_diag_icd);
				print_r("Master Meta diagnosis\n\n");
				print_r($mastermeta_array);
				print_r("Master Meta diagnosis\n\n");
				print_r($meta_diag);
				print_r("Patient Metastasis Final alowed\n\n");
				print_r($patient_metas);
				print_r("Mapped Patient_diagnosis to diagnosis");
				print_r($mapped_pdid_did);
			}

			$MasterData['data'][1]['metastasen'] = $this->view->translate('N');
			$MasterData['data'][1]['count'] = count($patients_c_icd);
			$MasterData['data'][1]['percentage'] = ' - ';

			foreach($patients_c_icd as $patient_key => $patient_ipid)
			{
				if($patient_ipid != '9999999999')
				{
					$all_epids[] = $res_patient_detail[$patient_ipid]['epid'];
				}
			}

			asort($all_epids);
			$MasterData['data'][1]['epids'] = implode(", ", $all_epids);

			$i = 2;
			$metastasis_ipids = array();
			foreach($patient_metas as $meta_id => $meta_datas)
			{

				$MasterData['data'][$i]['metastasen'] = $meta_details[$meta_id]['meta_title'];
				$MasterData['data'][$i]['count'] = count($meta_datas);

				//calculate percent
				$divided = round((count($meta_datas) / count($patients_c_icd)), 2);
				$percent = number_format(($divided * 100), 2);
				$MasterData['data'][$i]['percentage'] = $percent . " %";

				foreach($meta_datas as $patient_meta_ipid)
				{
					$meta_epids[$meta_id][] = $res_patient_detail[$patient_meta_ipid]['epid'];
				}
				asort($meta_epids[$meta_id]);
				$MasterData['data'][$i]['epids'] = implode(", ", $meta_epids[$meta_id]);

				$metastasis_ipids = array_merge($metastasis_ipids, $meta_datas);

				$i++;
			}
			$patients_with_meta = array_values(array_unique($metastasis_ipids));

			//exclude meta patients from all_c_icd patients
			$non_meta_patients = array_values(array_unique(array_diff($patients_c_icd, $patients_with_meta)));

			$MasterData['data']['999999']['metastasen'] = $this->view->translate('keine_metastasen');
			foreach($non_meta_patients as $k_non_m_patients => $v_non_m_patients)
			{
				$nmeta_epids[] = $res_patient_detail[$v_non_m_patients]['epid'];
			}

			$MasterData['data']['999999']['count'] = count($non_meta_patients);

			$n_divided = round((count($non_meta_patients) / count($patients_c_icd)), 2);
			$n_percent = number_format(($n_divided * 100), 2);

			$MasterData['data']['999999']['percentage'] = $n_percent . " %";
			$MasterData['data']['999999']['epids'] = implode(', ', $nmeta_epids);
			return $MasterData;
		}

		public function kv_participating_vv_stats($params)
		{
			// report_id = 74
			// report_name = KV Nordrhein - Zahl der an der Versorgung beteiligter Angehöriger
			// 9)KV Nordrhein - Zahl der an der Versorgung beteiligter Angehöriger
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG ARE used for the following report
			// in Assessment is a option where user gives ammount of "an der Versorgung beteiligter Angehöriger"
			// this report shows the AVERAGE of this number of all patients (with active days in report period)

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active = array();
			$dead = array();
			$standby = array();

			if($onlyactive == 0)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}

				$ipidarr = array_merge($active, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}


			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			// get only patients that have SAPV
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			$valid_ipids_str = "'0',";
			foreach($valid_ipids as $key => $val_ip)
			{
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}
			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			//Patient details
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $valid_ipids_arr)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$debugepidarray = $patient->fetchArray();

			foreach($debugepidarray as $dpatient)
			{
				$debugepids[$dpatient['ipid']]['epid'] = $dpatient['EpidIpidMapping']['epid'];
			}

			$get_assessments = Doctrine_Query::create()
				->select("k.ipid, SUM( k.anzahl ) AS total_sum ")
				->from('KvnoAssessment k')
				->andWhereIn('k.ipid', $valid_ipids_arr)
				->groupBy('k.ipid')
				->orderBy('k.ipid');
			$resulted_assessments = $get_assessments->fetchArray();

			$total_assesments = count($resulted_assessments);

			if($total_assesments != '0')
			{
				$input_sum = 0;
				foreach($resulted_assessments as $value)
				{
					$input_sum += $value['total_sum'];
					$dg_ipids[] = $debugepids[$value['ipid']]['epid'];
				}
				$avrege = round($input_sum / $total_assesments, 2);
				$epids = implode(', ', array_unique($dg_ipids));
			}
			else
			{
				$avrege = 0;
				$epids = "--";
			}

			$MasterData['data'][1]['participating_vv_stats'] = $avrege;
			$MasterData['data'][1]['epids'] = $epids;

			if($_REQUEST['dbg'] == '1')
			{
				print_r('total number of assessments ' . $total_assesments . "<br />");
				print_r('sum of all "numbers" ' . $input_sum . "<br />");
				print_r('the AVERAGE ' . $avrege . "<br />");
				print_r('unique epids ' . $epids . "<br />");
			}

			return $MasterData;
		}

		public function kv_voluntaryworkers($params)
		{
			// report_id = 75
			// report_name = 10) KV Nordrhein - Ehrenamtliche
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG ARE WHICH GOT DISCHARGED IN REPORT PERIOD are used for the following report
			// Ammount of patient where a Ehrenamtliche with status "Ehrenamtliche" has made a visit / % of patients
			// Ammount of patient where a Ehrenamtliche with status "Koordinator" has made a visit / % of patients
			// List of patients
			// Surname, Firstname, which Koordinator was assigned, first visit of ehrenamtliche, which Ehrenamtliche (can be multiple) , Date of death, Health insurance, DoB, Discharge method, Hospizverein of KOORDINATOR

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
			}
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get only patients that have SAPV -------------------- */
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $allfinal)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();
			$valid_ipids_str = "'0',";
			foreach($valid_ipids as $key => $val_ip)
			{
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}
			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}
			/* ----------------- Get Discharged Methodes -  of client  -------------------- */
			$dis_method = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0')
				->andwhere("clientid='" . $logininfo->clientid . "'");
			$dis_method_array = $dis_method->fetchArray();

			$dis_methode_str = '"0",';
			foreach($dis_method_array as $key => $val)
			{
				$discharge_methode_name[$val['id']] = $val['description'];
				$dis_methode_str .= '"' . $val['id'] . '",';
			}
			$dis_methode_str = substr($dis_methode_str, 0, -1);

			/* ----------------- Get All Discharged Patients IN REPORT PERIODE -------------------- */
			$dispatients_met = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($valid_ipids_str, 0, -1) . ")")
				->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andWhere("isdelete=0");
			$methode_patients = $dispatients_met->fetchArray();

			foreach($methode_patients as $kh => $val_pat)
			{
				$discharged_patients_array[$val_pat['ipid']]['ipid'] = $val_pat['ipid'];
				$discharged_patients_array[$val_pat['ipid']]['discharge_method'] = $discharge_methode_name[$val_pat['discharge_method']];
				$discharged_patients_array[$val_pat['ipid']]['discharge_date'] = date('d.m.Y', strtotime($val_pat['discharge_date']));
				$total_patients_array[] = $val_pat['ipid'];
			}

			if(count($total_patients_array) == '0')
			{
				$total_patients_array[] = 'xxxx';
			}

			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIN('ipid', $total_patients_array);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
			}

			/* ----------------------- Get Hospice associations of client -------------------------------- */
			$fdoc1 = Doctrine_Query::create()
				->select('*')
				->from('Hospiceassociation')
				->where("indrop= 0 and isdelete = 0 ")
				->andwhere("clientid='" . $logininfo->clientid . "'");
			$fdocarray = $fdoc1->fetchArray();

			if(count($fdocarray) > 0)
			{
				foreach($fdocarray as $key => $hassoc)
				{
					$h_associations[$hassoc['id']] = $hassoc['hospice_association'];
				}
			}

			/* ----------------------- Get Voluntary workers of client -------------------------------- */
			$status_array = array('n' => 'keine Angabe', 'e' => 'Ehrenamtlicher', 'k' => 'Koordinator');
			$get_workers = Doctrine_Query::create()
				->select("*")
				->from('Voluntaryworkers vw')
				->Where('vw.isdelete = "0"')
				->andwhere("vw.clientid='" . $logininfo->clientid . "'");
			$workers_data = $get_workers->fetchArray();

			$workers_details[] = '9999999999';
			foreach($workers_data as $k_worker => $v_worker)
			{
				$workers_details[$v_worker['id']]['voluntary_id'] = $v_worker['id'];
				$workers_details[$v_worker['id']]['voluntary_name'] = $v_worker['last_name'] . ', ' . $v_worker['first_name'];
				$workers_details[$v_worker['id']]['voluntary_type'] = $status_array[$v_worker['status']];
				$workers_details[$v_worker['id']]['voluntary_type_condition'] = $v_worker['status'];
				$workers_details[$v_worker['id']]['voluntary_hospice_association'] = $h_associations[$v_worker['hospice_association']];
			}

			/* ----------------------- Get Voluntary worker assigned -------------------------------- */
			$get_patient_workers = Doctrine_Query::create()
				->select("*")
				->from('PatientVoluntaryworkers pv')
				->whereIn('pv.ipid', $total_patients_array)
				->andWhere('pv.isdelete = "0"');
			$patient_workers = $get_patient_workers->fetchArray();

			$ipids_w_voluntary[] = '999999999999';
			$patients_with_workers[] = '999999999';
			$voluntary_ids[] = '9999999';
			if(!empty($patient_workers))
			{
				foreach($patient_workers as $k_patient => $v_patient)
				{
					$patients_with_assigned_workers[$v_patient['ipid']]['voluntary_assigned'][] = $workers_details[$v_patient['vwid']]['voluntary_name'];
					$patients_with_assigned_workers[$v_patient['ipid']]['voluntary_assigned_status'][] = $workers_details[$v_patient['vwid']];
					if($workers_details[$v_patient['vwid']]['voluntary_type_condition'] == 'k')
					{
						$patients_with_workers[$v_patient['ipid']]['voluntary_assigned'] = $workers_details[$v_patient['vwid']]['voluntary_name'];
						$patients_with_workers[$v_patient['ipid']]['voluntary_assigned_status'] = $workers_details[$v_patient['vwid']]['voluntary_type'];
						$patients_with_workers[$v_patient['ipid']]['voluntary_assigned_hassociation'] = $workers_details[$v_patient['vwid']]['voluntary_hospice_association'];
					}
				}
			}

			/* ----------------------- Get Voluntary worker visits -------------------------------- */
			$drop = Doctrine_Query::create()
				->select('*')
				->from('PatientHospizvizits')
				->whereIn('ipid', $total_patients_array)
				->andWhere('isdelete=0')
				->andWhere('type="n"')
				->orderBy('hospizvizit_date ASC');
			$hospizvizits = $drop->fetchArray();
			$pat_visits_nr = count($hospizvizits);
			$total_patients_in_report = count($total_patients_array);
			$pm = new PatientMaster();

			foreach($hospizvizits as $key => $viz)
			{
				$patient_h_visits_total[$viz['ipid']][] = $workers_details[$viz['vw_id']]['voluntary_type_condition'];

				if($workers_details[$viz['vw_id']]['voluntary_type_condition'] == 'e')
				{
					$patient_h_visits[$workers_details[$viz['vw_id']]['voluntary_type_condition']][$viz['ipid']]['voluntary'][] = $workers_details[$viz['vw_id']]['voluntary_name'];
					$patient_h_visits[$workers_details[$viz['vw_id']]['voluntary_type_condition']][$viz['ipid']]['voluntary_type'][] = $workers_details[$viz['vw_id']]['voluntary_type_condition'];
					if($viz['type'] == 'n')
					{
						$patient_h_visits[$workers_details[$viz['vw_id']]['voluntary_type_condition']][$viz['ipid']]['voluntary_vizit_date'][] = $viz['hospizvizit_date'];
						$patient_h_visits[$workers_details[$viz['vw_id']]['voluntary_type_condition']][$viz['ipid']]['active_days_of_voluntary'][] = $pm->getDaysDiff(date('d.m.Y', strtotime($viz['hospizvizit_date'])), $discharged_patients_array[$viz['ipid']]['discharge_date']);
					}
				}
				else if($workers_details[$viz['vw_id']]['voluntary_type_condition'] == 'k')
				{
					$patient_h_visits[$workers_details[$viz['vw_id']]['voluntary_type_condition']][$viz['ipid']]['voluntary'][] = $workers_details[$viz['vw_id']]['voluntary_name'];
					$patient_h_visits[$workers_details[$viz['vw_id']]['voluntary_type_condition']][$viz['ipid']]['voluntary_type'][] = $workers_details[$viz['vw_id']]['voluntary_type_condition'];
					$patient_h_visits[$workers_details[$viz['vw_id']]['voluntary_type_condition']][$viz['ipid']]['hospizverein'][] = $workers_details[$viz['vw_id']]['voluntary_hospice_association'];
					if($viz['type'] == 'n')
					{
						$patient_h_visits[$workers_details[$viz['vw_id']]['voluntary_type_condition']][$viz['ipid']]['voluntary_vizit_date'][] = $viz['hospizvizit_date'];
						$patient_h_visits[$workers_details[$viz['vw_id']]['voluntary_type_condition']][$viz['ipid']]['active_days_of_coordinator'][] = $pm->getDaysDiff(date('d.m.Y', strtotime($viz['hospizvizit_date'])), $discharged_patients_array[$viz['ipid']]['discharge_date']);
					}
				}
			}

			/* ------------------Get the amount of patients that have visits made by Ehrenamtliche (for both statuses) --------------- */
			$ehrenamtliche_nr = 0;
			$koordinator_nr = 0;
			if(!empty($patient_h_visits_total))
			{
				foreach($patient_h_visits_total as $voluntary_w => $type)
				{
					if(in_array('k', $type))
					{ // if Ehrenamtliche with status "Koordinator" count patients
						$koordinator_nr++;
					}

					if(in_array('e', $type))
					{// if Ehrenamtliche with status "Ehrenamtliche" count patients
						$ehrenamtliche_nr++;
					}
				}
			}

			$ehrenamtliche_percentage = round(($ehrenamtliche_nr / $total_patients_in_report * 100), 2) . ' %';
			$koordinator_percentage = round(($koordinator_nr / $total_patients_in_report * 100), 2) . ' %';
			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;
			$assigned_vw_status = '';
			foreach($discharged_patients_array as $keypatient => $patient)
			{

				$MasterData['data'][$patient['ipid']]['epid'] = $patient_array[$patient['ipid']]['epid'];
				$MasterData['data'][$patient['ipid']]['lastname'] = $patient_array[$patient['ipid']]['last_name'];
				$MasterData['data'][$patient['ipid']]['firstname'] = $patient_array[$patient['ipid']]['first_name'];

				$patient_h_visits['k'][$patient['ipid']]['voluntary'] = end(array_unique($patient_h_visits['k'][$patient['ipid']]['voluntary']));

				$MasterData['data'][$patient['ipid']]['coordinator'] = $patient_h_visits['k'][$patient['ipid']]['voluntary'];


				if($patient_h_visits['e'][$patient['ipid']]['voluntary_vizit_date'][0] != '0000-00-00 00:00:00' && !empty($patient_h_visits['k'][$patient['ipid']]['voluntary_vizit_date'][0]) && !empty($patient_h_visits['k'][$patient['ipid']]['voluntary']))
				{
					$MasterData['data'][$patient['ipid']]['first_visit_of_coordinator'] = date('d.m.Y', strtotime($patient_h_visits['k'][$patient['ipid']]['voluntary_vizit_date'][0]));
				}
				else
				{
					$MasterData['data'][$patient['ipid']]['first_visit_of_coordinator'] = '--';
				}

				$MasterData['data'][$patient['ipid']]['active_days_of_coordinator'] = $patient_h_visits['k'][$patient['ipid']]['active_days_of_coordinator'][0];


				$MasterData['data'][$patient['ipid']]['voluntary_that_visited'] = implode('<br />', array_unique($patient_h_visits['e'][$patient['ipid']]['voluntary']));

				if($patient_h_visits['e'][$patient['ipid']]['voluntary_vizit_date'][0] != '0000-00-00 00:00:00' && !empty($patient_h_visits['e'][$patient['ipid']]['voluntary_vizit_date'][0]) && !empty($patient_h_visits['e'][$patient['ipid']]['voluntary']))
				{
					$MasterData['data'][$patient['ipid']]['first_visit_of_voluntary'] = date('d.m.Y', strtotime($patient_h_visits['e'][$patient['ipid']]['voluntary_vizit_date'][0]));
				}
				else
				{
					$MasterData['data'][$patient['ipid']]['first_visit_of_voluntary'] = '--';
				}

				$MasterData['data'][$patient['ipid']]['active_days_of_voluntary'] = $patient_h_visits['e'][$patient['ipid']]['active_days_of_voluntary'][0];

				$MasterData['data'][$patient['ipid']]['discharge_date'] = $patient['discharge_date'];
				$MasterData['data'][$patient['ipid']]['health_insurance'] = $patienthelth[$patient['ipid']]['company'];
				$MasterData['data'][$patient['ipid']]['birthd'] = $patient_array[$patient['ipid']]['birthd'];
				$MasterData['data'][$patient['ipid']]['discharge_methode'] = $patient['discharge_method'];
				$MasterData['data'][$patient['ipid']]['hospiceassociation_of_voluntary'] = implode(';<br /> ', array_unique($patient_h_visits['k'][$patient['ipid']]['hospizverein']));

				$total_amount_days_coordinator +=$MasterData['data'][$patient['ipid']]['active_days_of_coordinator'];
				$total_amount_days_voluntary +=$MasterData['data'][$patient['ipid']]['active_days_of_voluntary'];
				$i++;
			}
			$total_number_of_patients_voluntary = count($discharged_patients_array);
			$MasterData['extra']['ehrenamtliche_visits'] = $ehrenamtliche_nr;
			$MasterData['extra']['ehrenamtliche_percentage'] = $ehrenamtliche_percentage;
			$MasterData['extra']['ehrenamtliche_average_amount'] = round(($total_amount_days_voluntary / $ehrenamtliche_nr), 2);
			$MasterData['extra']['koordinator_visits'] = $koordinator_nr;
			$MasterData['extra']['koordinator_percentage'] = $koordinator_percentage;
			$MasterData['extra']['koordinator_average_amount'] = round(($total_amount_days_coordinator / $koordinator_nr), 2);
			return $MasterData;
		}

		public function kv_hospitalizations($params)
		{
			// report_id = 76
			// report_name = 11) KV Nordrhein - Krankenhauseinweisungen
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG ARE used for the following report
			// Overall ammount of patients that had a location change TO HOSPITAL WHILE SAPV VERORDNUNG WAS VOLLVERSORGUNG //just hospital IN (1
			// overall ammount of days in hospital (ONLY WITHIN REPORT PERIOD) (2
			// Sum of each "Einweisungsgrund" (3
			// Sum of each "Transportmittel" (4
			// Sum of each "durch wen" (5
			// just ONLY count hospital stays which started in SAPV so if it started before = ignore if it is outside SAPV = ignore

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod ['interval_location_sql_qtz']));
			$selected_period_dates = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$patientMaster = new PatientMaster();

			$ipidarray = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			if(count($ipidarray) == '0')
			{
				$ipidarray[] = '99999999999';
			}
			$ipidarray = array_values(array_unique($ipidarray));
			// get only patients that have SAPV
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarray)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			foreach($valid_ipids as $k_valid_sapv => $v_valid_sapv)
			{
				$ipidarr[] = $v_valid_sapv['ipid'];
			}

			if(count($ipidarr) == '0')
			{
				$ipidarr[] = '999999999';
			}

			//patients with valid sapv
			$ipidarr = array_values(array_unique($ipidarr));

			$patientsapv_vv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarray)
				->andwhere('sv.verordnet LIKE "%4%"')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids_vv = $patientsapv_vv->fetchArray();

			foreach($valid_ipids_vv as $k_valid_vv => $v_valid_vv)
			{
				$ipidarr_vv[] = $v_valid_vv['ipid'];
				$patient_vv_details[$v_valid_vv['ipid']][] = $v_valid_vv;
			}

			if(count($ipidarr_vv) == '0')
			{
				$ipidarr_vv[] = '999999999';
			}

			$ipidarr_vv = array_values(array_unique($ipidarr_vv));
			$pm = new PatientMaster();
			$treated_days = $pm->getTreatedDaysRealMultiple($ipidarr_vv);

			$locations = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('client_id = "' . $clientid . '"')
				->andWhere('location_type = 1');
			$hospital_locations = $locations->fetchArray();

			$hospital_loc_ids[] = '999999999';
			foreach($hospital_locations as $hospital)
			{
				$hospital_loc_ids[] = $hospital['id'];
			}

			$patient_locations = Doctrine_Query::create()
				->select("*")
				->from('PatientLocation')
				->whereIn('ipid', $ipidarr_vv)
				->andWhere('isdelete = "0"')
				->andWhere('clientid = "' . $clientid . '"')
				->andWhereIn('location_id', $hospital_loc_ids)
				->andWhere('' . str_replace('%date%', 'valid_from', $timeperiod ['date_sql']) . '');

			$patient_hosp_locations = $patient_locations->fetchArray();
			$location_allowed_ids[] = '9999999999';
			foreach($patient_hosp_locations as $k_pat_loc => $v_pat_loc)
			{
				$r1start = date('Y-m-d 00:00:00', strtotime($v_pat_loc['valid_from']));
				$r1end = date('Y-m-d 23:59:59', strtotime($v_pat_loc['valid_from']));

				$sapv_full_period_days[$v_pat_loc['ipid']] = array();
				foreach($patient_vv_details[$v_pat_loc['ipid']] as $k_vv_details => $vv_details)
				{
					$r2start = $vv_details['verordnungam'];
					$r2end = $vv_details['verordnungbis'];
					$sapv_full_period_days[$v_pat_loc['ipid']] = array_merge($sapv_full_period_days[$v_pat_loc['ipid']], $patientMaster->getDaysInBetween($r2start, $r2end));
					if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end) && (strtotime($v_pat_loc['valid_from']) >= strtotime($treated_days[$v_pat_loc['ipid']]['admissionDates'][0]['date']) && strtotime($v_pat_loc['valid_from']) != strtotime($treated_days[$v_pat_loc['ipid']]['dischargedDates'][0]['date'])))
					{
						$vv_hospital_entry[$vv_details['ipid']] = $vv_details['ipid']; //ipids from here to get Epids! (1
						$ipids_vv_hospital_entry[] = $vv_details['ipid']; //ipids from here to get overlall days in hospitals
						$location_allowed_ids[] = $v_pat_loc['id'];
					}
				}
			}

			if(empty($ipids_vv_hospital_entry))
			{
				$ipids_vv_hospital_entry['9999999'] = 'XXXXX';
			}

			/* ----------------------------- Get details ONLY for patients that enterd in hospital during SAPV VV -------------------------------- */
			$locations = Doctrine_Query::create()
				->select('*, DATE(valid_from) as valid_from_headless, DATE(valid_till) as valid_till_headless, DATE(valid_till) as valid_till, DATE(valid_from) as valid_from')
				->from('PatientLocation pl')
				->whereIn('pl.location_id', $hospital_loc_ids) //arrays with hospital ids
				->andWhereIn('pl.ipid', $ipids_vv_hospital_entry) //arrays with  patients that change location to hospital
				->andWhereIn('pl.id', $location_allowed_ids)
				->andWhere('' . $time_interval . '')
				->andWhere('pl.isdelete="0"')
				->orderBy('id DESC');
			$locationsarr = $locations->fetchArray();

			$pt = new PatientLocation();
			$reasonsarray = $pt->getReasons();
			$hospdocsarray = $pt->getHospDocs();
			$transportsarray = $pt->getTransports();

			$new_extra_data = array();
			$count_reason = '0';
			$count_hospdoc = '0';
			$count_transport = '0';

			foreach($locationsarr as $k_loc_hosp => $v_loc_hosp)
			{

				if($v_loc_hosp['valid_till'] == "0000-00-00")
				{
					$endDate = date("Y-m-d");
				}
				else
				{
					$endDate = $v_loc_hosp['valid_till'];
				}


				foreach($selected_period_dates['start'] as $start_date)
				{
					if(strtotime($v_loc_hosp['valid_from']) >= strtotime($start_date))
					{
						$allowed_ids[] = $v_loc_hosp['id'];
					}
				}

				if(in_array($v_loc_hosp['id'], $allowed_ids))
				{
					$hospital_days[$v_loc_hosp['ipid']][] = $patientMaster->getDaysInBetween($v_loc_hosp['valid_from'], $endDate);

					//count reason, hospdoc and transport
					if($v_loc_hosp['reason'] != '0')
					{
						$new_extra_data['reason']['reason_details'][$v_loc_hosp['reason']]['ipids'][] = $v_loc_hosp['ipid'];
						$new_extra_data['reason']['reason_details'][$v_loc_hosp['reason']]['reason_name'] = $this->view->translate('report_reason') . ': ' . $reasonsarray[$v_loc_hosp['reason']];
					}

					if($v_loc_hosp['hospdoc'] != '0')
					{
						$new_extra_data['hospdoc']['hospdoc_details'][$v_loc_hosp['hospdoc']]['ipids'][] = $v_loc_hosp['ipid'];
						$new_extra_data['hospdoc']['hospdoc_details'][$v_loc_hosp['hospdoc']]['hospdoc_name'] = $this->view->translate('report_hospdoc') . ': ' . $hospdocsarray[$v_loc_hosp['hospdoc']];
					}

					if($v_loc_hosp['transport'] != '0')
					{
						$new_extra_data['transport']['transport_details'][$v_loc_hosp['transport']]['ipids'][] = $v_loc_hosp['ipid'];
						$new_extra_data['transport']['transport_details'][$v_loc_hosp['transport']]['transport_name'] = $this->view->translate('report_transport') . ': ' . $transportsarray[$v_loc_hosp['transport']];
					}
				}
			}

			$full_period_array = array();
			foreach($selected_period_dates['start'] as $k_period => $v_period)
			{
				$period_all_days = $patientMaster->getDaysInBetween($v_period, $selected_period_dates['end'][$k_period]);
				$full_period_array = array_merge($full_period_array, $period_all_days);
			}

			$patient_hospital_days = array();
			foreach($hospital_days as $ipid_patient => $patient_hosp_days)
			{
				foreach($patient_hosp_days as $k_hosp_days => $v_hosp_days)
				{
					if($patient_hospital_days[$ipid_patient])
					{
						$patient_hospital_days[$ipid_patient] = array_merge($patient_hospital_days[$ipid_patient], $v_hosp_days);
					}
					else
					{
						$patient_hospital_days[$ipid_patient] = $v_hosp_days;
					}
					asort($patient_hospital_days[$ipid_patient]);
					$patient_hospital_days[$ipid_patient] = array_values($patient_hospital_days[$ipid_patient]);
				}
			}

			foreach($patient_hospital_days as $k_ipid => $v_pat_hosp_days)
			{
				foreach($v_pat_hosp_days as $hospital_day)
				{
					if(in_array($hospital_day, $full_period_array) && in_array($hospital_day, $sapv_full_period_days[$k_ipid]) && strtotime($hospital_day) <= strtotime($treated_days[$k_ipid]['discharge_date']))
					{

						$allowed_hospital_days[$k_ipid][] = $hospital_day;
					}
				}
			}

			$overall_hosp_days = 0;

			foreach($allowed_hospital_days as $k_ipid => $v_allowed_hospital)
			{
				$overall_hosp_days += count($v_allowed_hospital);
			}

			if(count($vv_hospital_entry) == '0')
			{
				$vv_hospital_entry[] = '99999999999';
			}

			$all_ipids = array();
			$all_ipids = $vv_hospital_entry;
			$all_ipids = array_values(array_unique($all_ipids));

			if(count($all_ipids) == '0')
			{
				$all_ipids[] = '999999999';
			}

			/* ------------------------ Get patients details - EPIDS ------------------------------- */
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $all_ipids)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$resipidarray = $patient->fetchArray();

			foreach($resipidarray as $rpatient)
			{
				$patients_epids[$rpatient['ipid']]['epid'] = strtoupper($rpatient['EpidIpidMapping']['epid']);
			}

			//patients with entrance in hospital when sapv is VV (1)
			foreach($vv_hospital_entry as $ipid)
			{
				$hosp_vv_epids[] = $patients_epids[$ipid]['epid'];
			}
			asort($hosp_vv_epids);

			if(in_array("99999999999", $vv_hospital_entry) && count($vv_hospital_entry) == "1")
			{
				$vv_hospital_entry = array();
			}

			foreach($new_extra_data as $values)
			{

				foreach($values['reason_details'] as $rk => $reason_item)
				{
					foreach($reason_item['ipids'] as $reason)
					{
						$hospital_options[$reason_item['reason_name']][] = $patients_epids[$reason]['epid'];
					}
				}
				foreach($values['hospdoc_details'] as $hk => $hospdoc_item)
				{
					foreach($hospdoc_item['ipids'] as $hospdoc)
					{
						$hospital_options[$hospdoc_item['hospdoc_name']][] = $patients_epids[$hospdoc]['epid'];
					}
				}

				foreach($values['transport_details'] as $tk => $transport_item)
				{
					foreach($transport_item['ipids'] as $transport)
					{
						$hospital_options[$transport_item['transport_name']][] = $patients_epids[$transport]['epid'];
					}
				}
			}

			/* -----------------------------------Display all data ------------------------------------------- */

			/* -------------------------------ROW 1 - Display amount of patients that enterd in hospital during SAPV VV  ------------------------------------------- */
			$master_data['data'][1]['hospitalizations'] = $this->view->translate('nr_patients_enterg_hospital_during_sapv_vv');
			$master_data['data'][1]['amount_averege'] = count($vv_hospital_entry);
			$hosp_vv_epids = array_unique($hosp_vv_epids);
			$master_data['data'][1]['epids'] = implode(", ", $hosp_vv_epids);
			/* -------------------------------ROW 2 - Display overall amount of hospital days(in report periode ) for patients that enterd in hospital during SAPV VV ---------------- */
			foreach($vv_hospital_entry as $ipid)
			{
				$overall_epids[] = $patients_epids[$ipid]['epid'];
			}
			asort($overall_epids);

			$overall_epids = array_unique($overall_epids);
			$patients_in_hospital = count($overall_epids);
			$hospital_days_average = round($overall_hosp_days / $patients_in_hospital, 2);
			$master_data['data'][2]['hospitalizations'] = $this->view->translate('amount_hospital_days_in_report_periode_averege');
			$master_data['data'][2]['amount_averege'] = $overall_hosp_days . ' / ' . $hospital_days_average;
			$master_data['data'][2]['epids'] = implode(", ", $overall_epids);

			/* -------------------------------ROWs 3+ - Display for each hospital reason - the amount of pacients that used that reafon for entering in hospital during SAPV VV ---------------- */
			$i = 3;
			foreach($hospital_options as $opt_key => $opt_value)
			{

				$master_data['data'][$i]['hospitalizations'] = $opt_key;
				$master_data['data'][$i]['amount_averege'] = count($opt_value);
				$master_data['data'][$i]['epids'] = implode(", ", $opt_value);
				$i++;
			}

			if($_REQUEST['dbg'])
			{
				print_r("Pat Hosp Locations");
				print_r($patient_hosp_locations);

				print_r("Pat Hosp Final\n\n");
				print_r($allowed_hospital_days);

				print_r("Overall patients hospital days\n\n");
				print_r($overall_hosp_days);

				print_r("Valid Sapv VV DETAILS");
				print_r($patient_vv_details);
			}

			return $master_data;
		}

		public function kv_deceased($params)
		{
			// report_id = 77
			// report_name = KV Nordrhein - verstorben
			// 12)KV Nordrhein - verstorben
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG VOLLVERSORGUNG WHICH DIED WHILE BEING IN VOLLVERSORGUNG are taken for this report
			// show the ammount N and the % for each location TYPE
			// zuhause //5
			// bei Kontaktperson // 6
			// im Krankenhaus // 1
			// in Kurzzeitpflege//
			// im Altenheim //
			// im Hospiz // 2
			// get patients by discharge date (death date)
			// get every valid sapv vv interval , check if discharge date is in vv interval
			//UPDATE 17.10.2012 - Radu
			//exclude patients which are dead with death button =>( outside active patient period )
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("p.ipid,e.epid")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$epids_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
			}
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}
			/* ----------------- Get only patients that have SAPV -------------------- */
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $allfinal)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			$valid_ipids_str = "'0',";
			foreach($valid_ipids as $key => $val_ip)
			{
				$vv_interval[$val_ip['ipid']][$key]['ipid'] = $val_ip['ipid'];
				$vv_interval[$val_ip['ipid']][$key]['vv_start'] = strtotime($val_ip['verordnungam']);
				$vv_interval[$val_ip['ipid']][$key]['vv_end'] = strtotime($val_ip['verordnungbis']);
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			/* ----------------- Get Discharged Methodes - Dead - of client  -------------------- */
			$dis_method = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0')
				->andwhere("clientid='" . $logininfo->clientid . "'")
				->andwhere("(abbr='TOD' OR abbr='TODNA')");
			$dis_method_array = $dis_method->fetchArray();

			$dis_methode_str = '"0",';
			foreach($dis_method_array as $key => $val)
			{
				$discharge_methode_name[$val['id']] = $val['description'];
				$dis_methode_str .= '"' . $val['id'] . '",';
			}
			$dis_methode_str = substr($dis_methode_str, 0, -1);

			/* ----------------- Get  Discharged locations Type - of client  -------------------- */
			$dis_loc = Doctrine_Query::create()
				->select("*")
				->from('DischargeLocation')
				->where('isdelete = 0')
				->andwhere("clientid='" . $logininfo->clientid . "'");
			$dis_loc_array = $dis_loc->fetchArray();

			foreach($dis_loc_array as $key => $val)
			{
				$discharge_location_type[$val['id']][] = $val['type'];
			}

			/* ----------------- Get Dead  Patients by discharge methode DEAD-------------------- */
			$dispatients_met = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($valid_ipids_str, 0, -1) . ")")
				->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andWhere("isdelete=0")
				->andWhere('discharge_method IN (' . $dis_methode_str . ')  ');
			$methode_patients = $dispatients_met->fetchArray();

			foreach($methode_patients as $kh => $val_pat)
			{
				$discharge_date = strtotime(date('d.m.Y', strtotime($val_pat['discharge_date'])));
				$exists = 0;
				foreach($vv_interval[$val_pat['ipid']] as $hk => $dates)
				{
					if($val_pat['ipid'] == $dates['ipid'])
					{
						if(($discharge_date >= $dates['vv_start']) && ($discharge_date <= $dates['vv_end']))
						{
							$exists = 1;
						}
						else
						{
							$exists = 0;
						}
						$ininterval_arr[$val_pat['ipid']]['in_interval'] += $exists;
					}
				}
				if($ininterval_arr[$val_pat['ipid']]['in_interval'] == '1')
				{
					$meth_patients_arr[$val_pat['ipid']]['discharge_location'] = $val_pat['discharge_location'];
					$meth_patients_arr[$val_pat['ipid']]['ipid'] = $val_pat['ipid'];
					$patients_by_location[$val_pat['discharge_location']][] = $epids_array[$val_pat['ipid']]['epid'];
				}
			}

			/* ----------------- Get Dead Patients by death button-------------------- */
			$dispatients_death = Doctrine_Query::create()
				->select('*')
				->from('PatientDeath p')
				->where(" ipid IN (" . substr($valid_ipids_str, 0, -1) . ")")
				->andWhere(str_replace('%date%', 'death_date', $active_cond['date_sql']))
				->andWhere("isdelete=0");
			$death_patients = $dispatients_death->fetchArray();

			foreach($death_patients as $deth_pats)
			{
				$death_pat_array[] = $deth_pats['ipid'];
			}
			if(empty($death_pat_array))
			{
				$death_pat_array[999999] = 'X';
			}

			$location_death_pats = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->whereIn('ipid', $death_pat_array);
			$location_death_pats_arr = $location_death_pats->fetchArray();

			foreach($location_death_pats_arr as $kl => $location)
			{
				$location_patient[$location['ipid']]['discharge_location_id'] = $location['discharge_location'];
			}
			foreach($death_patients as $kh => $val_pat)
			{
				$discharge_date = strtotime(date('d.m.Y', strtotime($val_pat['death_date'])));

				$exists = 0;
				foreach($vv_interval[$val_pat['ipid']] as $hk => $dates)
				{
					if($val_pat['ipid'] == $dates['ipid'])
					{
						if(($discharge_date >= $dates['vv_start']) && ($discharge_date <= $dates['vv_end']))
						{
							//death button - pull out of reports 131220 - don't load dead patients
							$exists = 0; //this has to be 1 if we need to load patients with death button UPDATED 17.10.2012
						}
						else
						{
							$exists = 0;
						}
						$ininterval_arr[$val_pat['ipid']]['in_interval'] += $exists;
					}
				}
			}
			if(!empty($meth_patients_arr) && !empty($death_patients_arr))
			{
				$total_patients = array_merge($meth_patients_arr, $death_patients_arr);
			}
			else if(empty($meth_patients_arr))
			{
				$total_patients = $death_patients_arr;
			}
			else if(empty($death_patients_arr))
			{
				$total_patients = $meth_patients_arr;
			}
			else
			{
				$total_patients = '';
			}

			$total_dead_patients = count($total_patients);

			foreach($total_patients as $key => $val)
			{
				$total_final[] = $val['ipid'];
			}
			if(empty($total_final))
			{
				$total_final[999999]['ipid'] = 'X';
			}

			/* -------------------------------- Group patients by location   ------------------------------------------------ */
			$dispatients = Doctrine_Query::create()
				->select("discharge_location, sum(if(discharge_location<> 0 ,1,0)) as location_count")
				->from('PatientDischarge ')
				->whereIn('ipid', $total_final)
				->andwhere('isdelete = 0')
				->groupBy('discharge_location');
			$deadpatientarray = $dispatients->fetchArray();

			$total_discharge_nr = 0;
			foreach($deadpatientarray as $key => $val)
			{

				$discharge_methode_stats[$val['discharge_location']]['location_id'] = $val['discharge_location'];
				$discharge_methode_stats[$val['discharge_location']]['location_amount'] = $val['location_count'];
				$discharge_methode_stats[$val['discharge_location']]['location_type'] = $discharge_location_type[$val['discharge_location']];
				$discharge_methode_stats[$val['discharge_location']]['ipid'] = implode(', ', $patients_by_location[$val['discharge_location']]);
				$total_discharge_nr += $val['location_count'];
			}

			$location_types = Pms_CommonData::getDischargeLocationTypes();

			foreach($location_types as $k_loc_types => $v_loc_types)
			{
				$location_type[$k_loc_types]['id'] = $k_loc_types;
				if($k_loc_types > '1')
				{
					$location_type[$k_loc_types]['name'] = 'im ' . $v_loc_types;
				}
				else if($k_loc_types == '0')
				{
					$location_type[$k_loc_types]['name'] = 'Sonstige';
				}
				else
				{
					$location_type[$k_loc_types]['name'] = $v_loc_types;
				}
			}

			foreach($discharge_methode_stats as $key => $value)
			{
				foreach($location_type as $vl)
				{
					if(in_array($vl['id'], $value['location_type']))
					{

						$loc_type[$vl['id']]['id'] = $vl['id'];
						$loc_type[$vl['id']]['name'] = $vl['name'];
						$loc_type[$vl['id']]['amount'] +=$value['location_amount'];
						$loc_type[$vl['id']]['ipids'][] = $value['ipid'];
					}
				}
			}

			foreach($location_type as $key => $dis_type)
			{
				$MasterData['data'][$key]['discharge_location'] = $dis_type['name'];

				if(!empty($loc_type[$dis_type['id']]['amount']))
				{
					$MasterData['data'][$key]['count'] = $loc_type[$dis_type['id']]['amount'];
				}
				else
				{
					$MasterData['data'][$key]['count'] = '0';
				}

				$MasterData['data'][$key]['percentage'] = round(($loc_type[$dis_type['id']]['amount'] / $total_discharge_nr * 100), 2) . ' %';

				if(!empty($loc_type[$dis_type['id']]['ipids']))
				{
					$MasterData['data'][$key]['epids'] = strtoupper(implode(', ', $loc_type[$dis_type['id']]['ipids']));
				}
				else
				{
					$MasterData['data'][$key]['epids'] = '-';
				}
			}
			$MasterData['extra']['sum'] = $total_discharge_nr;

			return $MasterData;
		}

		public function kv_life_expectancy($params)
		{
			// report_id = 78
			// report_name = 13) KV Nordrhein - Prognostizierte und tatsächliche Lebenserwartung
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG VOLLVERSORGUNG WHICH DIED WHILE HAVING A VERORDNUNG (any)are taken for this report
			// Patient ID, Prognostizierte Erwartung(Tage) (from Assessment "Geschätzte Lebenserwartung"), tatsächliche Dauer (days from admission till death),Durchschnitt (overall average at end of report of coloumn "tatsächliche Dauer")

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("p.ipid,e.epid")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$epids_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
			}
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get only patients that have SAPV -------------------- */
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $allfinal)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			$valid_ipids_str = "'0',";
			foreach($valid_ipids as $key => $val_ip)
			{
				$vv_interval[$val_ip['ipid']][$key]['ipid'] = $val_ip['ipid'];
				$vv_interval[$val_ip['ipid']][$key]['vv_start'] = strtotime($val_ip['verordnungam']);
				$vv_interval[$val_ip['ipid']][$key]['vv_end'] = strtotime($val_ip['verordnungbis']);
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			/* ----------------- Get Discharged Methodes - Dead - of client  -------------------- */
			$dis_method = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0')
				->andwhere("clientid='" . $logininfo->clientid . "'")
				->andwhere("(abbr='TOD' OR abbr='TODNA')");
			$dis_method_array = $dis_method->fetchArray();

			$dis_methode_str = '"0",';
			foreach($dis_method_array as $key => $val)
			{
				$discharge_methode_name[$val['id']] = $val['description'];
				$dis_methode_str .= '"' . $val['id'] . '",';
			}
			$dis_methode_str = substr($dis_methode_str, 0, -1);

			/* ----------------- Get Dead  Patients by discharge methode DEAD-------------------- */
			$dispatients_met = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($valid_ipids_str, 0, -1) . ")")
				->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andWhere("isdelete=0")
				->andWhere('discharge_method IN (' . $dis_methode_str . ')  ');
			$methode_patients = $dispatients_met->fetchArray();

			foreach($methode_patients as $kh => $val_pat)
			{
				$discharge_date = strtotime(date('d.m.Y', strtotime($val_pat['discharge_date'])));
				$exists = 0;
				foreach($vv_interval[$val_pat['ipid']] as $hk => $dates)
				{
					if($val_pat['ipid'] == $dates['ipid'])
					{
						if(($discharge_date >= $dates['vv_start']) && ($discharge_date <= $dates['vv_end']))
						{
							$exists = 1;
						}
						else
						{
							$exists = 0;
						}
						$ininterval_arr[$val_pat['ipid']]['in_interval'] += $exists;
					}
				}

				if($ininterval_arr[$val_pat['ipid']]['in_interval'] == '1')
				{
					$meth_patients_arr[$val_pat['ipid']]['ipid'] = $val_pat['ipid'];
				}

				$patient_dead_discharge[$val_pat['ipid']] = $val_pat['discharge_date'];
			}

			$total_patients = $meth_patients_arr;
			$total_dead_patients = count($total_patients);

			foreach($total_patients as $key => $val)
			{
				$total_final[] = $val['ipid'];
			}
			if(empty($total_final))
			{
				$total_final[999999]['ipid'] = 'X';
			}

			/* ----------------------------Get assessment of dead patients -------------------------------- */
			$get_assessments = Doctrine_Query::create()
				->select("k.ipid,k.estimation")
				->from('KvnoAssessment k')
				->andWhereIn('k.ipid', $total_final);
			$resulted_assessments = $get_assessments->fetchArray();

			foreach($resulted_assessments as $pat_ipids)
			{
				$assessment_array[$pat_ipids['ipid']]['ipid'] = $pat_ipids['ipid'];
				$assessment_array[$pat_ipids['ipid']]['estimation'] = $pat_ipids['estimation'];
			}

			foreach($assessment_array as $key => $val)
			{
				$total_assessment_final[] = $val['ipid'];
			}
			if(empty($total_assessment_final))
			{
				$total_assessment_final[999999]['ipid'] = 'X';
			}

			$pm = new PatientMaster();
			if(count($total_assessment_final) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($total_assessment_final);
			}
			$estimation = array('0' => 'Keine', '1' => 'Tage', '2' => 'Wochen', '3' => 'Monaten', '4' => 'länger');

			/* ----------------------------Get epids of relevant patients -------------------------------- */

			$epidspat = Doctrine_Query::create()
				->select("*")
				->from("EpidIpidMapping")
				->whereIn('ipid', $total_assessment_final);
			$epidspatarr = $epidspat->fetchArray();

			foreach($epidspatarr as $epidpatient)
			{
				$epidsPatients[$epidpatient['ipid']] = $epidpatient['epid'];
			}

			$total_active_days = 0;
			$avg_data  = 0;
			$i = 0;

			foreach($assessment_array as $keypatient => $patient)
			{

				$MasterData['data'][$keypatient]['epid'] = $epidsPatients[$patient['ipid']];
				$MasterData['data'][$keypatient]['predicted_expectancy_days'] = $estimation[$patient['estimation']];
				$total_active_days += $treatedarr[$patient['ipid']]['ActiveDays'];

				if(count($treatedarr[$patient['ipid']]['admissionDates']) > 0 && count($treatedarr[$patient['ipid']]['dischargeDates']))
				{
					$last_fall_start[$patient['ipid']] = end($treatedarr[$patient['ipid']]['admissionDates']);
					$last_fall_end[$patient['ipid']] = end($treatedarr[$patient['ipid']]['dischargeDates']);

					$MasterData['data'][$patient['ipid']]['fall_period'] = date('d.m.Y', strtotime($last_fall_start[$patient['ipid']]['date'])) . ' - ' . date('d.m.Y', strtotime($last_fall_end[$patient['ipid']]['date']));

					//fall days
					$fall_days = $pm->getDaysDiff($last_fall_start[$patient['ipid']]['date'], $last_fall_end[$patient['ipid']]['date']);
					$MasterData['data'][$patient['ipid']]['actual_expectancy_days'] = $fall_days;
					$median_expectancy[] = $fall_days;
					$avg_data +=$fall_days;
// 					print_r($fall_days);
				}
				else
				{
					$MasterData['data'][$patient['ipid']]['fall_period'] = date('d.m.Y', strtotime($treatedarr[$patient['ipid']]['admission_date'])) . ' - ' . date('d.m.Y', strtotime($treatedarr[$patient['ipid']]['discharge_date']));

					//fall days
					$fall_days = $pm->getDaysDiff($treatedarr[$patient['ipid']]['admission_date'], $treatedarr[$patient['ipid']]['discharge_date']);
					$MasterData['data'][$patient['ipid']]['actual_expectancy_days'] = $fall_days;
					$median_expectancy[] = $fall_days;
					$avg_data +=$fall_days;
				}
				if($_REQUEST['dbg'] =="median"){
					print_r($fall_days);
					print_r("\n");
				}

				$i++;
			}
			
			
			if($_REQUEST['dbg'] =="median"){
				print_r("array sortat \n ");
				sort($median_expectancy);
				print_r($median_expectancy);
				
				print_r(" \n count array  \n ");
				$count = count($median_expectancy); //total numbers in array
				print_r($count);
				print_r(" \n" );
				
				print_r("valoarea de mijloc  \n ");
				$middleval = floor(($count - 1) / 2); // find the middle value, or the lowest middle value
				print_r($middleval);
				
				if($count % 2)
				{ // odd number, middle is the median
					print_r(" \n daca e impar : pozitia din array este:  \n ");
					print_r($middleval);
					print_r(" \n daca e impar :valoarea este:  \n ");
					print_r($median_expectancy[$middleval]);
					
					
				}
				else
				{ // even number, calculate avg of 2 medians

					print_r(" \n daca e PAR   \n ");
					print_r("pozitie: ".$middleval ." valoare: ".$median_expectancy[$middleval]);
					print_r("\n ");
					print_r("pozitie: ".($middleval + 1) ." valoare: ".$median_expectancy[$middleval + 1]);
					print_r("\n ");
				}
			}
			
// 			$MasterData['extra']['expectancy_average'] = round($total_active_days / $i, 2);
			$MasterData['extra']['expectancy_average'] = round($avg_data / $i, 2);
			$MasterData['extra']['expectancy_median'] = Pms_CommonData::calculate_median($median_expectancy);
			return $MasterData;
		}

		public function kv_discharge_methods($params)
		{
			// report_id = 79
			// report_name = 14) KV Nordrhein - Entlassungsarten
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG ARE used for the following report
			// show the sums for all discharge methods

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("p.ipid,e.epid")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$epids_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
			}
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get only patients that have SAPV -------------------- */
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $allfinal)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			$valid_ipids_str = "'0',";
			foreach($valid_ipids as $key => $val_ip)
			{
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}
			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			/* ----------------- Get Discharged Methodes of client  -------------------- */
			$dis_method = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('isdelete = 0  and clientid="' . $logininfo->clientid . '" ');
			$dis_method_array = $dis_method->fetchArray();

			$dis_methode_str = '"0",';
			foreach($dis_method_array as $key => $val)
			{
				$discharge_methode_name[$val['id']] = $val['description'];
				$dis_methode_str .= '"' . $val['id'] . '",';
			}
			$dis_methode_str = substr($dis_methode_str, 0, -1);


			/* ----------------- Get Discharged Patients by discharge methode-------------------- */
			$dispatients_met = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($valid_ipids_str, 0, -1) . ") AND (" . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ") AND isdelete=0")
				->andWhere('discharge_method IN (' . $dis_methode_str . ')  ');
			$methode_patients = $dispatients_met->fetchArray();

			foreach($methode_patients as $met)
			{
				$pats_arr[$met['discharge_method']][] = $epids_array[$met['ipid']]['epid'];
			}

			/* ----------------- Get Discharged Patients in report period -------------------- */
			$dispatients = Doctrine_Query::create()
				->select("discharge_method, sum(if(discharge_method <> 0 ,1,0)) as methode_count")
				->from('PatientDischarge ')
				->where(" ipid IN (" . substr($valid_ipids_str, 0, -1) . ") AND (" . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ") AND isdelete=0")
				->groupBy('discharge_method');
			$deadpatientarray = $dispatients->fetchArray();

			$total_discharge_nr = 0;
			foreach($deadpatientarray as $key => $val)
			{
				$discharge_methode_stats[$val['discharge_method']]['methode_id'] = $val['discharge_method'];
				$discharge_methode_stats[$val['discharge_method']]['methode_amount'] = $val['methode_count'];
				$discharge_methode_stats[$val['discharge_method']]['methode_name'] = $discharge_methode_name[$val['discharge_method']];
				$total_discharge_nr += $val['methode_count'];
			}

			/* ------------------------------------------------------------------------------------- */
			foreach($discharge_methode_stats as $key => $methode_arr)
			{
				$data[$key]['discharge_methode'] = $methode_arr['methode_name'];
				$data[$key]['count'] = $methode_arr['methode_amount'];
				$data[$key]['epids'] = implode(', ', array_unique($pats_arr[$methode_arr['methode_id']]));
			}

			$alldata['extra']['sum'] = $total_discharge_nr;
			$alldata['data'] = $data;
			return $alldata;
		}

		public function kv_average_travel_time($params)
		{
			// report_id = 82
			// report_name = KV Nordrhein - durchschnittliche Fahrtzeit
			// 15) KV Nordrhein - durchschnittliche Fahrtzeit
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG which have died or got discharged IN REPORT PERIOD are taken here
			// from the selected patients ALL days are taken, even ones in STANDBY, even outside report period.
			// show for every patient ALL driving TIME and KILOMETER done by ALL users (in visit form) :
			// time overall, ammount of "drives", average, median (DOUBLE all entered times and kilometers = one journey to patient, one journey from patient back)

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
				$patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
			}

			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get only patients that have SAPV -------------------- */
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $allfinal)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			$valid_ipids_str = "'0',";
			foreach($valid_ipids as $key => $val_ip)
			{
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			/* -----------------  Get all Discharged / Dead  Patients  in report period  -------------------- */
			$dispatients_met = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($valid_ipids_str, 0, -1) . ")")
				->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andWhere("isdelete=0");
			$methode_patients = $dispatients_met->fetchArray();

			foreach($methode_patients as $kh => $val_pat)
			{
				$discharged_patients_arr[$kh]['ipid'] = $val_pat['ipid'];
				$discharged_patients_arr[$kh]['discharge_date'] = date('d.m.Y', strtotime($val_pat['discharge_date']));
			}

			$total_patients = $discharged_patients_arr;

			$total_discharge_patients = count($total_patients);


			foreach($total_patients as $key => $val)
			{
				$total_patients_final[] = $val['ipid'];
			}
			if(empty($total_patients_final))
			{
				$total_patients_final[999999]['ipid'] = 'X';
			}

			/* -------------------------------------------------------------------------------------------- */
			/* ------------------------------------GET ALL VISITS------------------------------------------ */
			/* -------------------------------------------------------------------------------------------- */

			/* ------------------------------------  Get KVNO doctor visits------------------------------------------ */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->whereIn('ipid', $total_patients_final);
			$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();

			foreach($kvno_doctor_visits_arr as $doc => $value_doc)
			{
				$pat_visit_doc['doctor_visit'][$value_doc['ipid']]['ipid'] = $value_doc['ipid'];
				$pat_visit_doc['doctor_visit'][$value_doc['ipid']]['visit_id'][] = $value_doc['id'];
				$pat_visit_doc['doctor_visit'][$value_doc['ipid']]['km_distance'] += trim(str_replace('km', '', $value_doc['fahrtstreke_km']));
				$pat_visit_doc['doctor_visit'][$value_doc['ipid']]['driving_time'] += $value_doc['fahrtzeit'];
				$pat_visit_doc['doctor_visit'][$value_doc['ipid']]['rides'] = count($pat_visit_doc['doctor_visit'][$value_doc['ipid']]['visit_id']);
			}

			if(empty($pat_visit_doc))
			{
				$pat_visit_doc['9999999999'] = '0000';
			}

			/* ------------------------------------  Get KVNO nurse visits------------------------------------------ */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $total_patients_final);
			$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();

			foreach($kvno_nurse_visits_arr as $nurse => $value_nurse)
			{
				$pat_visit_nurse['nurse_visit'][$value_nurse['ipid']]['ipid'] = $value_nurse['ipid'];
				$pat_visit_nurse['nurse_visit'][$value_nurse['ipid']]['visit_id'][] = $value_nurse['id'];
				$pat_visit_nurse['nurse_visit'][$value_nurse['ipid']]['km_distance'] += trim(str_replace('km', '', $value_nurse['fahrtstreke_km']));
				$pat_visit_nurse['nurse_visit'][$value_nurse['ipid']]['driving_time'] += $value_nurse['fahrtzeit'];
				$pat_visit_nurse['nurse_visit'][$value_nurse['ipid']]['rides'] = count($pat_visit_nurse['nurse_visit'][$value_nurse['ipid']]['visit_id']);
			}

			if(empty($pat_visit_nurse))
			{
				$pat_visit_nurse['9999999999'] = '0000';
			}

			/* ------------------------------------  Get KVNO koordination visits------------------------------------------ */
			$kvno_koordination_visits = Doctrine_Query::create()
				->select("*")
				->from("VisitKoordination")
				->whereIn('ipid', $total_patients_final);
			$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

			foreach($kvno_koordination_visits_arr as $koordination => $value_koordination)
			{
				$pat_visit_koordination['koordination_visit'][$value_koordination['ipid']]['ipid'] = $value_koordination['ipid'];
				$pat_visit_koordination['koordination_visit'][$value_koordination['ipid']]['visit_id'][] = $value_koordination['id'];
				$pat_visit_koordination['koordination_visit'][$value_koordination['ipid']]['km_distance'] += trim(str_replace('km', '', $value_koordination['fahrtstreke_km']));
				$pat_visit_koordination['koordination_visit'][$value_koordination['ipid']]['driving_time'] += $value_koordination['fahrtzeit'];
				$pat_visit_koordination['koordination_visit'][$value_koordination['ipid']]['rides'] = count($pat_visit_koordination['koordination_visit'][$value_koordination['ipid']]['visit_id']);
			}

			if(empty($pat_visit_koordination))
			{
				$pat_visit_koordination['9999999999'] = '0000';
			}

			/* ------------------------------------  Get Bayern doctor visits------------------------------------------ */
			$bayern_visits = Doctrine_Query::create()
				->select("*")
				->from("BayernDoctorVisit")
				->whereIn('ipid', $total_patients_final);
			$bayern_visits_arr = $bayern_visits->fetchArray();

			foreach($bayern_visits_arr as $bayern => $value_bayern)
			{
				$pat_visit_bayern['bayern_visit'][$value_bayern['ipid']]['ipid'] = $value_bayern['ipid'];
				$pat_visit_bayern['bayern_visit'][$value_bayern['ipid']]['visit_id'][] = $value_bayern['id'];
				$pat_visit_bayern['bayern_visit'][$value_bayern['ipid']]['km_distance'] += trim(str_replace('km', '', $value_bayern['fahrtstreke_km']));
				$pat_visit_bayern['bayern_visit'][$value_bayern['ipid']]['driving_time'] += $value_bayern['fahrtzeit'];
				$pat_visit_bayern['bayern_visit'][$value_bayern['ipid']]['rides'] = count($pat_visit_bayern['bayern_visit'][$value_bayern['ipid']]['visit_id']);
			}

			if(empty($pat_visit_bayern))
			{
				$pat_visit_bayern['9999999999'] = '0000';
			}

			$total_patient_visits = array_merge($pat_visit_doc, $pat_visit_nurse, $pat_visit_koordination, $pat_visit_bayern);

			foreach($total_patient_visits as $visit => $patient_visits)
			{
				foreach($patient_visits as $patient)
				{
					$final_patients_visits[$patient['ipid']]['overall_time'] += $patient['driving_time'];
					$final_patients_visits[$patient['ipid']]['overall_km'] += $patient['km_distance'];
					$final_patients_visits[$patient['ipid']]['overall_drives'] += $patient['rides'];
					$dbg_final_patients_visits[$visit][$patient['ipid']]['overall_time'] += $patient['driving_time'];
					$dbg_final_patients_visits[$visit][$patient['ipid']]['overall_km'] += $patient['km_distance'];
					$dbg_final_patients_visits[$visit][$patient['ipid']]['overall_drives'] += $patient['rides'];
				}
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r($dbg_final_patients_visits);
			}
			/* ------------------------------------Get treatment days------------------------------------------ */
			$pm = new PatientMaster();
			if(count($total_patients_final) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($total_patients_final);
			}

			/* ------------------------------------Display all results ------------------------------------------ */
			$total_active_days = 0;
			$total_visits_time = 0;
			$total_visits_km = 0;
			$total_visits_nr = 0;
			$i = 0;

			foreach($total_patients as $keypatient => $patient)
			{
				$MasterData['data'][$patient['ipid']]['epid'] = $patient_array[$patient['ipid']]['epid'];
				$MasterData['data'][$patient['ipid']]['lastname'] = $patient_array[$patient['ipid']]['last_name'];
				$MasterData['data'][$patient['ipid']]['firstname'] = $patient_array[$patient['ipid']]['first_name'];
				$MasterData['data'][$patient['ipid']]['overall_km'] = round(2 * $final_patients_visits[$patient['ipid']]['overall_km'], 2);
				$MasterData['data'][$patient['ipid']]['overall_time'] = 2 * $final_patients_visits[$patient['ipid']]['overall_time'];
				$MasterData['data'][$patient['ipid']]['overall_rides'] = $final_patients_visits[$patient['ipid']]['overall_drives'];
				$MasterData['data'][$patient['ipid']]['treateddays'] = $treatedarr[$patient['ipid']]['realActiveDays'];

				$total_active_days += $treatedarr[$patient['ipid']]['realActiveDays'];
				$total_visits_time += $MasterData['data'][$patient['ipid']]['overall_time'];
				$total_visits_km += $MasterData['data'][$patient['ipid']]['overall_km'];
				$total_visits_nr += $MasterData['data'][$patient['ipid']]['overall_rides'];
				$i++;
				$median_treateddays_arr[] = $treatedarr[$patient['ipid']]['realActiveDays'];
				$median_time_arr[] = $MasterData['data'][$patient['ipid']]['overall_time'];
				$median_km_arr[] = $MasterData['data'][$patient['ipid']]['overall_km'];
			}

			$median_treateddays = Pms_CommonData::calculate_median($median_treateddays_arr);
			$median_time = Pms_CommonData::calculate_median($median_time_arr);
			$median_km = Pms_CommonData::calculate_median($median_km_arr);


			$MasterData['extra']['average'] = round($total_active_days / $i, 2);
			$MasterData['extra']['average_time'] = round($total_visits_time / $i, 2);
			$MasterData['extra']['average_km'] = round($total_visits_km / $i, 2);
			$MasterData['extra']['average_treateddays'] = round($total_active_days / $i, 2);

			$MasterData['extra']['sum_rides'] = $total_visits_nr;
			$MasterData['extra']['sum_km'] = $total_visits_km;
			$MasterData['extra']['sum_time'] = $total_visits_time;

			$MasterData['extra']['median_km'] = $median_km;
			$MasterData['extra']['median_time'] = $median_time;
			$MasterData['extra']['median_treateddays'] = $median_treateddays;
			return $MasterData;
		}

		public function kv_average_treatment_duration($params)
		{
			// report_id = 80
			// report_name = KV Nordrhein - durchschnittliche Betreuungsdauer
			// 16) KV Nordrhein - durchschnittliche Betreuungsdauer
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG which have died or got discharged IN REPORT PERIOD are taken here
			// from the selected patients ALL ACTIVE days are taken, even outside report period.
			// treatment days for every patient
			// average for all
			// media for all
			//+++ Radu new column "Fall" - splitted into patient admissions periods and count active days in each period
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
				$patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
			}

			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get only patients that have SAPV -------------------- */
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $allfinal)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			$valid_ipids_str = "'0',";
			foreach($valid_ipids as $key => $val_ip)
			{
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			/* -----------------  Get all Discharged / Dead  Patients  in report period  -------------------- */
			$dispatients_met = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($valid_ipids_str, 0, -1) . ")")
				->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andWhere("isdelete=0");
			$methode_patients = $dispatients_met->fetchArray();

			foreach($methode_patients as $kh => $val_pat)
			{
				$discharged_patients_arr[$val_pat['ipid']]['ipid'] = $val_pat['ipid'];
				$discharged_patients_arr[$val_pat['ipid']]['discharge_date'] = date('d.m.Y', strtotime($val_pat['discharge_date']));
			}

			if(!empty($discharged_patients_arr) && !empty($death_patients_arr))
			{
				$total_patients = array_merge($discharged_patients_arr, $death_patients_arr);
			}
			else if(empty($discharged_patients_arr))
			{
				$total_patients = $death_patients_arr;
			}
			else if(empty($death_patients_arr))
			{
				$total_patients = $discharged_patients_arr;
			}
			else
			{
				$total_patients = '';
			}

			$total_discharge_patients = count($total_patients);

			foreach($total_patients as $key => $val)
			{
				$total_patients_final[] = $val['ipid'];
			}
			if(empty($total_patients_final))
			{
				$total_patients_final[999999]['ipid'] = 'X';
			}

			$total_patients_final = array_unique($total_patients_final);

			$pm = new PatientMaster();
			if(count($total_patients_final) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($total_patients_final);
			}

			/* ------------------------------------Display all results ------------------------------------------ */
			$total_active_days = 0;
			$total_periods_active_days = 0;
			$i = 0;
			$ifall = 0;
			$median_arr = array();
			$median_fall_periods = array();

			foreach($total_patients as $keypatient => $patient)
			{
				$MasterData['data'][$patient['ipid']]['epid'] = $patient_array[$patient['ipid']]['epid'];
				$MasterData['data'][$patient['ipid']]['lastname'] = $patient_array[$patient['ipid']]['last_name'];
				$MasterData['data'][$patient['ipid']]['firstname'] = $patient_array[$patient['ipid']]['first_name'];

				if(count($treatedarr[$patient['ipid']]['admissionDates']) > 0)
				{
					foreach($treatedarr[$patient['ipid']]['admissionDates'] as $k_treated_patient => $v_treated_patient)
					{
						$MasterData['data'][$patient['ipid']]['fall'][$k_treated_patient]['fall_start'] = date('d.m.Y', strtotime($v_treated_patient['date']));
						$MasterData['data'][$patient['ipid']]['fall'][$k_treated_patient]['fall_end'] = date('d.m.Y', strtotime($treatedarr[$patient['ipid']]['dischargeDates'][$k_treated_patient]['date']));

						$fall_days = $pm->getDaysDiff($v_treated_patient['date'], $treatedarr[$patient['ipid']]['dischargeDates'][$k_treated_patient]['date']);
						$MasterData['data'][$patient['ipid']]['fall'][$k_treated_patient]['fall_days'] = $fall_days;

						$total_periods_active_days += $fall_days;
						$median_fall_periods[$ifall] = $fall_days;
						$ifall++;
					}
				}
				else
				{
					$MasterData['data'][$patient['ipid']]['fall'][0]['fall_start'] = date('d.m.Y', strtotime($treatedarr[$patient['ipid']]['admission_date']));
					$MasterData['data'][$patient['ipid']]['fall'][0]['fall_end'] = date('d.m.Y', strtotime($treatedarr[$patient['ipid']]['discharge_date']));

					$fall_days = $pm->getDaysDiff($treatedarr[$patient['ipid']]['admission_date'], $treatedarr[$patient['ipid']]['discharge_date']);
					$MasterData['data'][$patient['ipid']]['fall'][0]['fall_days'] = $fall_days;

					$total_periods_active_days += $fall_days;
					$median_fall_periods[$ifall] = $fall_days;
					$ifall++;
				}

				$MasterData['data'][$patient['ipid']]['treateddays'] = $treatedarr[$patient['ipid']]['realActiveDays'];


				$total_active_days += $treatedarr[$patient['ipid']]['realActiveDays'];
				$median_arr[] = $treatedarr[$patient['ipid']]['realActiveDays'];
				$i++;
			}

			if($_REQUEST['dbg'])
			{
				print_r("Patient Real Active Days");
				sort($median_arr);
				print_r($median_arr);
				print_r("\n\n");
				print_r(count($median_arr));

				print_r("Patient Fall Active days");
				sort($median_fall_periods);
				print_r($median_fall_periods);
				print_r("\n\n");
				print_r(count($median_fall_periods));
			}
			$median = Pms_CommonData::calculate_median($median_arr);
			$median_fall = Pms_CommonData::calculate_median($median_fall_periods);


			$MasterData['extra']['average'] = round($total_active_days / $i, 2);
			$MasterData['extra']['median'] = $median;

			$MasterData['extra']['average_patient_period'] = round($total_periods_active_days / $i, 2);
			$MasterData['extra']['average_fall_period'] = round($total_periods_active_days / $ifall, 2);
			$MasterData['extra']['median_fall'] = $median_fall;

			return $MasterData;
		}

		public function kv_average_operating_time($params)
		{
			// report_id = 83
			// report_name =  17) KV Nordrhein - durchschnittliche Einsatzzeit
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG which have died or got discharged IN REPORT PERIOD are taken here
			// from the selected patients ALL days are taken, even ones in STANDBY, even outside report period.
			// count all MINUTES done in verlauf (Beratung, Koordination) and visit forms
			// minute per patient
			// average for all
			// media for all
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0');

			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
			}
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get only patients that have SAPV -------------------- */
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $allfinal)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();

			$valid_ipids_str = "'0',";
			foreach($valid_ipids as $key => $val_ip)
			{
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			/* ----------------- Get All Discharged Patients IN REPORT PERIODE -------------------- */
			$dispatients_met = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($valid_ipids_str, 0, -1) . ")")
				->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andWhere("isdelete=0");
			$methode_patients = $dispatients_met->fetchArray();

			foreach($methode_patients as $kh => $val_pat)
			{
				$total_patients_final[$kh]['ipid'] = $val_pat['ipid'];
				$total_patients_array[] = $val_pat['ipid'];
			}
			if(count($total_patients_array) == '0')
			{
				$total_patients_array[] = 'xxxx';
			}

			/* ------------------------Get all "Bertrag" details from patients----------------------------------- */
			$previleges = new Modules();
			$modulepriv = $previleges->checkModulePrivileges("55", $logininfo->clientid);

			if($modulepriv)
			{
				$lnrquery = " OR AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT'";
			}
			else
			{
				$lnrquery = "";
			}

			$course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $total_patients_array)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U' " . $lnrquery . "")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$coursearray = $course->fetchArray();

			foreach($coursearray as $course_key => $course_val)
			{
				$coursearr = explode("|", $course_val['course_title']);
				$consulting_array[$patient_array[$course_val['ipid']]['epid']][] = $course_val['course_title'];

				if(count($coursearr) == 3)
				{ //method implemented with 3 inputs
					$minutes_array['consulting'][$course_val['ipid']]['consulting_minutes'] +=intval($coursearr[0]);
				}
				else if(count($coursearr) != 3 && count($coursearr) < 3)
				{ //old method before anlage 10
					$minutes_array['consulting'][$course_val['ipid']]['consulting_minutes'] +=intval($coursearr[0]);
				}
				else if(count($coursearr) != 3 && count($coursearr) > 3)
				{ //new method (U) 3 inputs and 1 select newly added in verlauf
					$minutes_array['consulting'][$course_val['ipid']]['consulting_minutes'] +=intval($coursearr[1]);
				}
				$minutes_array['consulting'][$course_val['ipid']]['ipid'] = $course_val['ipid'];
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n beratrung- telefon \n");
				print_r($consulting_array);
			}
			/* -----------------------Get all "Koordination" details from patients ------------------------------ */
			$courseV = Doctrine_Query::create()
				->select("ipid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $total_patients_array)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere('source_ipid = ""')
				->andWhere("wrong = 0")
				->orderBy('course_date ASC');
			$coursearrayV = $courseV->fetchArray();

			foreach($coursearrayV as $courseV_key => $courseV_val)
			{
				$coursearrV = explode("|", $courseV_val['course_title']);

				$coordination_array[$patient_array[$courseV_val['ipid']]['epid']][] = $courseV_val['course_title'];

				if(count($coursearrV) == 3)
				{
					$minutes_array['coordination'][$courseV_val['ipid']]['coordination_minutes'] +=intval($coursearrV[0]);
				}
				else if(count($coursearrV) != 3)
				{
					$minutes_array['coordination'][$courseV_val['ipid']]['coordination_minutes'] +=intval($coursearrV[0]);
				}
				$minutes_array['coordination'][$courseV_val['ipid']]['ipid'] = $courseV_val['ipid'];
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordination \n");
				print_r($coordination_array);
			}

			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhereIn('ipid', $total_patients_array);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("KvnoDoctor d")
				->whereIn('d.ipid', $total_patients_array)
				->andWhereNotIn('d.id', $del_visits['kvno_doctor_form']);
			$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();


			foreach($kvno_doctor_visits_arr as $doc => $value_doc)
			{
				$dvizit_date_array = date('d.m.Y', strtotime($value_doc['vizit_date']));
				$dvizit_date_arr = explode(".", $dvizit_date_array);
				$start_date = mktime($value_doc['kvno_begin_date_h'], $value_doc['kvno_begin_date_m'], 0, $dvizit_date_arr[1], $dvizit_date_arr[0], $dvizit_date_arr[2]);
				$end_date = mktime($value_doc['kvno_end_date_h'], $value_doc['kvno_end_date_m'], 0, $dvizit_date_arr[1], $dvizit_date_arr[0], $dvizit_date_arr[2]);
				$dviz_minutes = round(($end_date - $start_date) / 60);
				$minutes_array['doctor_visit'][$value_doc['ipid']]['visit_minutes'] += $dviz_minutes;
				$minutes_array['doctor_visit'][$value_doc['ipid']]['ipid'] = $value_doc['ipid'];
				$dminutes_array['doctor_visit'][$value_doc['ipid']]['visit_minutes'] += $dviz_minutes;
				$dminutes_array['doctor_visit'][$value_doc['ipid']]['ipid'] = $value_doc['ipid'];
				$doctor_visits_dbg[$patient_array[$value_doc['ipid']]['epid']][$value_doc['create_date']] = 'Besuchsformular Arzt: ' . $dvizit_date_array . ' ' . $value_doc['kvno_begin_date_h'] . ':' . $value_doc['kvno_begin_date_m'] . ' -> ' . $dvizit_date_array . ' ' . $value_doc['kvno_end_date_h'] . ':' . $value_doc['kvno_end_date_m'] . '';
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n doctor_visits \n");
				print_r($doctor_visits_dbg);
			}
			/* ----------------------Get all "nurse visits" details from patients----------------------------- */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $total_patients_array)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form']);
			$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();

			foreach($kvno_nurse_visits_arr as $nur => $value_nur)
			{
				$nvizit_date_array = date('d.m.Y', strtotime($value_nur['vizit_date']));
				$nvizit_date_arr = explode(".", $nvizit_date_array);
				$start_date = mktime($value_nur['kvno_begin_date_h'], $value_nur['kvno_begin_date_m'], 0, $nvizit_date_arr[1], $nvizit_date_arr[0], $nvizit_date_arr[2]);
				$end_date = mktime($value_nur['kvno_end_date_h'], $value_nur['kvno_end_date_m'], 0, $nvizit_date_arr[1], $nvizit_date_arr[0], $nvizit_date_arr[2]);
				$nviz_minutes = round(($end_date - $start_date) / 60);
				$minutes_array['nurse_visit'][$value_nur['ipid']]['visit_minutes'] += $nviz_minutes;
				$minutes_array['nurse_visit'][$value_nur['ipid']]['ipid'] = $value_nur['ipid'];
				$nurse_visits_dbg[$patient_array[$value_nur['ipid']]['epid']][$value_nur['create_date']] = 'Besuchsformular Pflege: ' . $nvizit_date_array . ' ' . $value_nur['kvno_begin_date_h'] . ':' . $value_nur['kvno_begin_date_m'] . ' -> ' . $nvizit_date_array . ' ' . $value_nur['kvno_end_date_h'] . ':' . $value_nur['kvno_end_date_m'] . '';
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n nurse_visits \n");
				print_r($nurse_visits_dbg);
			}

			/* ----------------------Get all "koordination visits" details from patients----------------------------- */
			$kvno_koordination_visits = Doctrine_Query::create()
				->select("*")
				->from("VisitKoordination")
				->whereIn('ipid', $total_patients_array)
				->andWhereNotIn('id', $del_visits['visit_koordination_form']);
			$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

			foreach($kvno_koordination_visits_arr as $koord => $value_koord)
			{
				$vizit_date_array = date('d.m.Y', strtotime($value_koord['visit_date']));
				$vizit_date_arr = explode(".", $vizit_date_array);
				$start_date = mktime($value_koord['visit_begin_date_h'], $value_koord['visit_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
				$end_date = mktime($value_koord['visit_end_date_h'], $value_koord['visit_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
				$viz_minutes = round(($end_date - $start_date) / 60);
				$minutes_array['koordination_visit'][$value_koord['ipid']]['visit_minutes'] += $viz_minutes;
				$minutes_array['koordination_visit'][$value_koord['ipid']]['ipid'] = $value_koord;
				$koordinator_visits_dbg[$patient_array[$value_koord['ipid']]['epid']][$value_koord['create_date']] = 'Besuchsformular Koordination: ' . $vizit_date_array . ' ' . $value_koord['visit_begin_date_h'] . ':' . $value_koord['visit_begin_date_m'] . ' -> ' . $vizit_date_array . ' ' . $value_koord['visit_end_date_h'] . ':' . $value_koord['visit_end_date_m'] . '';
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordinator_visits \n");
				print_r($koordinator_visits_dbg);
				print_r("\n rest of data \n");
			}

			/* ----------------------Prepare data for display ----------------------------- */
			$total_patients_visits = $minutes_array;

			foreach($total_patients_visits as $visit => $patient_visits)
			{
				foreach($patient_visits as $patientm)
				{
					$final_patients_visits[$patientm['ipid']]['consulting_minutes'] += $patientm['consulting_minutes'];
					$final_patients_visits[$patientm['ipid']]['coordination_minutes'] += $patientm['coordination_minutes'];
					$final_patients_visits[$patientm['ipid']]['visit_minutes'] += $patientm['visit_minutes'];
					$dbg_final_patients_visits[$patientm['ipid']]['consulting_minutes'] += $patientm['consulting_minutes'];
					$dbg_final_patients_visits[$patientm['ipid']]['coordination_minutes'] += $patientm['coordination_minutes'];
					$dbg_final_patients_visits[$patientm['ipid']]['visit_minutes'] += $patientm['visit_minutes'];
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r($total_patients_array);
				print_r($total_patients_visits);
				print_r($dbg_final_patients_visits);
			}
			/* ------------------------------------Get treatment days------------------------------------------ */
			$pm = new PatientMaster();
			if(count($valid_ipids_arr) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($valid_ipids_arr);
			}
			/* ------------------------------------Display all results ------------------------------------------ */
			$total_active_days = 0;
			$total_consulting_minutes = 0;
			$total_coordination_minutes = 0;
			$total_visits_minutes = 0;
			$pat_acumulated_minutes = 0;
			$total_patient_minutes = 0;
			$i = 0;

			if(!empty($total_patients_final))
			{
				foreach($total_patients_final as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient_array[$patient['ipid']]['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient_array[$patient['ipid']]['last_name'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient_array[$patient['ipid']]['first_name'];
					if(!empty($final_patients_visits[$patient['ipid']]['consulting_minutes']))
					{
						$MasterData['data'][$patient['ipid']]['consulting_minutes'] = $final_patients_visits[$patient['ipid']]['consulting_minutes'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['consulting_minutes'] = 0;
					}
					if(!empty($final_patients_visits[$patient['ipid']]['coordination_minutes']))
					{
						$MasterData['data'][$patient['ipid']]['coordination_minutes'] = $final_patients_visits[$patient['ipid']]['coordination_minutes'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['coordination_minutes'] = 0;
					}
					if(!empty($final_patients_visits[$patient['ipid']]['visit_minutes']))
					{
						$MasterData['data'][$patient['ipid']]['visits_minutes'] = $final_patients_visits[$patient['ipid']]['visit_minutes'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['visits_minutes'] = 0;
					}
					$MasterData['data'][$patient['ipid']]['treateddays'] = $treatedarr[$patient['ipid']]['realActiveDays'];
					$pat_acumulated_minutes = $MasterData['data'][$patient['ipid']]['consulting_minutes'] + $MasterData['data'][$patient['ipid']]['coordination_minutes'] + $MasterData['data'][$patient['ipid']]['visit_minutes'];
					$MasterData['data'][$patient['ipid']]['patient_accumulated_minutes'] = $pat_acumulated_minutes;
					$total_active_days += $treatedarr[$patient['ipid']]['realActiveDays'];
					$total_consulting_minutes += $MasterData['data'][$patient['ipid']]['consulting_minutes'];
					$total_coordination_minutes += $MasterData['data'][$patient['ipid']]['coordination_minutes'];
					$total_visits_minutes += $MasterData['data'][$patient['ipid']]['visits_minutes'];
					$total_patient_minutes += $MasterData['data'][$patient['ipid']]['patient_accumulated_minutes'];
					$median_active_days_arr[] = $treatedarr[$patient['ipid']]['realActiveDays'];
					$median_consulting_minutes_arr[] = $MasterData['data'][$patient['ipid']]['consulting_minutes'];
					$median_coordination_minutes_arr[] = $MasterData['data'][$patient['ipid']]['coordination_minutes'];
					$median_visits_minutes_arr[] = $MasterData['data'][$patient['ipid']]['visits_minutes'];
					$median_patient_minutes_arr[] = $MasterData['data'][$patient['ipid']]['patient_accumulated_minutes'];
					$i++;
				}

				$median_active_days = Pms_CommonData::calculate_median($median_active_days_arr);
				$median_consulting_minutes = Pms_CommonData::calculate_median($median_consulting_minutes_arr);
				$median_coordination_minutes = Pms_CommonData::calculate_median($median_coordination_minutes_arr);
				$median_visits_minutes = Pms_CommonData::calculate_median($median_visits_minutes_arr);
				$median_patient_minutes = Pms_CommonData::calculate_median($median_patient_minutes_arr);
				$MasterData['extra']['average_active_days'] = round($total_active_days / $i, 2);
				$MasterData['extra']['average_consulting_minutes'] = round($total_consulting_minutes / $i, 2);
				$MasterData['extra']['average_coordination_minutes'] = round($total_coordination_minutes / $i, 2);
				$MasterData['extra']['average_visits_minutes'] = round($total_visits_minutes / $i, 2);
				$MasterData['extra']['average_patient_minutes'] = round($total_patient_minutes / $i, 2);
				$MasterData['extra']['sum_active_days'] = $total_active_days;
				$MasterData['extra']['sum_consulting_minutes'] = $total_consulting_minutes;
				$MasterData['extra']['sum_coordination_minutes'] = $total_coordination_minutes;
				$MasterData['extra']['sum_visits_minutes'] = $total_visits_minutes;
				$MasterData['extra']['sum_patient_minutes'] = $total_patient_minutes;
				$MasterData['extra']['median_consulting_minutes'] = $median_consulting_minutes;
				$MasterData['extra']['median_coordination_minutes'] = $median_coordination_minutes;
				$MasterData['extra']['median_visits_minutes'] = $median_visits_minutes;
				$MasterData['extra']['median_active_days'] = $median_active_days;
				$MasterData['extra']['median_patient_minutes'] = $median_patient_minutes;
				return $MasterData;
			}
		}

		public function kv_average_operating_time_unpaid($params)
		{
			// report_id = 94 (isdelete = 1)
			// report_name = 17) KV Nordrhein - durchschnittliche Einsatzzeit
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG which have died or got discharged IN REPORT PERIOD are taken here
			// from the selected patients ALL days are taken, even ones in STANDBY, even outside report period.
			// count all MINUTES done in verlauf (Beratung, Koordination) and visit forms
			// minute per patient
			// average for all
			// media for all
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$patientmaster = new PatientMaster();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			/* -------------------------REPORT PERIOD DAYS LIS------------------------------------ */
			foreach($period ['start'] as $keyd => $startDate)
			{
				$periodDays [] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			$start_period = $finalPeriodDays[0]; // first day
			$end_period = end($finalPeriodDays); // last day
			$start_period_str = strtotime($start_period);
			$end_period_str = strtotime($end_period);
			/* ----------------- Get Client Discharge Methods-------------------- */
			$cl_dischagre_methods = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('clientid=' . $clientid)
				->andWhere('isdelete = 0');
			$cl_dischagre_methods_array = $cl_dischagre_methods->fetchArray();


			foreach($cl_dischagre_methods_array as $disc_method)
			{
				$global_discharge_methods[$disc_method['id']]['discharge_method_name'] = $disc_method['description'];
				$global_discharge_methods[$disc_method['id']]['discharge_method_id'] = $disc_method['id'];
				if($disc_method['abbr'] == 'TOD' || $disc_method['abbr'] == 'TODNA')
				{
					$global_discharge_methods_dead[] = $disc_method['id'];
				}
			}
			if(empty($global_discharge_methods))
			{
				$global_discharge_methods[] = 'xxx';
			}

			if(empty($global_discharge_methods_dead))
			{
				$global_discharge_methods_dead[] = 'xxx';
			}
			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
			}
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get only patients that have SAPV -------------------- */
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $allfinal)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$valid_ipids = $patientsapv->fetchArray();
			$valid_ipids_str = "'0',";

			foreach($valid_ipids as $key => $val_ip)
			{
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			/* ----------------- Get All Discharged Patients IN REPORT PERIODE -------------------- */
			$dispatients_met = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->where(" ipid IN (" . substr($valid_ipids_str, 0, -1) . ")")
				->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andWhere("isdelete=0");
			$methode_patients = $dispatients_met->fetchArray();

			foreach($methode_patients as $kh => $val_pat)
			{
				$patients_discharge_date[$val_pat['ipid']] = $val_pat['discharge_date'];
				$total_patients_final[$kh]['ipid'] = $val_pat['ipid'];
				$total_patients_array[] = $val_pat['ipid'];
			}
			if(count($total_patients_array) == '0')
			{
				$total_patients_array[] = 'xxxx';
			}
			/* ----------------- Patients - Active days (to do - in report period)  -------------------- */
			$active_dots = $patientmaster->getTreatedDaysRealMultiple($total_patients_array);

			foreach($active_dots as $pt => $pt_values)
			{
				foreach($pt_values['admissionDates'] as $kadm => $val)
				{
					if(empty($patient_active_periods[$pt]))
					{
						$patient_active_periods[$pt] = array();
					}
					$patient_active_periods[$pt] = array_merge($patient_active_periods[$pt], $patientmaster->getDaysInBetween(date('Y-m-d', strtotime($val['date'])), date('Y-m-d', strtotime($pt_values['dischargeDates'][$kadm]['date']))));
				}
			}
			/* ----------------- Patients - VALID all sapv days (to do - limit to admissions and discharge dates) ---------- */
			$patientsapv_days = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $total_patients_array)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.isdelete = 0');
			$sapv_days_q = $patientsapv_days->fetchArray();

			foreach($sapv_days_q as $key => $sapv_item)
			{
				$discharge_date = date('Y-m-d', strtotime($patients_discharge_date[$sapv_item['ipid']]));

				$patient_sapv_days[$sapv_item['ipid']][$key]['start'] = date('Y-m-d', strtotime($sapv_item['verordnungam']));
				$patient_sapv_days[$sapv_item['ipid']][$key]['start_sapv'] = strtotime($patient_sapv_days[$sapv_item['ipid']][$key]['start']);
				$patient_sapv_days[$sapv_item['ipid']][$key]['start_period'] = $start_period_str;
				$patient_sapv_days[$sapv_item['ipid']][$key]['end_period'] = $end_period_str;
				$patient_sapv_days[$sapv_item['ipid']][$key]['end'] = date('Y-m-d', strtotime($sapv_item['verordnungbis']));
				$patient_sapv_days[$sapv_item['ipid']][$key]['end_sapv'] = strtotime($sapv_item['verordnungbis']);
				$patient_sapv_days[$sapv_item['ipid']][$key]['disabled'] = $sapv_item['verorddisabledate'];
				$patient_sapv_days[$sapv_item['ipid']][$key]['status'] = $sapv_item['status'];
				$patient_sapv_days[$sapv_item['ipid']][$key]['discharge_date'] = $discharge_date;

				if(($patient_sapv_days[$sapv_item['ipid']][$key]['start_sapv'] > $patient_sapv_days[$sapv_item['ipid']][$key]['end_period']) ||
					($patient_sapv_days[$sapv_item['ipid']][$key]['end_sapv'] < $patient_sapv_days[$sapv_item['ipid']][$key]['start_period']))
				{
					$patient_invalid_sapv_days[$sapv_item['ipid']][$key] = $patientmaster->getDaysInBetween($sapv_item['verordnungam'], $sapv_item['verordnungbis']);

					unset($patient_sapv_days[$sapv_item['ipid']][$key]); // remove from valid  sapv
				}
				else
				{
					$sapv_days_start = $patient_sapv_days[$sapv_item['ipid']][$key]['start'];
					$sapv_days_end = $patient_sapv_days[$sapv_item['ipid']][$key]['end'];
					$sapv_days_start_str = "s_sapv";
					$sapv_days_end_str = "e_sapv";

					if($sapv_item['status'] != 1 && ($patient_sapv_days[$sapv_item['ipid']][$key]['start_sapv'] < $patient_sapv_days[$sapv_item['ipid']][$key]['start_period']))
					{
						$sapv_days_start = $start_period;
						$sapv_days_start_str = "report_period";
					}
					if($sapv_item['status'] == 1 && $sapv_item['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv_item['verorddisabledate'] != '1970-01-01 00:00:00')
					{
						$sapv_days_end = date('Y-m-d', strtotime($sapv_item['verorddisabledate']));
						$sapv_days_end_str = "disabledate";
					}
					if(($patient_sapv_days[$sapv_item['ipid']][$key]['end_sapv'] > strtotime($discharge_date)))
					{
						$sapv_days_end = $patient_sapv_days[$sapv_item['ipid']][$key]['discharge_date'];
						$sapv_days_end_str = "discharge_date";
					}

					if($sapv_item['status'] != 1 && ($patient_sapv_days[$sapv_item['ipid']][$key]['end_sapv'] > $patient_sapv_days[$sapv_item['ipid']][$key]['end_period']))
					{
						$sapv_days_end_str = "resport_period_stop";
						$sapv_days_end = $end_period;
					}

					$patient_sapv_days[$sapv_item['ipid']][$key]['final_start'] = $sapv_days_start_str;
					$patient_sapv_days[$sapv_item['ipid']][$key]['final_end'] = $sapv_days_end_str;

					$patient_sapv_days[$sapv_item['ipid']][$key]['period'] = $patientmaster->getDaysInBetween($sapv_days_start, $sapv_days_end);

					$patient_sapv_valid_days[$sapv_item['ipid']][$key] = $patientmaster->getDaysInBetween($sapv_days_start, $sapv_days_end);

					if($sapv_item['status'] == 1 && ($sapv_item['verorddisabledate'] == '0000-00-00 00:00:00' && $sapv_item['verorddisabledate'] == '1970-01-01 00:00:00'))
					{
						$patient_invalid_sapv_days[$sapv_item['ipid']][$key] = $patientmaster->getDaysInBetween($sapv_item['verordnungam'], $sapv_item['verordnungbis']);

						unset($patient_sapv_days[$sapv_item['ipid']][$key]); // remove from valid  sapv
					}
				}
			}

			foreach($patient_sapv_valid_days as $pat => $periods)
			{
				foreach($periods as $k => $values)
				{
					if(empty($patient_sapv_priods[$pat]))
					{
						$patient_sapv_priods[$pat] = array();
					}
					$patient_sapv_priods[$pat] = array_merge($patient_sapv_priods[$pat], $values);
				}
				$patient_sapv_priods[$pat] = array_unique($patient_sapv_priods[$pat]);
			}

			/* -------------------------------------- Get Client HOSPITAL Locations   ----------------------------- */
			$hospitalids = Doctrine_Query::create()
				->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type =1');
			$hosparray = $hospitalids->fetchArray();

			$comma = ",";
			$hospstr = "'X'";
			foreach($hosparray as $hospital)
			{

				$hospstr .= $comma . "'" . $hospital['id'] . "'";
				$comma = ",";
			}
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $active_cond['interval_location_sql']));

			/* -------- get patient locations and ipids based on master hospital ids and into selected time period ----------- */
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('location_id IN (' . $hospstr . ')')
				->andWhere('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('(' . $time_interval . ')')
				->andWhere('ipid != ""')
				->andwhereIn('ipid', $total_patients_array)
				->orderBy('valid_from,id ASC');
			$locationsarr = $locations->fetchArray();

			$comma = ",";
			$ipidlocationstr = "'X'";
			foreach($locationsarr as $ky => $location)
			{
				$patient_hospital_det[$location['ipid']][$ky]['valid_from'] = $location['valid_from'];
				$patient_hospital_det[$location['ipid']][$ky]['valid_till'] = $location['valid_till'];
				$patient_hospital_det[$location['ipid']][$ky]['discharge'] = $patients_discharge_date[$location['ipid']];

				$discharge_date = strtotime(date('d.m.Y', strtotime($patients_discharge_date[$location['ipid']])));
				$location_end_date = strtotime(date('d.m.Y', strtotime($patient_hospital_det[$location['ipid']][$ky]['valid_till'])));

				if($location_end_date >= $discharge_date)
				{
					$patient_hospital_days[$location['ipid']][$ky] = $patientmaster->getDaysInBetween(date('d.m.Y', strtotime($location['valid_from'])), date('d.m.Y', strtotime($patients_discharge_date[$location['ipid']])));
				}
				else
				{
					$patient_hospital_days[$location['ipid']][$ky] = $patientmaster->getDaysInBetween(date('d.m.Y', strtotime($location['valid_from'])), date('d.m.Y', strtotime($location['valid_till'])));
				}
			}

			foreach($patient_hospital_days as $pat => $periods)
			{
				foreach($periods as $k => $values)
				{
					if(empty($patient_hospital_period[$pat]))
					{
						$patient_hospital_period[$pat] = array();
					}
					$patient_hospital_period[$pat] = array_merge($patient_hospital_period[$pat], $values);
				}
				$patient_hospital_period[$pat] = array_unique($patient_hospital_period[$pat]);
			}
			/* ------------------------Get all "Bertrag" details from patients----------------------------------- */
			$previleges = new Modules();
			$modulepriv = $previleges->checkModulePrivileges("55", $logininfo->clientid);

			if($modulepriv)
			{
				$lnrquery = " OR AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT'";
			}
			else
			{
				$lnrquery = "";
			}

			$course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $total_patients_array)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U' " . $lnrquery . "")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$coursearray = $course->fetchArray();

			foreach($coursearray as $course_key => $course_val)
			{
				$coursearr = explode("|", $course_val['course_title']);
				$consulting_array[$patient_array[$course_val['ipid']]['epid']][] = $course_val['course_title'];

				if(count($coursearr) == 3)
				{ //method implemented with 3 inputs
					$minutes_array['consulting'][$course_val['ipid']]['consulting_minutes'] +=intval($coursearr[0]);
				}
				else if(count($coursearr) != 3 && count($coursearr) < 3)
				{ //old method before anlage 10
					$minutes_array['consulting'][$course_val['ipid']]['consulting_minutes'] +=intval($coursearr[0]);
				}
				else if(count($coursearr) != 3 && count($coursearr) > 3)
				{ //new method (U) 3 inputs and 1 select newly added in verlauf
					$minutes_array['consulting'][$course_val['ipid']]['consulting_minutes'] +=intval($coursearr[1]);
				}
				$minutes_array['consulting'][$course_val['ipid']]['ipid'] = $course_val['ipid'];
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n beratrung- telefon \n");
				print_r($consulting_array);
			}
			/* -----------------------Get all "Koordination" details from patients ------------------------------ */
			$courseV = Doctrine_Query::create()
				->select("ipid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $total_patients_array)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('course_date ASC');
			$coursearrayV = $courseV->fetchArray();

			foreach($coursearrayV as $courseV_key => $courseV_val)
			{
				$coursearrV = explode("|", $courseV_val['course_title']);

				$coordination_array[$patient_array[$courseV_val['ipid']]['epid']][] = $courseV_val['course_title'];

				if(count($coursearrV) == 3)
				{
					$minutes_array['coordination'][$courseV_val['ipid']]['coordination_minutes'] +=intval($coursearrV[0]);
				}
				else if(count($coursearrV) != 3)
				{
					$minutes_array['coordination'][$courseV_val['ipid']]['coordination_minutes'] +=intval($coursearrV[0]);
				}
				$minutes_array['coordination'][$courseV_val['ipid']]['ipid'] = $courseV_val['ipid'];
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordination \n");
				print_r($coordination_array);
			}
			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhereIn('ipid', $total_patients_array);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("KvnoDoctor d")
				->whereIn('d.ipid', $total_patients_array)
				->andWhereNotIn('d.id', $del_visits['kvno_doctor_form']);
			$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();

			foreach($kvno_doctor_visits_arr as $doc => $value_doc)
			{
				$dvizit_date_array = date('d.m.Y', strtotime($value_doc['vizit_date']));
				$dvizit_date_arr = explode(".", $dvizit_date_array);
				$start_date = mktime($value_doc['kvno_begin_date_h'], $value_doc['kvno_begin_date_m'], 0, $dvizit_date_arr[1], $dvizit_date_arr[0], $dvizit_date_arr[2]);
				$end_date = mktime($value_doc['kvno_end_date_h'], $value_doc['kvno_end_date_m'], 0, $dvizit_date_arr[1], $dvizit_date_arr[0], $dvizit_date_arr[2]);
				$dviz_minutes = round(($end_date - $start_date) / 60);
				$minutes_array['doctor_visit'][$value_doc['ipid']]['visit_minutes'] += $dviz_minutes;
				$minutes_array['doctor_visit'][$value_doc['ipid']]['ipid'] = $value_doc['ipid'];
				$dminutes_array['doctor_visit'][$value_doc['ipid']]['visit_minutes'] += $dviz_minutes;
				$dminutes_array['doctor_visit'][$value_doc['ipid']]['ipid'] = $value_doc['ipid'];
				$doctor_visits_dbg[$patient_array[$value_doc['ipid']]['epid']][$value_doc['create_date']] = 'Besuchsformular Arzt: ' . $dvizit_date_array . ' ' . $value_doc['kvno_begin_date_h'] . ':' . $value_doc['kvno_begin_date_m'] . ' -> ' . $dvizit_date_array . ' ' . $value_doc['kvno_end_date_h'] . ':' . $value_doc['kvno_end_date_m'] . '';
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n doctor_visits \n");
				print_r($doctor_visits_dbg);
			}
			/* ----------------------Get all "nurse visits" details from patients----------------------------- */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $total_patients_array)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form']);
			$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();
			foreach($kvno_nurse_visits_arr as $nur => $value_nur)
			{
				$nvizit_date_array = date('d.m.Y', strtotime($value_nur['vizit_date']));
				$nvizit_date_arr = explode(".", $nvizit_date_array);
				$start_date = mktime($value_nur['kvno_begin_date_h'], $value_nur['kvno_begin_date_m'], 0, $nvizit_date_arr[1], $nvizit_date_arr[0], $nvizit_date_arr[2]);
				$end_date = mktime($value_nur['kvno_end_date_h'], $value_nur['kvno_end_date_m'], 0, $nvizit_date_arr[1], $nvizit_date_arr[0], $nvizit_date_arr[2]);
				$nviz_minutes = round(($end_date - $start_date) / 60);

				$minutes_array['nurse_visit'][$value_nur['ipid']]['visit_minutes'] += $nviz_minutes;
				$minutes_array['nurse_visit'][$value_nur['ipid']]['ipid'] = $value_nur['ipid'];

				$nurse_visits_dbg[$patient_array[$value_nur['ipid']]['epid']][$value_nur['create_date']] = 'Besuchsformular Pflege: ' . $nvizit_date_array . ' ' . $value_nur['kvno_begin_date_h'] . ':' . $value_nur['kvno_begin_date_m'] . ' -> ' . $nvizit_date_array . ' ' . $value_nur['kvno_end_date_h'] . ':' . $value_nur['kvno_end_date_m'] . '';
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n nurse_visits \n");
				print_r($nurse_visits_dbg);
			}

			/* ----------------------Get all "koordination visits" details from patients----------------------------- */
			$kvno_koordination_visits = Doctrine_Query::create()
				->select("*")
				->from("VisitKoordination")
				->whereIn('ipid', $total_patients_array)
				->andWhereNotIn('id', $del_visits['visit_koordination_form']);
			$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

			foreach($kvno_koordination_visits_arr as $koord => $value_koord)
			{
				$vizit_date_array = date('d.m.Y', strtotime($value_koord['visit_date']));
				$vizit_date_arr = explode(".", $vizit_date_array);
				$start_date = mktime($value_koord['visit_begin_date_h'], $value_koord['visit_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
				$end_date = mktime($value_koord['visit_end_date_h'], $value_koord['visit_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
				$viz_minutes = round(($end_date - $start_date) / 60);
				$minutes_array['koordination_visit'][$value_koord['ipid']]['visit_minutes'] += $viz_minutes;
				$minutes_array['koordination_visit'][$value_koord['ipid']]['ipid'] = $value_koord;
				$koordinator_visits_dbg[$patient_array[$value_koord['ipid']]['epid']][$value_koord['create_date']] = 'Besuchsformular Koordination: ' . $vizit_date_array . ' ' . $value_koord['visit_begin_date_h'] . ':' . $value_koord['visit_begin_date_m'] . ' -> ' . $vizit_date_array . ' ' . $value_koord['visit_end_date_h'] . ':' . $value_koord['visit_end_date_m'] . '';
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordinator_visits \n");
				print_r($koordinator_visits_dbg);
				print_r("\n rest of data \n");
			}

			/* ----------------------Prepare data for display ----------------------------- */
			$total_patients_visits = $minutes_array;
			foreach($total_patients_visits as $visit => $patient_visits)
			{
				foreach($patient_visits as $patientm)
				{
					$final_patients_visits[$patientm['ipid']]['consulting_minutes'] += $patientm['consulting_minutes'];
					$final_patients_visits[$patientm['ipid']]['coordination_minutes'] += $patientm['coordination_minutes'];
					$final_patients_visits[$patientm['ipid']]['visit_minutes'] += $patientm['visit_minutes'];
					$dbg_final_patients_visits[$patientm['ipid']]['consulting_minutes'] += $patientm['consulting_minutes'];
					$dbg_final_patients_visits[$patientm['ipid']]['coordination_minutes'] += $patientm['coordination_minutes'];
					$dbg_final_patients_visits[$patientm['ipid']]['visit_minutes'] += $patientm['visit_minutes'];
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r($total_patients_array);
				print_r($total_patients_visits);
				print_r($dbg_final_patients_visits);
			}
			/* ------------------------------------Get treatment days------------------------------------------ */
			$pm = new PatientMaster();
			if(count($valid_ipids_arr) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($valid_ipids_arr);
			}
			/* ------------------------------------Display all results ------------------------------------------ */
			$total_active_days = 0;
			$total_consulting_minutes = 0;
			$total_coordination_minutes = 0;
			$total_visits_minutes = 0;
			$pat_acumulated_minutes = 0;
			$total_patient_minutes = 0;
			$i = 0;

			if(!empty($total_patients_final))
			{
				foreach($total_patients_final as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient_array[$patient['ipid']]['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient_array[$patient['ipid']]['last_name'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient_array[$patient['ipid']]['first_name'];
					if(!empty($final_patients_visits[$patient['ipid']]['consulting_minutes']))
					{
						$MasterData['data'][$patient['ipid']]['consulting_minutes'] = $final_patients_visits[$patient['ipid']]['consulting_minutes'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['consulting_minutes'] = 0;
					}
					if(!empty($final_patients_visits[$patient['ipid']]['coordination_minutes']))
					{
						$MasterData['data'][$patient['ipid']]['coordination_minutes'] = $final_patients_visits[$patient['ipid']]['coordination_minutes'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['coordination_minutes'] = 0;
					}
					if(!empty($final_patients_visits[$patient['ipid']]['visit_minutes']))
					{
						$MasterData['data'][$patient['ipid']]['visit_minutes'] = $final_patients_visits[$patient['ipid']]['visit_minutes'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['visit_minutes'] = 0;
					}
					$MasterData['data'][$patient['ipid']]['treateddays'] = $treatedarr[$patient['ipid']]['realActiveDays'];
					$pat_acumulated_minutes = $MasterData['data'][$patient['ipid']]['consulting_minutes'] + $MasterData['data'][$patient['ipid']]['coordination_minutes'] + $MasterData['data'][$patient['ipid']]['visit_minutes'];
					$MasterData['data'][$patient['ipid']]['patient_accumulated_minutes'] = $pat_acumulated_minutes;
					$total_active_days += $treatedarr[$patient['ipid']]['realActiveDays'];
					$total_consulting_minutes += $MasterData['data'][$patient['ipid']]['consulting_minutes'];
					$total_coordination_minutes += $MasterData['data'][$patient['ipid']]['coordination_minutes'];
					$total_visits_minutes += $MasterData['data'][$patient['ipid']]['visit_minutes'];
					$total_patient_minutes += $MasterData['data'][$patient['ipid']]['patient_accumulated_minutes'];
					$median_active_days_arr[] = $treatedarr[$patient['ipid']]['realActiveDays'];
					$median_consulting_minutes_arr[] = $MasterData['data'][$patient['ipid']]['consulting_minutes'];
					$median_coordination_minutes_arr[] = $MasterData['data'][$patient['ipid']]['coordination_minutes'];
					$median_visits_minutes_arr[] = $MasterData['data'][$patient['ipid']]['visit_minutes'];
					$median_patient_minutes_arr[] = $MasterData['data'][$patient['ipid']]['patient_accumulated_minutes'];
					$i++;
				}

				$median_active_days = Pms_CommonData::calculate_median($median_active_days_arr);
				$median_consulting_minutes = Pms_CommonData::calculate_median($median_consulting_minutes_arr);
				$median_coordination_minutes = Pms_CommonData::calculate_median($median_coordination_minutes_arr);
				$median_visits_minutes = Pms_CommonData::calculate_median($median_visits_minutes_arr);
				$median_patient_minutes = Pms_CommonData::calculate_median($median_patient_minutes_arr);
				$MasterData['extra']['average_active_days'] = round($total_active_days / $i, 2);
				$MasterData['extra']['average_consulting_minutes'] = round($total_consulting_minutes / $i, 2);
				$MasterData['extra']['average_coordination_minutes'] = round($total_coordination_minutes / $i, 2);
				$MasterData['extra']['average_visits_minutes'] = round($total_visits_minutes / $i, 2);
				$MasterData['extra']['average_patient_minutes'] = round($total_patient_minutes / $i, 2);
				$MasterData['extra']['sum_active_days'] = $total_active_days;
				$MasterData['extra']['sum_consulting_minutes'] = $total_consulting_minutes;
				$MasterData['extra']['sum_coordination_minutes'] = $total_coordination_minutes;
				$MasterData['extra']['sum_visits_minutes'] = $total_visits_minutes;
				$MasterData['extra']['sum_patient_minutes'] = $total_patient_minutes;
				$MasterData['extra']['median_consulting_minutes'] = $median_consulting_minutes;
				$MasterData['extra']['median_coordination_minutes'] = $median_coordination_minutes;
				$MasterData['extra']['median_visits_minutes'] = $median_visits_minutes;
				$MasterData['extra']['median_active_days'] = $median_active_days;
				$MasterData['extra']['median_patient_minutes'] = $median_patient_minutes;
				return $MasterData;
			}
		}

		public function kv_care_level($params)
		{
			// report_id = 81
			// report_name = 18) KV Nordrhein - Pflegestufe
			// ONLY PATIENTS WITH A VALID SAPV VERORDNUNG ARE used for the following report
			// active in report period
			// lookup Assessment "Pflegestufe"
			// ammount of patient who have "keine"
			// ammount of THESE where "Höherstufung" in Assessment was checked
			// ammount of patient who have "1"
			// ammount of THESE where "Höherstufung" in Assessment was checked
			// ammount of patient who have "2"
			// ammount of THESE where "Höherstufung" in Assessment was checked
			// ammount of patient who have "3"
			// ammount of THESE where "Höherstufung" in Assessment was checked

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}
			/* ------------------------------- Get patients with valid SAPV--------------------------------------- */
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0')
				->groupBy('sv.ipid');
			$valid_ipids = $patientsapv->fetchArray();

			$valid_ipids_str = "'0',";
			$valid_ipids_arr[] = 'xxxx';

			foreach($valid_ipids as $key => $val_ip)
			{
				$valid_ipids_str .= "'" . $val_ip['ipid'] . "',";
				$valid_ipids_arr[] = $val_ip['ipid'];
			}

			$get_assessments = Doctrine_Query::create()
				->select("*")
				->from('KvnoAssessment k')
				->andWhereIn('k.ipid', $valid_ipids_arr)
				->groupBy('k.ipid')
				->orderBy('k.ipid');
			$resulted_assessments = $get_assessments->fetchArray();

			foreach($resulted_assessments as $pat_ipids)
			{
				$assessment_array[$pat_ipids['ipid']]['ipid'] = $pat_ipids['ipid'];
			}

			foreach($assessment_array as $key => $val)
			{
				$total_assessment_final[] = $val['ipid'];
			}
			if(empty($total_assessment_final))
			{
				$total_assessment_final[999999]['ipid'] = 'X';
			}

			/* ------------------------Get all patients details - epids -------------- */
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $total_assessment_final)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$debugepidarray = $patient->fetchArray();

			foreach($debugepidarray as $dpatient)
			{
				$debugepids[$dpatient['ipid']]['epid'] = $dpatient['EpidIpidMapping']['epid'];
			}

			$stage_array = array('keine', '1', '2', '3');
			/* ------------------------Get all patients that have Pflegestufe filled in assessment -------------- */
			$patientstage = Doctrine_Query::create()
				->select("*")
				->from('PatientMaintainanceStage p')
				->whereIn('p.ipid', $total_assessment_final)
				->andWhere('tilldate = "0000-00-00"');
			$patientstagearray = $patientstage->fetchArray();

			foreach($patientstagearray as $stage)
			{
				if(!in_array($stage['stage'], $stage_array))
				{
					$stage['stage'] = 'keine';
				}
				$patient_arr[$stage['stage']][] = $debugepids[$stage['ipid']]['epid'];

				if($stage['horherstufung'] == '1' || $stage['erstantrag'] == '1')
				{
					$patient_arr['horherstufung'][$stage['stage']][] = $debugepids[$stage['ipid']]['epid'];
				}
			}

			/* ----------------------------Display data -------------------------------------------------- */
			$total_horherstufung = 0;
			foreach($stage_array as $stageitem)
			{
				$MasterData['data'][$stageitem]['care_level'] = 'Pflegestufe:' . $stageitem;
				$MasterData['data'][$stageitem]['count'] = count($patient_arr[$stageitem]);
				$MasterData['data'][$stageitem]['epids'] = implode(', ', $patient_arr[$stageitem]);
				$MasterData['data'][$stageitem]['count_horherstufung'] = count($patient_arr['horherstufung'][$stageitem]);
				$MasterData['data'][$stageitem]['horherstufung_epids'] = implode(', ', $patient_arr['horherstufung'][$stageitem]);
				$total_stufe +=$MasterData['data'][$stageitem]['count'];
				$total_horherstufung +=$MasterData['data'][$stageitem]['count_horherstufung'];
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r('assess: ' . count($total_assessment_final));
				print_r("\n");
				print_r('stufe: ' . $total_stufe);
				print_r("\n");
				print_r('horherstufung: ' . $total_horherstufung);
			}
			return $MasterData;
		}

		public function kv_wl_patient_pflegedienst($params)
		{
			// report_id = 84
			// report_name = KV Nordrhein -  Pflegedienst
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}
			/* ----------------------------- Client Pflegedienste---------------------------------------- */
			$clpfle = Doctrine_Query::create()
				->select("*")
				->from('Pflegedienstes')
				->where('clientid = ' . $clientid);
			$clpflearray = $clpfle->fetchArray();

			foreach($clpflearray as $valo)
			{
				$pflegedienste[$valo['id']]['id'] = $valo['id'];
				$pflegedienste[$valo['id']]['name'] = $valo['nursing'];
				$pflegedienste[$valo['id']]['palliativpflegedienst'] = $valo['palliativpflegedienst'];
			}

			/* --------------------- Patient Pflegedienste and Paliative Pflegedienst   ------------------- */
			$patientpfle = Doctrine_Query::create()
				->select("*")
				->from('PatientPflegedienste p')
				->whereIn('p.ipid', $ipidarr)
				->andwhere('p.isdelete = 0');
			$patientpflearray = $patientpfle->fetchArray();

			$ppfle = array();
			$pal_ppfle = array();
			$pflegedienst_pat_array = array();
			$paliativpflegedienst_pat_array = array();

			foreach($patientpflearray as $key => $pfle)
			{
				if($pflegedienste[$pfle['pflid']]['palliativpflegedienst'] == '0')
				{
					$pflegedienst_details[$pfle['ipid']]['id'][] = $pfle['pflid'];
					$pflegedienst_details[$pfle['ipid']]['name'][] = $pflegedienste[$pfle['pflid']]['name'];
					$pflegedienst_pat_array[] = $pfle['ipid'];
				}
				else
				{
					$pal_ppfle[$pfle['ipid']]['id'][] = $pfle['pflid'];
					$pal_ppfle[$pfle['ipid']]['name'][] = $pflegedienste[$pfle['pflid']]['name'];
					$paliativpflegedienst_pat_array[] = $pfle['ipid'];
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r(pflegedienst_details);
				print_r($pflegedienst_details);
				print_r($pflegedienst_pat_array);
				print_r("\n");
				print_r(PALIATIVEpflegedienst_details);
				print_r($pal_ppfle);
				print_r($paliativpflegedienst_pat_array);
			}
			$pflegedienst_pat_array = array_unique($pflegedienst_pat_array);
			$paliativpflegedienst_pat_array = array_unique($paliativpflegedienst_pat_array);

			/* ----------------------------- Patient Get discharge dates---------------------------------------- */
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->wherein("ipid", $ipidarr);
			$dispatarray = $dispat->fetchArray();

			foreach($dispatarray as $dis_patient)
			{
				$dischargedpatarray[$dis_patient['ipid']] = $dis_patient['discharge_date'];
			}

			/* ----------------------------- Patient details---------------------------------------- */
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipidarr)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$ipidarray = $patient->fetchArray();

			/* ----------------------------- Display all data ---------------------------------------- */
			$patients_pfle_and_pal = 0;
			$patients_pfle = 0;
			$patients_pal = 0;
			$patients_no_pfle_no_pal = 0;

			foreach($ipidarray as $patient)
			{
				$MasterData['data'][$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
				$MasterData['data'][$patient['ipid']]['lastname'] = $patient['last_name'];
				$MasterData['data'][$patient['ipid']]['firstname'] = $patient['first_name'];
				$MasterData['data'][$patient['ipid']]['admissiondate'] = date('d.m.Y', strtotime($patient['admission_date']));
				if(!empty($dischargedpatarray[$patient['ipid']]))
				{
					$dis_date = date("d.m.Y", strtotime($dischargedpatarray[$patient['ipid']]));
				}
				else
				{
					$dis_date = "-";
				}
				$MasterData['data'][$patient['ipid']]['dischargedate'] = $dis_date;

				if($pflegedienst_details[$patient['ipid']] !== NULL)
				{
					$MasterData['data'][$patient['ipid']]['pflegedienst'] = implode(',<br />', $pflegedienst_details[$patient['ipid']]['name']);
					$patients_pfle ++;
				}
				else
				{
					$MasterData['data'][$patient['ipid']]['pflegedienst'] = '-';
				}

				if($pal_ppfle[$patient['ipid']] !== NULL)
				{
					$MasterData['data'][$patient['ipid']]['pal_pflegedienst'] = implode(',<br />', $pal_ppfle[$patient['ipid']]['name']);
					$patients_pal ++;
				}
				else
				{
					$MasterData['data'][$patient['ipid']]['pal_pflegedienst'] = '-';
				}

				if(in_array($patient['ipid'], $pflegedienst_pat_array) && in_array($patient['ipid'], $paliativpflegedienst_pat_array))
				{
					$patients_pfle_and_pal++;
				}
				if(!in_array($patient['ipid'], $pflegedienst_pat_array) && !in_array($patient['ipid'], $paliativpflegedienst_pat_array))
				{
					$patients_no_pfle_no_pal++;
				}
			}

			$MasterData['extra']['patients_pflegedienst_paliativepfle'] = $patients_pfle_and_pal;
			$MasterData['extra']['patients_pflegedienst'] = $patients_pfle;
			$MasterData['extra']['patients_paliativepfle'] = $patients_pal;
			$MasterData['extra']['patients_no_pflegedienst_no_paliativepfle'] = $patients_no_pfle_no_pal;
			return $MasterData;
		}

		public function kv_wl_patient_visits($params)
		{
			// report_id = 85
			// report_name = KV Nordrhein - Hausbesuche
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}

			/* ------------------------------------  Get KVNO doctor visits------------------------------------------ */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->whereIn('ipid', $ipidarr);
			$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();

			foreach($kvno_doctor_visits_arr as $doc => $value_doc)
			{
				$pat_visit_doc['doctor_visit'][$value_doc['ipid']][] = $value_doc;
			}

			/* ------------------------------------  Get KVNO nurse visits------------------------------------------ */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $ipidarr);
			$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();

			foreach($kvno_nurse_visits_arr as $nurse => $value_nurse)
			{
				$pat_visit_doc['nurse_visit'][$value_nurse['ipid']][] = $value_nurse;
			}

			/* ------------------------------------  Get KVNO koordination visits------------------------------------------ */
			$kvno_koordination_visits = Doctrine_Query::create()
				->select("*")
				->from("VisitKoordination")
				->whereIn('ipid', $ipidarr);
			$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

			foreach($kvno_koordination_visits_arr as $koordination => $value_koordination)
			{
				$pat_visit_doc['koordinator_visit'][$value_koordination['ipid']][] = $value_koordination;
			}

			if(empty($pat_visit_doc))
			{
				$pat_visit_doc['9999999999'] = '0000';
			}

			foreach($pat_visit_doc as $visits_types => $visits_total)
			{
				foreach($visits_total as $vtk => $vt_value)
				{
					foreach($vt_value as $the_visit)
					{
						$allvisits[$the_visit['ipid']][] = $the_visit;
						$visits_users[] = $the_visit['create_user']; // get the users that visited the patient
						$patients_visits[] = $the_visit['ipid']; //get all patients WITH visits;
					}
				}
			}

			if(empty($visits_users))
			{
				$visits_users['9999999999'] = '0000';
			}
			$patients_visits = array_unique($patients_visits);
			if(empty($patients_visits))
			{
				$patients_visits['9999999999'] = '0000';
			}
			foreach($patients_visits as $value)
			{
				$patients_visits_ipids[] = $value;
			}

			/* ------------------------------------  Get Users Details------------------------------------------ */
			$visitbyUsersQ = Doctrine_Query::create()
				->select('*')
				->from('User')
				->whereIn('id', $visits_users);
			$visitbyUsersarr = $visitbyUsersQ->fetchArray();

			foreach($visitbyUsersarr as $uservisit)
			{
				$VisitsbyUsers[$uservisit['id']] = $uservisit['last_name'] . " " . $uservisit['first_name'];
			}

			/* ------------------------------------  Get Users Details------------------------------------------ */
			$visitbyUsersQ = Doctrine_Query::create()
				->select('*')
				->from('User')
				->whereIn('id', $visits_users);
			$visitbyUsersarr = $visitbyUsersQ->fetchArray();

			foreach($visitbyUsersarr as $uservisit)
			{
				$VisitsbyUsers[$uservisit['id']] = $uservisit['last_name'] . " " . $uservisit['first_name'];
			}

			/* ----------------------------- Patient Get discharge dates---------------------------------------- */
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->wherein("ipid", $patients_visits_ipids);
			$dispatarray = $dispat->fetchArray();

			foreach($dispatarray as $dis_patient)
			{
				$dischargedpatarray[$dis_patient['ipid']] = $dis_patient['discharge_date'];
			}

			/* ----------------------------- Patient details---------------------------------------- */
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $patients_visits_ipids)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$ipidarray = $patient->fetchArray();

			$pm = new PatientMaster();
			if(count($patients_visits_ipids) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($patients_visits_ipids);
			}

			/* ----------------------------- Display all data ---------------------------------------- */
			$visit_nr = 0;
			$total_time = 0;
			$treatedcnt = 0;

			foreach($ipidarray as $patient)
			{
				$MasterData['data'][$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
				$MasterData['data'][$patient['ipid']]['lastname'] = $patient['last_name'];
				$MasterData['data'][$patient['ipid']]['firstname'] = $patient['first_name'];
				$MasterData['data'][$patient['ipid']]['admissiondate'] = date('d.m.Y', strtotime($patient['admission_date']));

				if(!empty($dischargedpatarray[$patient['ipid']]))
				{
					$MasterData['data'][$patient['ipid']]['dischargedate'] = date("d.m.Y", strtotime($dischargedpatarray[$patient['ipid']]));
				}
				else
				{
					$MasterData['data'][$patient['ipid']]['dischargedate'] = '--';
				}

				foreach($allvisits[$patient['ipid']] as $visit_key => $visit_detail)
				{
					if($visit_detail['visit_date'])
					{ // if koordinato date
						$vizit_date_array = date('d.m.Y', strtotime($visit_detail['visit_date']));
						$vizit_date_arr = explode(".", $vizit_date_array);
						$start_date = mktime($visit_detail['visit_begin_date_h'], $visit_detail['visit_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
						$end_date = mktime($visit_detail['visit_end_date_h'], $visit_detail['visit_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
						$doc_viz_minutes = round(($end_date - $start_date) / 60);
						$dov_vis_date = date('d.m.Y', strtotime($visit_detail['visit_date']));
					}
					else
					{
						$vizit_date_array = date('d.m.Y', strtotime($visit_detail['vizit_date']));
						$vizit_date_arr = explode(".", $vizit_date_array);
						$start_date = mktime($visit_detail['kvno_begin_date_h'], $visit_detail['kvno_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
						$end_date = mktime($visit_detail['kvno_end_date_h'], $visit_detail['kvno_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
						$doc_viz_minutes = round(($end_date - $start_date) / 60);
						$dov_vis_date = date('d.m.Y', strtotime($visit_detail['vizit_date']));
					}

					$MasterData['data'][$patient['ipid']]['visit'][$visit_key]['visit_date'] = $dov_vis_date;
					$MasterData['data'][$patient['ipid']]['visit'][$visit_key]['visit_by'] = $VisitsbyUsers[$visit_detail['create_user']];
					$MasterData['data'][$patient['ipid']]['visit'][$visit_key]['visit_duration'] = $doc_viz_minutes;

					$total_time += $MasterData['data'][$patient['ipid']]['visit'][$visit_key]['visit_duration'];
					$visit_nr++;
				}

				$treatedcnt += $treatedarr[$patient['ipid']]['realActiveDays'];
			}
			$MasterData['extra']['overall_visits'] = $visit_nr;
			$MasterData['extra']['overall_time'] = $total_time;
			$MasterData['extra']['overall_treatmentdays'] = $treatedcnt;
			$MasterData['extra']['average_visit_per_day'] = round($visit_nr / $treatedcnt, 2);

			return $MasterData;
		}

		public function networkstatisticsAction()
		{
			$this->_helper->layout->setLayout('layout_ajax');
			$report_cache_path = APPLICATION_PATH . '/../public/_cache/reports';

			//set pdf generating or not
			if(!empty($_REQUEST['btnsubmit']))
			{
				$pdfgen = true;
			}
			else
			{
				$pdfgen = false;
			}

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$quarterarr = $_REQUEST ['quarter'];
			$yeararr = $_REQUEST ['year'];
			$montharr = $_REQUEST ['month'];
			if(strlen($_REQUEST ['quarter']) == '1')
			{
				$quarterarr = array($_REQUEST ['quarter']);
			}
			if(strlen($_REQUEST ['year']) == '4')
			{
				$yeararr = array($_REQUEST ['year']);
			}

			if(!empty($quarterarr))
			{
				$montharr = array();
				foreach($quarterarr as $quart)
				{
					switch($quart)
					{
						case '2':
							$montharr[] = 4;
							$montharr[] = 5;
							$montharr[] = 6;
							break;

						case '3':
							$montharr[] = 7;
							$montharr[] = 8;
							$montharr[] = 9;
							break;

						case '4':
							$montharr[] = 10;
							$montharr[] = 11;
							$montharr[] = 12;
							break;

						default:
							$montharr[] = 1;
							$montharr[] = 2;
							$montharr[] = 3;
							break;
					}
				}
			}

			$this->view->quarterarr = $quarterarr;
			$this->view->report_quarter = $quarterarr[0];
			$this->view->report_year = $yeararr[0];

			$cache_file = $report_cache_path . '/' . $clientid . '_' . $yeararr[0] . '_' . $quarterarr[0];

			if(!$quarterarr && !$yeararr && !$montharr)
			{
				$this->_redirect(APP_BASE . "reportsnew/exportlist");
			}

			$vars_cache = array(
				'admitedpatients',
				'discharge_methode_array',
				'reportPeriod',
				'no2_pie_string',
				'no2_pie_title',
				'dischargeLocationSortedArr',
				'no3_pie_string',
				'no3_pie_title',
				'hospital_stats_array',
				'total_reasons',
				'reasons_pie',
				'total_hospdoc',
				'hospdocs_pie',
				'total_transport',
				'transports_pie',
				'no4a_pie_string',
				'no4a_pie_title',
				'no4b_pie_string',
				'no4b_pie_title',
				'no4c_pie_string',
				'no4c_pie_title',
				'private_patients_array',
				'total_active_patients',
				'total_pv_patients',
				'percentage_pv_patients',
				'no5_pie_string',
				'no5_pie_title',
				'maindiagnosis_array',
				'no6_pie_string',
				'no6_pie_title',
				'sidediagnosis_array',
				'no7_pie_string',
				'no7_pie_title',
				'patients_pfleged_array',
				'patients_pflegedienst_paliativepfle',
				'patients_pflegedienst',
				'patients_paliativepfle',
				'patients_no_pflegedienst_no_paliativepfle',
				'patients_pfle_percentage',
				'patients_pal_percentage',
				'patients_pfle_and_pal_percentage',
				'patients_no_pfle_no_pal_percentage',
				'no8_pie_string',
				'no8_pie_title',
				'patients_visits_array',
				'average_visit_per_day',
				'overall_visits',
				'overall_time',
				'vollversorgung_patients_array',
				'overall_voll_days',
				'percentage_voll',
				'average_voll_days',
				'median_voll_days',
				'average_voll_days_total_patients',
				'no10_pie_string',
				'no10_pie_title',
				'report_no1_description',
				'report_no2_description',
				'report_no3_description',
				'report_no4_description',
				'report_no5_description',
				'report_no6_description',
				'report_no7_description',
				'report_no8_description',
				'report_no9_description',
				'report_no10_description',
				'no2_pie_image_pdf',
				'no3_pie_image_pdf',
				'no4a_pie_image_pdf',
				'no4b_pie_image_pdf',
				'no4c_pie_image_pdf',
				'no5_pie_image_pdf',
				'no6_pie_image_pdf',
				'no7_pie_image_pdf',
				'no8_pie_image_pdf',
				'no9_pie_image_pdf',
				'no10_pie_image_pdf'
			);

			if($_REQUEST['refresh_cache'] == 1)
			{
				@unlink($cache_file);

				$this->_redirect(APP_BASE . 'reportsnew/networkstatisticsajax?year[]=' . $_REQUEST['year'][0] . '&quarter[]=' . $_REQUEST['quarter'][0]);
			}

			if(is_readable($cache_file) && (time() - filemtime($cache_file) < 14400) && $_REQUEST['refresh_cache'] != 1)
			{
				$cached_var = unserialize(file_get_contents($cache_file));

				foreach($vars_cache as $name)
				{
					$this->view->{"$name"} = $cached_var[$name];
				}
			}
			else
			{

				/* -------------------------GET REPORT PERIODS ---------------------------------- */
				$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
				$this->view->reportPeriod = $reportPeriod;

				/* -------------------------GET ACTIVE CONDITION ---------------------------------- */
				$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

				/* ------------------ GET ACTIVE PATIENTS IN REPORT PERIOD ------------------------ */
				$active_patients = array();
				$active_patients = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				$total_active_patients = count($active_patients);

				if(count($active_patients) == 0)
				{
					$active_patients[] = "0";
				}

				$ipid_str = "'0',";
				foreach($active_patients as $ipid)
				{
					$ipid_str .= "'" . $ipid . "',";
				}

				/* ------------------ GET ALL PATIENTS OF CLIENT ------------------------ */
				$clientIpids = $this->getAllClientPatients($clientid, $whereepid);

				if(empty($clientPatientsIpids))
				{
					$clientPatientsIpids[] = '9999999';
				}
				foreach($clientIpids as $patient)
				{
					$clientPatientsIpids[] = $patient['ipid'];
				}

				/* ------------------ GET TREATMENT DAYS - FOR ALL PATIENTS OF CLIENT ------------------------ */
				$pm = new PatientMaster();
				$treated_days = $pm->getTreatedDaysRealMultiple($clientPatientsIpids);

				/* ------------------ GET MASTER DETAILS - FOR ALL PATIENTS OF CLIENT ------------------------ */

				$patientMasterData = Doctrine_Query::create()
					->select("*,
					AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
					AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex,
					AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
					AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,
					convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
					convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
					convert(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
					convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,
					convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,
					convert(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1) as mobile,
					convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber,
					e.epid as patepid
					")
					->from('PatientMaster p')
					->whereIn('ipid', $clientPatientsIpids);
				$patientMasterData->leftJoin("p.EpidIpidMapping e");
				$patientMasterData->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
				$pmarr = $patientMasterData->fetchArray();

				foreach($pmarr as $patient)
				{
					$global_patient_master[$patient['ipid']] = $patient;
					$global_epids_array[$patient['ipid']]['epid'] = $patient['patepid'];
					$global_ipid2epid[$patient['patepid']] = $patient['ipid'];

					$global_patient_ipids[] = $patient['ipid'];
				}

				/* ---------------------------GET CLIENT DISCHARGE METHODS-------------------------------------- */
				$cl_dischagre_methods = Doctrine_Query::create()
					->select("*")
					->from('DischargeMethod')
					->where('clientid=' . $logininfo->clientid)
					->andWhere('isdelete = 0');
				$cl_dischagre_methods_array = $cl_dischagre_methods->fetchArray();

				foreach($cl_dischagre_methods_array as $disc_method)
				{

					$global_discharge_methods[$disc_method['id']]['discharge_method_name'] = $disc_method['description'];
					$global_discharge_methods[$disc_method['id']]['discharge_method_id'] = $disc_method['id'];

					if($disc_method['abbr'] == 'TOD' || $disc_method['abbr'] == 'TODNA')
					{
						$global_discharge_methods_dead[] = $disc_method['id'];
					}
				}
				if(empty($global_discharge_methods))
				{
					$global_discharge_methods[] = 'xxx';
				}

				if(empty($global_discharge_methods_dead))
				{
					$global_discharge_methods_dead[] = 'xxx';
				}

				/* ----------------------------- GET DISCHARGE DATES FOR ALL CLIENT	 PATIENTS---------------------------------------- */
				$cl_dispat = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->wherein("ipid", $clientPatientsIpids);
				$cl_dispatarray = $cl_dispat->fetchArray();

				foreach($cl_dispatarray as $cl_dis_patient)
				{
					$global_discharge_date[$cl_dis_patient['ipid']] = $cl_dis_patient['discharge_date'];
				}

				/* ################################################################ */
				/* ################################################################ */
				/* ##################### 1. Erst - Aufnahmen ##################### */
				/* ################################################################ */
				/* ################################################################ */
				// show patients who are admitted for the first time in report period. NO READMISSIONS

				/* ----------------------- Get private patients----------------------- */
				$Health = Doctrine_Query::create()
					->select("*")
					->from('PatientHealthInsurance')
					->whereIn('ipid', $clientPatientsIpids);
				$Healtharray = $Health->fetchArray();

				foreach($Healtharray as $patient_health)
				{
					if($patient_health["privatepatient"] == 1)
					{
						$patienthelth[$patient_health['ipid']]['privatepatient'] = 'Ja';
					}
					else
					{
						$patienthelth[$patient_health['ipid']]['privatepatient'] = '';
					}
				}

				foreach($treated_days as $k_ipid => $v_patient)
				{
					if(!empty($v_patient['admissionDates']))
					{

						if(count($v_patient['admissionDates']) == '1')
						{
							$patient_admissions[$k_ipid][] = $v_patient['admissionDates'][0];
						}

						if(!empty($v_patient['dischargeDates'][0]))
						{
							$patient_discharges[$k_ipid][] = $v_patient['dischargeDates'][0];
						}
						else
						{
							$patient_discharges[$k_ipid][] = '-';
						}
					}
					else
					{
						//get old data
						$patient_admissions[$k_ipid][] = $v_patient['admission_date'];
						$patient_discharges[$k_ipid][] = $v_patient['discharge_date'];
					}
				}

				foreach($patient_admissions as $ipid => $pat_adm)
				{
					$nr_admissions = count($pat_adm);
					if($nr_admissions == "1") //exclude those who have more than one entry in PR(readmitted not admited)
					{
						foreach($pat_adm as $k_admission => $v_admision)
						{
							foreach($reportPeriod['start'] as $k_start => $v_start)
							{
								if(Pms_CommonData::isintersected(strtotime($v_admision['date']), strtotime($v_admision['date']), strtotime($v_start), strtotime($reportPeriod['end'][$k_start])))
								{
									$final_patient_data[$ipid]['adm'][$k_admission] = date('d.m.Y', strtotime($v_admision['date']));

									if($patient_discharges[$ipid][$k_admission]['date'] != '-')
									{
										$final_patient_data[$ipid]['dis'][$k_admission] = date('d.m.Y', strtotime($patient_discharges[$ipid][$k_admission]['date']));
									}
									else
									{
										$final_patient_data[$ipid]['dis'][$k_admission] = "-";
									}
								}
							}
						}
					}
				}

				/* ----------------------- #DISPLAY DATA#----------------------- */
				foreach($final_patient_data as $kp_ipid => $val_patient)
				{
					$admitedpatients[$kp_ipid]['epid'] = $global_patient_master[$kp_ipid]['patepid'];
					$admitedpatients[$kp_ipid]['lastname'] = $global_patient_master[$kp_ipid]['last_name'];
					$admitedpatients[$kp_ipid]['firstname'] = $global_patient_master[$kp_ipid]['first_name'];
					$admitedpatients[$kp_ipid]['birthd'] = date("d.m.Y", strtotime($global_patient_master[$kp_ipid]['birthd']));


					$admitedpatients[$kp_ipid]['admissiondate'] = $val_patient['adm'];
					$admitedpatients[$kp_ipid]['dischargedate'] = $val_patient['dis'];
					$admitedpatients[$kp_ipid]['private_patient'] = $patienthelth[$kp_ipid]['privatepatient'];
				}

				$this->view->admitedpatients = $admitedpatients;


				/* ################################################################ */
				/* ################################################################ */
				/* ######################## 2. Entlassungen ####################### */
				/* ################################################################ */
				/* ################################################################ */
				// Show all DISCHAGE METHODES for all patients who got discharged in report period.

				/* ----------------- Get All Discharged Patients of Client -------------------- */
				$allpatient = Doctrine_Query::create()
					->select("p.ipid,e.epid")
					->from('PatientMaster p')
					->where('isdischarged = 1')
					->andWhere('isdelete = 0')
					->andWhere('isstandby = 0')
					->andWhere('isstandbydelete = 0');
				$allpatient->leftJoin("p.EpidIpidMapping e");
				$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
				$allarray = $allpatient->fetchArray();

				foreach($allarray as $key => $val)
				{
					$allfinal[] = $val['ipid'];
					$allfinal_str .= "'" . $val['ipid'] . "',";
				}
				if(empty($allfinal))
				{
					$allfinal[999999]['ipid'] = 'X';
				}

				foreach($global_discharge_methods as $method_item)
				{
					$methods_ids[] = $method_item['discharge_method_id'];
				}
				if(empty($methods_ids))
				{
					$methods_ids[] = 'xxx';
				}


				/* ----------------- Get Discharged Patients by discharge methode-------------------- */
				$dispatients_met = Doctrine_Query::create()
					->select('*')
					->from('PatientDischarge p')
					->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ")")
					->andWhere(" (" . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ")")
					->andWhere("isdelete=0")
					->andWhereIN('discharge_method', $methods_ids)
					->groupBy('ipid');

				$methode_patients = $dispatients_met->fetchArray();

				foreach($methode_patients as $met)
				{
					$pats_arr[$met['discharge_method']][] = $global_epids_array[$met['ipid']]['epid'];
				}

				/* ----------------- Get Discharged Patients in report period -------------------- */
				$dispatients = Doctrine_Query::create()
					->select("discharge_method, sum(if(discharge_method <> 0 ,1,0)) as methode_count")
					->from('PatientDischarge ')
					->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ")")
					->andWhere(" (" . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ")")
					->andWhere("isdelete=0")
					->groupBy('discharge_method');
				$deadpatientarray = $dispatients->fetchArray();

				$total_discharge_nr = 0;
				foreach($deadpatientarray as $key => $val)
				{
					$discharge_methode_stats[$val['discharge_method']]['methode_id'] = $val['discharge_method'];
					$discharge_methode_stats[$val['discharge_method']]['methode_amount'] = $val['methode_count'];
					$discharge_methode_stats[$val['discharge_method']]['methode_name'] = $global_discharge_methods[$val['discharge_method']]['discharge_method_name'];

					$total_discharge_nr += $val['methode_count'];
				}

				/* ----------------------- #DISPLAY DATA#----------------------- */
				foreach($discharge_methode_stats as $key => $methode_arr)
				{
					$discharge_methode_array[$key]['discharge_methode'] = $methode_arr['methode_name'];
					$discharge_methode_array[$key]['count'] = $methode_arr['methode_amount'];
					$discharge_methode_array[$key]['percentage'] = round(($methode_arr['methode_amount'] / $total_discharge_nr * 100), 2) . "%";
					$discharge_methode_array[$key]['epids'] = implode(', ', $pats_arr[$methode_arr['methode_id']]);
				}
				$this->view->discharge_methode_array = $discharge_methode_array;
				/* ----------------------- #DISPLAY PIE#----------------------- */
				$i = 1;
				foreach($discharge_methode_array as $disch_met)
				{
					$no2_pie_data[$i]['l'] = $disch_met['discharge_methode'] . " (" . $disch_met['percentage'] . "%)" . "";
					$no2_pie_data[$i]['v'] = $disch_met['count'];

					$i++;
				}
				$no2_pie_title = "Entlassungen";

				if(!empty($discharge_methode_array))
				{
					$this->view->no2_pie_image_pdf = Pms_Graph::piechart($no2_pie_data, $no2_pie_title, true);
				}

				/* ################################################################ */
				/* ################################################################ */
				/* ######################## 3. Sterbeorte ######################### */
				/* ################################################################ */
				/* ################################################################ */
				//Show all DISCHAGE LOCATIONS	for all patients who DIED in report period.

				/* -------------------Get all discharged dead patients ---------------- */
				$ipids_disarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);
				if(empty($ipids_disarr))
				{
					$ipids_disarr = array();
				}
				/* -------------------Get all dead by button patients ------------------ */
				$dead_ipids_arr = $ipids_disarr;

				if(empty($dead_ipids_arr))
				{
					$dead_ipids_arr[] = 'zzzz';
				}

				$ipidsval = "'X'";
				$comma = ",";
				foreach($dead_ipids_arr as $ipid)
				{
					$ipidsval .= $comma . "'" . $ipid . "'";
					$comma = ",";
				}

				/* -------------------Get discharge details of dead patients ------------------ */
				$dead_dispatloc = Doctrine_Query::create()
					->select("*,AES_DECRYPT(discharge_comment,'" . Zend_Registry::get('salt') . "') as discharge_comment")
					->from("PatientDischarge")
					->where('ipid in (' . $ipidsval . ')')
					->andWhere('isdelete = 0')
					->groupBy('ipid');
				$dead_dispatlocarr = $dead_dispatloc->fetchArray();

				$ipidsdis = "'X'";
				$dislocstr = "'X'";
				$comma = ",";

				foreach($dead_dispatlocarr as $dis_key => $dis_val)
				{
					$dislocstr .= $comma . "'" . $dis_val['discharge_location'] . "'";
					$ipidsdis .= $comma . "'" . $dis_val['ipid'] . "'";
					$comma = ",";
				}

				/* -------------------Get Client discharge Locations of dead patients  ------------------ */
				$loc = Doctrine_Query::create()
					->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as dislocation")
					->from("DischargeLocation")
					->where('id in (' . $dislocstr . ')')
					->andWhere('isdelete = 0');
				$locarr = $loc->fetchArray();

				foreach($locarr as $loc)
				{
					$Locations[0]['dislocation'] = "keine Angabe";
					$Locations[$loc['id']] = $loc;
				}

				foreach($dead_dispatlocarr as $key => $value)
				{
					$groupedPatDischargeLocation[$value['discharge_location']][] = $global_epids_array[$value['ipid']]['epid'];
				}

				foreach($groupedPatDischargeLocation as $val)
				{
					$totalDeadPat += count($val);
				}

				ksort($Locations);
				ksort($groupedPatDischargeLocation);


				/* ----------------------- #DISPLAY DATA#----------------------- */
				foreach($Locations as $dis_key_loc => $dis_val_loc)
				{
					$countPerLocation = count($groupedPatDischargeLocation[$dis_key_loc]);

					$percent = round(($countPerLocation * 100) / $totalDeadPat, 2);
					$dischargeLocationSortedArr[$dis_key_loc]['dischargelocation'] = $dis_val_loc['dislocation'];
					$dischargeLocationSortedArr[$dis_key_loc]['count'] = $countPerLocation;
					$dischargeLocationSortedArr[$dis_key_loc]['percentage'] = $percent . " %";
					$dischargeLocationSortedArr[$dis_key_loc]['epids'] = implode(', ', $groupedPatDischargeLocation[$dis_key_loc]);
				}
				$this->view->dischargeLocationSortedArr = $dischargeLocationSortedArr;

				/* ----------------------- #DISPLAY PIE#----------------------- */
				$i = 1;
				foreach($dischargeLocationSortedArr as $disch_loc)
				{
					if($disch_loc['count'] != '0')
					{
						$no3_pie_data[$i]['l'] = $disch_loc['dischargelocation'] . "  (" . $disch_loc['percentage'] . "%)" . "";
						$no3_pie_data[$i]['v'] = $disch_loc['count'];
					}

					$i++;
				}
				$no3_pie_title = "Sterbeorte";

				if(!empty($dischargeLocationSortedArr))
				{
					$this->view->no3_pie_image_pdf = Pms_Graph::piechart($no3_pie_data, $no3_pie_title, true);
				}

				/* ################################################################ */
				/* ################################################################ */
				/* ################### 4. Krankenhauseinweisungen ################# */
				/* ################################################################ */
				/* ################################################################ */
				//This report shows all hospital adimssions of active patients in report period.
				//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
				// Currently it shows hospital admissions in period even outside active period.
				//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

				/* -------------------Get Client Locations   ------------------ */
				$hospitalids = Doctrine_Query::create()
					->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where('isdelete = 0')
					->andWhere('client_id ="' . $clientid . '"')
					->andWhere('location_type =1');
				$hosparray = $hospitalids->fetchArray();

				$hospstr = "'X'";
				foreach($hosparray as $hospital)
				{
					$hospstr .= ", '" . $hospital['id'] . "'";
				}

				$comma = ",";
				$hospstr = "'X'";
				foreach($hosparray as $hospital)
				{

					$hospstr .= $comma . "'" . $hospital['id'] . "'";
					$comma = ",";
				}

				$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $active_cond['interval_location_sql']));

				/* -------- get patient locations and ipids based on master hospital ids and into selected time period ----------- */
				$locations = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('location_id IN (' . $hospstr . ')')
					->andWhere('location_id != 0')
					->andWhere('isdelete = 0')
					->andwhere('(' . $time_interval . ')')
// 					->andWhere('ipid != ""')
					->andwhereIn('ipid', $active_patients)
					->orderBy('valid_from,id ASC');
				$locationsarr = $locations->fetchArray();

				$comma = ",";
				$ipidlocationstr = "'X'";
				foreach($locationsarr as $location)
				{
					$ipidloc[] = $location['ipid'];
					$ipidlocation[$location['ipid']][] = $location;
					$ipidlocationstr .= $comma . "'" . $location['ipid'] . "'";
					$comma = ",";
				}
				$ipidloc[] = "99999999999";

				$pt = new PatientLocation();
				$reasonarr = $pt->getReasons();
				$hospdocarr = $pt->getHospDocs();
				$transportarr = $pt->getTransports();


				/* -----------------------HOSPITAL OPTIONS PIE ---------------------- */
				foreach($locationsarr as $k_loc_hosp => $v_loc_hosp)
				{
					if($v_loc_hosp['reason'] != '0')
					{
						$new_extra_data['reason']['reason_details'][$v_loc_hosp['reason']]['ipids'][] = $v_loc_hosp['ipid'];
						$new_extra_data['reason']['reason_details'][$v_loc_hosp['reason']]['reason_name'] = $reasonarr[$v_loc_hosp['reason']];
						$new_extra_data['reason']['reason_details'][$v_loc_hosp['reason']]['count_reasons'] = count($new_extra_data['reason']['reason_details'][$v_loc_hosp['reason']]['ipids']);
					}
					else
					{
						$new_extra_data['reason']['reason_details'][$v_loc_hosp['reason']]['ipids'][] = $v_loc_hosp['ipid'];
						$new_extra_data['reason']['reason_details'][$v_loc_hosp['reason']]['reason_name'] = 'Ohne Angabe';
						$new_extra_data['reason']['reason_details'][$v_loc_hosp['reason']]['count_reasons'] = count($new_extra_data['reason']['reason_details'][$v_loc_hosp['reason']]['ipids']);
					}

					if($v_loc_hosp['hospdoc'] != '0')
					{
						$new_extra_data['hospdoc']['hospdoc_details'][$v_loc_hosp['hospdoc']]['ipids'][] = $v_loc_hosp['ipid'];
						$new_extra_data['hospdoc']['hospdoc_details'][$v_loc_hosp['hospdoc']]['hospdoc_name'] = $hospdocarr[$v_loc_hosp['hospdoc']];
					}
					else
					{
						$new_extra_data['hospdoc']['hospdoc_details'][$v_loc_hosp['hospdoc']]['ipids'][] = $v_loc_hosp['ipid'];
						$new_extra_data['hospdoc']['hospdoc_details'][$v_loc_hosp['hospdoc']]['hospdoc_name'] = 'Ohne Angabe';
						$new_extra_data['hospdoc']['hospdoc_details'][$v_loc_hosp['hospdoc']]['count_hospdoc'] = count($new_extra_data['hospdoc']['hospdoc_details'][$v_loc_hosp['hospdoc']]['ipids']);
					}

					if($v_loc_hosp['transport'] != '0')
					{
						$new_extra_data['transport']['transport_details'][$v_loc_hosp['transport']]['ipids'][] = $v_loc_hosp['ipid'];
						$new_extra_data['transport']['transport_details'][$v_loc_hosp['transport']]['transport_name'] = $transportarr[$v_loc_hosp['transport']];
					}
					else
					{
						$new_extra_data['transport']['transport_details'][$v_loc_hosp['transport']]['ipids'][] = $v_loc_hosp['ipid'];
						$new_extra_data['transport']['transport_details'][$v_loc_hosp['transport']]['transport_name'] = 'Ohne Angabe';
						$new_extra_data['transport']['transport_details'][$v_loc_hosp['transport']]['count_transport'] = count($new_extra_data['transport']['transport_details'][$v_loc_hosp['transport']]['ipids']);
					}
				}

				foreach($new_extra_data as $values)
				{

					foreach($values['reason_details'] as $rk => $reason_item)
					{
						foreach($reason_item['ipids'] as $reason)
						{
							$hospital_options['reason'][$reason_item['reason_name']][] = $global_epids_array[$reason]['epid'];
							$hospital_options['reason']['all_reasons'][] = $global_epids_array[$reason]['epid'];
						}
					}

					foreach($values['hospdoc_details'] as $hk => $hospdoc_item)
					{
						foreach($hospdoc_item['ipids'] as $hospdoc)
						{
							$hospital_options['hospdoc'][$hospdoc_item['hospdoc_name']][] = $global_epids_array[$hospdoc]['epid'];
							$hospital_options['hospdoc']['all_hospdocs'][] = $global_epids_array[$hospdoc]['epid'];
						}
					}

					foreach($values['transport_details'] as $tk => $transport_item)
					{
						foreach($transport_item['ipids'] as $transport)
						{
							$hospital_options['transport'][$transport_item['transport_name']][] = $global_epids_array[$transport]['epid'];
							$hospital_options['transport']['all_transports'][] = $global_epids_array[$transport]['epid'];
						}
					}
				}


				$total_reasons = count($hospital_options['reason']['all_reasons']);
				foreach($hospital_options['reason'] as $reas => $val_reason)
				{
					if($reas != 'all_reasons')
					{
						$reasons_pie[$reas]['percentage'] = round(( count($val_reason) / $total_reasons * 100), 2) . ' %';
						$reasons_pie[$reas]['count'] = count($val_reason);
					}
				}

				$total_hospdoc = count($hospital_options['hospdoc']['all_hospdocs']);
				foreach($hospital_options['hospdoc'] as $hosps => $val_hospdoc)
				{
					if($hosps != 'all_hospdocs')
					{
						$hospdocs_pie[$hosps]['percentage'] = round(( count($val_hospdoc) / $total_hospdoc * 100), 2) . ' %';
						$hospdocs_pie[$hosps]['count'] = count($val_hospdoc);
					}
				}


				$total_transport = count($hospital_options['transport']['all_transports']);
				foreach($hospital_options['transport'] as $trans => $val_transport)
				{
					if($trans != 'all_transports')
					{
						$transports_pie[$trans]['percentage'] = round(( count($val_transport) / $total_transport * 100), 2) . ' %';
						$transports_pie[$trans]['count'] = count($val_transport);
					}
				}


				/* ------------------------Get discharge location for dead patients --------------------------------------- */

				$dispatloc = Doctrine_Query::create()
					->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as dislocation")
					->from("DischargeLocation")
					->where('isdelete=0')
					->andWhere('clientid = "' . $logininfo->clientid . '" ');
				$dispatlocarr = $dispatloc->fetchArray();

				foreach($dispatlocarr as $k => $dis_loc)
				{
					$discharge_location_details[$dis_loc['id']] = $dis_loc;
				}

				$dispat = Doctrine_Query::create()
					->select("*")
					->from("PatientDischarge")
					->where('ipid in (' . $ipidlocationstr . ')')
					->andWhere('isdelete = 0')
					->andWhereIn('discharge_method', $global_discharge_methods_dead);
				$dispat_arr = $dispat->fetchArray();

				foreach($dispat_arr as $k => $dis_patient)
				{
					$dischargeLocationsArray[$dis_patient['ipid']] = $dis_patient;
					$dischargeLocationsArray[$dis_patient['ipid']]['dislocation'] = $discharge_location_details[$dis_patient['discharge_location']]['dislocation'];
				}

				/* ------------------Get highest SAPV in reporp period ----------------------------- */
				$vs = array('%date_start%', '%date_end%');
				$vr = array('verordnungam', 'verordnungbis');

				$dropSapv = Doctrine_Query::create()
					->select('*, GROUP_CONCAT(verordnet) as vero')
					->from('SapvVerordnung')
					->whereIn('ipid', $ipidloc)
					->andWhere(str_replace($vs, $vr, $active_cond['interval_sql']))
					->andWhere('isdelete=0')
					->andWhere('status != 1 ')
					->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();


				foreach($droparray as $verord)
				{
					$sapv = explode(',', $verord['vero']);
					$vstatus = max($sapv);
					if($vstatus == "1")
					{
						$sapv_value[$verord['ipid']] = "BE";
					}
					elseif($vstatus == "2")
					{
						$sapv_value[$verord['ipid']] = "KO";
					}
					elseif($vstatus == "3")
					{
						$sapv_value[$verord['ipid']] = "TV";
					}
					elseif($vstatus == "4")
					{
						$sapv_value[$verord['ipid']] = "VV";
					}
					else
					{
						$sapv_value[$verord['ipid']] = "-";
					}
				}

				/* ----------------------- #DISPLAY DATA#----------------------- */
				foreach($active_patients as $k_ipid)
				{
					$hospitalLoc = (int) (count($ipidlocation[$k_ipid]));
					if($hospitalLoc != 0)
					{
						/* ----START - merge locations! --- */
						foreach($ipidlocation[$k_ipid] as $k_loc => $v_loc)
						{
							$hosp_locations[$k_ipid]['inhospital'][$k_loc] = $v_loc['valid_from'];
							$hosp_locations[$k_ipid]['outhospital'][$k_loc] = $v_loc['valid_till'];
						}

						foreach($hosp_locations[$k_ipid]['inhospital'] as $k_inhosp => $v_inhosp)
						{
							if(!in_array($v_inhosp, $hosp_locations[$k_ipid]['outhospital']))
							{
								$count_hosp[$k_ipid][$k_inhosp] = $v_inhosp;
							}
						}

						$merged_key = '0';

						foreach($ipidlocation[$k_ipid] as $k_location => $v_location)
						{

							//exclude hospital days outside the first admision
							if($v_location['valid_till'] == '0000-00-00 00:00:00')
							{
								$v_location['valid_till'] = date('Y-m-d H:i:s');
							}

							if(in_array($v_location['valid_from'], $count_hosp[$k_ipid]))
							{
								$merged_key++;
							}
							if(strtotime(date('Y-m-d', strtotime($v_location['valid_from']))) >= strtotime(date('Y-m-d', strtotime($treated_days[$k_ipid]['admissionDates']['0']['date']))))
							{
								if(date('Y-m-d', strtotime($v_location['valid_till'])) == date('Y-m-d', strtotime($ipidlocation[$k_ipid][($k_location + 1)]['valid_from'])))
								{
									/* ----first entry always 0 --- */
									$merged_locations[$k_ipid][$merged_key][$v_location['id']] = $v_location;

									$next_loc_id = $ipidlocation[$k_ipid][($k_location + 1)]['id'];
									$merged_locations[$k_ipid][$merged_key][$ipidlocation[$k_ipid][($k_location + 1)]['id']] = $ipidlocation[$k_ipid][($k_location + 1)];
								}
								else
								{
									$merged_locations[$k_ipid][$merged_key][$v_location['id']] = $v_location;
								}
							}
						}
						if(count($merged_locations[$k_ipid]) > '0')
						{
							$hospital_stats_array[$k_ipid]['epid'] = $global_patient_master[$k_ipid]['patepid'];
							$hospital_stats_array[$k_ipid]['lastname'] = $global_patient_master[$k_ipid]['last_name'];
							$hospital_stats_array[$k_ipid]['firstname'] = $global_patient_master[$k_ipid]['first_name'];
							$hospital_stats_array[$k_ipid]['full_name'] = $global_patient_master[$k_ipid]['first_name'] . ' ' . $global_patient_master[$k_ipid]['last_name'];
							$hospital_stats_array[$k_ipid]['treateddays'] = $treated_days[$k_ipid]['realActiveDays'];
							$hospital_stats_array[$k_ipid]['admissionsinhopital'] = $hospitalLoc;
							/* ----number of hospital locations in selected period --- */
							$hospital_stats_array[$k_ipid]['admissionsinhopital'] = count($merged_locations[$k_ipid]);
							/* ----END - merge locations! --- */

							/* ----number of days per spitalization --- */
							foreach($merged_locations[$k_ipid] as $key => $location)
							{
								$start_loc = reset($location);
								$end_loc = end($location);

								$from = date("d.m.Y", strtotime($start_loc['valid_from']));

								if($end_loc['valid_till'] != "0000-00-00 00:00:00")
								{
									if(empty($end_loc['valid_till']))
									{
										$till = date("d.m.Y");
									}
									else
									{
										$till = date("d.m.Y", strtotime($end_loc['valid_till']));
									}
								}
								else
								{
									$till = date("d.m.Y");
								}
								$diff_days = $pm->getDaysDiff($from, $till);
								$diff_days = intval($diff_days);
								$locationstats[$start_loc['ipid']][$key]['khtage'] = $diff_days;
								$locationstats[$start_loc['ipid']][$key]['locationstats'] = $from . " -> " . $till;
								if($start_loc['reason'] == '4')
								{
									$reason_txt = ":<br />" . $start_loc['reason_txt'];
								}
								else
								{
									$reason_txt = "";
								}
								$locationstats[$start_loc['ipid']][$key]['reason'] = $reasonarr[$start_loc['reason']] . $reason_txt;
								$locationstats[$start_loc['ipid']][$key]['hospdoc'] = $hospdocarr[$start_loc['hospdoc']];
								$locationstats[$start_loc['ipid']][$key]['transport'] = $transportarr[$start_loc['transport']];
							}

							$hospital_stats_array[$k_ipid]['locationstatsarr'] = $locationstats[$k_ipid];
							if(!empty($dischargeLocationsArray[$k_ipid]['dislocation']))
							{
								$disloc = $dischargeLocationsArray[$k_ipid]['dislocation'];
							}
							else
							{
								$disloc = "-";
							}
							$hospital_stats_array[$k_ipid]['dielocation'] = $disloc;
							if(strlen($sapv_value[$k_ipid]) > 0)
							{
								$hospital_stats_array[$k_ipid]['sapv'] = $sapv_value[$k_ipid];
							}
							else
							{
								$hospital_stats_array[$k_ipid]['sapv'] = "-";
							}
						}
					}
				}
				$this->view->hospital_stats_array = $hospital_stats_array;

				/* ---------------------------------------------------------- */
				/* ------------------ DIAGRAM ------------------------------ */

				$this->view->total_reasons = $total_reasons;
				$this->view->reasons_pie = $reasons_pie;

				$this->view->total_hospdoc = $total_hospdoc;
				$this->view->hospdocs_pie = $hospdocs_pie;

				$this->view->total_transport = $total_transport;
				$this->view->transports_pie = $transports_pie;
				/* ----------------------- #DISPLAY PIE#----------------------- */

				$no4a_pie_title = "Einweisungsgrund";
				$r = 1;
				foreach($reasons_pie as $reason => $reason_item)
				{
					$no4a_pie_data[$r]['l'] = $reason . "  (" . $reason_item["percentage"] . "%)" . "";
					$no4a_pie_data[$r]['v'] = $reason_item["count"];

					$r++;
				}

				if(!empty($hospital_stats_array))
				{
					$this->view->no4a_pie_image_pdf = Pms_Graph::piechart($no4a_pie_data, $no4a_pie_title, true);
				}

				$no4b_pie_title = "EinweisenderArzt";
				$h = 1;
				foreach($hospdocs_pie as $hosp => $hosp_item)
				{
					$no4b_pie_data[$h]['l'] = $hosp . "  (" . $hosp_item["percentage"] . "%)" . "";
					$no4b_pie_data[$h]['v'] = $hosp_item["count"];

					$h++;
				}

				if(!empty($hospital_stats_array))
				{
					$this->view->no4b_pie_image_pdf = Pms_Graph::piechart($no4b_pie_data, $no4b_pie_title, true);
				}
				$no4c_pie_title = "Fahrzeug";
				$t = 1;
				foreach($transports_pie as $trans => $trans_item)
				{
					$no4c_pie_data[$t]['l'] = $trans . "  (" . $trans_item["percentage"] . "%)" . "";
					$no4c_pie_data[$t]['v'] = $trans_item["count"];

					$t++;
				}

				if(!empty($hospital_stats_array))
				{
					$this->view->no4c_pie_image_pdf = Pms_Graph::piechart($no4c_pie_data, $no4c_pie_title, true);
				}

				/* ################################################################ */
				/* ################################################################ */
				/* ##################### 5. Privatpatienten  ###################### */
				/* ################################################################ */
				/* ################################################################ */
				//Shows all active patients in report period that are PRIVATE.

				/* --------------------Get Patients details---------------------------- */
				$actpatient = Doctrine_Query::create()
					->select("*,
					AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					AES_DECRYPT(middle_name,'" . Zend_Registry::get('salt') . "') as middle_name,
					AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') as sex,
					AES_DECRYPT(title,'" . Zend_Registry::get('salt') . "') as title,
					AES_DECRYPT(salutation,'" . Zend_Registry::get('salt') . "') as salutation,
					convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
					convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
					convert(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
					convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,
					convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,
					convert(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using latin1) as mobile,
					convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber,
					e.epid as patepid")
					->from('PatientMaster p');
				$actpatient->leftJoin("p.EpidIpidMapping e");
				$actpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
				$actpatient->leftJoin("PatientHealthInsurance h");
				$actpatient->andWhere('h.ipid = p.ipid');
				$actpatient->andWhere('h.privatepatient = 1');
				$actpatient->andwhereIn('ipid', $active_patients);
				$actpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
				$actpatients = $actpatient->fetchArray();

				$i = 1;
				$activeipids = "'0',";

				foreach($actpatients as $patient)
				{
					if($i != count($actpatients))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$activeipids .= "'" . $patient['ipid'] . "'" . $end;
					$activeipidsarr[] = $patient['ipid'];
					$i++;
				}

				/* ----------------------- #DISPLAY DATA#----------------------- */
				foreach($actpatients as $activepatient)
				{
					$private_patients_array[$activepatient['ipid']]['epid'] = $activepatient['patepid'];
					$private_patients_array[$activepatient['ipid']]['lastname'] = $activepatient['last_name'];
					$private_patients_array[$activepatient['ipid']]['firstname'] = $activepatient['first_name'];
					$private_patients_array[$activepatient['ipid']]['admissiondate'] = date('d.m.Y', strtotime($activepatient['admission_date']));

					if(!empty($global_discharge_date[$activepatient['ipid']]) && $global_discharge_date[$activepatient['ipid']] != "0000-00-00 00:00:00")
					{
						$dis_date = date("d.m.Y", strtotime($global_discharge_date[$activepatient['ipid']]));
					}
					else
					{
						$dis_date = "-";
					}
					$private_patients_array[$activepatient['ipid']]['dischargedate'] = $dis_date;

					$private_patients_array[$activepatient['ipid']]['treateddays'] = $treated_days[$activepatient['ipid']]['realActiveDays'];
				}
				$total_pv_patients = count($private_patients_array);
				$percentage_pv_patients = round(($total_pv_patients / $total_active_patients * 100), 2) . ' %';
				;

				$this->view->private_patients_array = $private_patients_array;

				$no_private = $total_active_patients - $total_pv_patients;
				$percentage_NO_pv_patients = round(($no_private / $total_active_patients * 100), 2) . ' %';
				;
				$this->view->total_active_patients = $total_active_patients;
				$this->view->total_pv_patients = $total_pv_patients;
				$this->view->percentage_pv_patients = $percentage_pv_patients;
				/* ----------------------- #DISPLAY PIE#----------------------- */
				$no5_pie_title = "Privatpatienten";
				$no5_pie_data = array(
					'1' => array(
						'l' => "Privatpatienten (" . $percentage_pv_patients . "%)",
						'v' => "$total_pv_patients"
					),
					'2' => array(
						'l' => "Kassenpatienten (" . $percentage_NO_pv_patients . "%)",
						'v' => "$no_private"
					),
				);


				if(!empty($private_patients_array))
				{
					$this->view->no5_pie_image_pdf = Pms_Graph::piechart($no5_pie_data, $no5_pie_title, true);
				}

				/* ################################################################ */
				/* ################################################################ */
				/* ##################### 6. Hauptdiagnosen  ####################### */
				/* ################################################################ */
				/* ################################################################ */

				/* --------------------Get Client diagnosis type MAIN---------------------- */
				$dg = new DiagnosisType();
				$diagarr = $dg->getDiagnosisTypes($logininfo->clientid, '"HD"');

				foreach($diagarr as $key => $valdiag)
				{
					$diagnosis_type .= '"' . $valdiag['id'] . '",';
				}

				/* --------------------Get all active patients in report that have main diagnosis ---------------------- */
				$diag_pat = Doctrine_Query::create()
					->select('*, count(diagnosis_id) as sum_diagnos, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as tabname, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
					->from("PatientDiagnosis")
					->whereIn('ipid', $active_patients)
					->andWhere('diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ')
					->groupBy('diagnosis_id')
					->orderBy('diagnosis_id DESC');
				$diag_patarr = $diag_pat->fetchArray();

				$diagid_pat = Doctrine_Query::create()
					->select('*,AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as tabname, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
					->from("PatientDiagnosis")
					->whereIn('ipid', $active_patients)
					->andWhere('diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ')
					->orderBy('diagnosis_id DESC');
				$diagid_patarr = $diagid_pat->fetchArray();

				foreach($diagid_patarr as $diagno_id_patient)
				{
					$diagnos_ids_array[$diagno_id_patient['diagnosis_id']][] = $global_epids_array[$diagno_id_patient['ipid']]['epid'];
				}

				$i = 0;

				foreach($diag_patarr as $diag_patitem)
				{
					$data[$i]['icdprimary'] = '&nbsp;';
					$data[$i]['description'] = '&nbsp;';
					$data[$i]['tabname'] = $diag_patitem['a_tabname'];
					$data[$i]['count'] = $diag_patitem['sum_diagnos'];
					if($diag_patitem['diagnosis_id'] == '')
					{
						$diagnosis_id = 0;
					}
					else
					{
						$diagnosis_id = $diag_patitem['diagnosis_id'];
					}
					$data[$i]['diagnosis_id'] = $diagnosis_id;

					switch($diag_patitem['a_tabname'])
					{

						case 'diagnosis':
							$diagnosis_tab[] = $diagnosis_id;
							break;

						case 'diagnosis_freetext':
							$diagnosis_freetext_tab[] = $diagnosis_id;
							break;

						case 'diagnosis_icd':
							$diagnosis_icd_tab[] = $diagnosis_id;
							break;

						default:
							break;
					}

					$i++;
				}

				if(sizeof($diagnosis_tab) > 0)
				{
					$diagnosis = Doctrine_Query::create()
						->select("*")
						->from("Diagnosis")
						->where("id IN (9999999," . implode(',', $diagnosis_tab) . ")");
					$diagnosisarray = $diagnosis->fetchArray();
					foreach($diagnosisarray as $diagnosis_item)
					{
						$diagnosis_details[$diagnosis_item['id']] = $diagnosis_item;
					}
				}

				if(sizeof($diagnosis_freetext_tab) > 0)
				{
					$diagnosisfreetext = Doctrine_Query::create()
						->select('*')
						->from('DiagnosisText')
						->where("id IN (9999999," . implode(',', $diagnosis_freetext_tab) . ")")
						->andWhere('clientid = ' . $clientid);
					$diagnosisfreetextarray = $diagnosisfreetext->fetchArray();
					foreach($diagnosisfreetextarray as $diagnosisfreetext_item)
					{
						$diagnosis_freetext_details[$diagnosisfreetext_item['id']] = $diagnosisfreetext_item;
					}
				}

				if(sizeof($diagnosis_icd_tab) > 0)
				{
					$diagnosisicd = Doctrine_Query::create()
						->select('*')
						->from('DiagnosisIcd')
						->where("id IN (9999999," . implode(',', $diagnosis_icd_tab) . ")")
						->andWhere('clientid = ' . $clientid);
					;
					$diagnosisicdarray = $diagnosisicd->fetchArray();
					foreach($diagnosisicdarray as $diagnosisicd_item)
					{
						$diagnosis_icd_details[$diagnosisicd_item['id']] = $diagnosisicd_item;
					}
				}

				/* -------------------------Get tereatment days PER EPID------------------------- */
				foreach($treated_days as $ipid_key => $real_active)
				{
					$treatment_days[$ipid_key] = $real_active['realActiveDays'];
				}
				/* ----------------------- #DISPLAY DATA#----------------------- */
				$incr = "0";
				$total_main_dianosis = 0;

				foreach($data as $key => $data_item)
				{

					switch($data_item['tabname'])
					{

						case 'diagnosis':
							if(!empty($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']))
							{
								$icd = $diagnosis_details[$data_item['diagnosis_id']]['icd_primary'];
							}
							else
							{
								$icd = '0';
							}

							if($icd == '0')
							{
								$maindiagnosis_array[$icd]['icdprimary'] = 'Ohne Angabe';
							}
							else
							{
								$maindiagnosis_array[$icd]['icdprimary'] = strtoupper($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']);
							}
							$maindiagnosis_array[$icd]['icdprimary'] = strtoupper($diagnosis_details[$data_item['diagnosis_id']]['icd_primary']);
							$maindiagnosis_array_item_desc[$icd]['description'][$incr] = $diagnosis_details[$data_item['diagnosis_id']]['description'];
							$maindiagnosis_array[$icd]['count'] = ($data_item['count'] + $maindiagnosis_array[$icd]['count']);
							$maindiagnosis_array[$icd]['description'] = implode(",<br /> ", array_unique($maindiagnosis_array_item_desc[$icd]['description']));
							$maindiagnosis_array_item_earr[$icd]['epids_array'][] = $diagnos_ids_array[$data_item['diagnosis_id']];

							foreach($maindiagnosis_array_item_earr[$icd]['epids_array'] as $k_icd => $v_icd)
							{
								foreach($v_icd as $icd_epids)
								{
									if(!in_array($icd_epids, $maindiagnosis_array_item_epids[$icd]['epids_total']))
									{
										$maindiagnosis_array_item_epids[$icd]['epids_total'][] = $icd_epids;
										$sum[$icd] += $treatment_days[$global_ipid2epid[$icd_epids]];
									}
								}
							}
							$icd_epids_nr[$icd] = count($maindiagnosis_array_item_epids[$icd]['epids_total']);
							$maindiagnosis_array[$icd]['epids'] = implode(", ", $maindiagnosis_array_item_epids[$icd]['epids_total']);
							$maindiagnosis_array[$icd]['treatment_avg'] = round($sum[$icd] / $icd_epids_nr[$icd], 2);
							$incr++;
							break;

						case 'diagnosis_freetext':
							if(!empty($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']))
							{
								$icd = $diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary'];
							}
							else
							{
								$icd = '0';
							}

							if($icd == '0')
							{
								$maindiagnosis_array[$icd]['icdprimary'] = 'Ohne Angabe';
							}
							else
							{
								$maindiagnosis_array[$icd]['icdprimary'] = strtoupper($diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']);
							}
							$maindiagnosis_array_item_desc[$icd]['description'][$incr] = $diagnosis_freetext_details[$data_item['diagnosis_id']]['free_name'];
							$maindiagnosis_array[$icd]['count'] = ($data_item['count'] + $maindiagnosis_array[$icd]['count']);
							$maindiagnosis_array[$icd]['description'] = implode(", ", array_unique($maindiagnosis_array_item_desc[$icd]['description']));
							$maindiagnosis_array_item_earr[$icd]['epids_array'][] = $diagnos_ids_array[$data_item['diagnosis_id']];
							foreach($maindiagnosis_array_item_earr[$icd]['epids_array'] as $k_icd => $v_icd)
							{
								foreach($v_icd as $icd_epids)
								{
									if(!in_array($icd_epids, $maindiagnosis_array_item_epids[$icd]['epids_total']))
									{
										$maindiagnosis_array_item_epids[$icd]['epids_total'][] = $icd_epids;
										$sum[$icd] += $treatment_days[$global_ipid2epid[$icd_epids]];
									}
								}
							}

							$icd_epids_nr[$icd] = count($maindiagnosis_array_item_epids[$icd]['epids_total']);
							$maindiagnosis_array[$icd]['epids'] = implode(", ", $maindiagnosis_array_item_epids[$icd]['epids_total']);
							$maindiagnosis_array[$icd]['treatment_avg'] = round($sum[$icd] / $icd_epids_nr[$icd], 2);

							$incr++;
							break;

						case 'diagnosis_icd':

							if(!empty($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']))
							{
								$icd = $diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary'];
							}
							else
							{
								$icd = '0';
							}

							if($icd == '0')
							{
								$maindiagnosis_array[$icd]['icdprimary'] = 'Ohne Angabe';
							}
							else
							{
								$maindiagnosis_array[$icd]['icdprimary'] = strtoupper($diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']);
							}
							$maindiagnosis_array_item_desc[$icd]['description'][$incr] = trim($diagnosis_icd_details[$data_item['diagnosis_id']]['description']);
							$maindiagnosis_array[$icd]['count'] = ($data_item['count'] + $maindiagnosis_array[$icd]['count']);
							$maindiagnosis_array[$icd]['description'] = implode(", ", array_unique($maindiagnosis_array_item_desc[$icd]['description']));
							$maindiagnosis_array_item_earr[$icd]['epids_array'][] = $diagnos_ids_array[$data_item['diagnosis_id']];
							foreach($maindiagnosis_array_item_earr[$icd]['epids_array'] as $k_icd => $v_icd)
							{
								foreach($v_icd as $icd_epids)
								{
									if(!in_array($icd_epids, $maindiagnosis_array_item_epids[$icd]['epids_total']))
									{
										$maindiagnosis_array_item_epids[$icd]['epids_total'][] = $icd_epids;
										$sum[$icd] += $treatment_days[$global_ipid2epid[$icd_epids]];
									}
								}
							}

							$icd_epids_nr[$icd] = count($maindiagnosis_array_item_epids[$icd]['epids_total']);
							$maindiagnosis_array[$icd]['epids'] = implode(", ", $maindiagnosis_array_item_epids[$icd]['epids_total']);
							$maindiagnosis_array[$icd]['treatment_avg'] = round($sum[$icd] / $icd_epids_nr[$icd], 2);
							$incr++;
							break;
						default:
							break;
					}

					if(empty($maindiagnosis_array[$icd]['icdprimary']))
					{
						$maindiagnosis_array[$icd]['icdprimary'] = ' -';
					}

					if(empty($maindiagnosis_array[$icd]['description']))
					{
						$maindiagnosis_array[$icd]['description'] = ' -';
					}
				}


				$sortarr = 'count';
				$maindiagnosis_array = $this->array_sort($maindiagnosis_array, $sortarr, SORT_DESC);

				$this->view->maindiagnosis_array = $maindiagnosis_array;
				/* ----------------------- #DISPLAY PIE#----------------------- */
				$dg_nr = 1;
				foreach($maindiagnosis_array as $k_dg => $diagno_nr)
				{
					$total_diagno += $diagno_nr['count'];
					if($dg_nr <= 5)
					{
						$no6_pie_data[$dg_nr]['l'] = $diagno_nr['icdprimary'];
						$no6_pie_data[$dg_nr]['v'] = $diagno_nr['count'];
						$dg_nr++;
					}
					else
					{
						$no6_pie_data[$dg_nr]['l'] = 'Sonstiges';
						$no6_pie_data[$dg_nr]['v'] += $diagno_nr['count'];
					}
				}

				$no6_pie_title = "Hauptdiagnosen";

				if(!empty($maindiagnosis_array))
				{
					$this->view->no6_pie_image_pdf = Pms_Graph::piechart($no6_pie_data, $no6_pie_title, true);
				}

				/* ################################################################ */
				/* ################################################################ */
				/* ##################### 7. Nebendiagnosen  ####################### */
				/* ################################################################ */
				/* ################################################################ */

				/* --------------------Get Client diagnosis type MAIN---------------------- */
				$side_dg = new DiagnosisType();
				$side_diagarr = $side_dg->getDiagnosisTypes($logininfo->clientid, '"ND"');

				foreach($side_diagarr as $key => $valdiag)
				{
					$side_diagnosis_type .= '"' . $valdiag['id'] . '",';
				}

				/* --------------------Get all active patients in report that have main diagnosis ---------------------- */
				$side_diag_pat = Doctrine_Query::create()
					->select('*, count(diagnosis_id) as sum_diagnos, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as tabname, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
					->from("PatientDiagnosis")
					->whereIn('ipid', $active_patients)
					->andWhere('diagnosis_type_id in (' . substr($side_diagnosis_type, 0, -1) . ') ')
					->groupBy('diagnosis_id')
					->orderBy('diagnosis_id DESC');
				$side_diag_patarr = $side_diag_pat->fetchArray();



				$side_diagid_pat = Doctrine_Query::create()
					->select('*,AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as tabname, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
					->from("PatientDiagnosis")
					->whereIn('ipid', $active_patients)
					->andWhere('diagnosis_type_id in (' . substr($side_diagnosis_type, 0, -1) . ') ')
					->orderBy('diagnosis_id DESC');
				$side_diagid_patarr = $side_diagid_pat->fetchArray();


				foreach($side_diagid_patarr as $diagno_id_patient)
				{
					$side_diagnos_ids_array[$diagno_id_patient['diagnosis_id']][] = $global_epids_array[$diagno_id_patient['ipid']]['epid'];
					;
				}
				$i = 0;

				foreach($side_diag_patarr as $diag_patitem)
				{
					$side_data[$i]['icdprimary'] = '&nbsp;';
					$side_data[$i]['description'] = '&nbsp;';
					$side_data[$i]['tabname'] = $diag_patitem['a_tabname'];
					$side_data[$i]['count'] = $diag_patitem['sum_diagnos'];


					if($diag_patitem['diagnosis_id'] == '')
					{
						$side_diagnosis_id = 0;
					}
					else
					{
						$side_diagnosis_id = $diag_patitem['diagnosis_id'];
					}

					$side_data[$i]['diagnosis_id'] = $side_diagnosis_id;

					switch($diag_patitem['a_tabname'])
					{

						case 'diagnosis':
							$side_diagnosis_tab[] = $side_diagnosis_id;
							break;


						case 'diagnosis_freetext':
							$side_diagnosis_freetext_tab[] = $side_diagnosis_id;
							break;

						case 'diagnosis_icd':
							$side_diagnosis_icd_tab[] = $side_diagnosis_id;
							break;


						default:
							break;
					}

					$i++;
				}

				if(sizeof($side_diagnosis_tab) > 0)
				{
					$side_diagnosis = Doctrine_Query::create()
						->select("*")
						->from("Diagnosis")
						->where("id IN (9999999," . implode(',', $side_diagnosis_tab) . ")");
					$side_diagnosisarray = $side_diagnosis->fetchArray();
					foreach($side_diagnosisarray as $diagnosis_item)
					{
						$side_diagnosis_details[$diagnosis_item['id']] = $diagnosis_item;
					}
				}

				if(sizeof($side_diagnosis_freetext_tab) > 0)
				{
					$side_diagnosisfreetext = Doctrine_Query::create()
						->select('*')
						->from('DiagnosisText')
						->where("id IN (9999999," . implode(',', $side_diagnosis_freetext_tab) . ")")
						->andWhere('clientid = ' . $clientid);
					$side_diagnosisfreetextarray = $side_diagnosisfreetext->fetchArray();
					foreach($side_diagnosisfreetextarray as $diagnosisfreetext_item)
					{
						$side_diagnosis_freetext_details[$diagnosisfreetext_item['id']] = $diagnosisfreetext_item;
					}
				}

				if(sizeof($side_diagnosis_icd_tab) > 0)
				{
					$side_diagnosisicd = Doctrine_Query::create()
						->select('*')
						->from('DiagnosisIcd')
						->where("id IN (9999999," . implode(',', $side_diagnosis_icd_tab) . ")")
						->andWhere('clientid = ' . $clientid);
					;
					$side_diagnosisicdarray = $side_diagnosisicd->fetchArray();
					foreach($side_diagnosisicdarray as $diagnosisicd_item)
					{
						$side_diagnosis_icd_details[$diagnosisicd_item['id']] = $diagnosisicd_item;
					}
				}

				/* -------------------------Get tereatment days PER EPID------------------------- */
				foreach($treated_days as $ipid_key => $real_active)
				{
					$side_treatment_days[$ipid_key] = $real_active['realActiveDays'];
				}
				/* ----------------------- #DISPLAY DATA#----------------------- */
				$incr = "0";

				foreach($side_data as $key => $data_item)
				{

					switch($data_item['tabname'])
					{

						case 'diagnosis':
							if(!empty($side_diagnosis_details[$data_item['diagnosis_id']]['icd_primary']))
							{
								$icd = $side_diagnosis_details[$data_item['diagnosis_id']]['icd_primary'];
							}
							else
							{
								$icd = '0';
							}

							if($icd == '0')
							{
								$sidediagnosis_array[$icd]['icdprimary'] = 'Ohne Angabe';
							}
							else
							{
								$sidediagnosis_array[$icd]['icdprimary'] = strtoupper($side_diagnosis_details[$data_item['diagnosis_id']]['icd_primary']);
							}
							$sidediagnosis_array_item_desc[$icd]['description'][$incr] = $side_diagnosis_details[$data_item['diagnosis_id']]['description'];
							$sidediagnosis_array[$icd]['count'] = ($data_item['count'] + $sidediagnosis_array[$icd]['count']);
							$sidediagnosis_array[$icd]['description'] = implode(",<br /> ", array_unique($sidediagnosis_array_item_desc[$icd]['description']));
							$sidediagnosis_array_item_earr[$icd]['epids_array'][] = $side_diagnos_ids_array[$data_item['diagnosis_id']];
							foreach($sidediagnosis_array_item_earr[$icd]['epids_array'] as $k_icd => $v_icd)
							{
								foreach($v_icd as $icd_epids)
								{
									if(!in_array($icd_epids, $sidediagnosis_array_item_epids[$icd]['epids_total']))
									{
										$sidediagnosis_array_item_epids[$icd]['epids_total'][] = $icd_epids;
										$sum[$icd] += $side_treatment_days[$global_ipid2epid[$icd_epids]];
									}
								}
							}

							$icd_epids_nr[$icd] = count($sidediagnosis_array_item_epids[$icd]['epids_total']);
							$sidediagnosis_array[$icd]['epids'] = implode(", ", $sidediagnosis_array_item_epids[$icd]['epids_total']);
							$sidediagnosis_array[$icd]['treatment_avg'] = round($sum[$icd] / $icd_epids_nr[$icd], 2);
							$incr++;
							break;

						case 'diagnosis_freetext':
							if(!empty($side_diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']))
							{
								$icd = $side_diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary'];
							}
							else
							{
								$icd = '0';
							}

							if($icd == '0')
							{
								$sidediagnosis_array[$icd]['icdprimary'] = 'Ohne Angabe';
							}
							else
							{
								$sidediagnosis_array[$icd]['icdprimary'] = strtoupper($side_diagnosis_freetext_details[$data_item['diagnosis_id']]['icd_primary']);
							}
							$sidediagnosis_array_item_desc[$icd]['description'][$incr] = $side_diagnosis_freetext_details[$data_item['diagnosis_id']]['free_name'];
							$sidediagnosis_array[$icd]['count'] = ($data_item['count'] + $sidediagnosis_array[$icd]['count']);
							$sidediagnosis_array[$icd]['description'] = implode(", ", array_unique($sidediagnosis_array_item_desc[$icd]['description']));

							$sidediagnosis_array_item_earr[$icd]['epids_array'][] = $side_diagnos_ids_array[$data_item['diagnosis_id']];
							foreach($sidediagnosis_array_item_earr[$icd]['epids_array'] as $k_icd => $v_icd)
							{
								foreach($v_icd as $icd_epids)
								{
									if(!in_array($icd_epids, $sidediagnosis_array_item_epids[$icd]['epids_total']))
									{
										$sidediagnosis_array_item_epids[$icd]['epids_total'][] = $icd_epids;
										$sum[$icd] += $side_treatment_days[$global_ipid2epid[$icd_epids]];
									}
								}
							}

							$icd_epids_nr[$icd] = count($sidediagnosis_array_item_epids[$icd]['epids_total']);
							$sidediagnosis_array[$icd]['epids'] = implode(", ", $sidediagnosis_array_item_epids[$icd]['epids_total']);
							$sidediagnosis_array[$icd]['treatment_avg'] = round($sum[$icd] / $icd_epids_nr[$icd], 2);

							$incr++;
							break;

						case 'diagnosis_icd':

							if(!empty($side_diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']))
							{
								$icd = $side_diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary'];
							}
							else
							{
								$icd = '0';
							}

							if($icd == '0')
							{
								$sidediagnosis_array[$icd]['icdprimary'] = 'Ohne Angabe';
							}
							else
							{
								$sidediagnosis_array[$icd]['icdprimary'] = strtoupper($side_diagnosis_icd_details[$data_item['diagnosis_id']]['icd_primary']);
							}
							$sidediagnosis_array_item_desc[$icd]['description'][$incr] = trim($side_diagnosis_icd_details[$data_item['diagnosis_id']]['description']);
							$sidediagnosis_array[$icd]['count'] = ($data_item['count'] + $sidediagnosis_array[$icd]['count']);
							$sidediagnosis_array[$icd]['description'] = implode(", ", array_unique($sidediagnosis_array_item_desc[$icd]['description']));
							$sidediagnosis_array_item_earr[$icd]['epids_array'][] = $side_diagnos_ids_array[$data_item['diagnosis_id']];
							foreach($sidediagnosis_array_item_earr[$icd]['epids_array'] as $k_icd => $v_icd)
							{
								foreach($v_icd as $icd_epids)
								{
									if(!in_array($icd_epids, $sidediagnosis_array_item_epids[$icd]['epids_total']))
									{
										$sidediagnosis_array_item_epids[$icd]['epids_total'][] = $icd_epids;
										$sum[$icd] += $side_treatment_days[$global_ipid2epid[$icd_epids]];
									}
								}
							}

							$icd_epids_nr[$icd] = count($sidediagnosis_array_item_epids[$icd]['epids_total']);
							$sidediagnosis_array[$icd]['epids'] = implode(", ", $sidediagnosis_array_item_epids[$icd]['epids_total']);
							$sidediagnosis_array[$icd]['treatment_avg'] = round($sum[$icd] / $icd_epids_nr[$icd], 2);
							$incr++;
							break;


						default:
							break;
					}

					if(empty($sidediagnosis_array[$icd]['icdprimary']))
					{
						$sidediagnosis_array[$icd]['icdprimary'] = ' -';
					}

					if(empty($sidediagnosis_array[$icd]['description']))
					{
						$sidediagnosis_array[$icd]['description'] = ' -';
					}
				}


				$side_sortarr = 'count';
				$sidediagnosis_array = $this->array_sort($sidediagnosis_array, $side_sortarr, SORT_DESC);

				$this->view->sidediagnosis_array = $sidediagnosis_array;


				/* ----------------------- #DISPLAY PIE#----------------------- */
				$sdg = 1;
				foreach($sidediagnosis_array as $k_dg => $side_diagno_nr)
				{
					if($sdg <= 5)
					{
						$no7_pie_data[$sdg]['l'] = $side_diagno_nr['icdprimary'];
						$no7_pie_data[$sdg]['v'] = $side_diagno_nr['count'];
						$sdg++;
					}
					else
					{
						$no7_pie_data[$sdg]['l'] = 'Sonstiges';
						$no7_pie_data[$sdg]['v'] += $side_diagno_nr['count'];
					}
				}
				$no7_pie_title = "Nebendiagnosen";


				if(!empty($sidediagnosis_array))
				{
					$this->view->no7_pie_image_pdf = Pms_Graph::piechart($no7_pie_data, $no7_pie_title, true);
				}
				/* ################################################################ */
				/* ################################################################ */
				/* ######################## 8. Pflegedienst ####################### */
				/* ################################################################ */
				/* ################################################################ */

				/* ----------------------------- Client Pflegedienste---------------------------------------- */
				$clpfle = Doctrine_Query::create()
					->select("*")
					->from('Pflegedienstes')
					->where('clientid = ' . $clientid);
				$clpflearray = $clpfle->fetchArray();

				foreach($clpflearray as $valo)
				{
					$pflegedienste[$valo['id']]['id'] = $valo['id'];
					$pflegedienste[$valo['id']]['name'] = $valo['nursing'];
					$pflegedienste[$valo['id']]['palliativpflegedienst'] = $valo['palliativpflegedienst'];
				}

				/* --------------------- Patient Pflegedienste and Paliative Pflegedienst   ------------------- */
				$patientpfle = Doctrine_Query::create()
					->select("*")
					->from('PatientPflegedienste p')
					->whereIn('p.ipid', $active_patients)
					->andwhere('p.isdelete = 0');
				$patientpflearray = $patientpfle->fetchArray();

				$ppfle = array();
				$pal_ppfle = array();
				$pflegedienst_pat_array = array();
				$paliativpflegedienst_pat_array = array();

				foreach($patientpflearray as $key => $pfle)
				{
					if($pflegedienste[$pfle['pflid']]['palliativpflegedienst'] == '0')
					{
						$pflegedienst_details[$pfle['ipid']]['id'][] = $pfle['pflid'];
						$pflegedienst_details[$pfle['ipid']]['name'][] = $pflegedienste[$pfle['pflid']]['name'];
						if(!in_array($pfle['ipid'], $pflegedienst_pat_array))
						{
							$pflegedienst_pat_array[] = $pfle['ipid'];
						}
					}
					else
					{
						$pal_ppfle[$pfle['ipid']]['id'][] = $pfle['pflid'];
						$pal_ppfle[$pfle['ipid']]['name'][] = $pflegedienste[$pfle['pflid']]['name'];

						if(!in_array($pfle['ipid'], $paliativpflegedienst_pat_array))
						{
							$paliativpflegedienst_pat_array[] = $pfle['ipid'];
						}
					}
				}

				$pflegedienst_pat_array = $pflegedienst_pat_array;
				$paliativpflegedienst_pat_array = $paliativpflegedienst_pat_array;

				/* ----------------------------- Display all data ---------------------------------------- */
				$patients_pfle_and_pal = 0;
				$patients_pfle = 0;
				$patients_pal = 0;
				$patients_no_pfle_no_pal = 0;

				foreach($active_patients as $p_ipid)
				{
					$patients_pfleged_array[$p_ipid]['epid'] = $global_patient_master[$p_ipid]['patepid'];
					$patients_pfleged_array[$p_ipid]['lastname'] = $global_patient_master[$p_ipid]['last_name'];
					$patients_pfleged_array[$p_ipid]['firstname'] = $global_patient_master[$p_ipid]['first_name'];
					$patients_pfleged_array[$p_ipid]['admissiondate'] = date('d.m.Y', strtotime($global_patient_master[$p_ipid]['admission_date']));

					if(!empty($global_discharge_date[$p_ipid]) && $global_discharge_date[$p_ipid] != "0000-00-00 00:00:00")
					{
						$dis_date = date("d.m.Y", strtotime($global_discharge_date[$p_ipid]));
					}
					else
					{
						$dis_date = "-";
					}
					$patients_pfleged_array[$p_ipid]['dischargedate'] = $dis_date;


					if($pflegedienst_details[$p_ipid] !== NULL)
					{
						$patients_pfleged_array[$p_ipid]['pflegedienst'] = implode(',<br />', $pflegedienst_details[$p_ipid]['name']);
						$patients_pfle ++;
					}
					else
					{
						$patients_pfleged_array[$p_ipid]['pflegedienst'] = '-';
					}

					if($pal_ppfle[$p_ipid] !== NULL)
					{
						$patients_pfleged_array[$p_ipid]['pal_pflegedienst'] = implode(',<br />', $pal_ppfle[$p_ipid]['name']);
						$patients_pal ++;
					}
					else
					{
						$patients_pfleged_array[$p_ipid]['pal_pflegedienst'] = '-';
					}



					if(in_array($p_ipid, $pflegedienst_pat_array) && in_array($p_ipid, $paliativpflegedienst_pat_array))
					{
						$patients_pfle_and_pal++;
					}
					if(!in_array($p_ipid, $pflegedienst_pat_array) && !in_array($p_ipid, $paliativpflegedienst_pat_array))
					{
						$patients_no_pfle_no_pal++;
					}
				}

				$this->view->patients_pfleged_array = $patients_pfleged_array;
				$this->view->patients_pflegedienst_paliativepfle = $patients_pfle_and_pal;
				$this->view->patients_pflegedienst = $patients_pfle;
				$this->view->patients_paliativepfle = $patients_pal;
				$this->view->patients_no_pflegedienst_no_paliativepfle = $patients_no_pfle_no_pal;

				$this->view->patients_pfle_percentage = round(($patients_pfle / $total_active_patients * 100), 2) . ' %';
				$this->view->patients_pal_percentage = round(($patients_pal / $total_active_patients * 100), 2) . ' %';
				$this->view->patients_pfle_and_pal_percentage = round(($patients_pfle_and_pal / $total_active_patients * 100), 2) . ' %';
				$this->view->patients_no_pfle_no_pal_percentage = round(($patients_no_pfle_no_pal / $total_active_patients * 100), 2) . ' %';


				//preapare pie data

				$pflegediests_details[0]['name'] = "Pflegedienst";
				$pflegediests_details[1]['name'] = "Palliativpflegedienst";
				$pflegediests_details[2]['name'] = "Pflegedienst und Palliativpflegedienst";
				$pflegediests_details[3]['name'] = "kein Pflegedienst";

				$pflegediests_details[0]['count'] = $patients_pfle;
				$pflegediests_details[1]['count'] = $patients_pal;
				$pflegediests_details[2]['count'] = $patients_pfle_and_pal;
				$pflegediests_details[3]['count'] = $patients_no_pfle_no_pal;

				$pflegediests_details[0]['percentage'] = round(($patients_pfle / $total_active_patients * 100), 2) . ' %';
				$pflegediests_details[1]['percentage'] = round(($patients_pal / $total_active_patients * 100), 2) . ' %';
				$pflegediests_details[2]['percentage'] = round(($patients_pfle_and_pal / $total_active_patients * 100), 2) . ' %';
				$pflegediests_details[3]['percentage'] = round(($patients_no_pfle_no_pal / $total_active_patients * 100), 2) . ' %';


				$no8_pie_title = "Pflegedienst";
				$pf = 1;
				foreach($pflegediests_details as $pfdetails)
				{
					if($pfdetails['count'] != '0')
					{
						$no8_pie_data[$pf]['l'] = $pfdetails['name'] . " (" . $pfdetails['percentage'] . "%)";
						$no8_pie_data[$pf]['v'] = $pfdetails['count'];
					}
					$pf++;
				}

				if(!empty($pflegediests_details))
				{
					$this->view->no8_pie_image_pdf = Pms_Graph::piechart($no8_pie_data, $no8_pie_title, true);
				}

				/* ################################################################ */
				/* ################################################################ */
				/* ######################## 9. Hausbesuche ######################## */
				/* ################################################################ */
				/* ################################################################ */

				/* ------------------------------------  Get deleted from verlauf visits------------------------------------------ */
				$deleted_visits = Doctrine_Query::create()
					->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
					->from('PatientCourse')
					->where('wrong=1')
					->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
					->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_doctor_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_nurse_form")) . '"  ')
					->andWhereIn('ipid', $active_patients);

				$deleted_visits_array = $deleted_visits->fetchArray();

				$del_visits['kvno_doctor_form'][] = '999999999999';
				$del_visits['kvno_nurse_form'][] = '999999999999';
				$del_visits['wl_doctor_form'][] = '999999999999';
				$del_visits['wl_nurse_form'][] = '999999999999';
				$del_visits['visit_koordination_form'][] = '999999999999';

				foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
				{
					$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
				}

				/* ------------------------------------  Get KVNO doctor visits------------------------------------------ */
				$kvno_doctor_visits = Doctrine_Query::create()
					->select("*")
					->from("KvnoDoctor")
					->whereIn('ipid', $active_patients)
					->where('ipid in (' . substr($ipid_str, 0, -1) . ')')
					->andWhereNotIn('id', $del_visits['kvno_doctor_form'])
					->andWhereNotIn('id', $del_visits['wl_doctor_form'])
					->andWhere(str_replace('%date%', 'vizit_date', $active_cond['date_sql']))
				;
				$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();


				foreach($kvno_doctor_visits_arr as $doc => $value_doc)
				{
					$pat_visit_doc['doctor_visit'][$value_doc['ipid']][] = $value_doc;
				}
				/* ------------------------------------  Get KVNO nurse visits------------------------------------------ */
				$kvno_nurse_visits = Doctrine_Query::create()
					->select("*")
					->from("KvnoNurse")
					->whereIn('ipid', $active_patients)
					->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
					->andWhereNotIn('id', $del_visits['wl_nurse_form'])
					->andWhere(str_replace('%date%', 'vizit_date', $active_cond['date_sql']))
				;
				$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();

				foreach($kvno_nurse_visits_arr as $nurse => $value_nurse)
				{
					$pat_visit_doc['nurse_visit'][$value_nurse['ipid']][] = $value_nurse;
				}

				/* ------------------------------------  Get KVNO koordination visits------------------------------------------ */
				$kvno_koordination_visits = Doctrine_Query::create()
					->select("*")
					->from("VisitKoordination")
					->whereIn('ipid', $active_patients)
					->andWhereNotIn('id', $del_visits['visit_koordination_form'])
					->andWhere(str_replace('%date%', 'visit_date', $active_cond['date_sql']));
				$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

				foreach($kvno_koordination_visits_arr as $koordination => $value_koordination)
				{
					$pat_visit_doc['koordinator_visit'][$value_koordination['ipid']][] = $value_koordination;
				}

				if(empty($pat_visit_doc))
				{
					$pat_visit_doc['9999999999'] = '0000';
				}

				foreach($pat_visit_doc as $visits_types => $visits_total)
				{
					foreach($visits_total as $vtk => $vt_value)
					{
						foreach($vt_value as $the_visit)
						{
							$allvisits[$the_visit['ipid']][] = $the_visit;
							$visits_users[] = $the_visit['create_user']; // get the users that visited the patient
							if(!in_array($the_visit['ipid'], $patients_visits))
							{
								$patients_visits[] = $the_visit['ipid']; //get all patients WITH visits;
							}
						}
					}
				}

				if(empty($visits_users))
				{
					$visits_users['9999999999'] = '0000y';
				}
				$patients_visits = $patients_visits;
				if(empty($patients_visits))
				{
					
				}
				foreach($patients_visits as $value)
				{
					$patients_visits_ipids[] = $value;
				}

				/* ------------------------------------  Get Users Details------------------------------------------ */
				$visitbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->whereIn('id', $visits_users);
				$visitbyUsersarr = $visitbyUsersQ->fetchArray();

				foreach($visitbyUsersarr as $uservisit)
				{
					$VisitsbyUsers[$uservisit['id']] = $uservisit['user_title'] . " " . $uservisit['last_name'] . ", " . $uservisit['first_name'];
				}

				/* ----------------------------- Display all data ---------------------------------------- */
				$visit_nr = 0;
				$total_time = 0;
				$treatedcnt = 0;

				foreach($patients_visits_ipids as $patient_ipid)
				{
					$patients_visits_array[$patient_ipid]['epid'] = $global_patient_master[$patient_ipid]['patepid'];
					$patients_visits_array[$patient_ipid]['lastname'] = $global_patient_master[$patient_ipid]['last_name'];
					$patients_visits_array[$patient_ipid]['firstname'] = $global_patient_master[$patient_ipid]['first_name'];
					$patients_visits_array[$patient_ipid]['admissiondate'] = date('d.m.Y', strtotime($global_patient_master[$patient_ipid]['admission_date']));

					if(!empty($global_discharge_date[$patient_ipid]) && $global_discharge_date[$patient_ipid] != "0000-00-00 00:00:00")
					{
						$dis_date = date("d.m.Y", strtotime($global_discharge_date[$patient_ipid]));
					}
					else
					{
						$dis_date = "-";
					}
					$patients_visits_array[$patient_ipid]['dischargedate'] = $dis_date;

					foreach($allvisits[$patient_ipid] as $visit_key => $visit_detail)
					{

						if($visit_detail['visit_date'])
						{ // if koordinato date
							$vizit_date_array = date('d.m.Y', strtotime($visit_detail['visit_date']));
							$vizit_date_arr = explode(".", $vizit_date_array);
							$start_date = mktime($visit_detail['visit_begin_date_h'], $visit_detail['visit_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
							$end_date = mktime($visit_detail['visit_end_date_h'], $visit_detail['visit_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
							$doc_viz_minutes = round(($end_date - $start_date) / 60);
							$dov_vis_date = date('d.m.Y', strtotime($visit_detail['visit_date']));
						}
						else
						{
							$vizit_date_array = date('d.m.Y', strtotime($visit_detail['vizit_date']));
							$vizit_date_arr = explode(".", $vizit_date_array);
							$start_date = mktime($visit_detail['kvno_begin_date_h'], $visit_detail['kvno_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
							$end_date = mktime($visit_detail['kvno_end_date_h'], $visit_detail['kvno_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
							$doc_viz_minutes = round(($end_date - $start_date) / 60);
							$dov_vis_date = date('d.m.Y', strtotime($visit_detail['vizit_date']));
						}

						$patients_visits_array[$patient_ipid]['visit'][$visit_key]['visit_date'] = $dov_vis_date;
						$patients_visits_array[$patient_ipid]['visit'][$visit_key]['visit_by'] = $VisitsbyUsers[$visit_detail['create_user']];
						$patients_visits_array[$patient_ipid]['visit'][$visit_key]['visit_duration'] = $doc_viz_minutes;

						$total_time += $patients_visits_array[$patient_ipid]['visit'][$visit_key]['visit_duration'];
						$visit_nr++;
					}

					$treatedcnt += $treated_days[$patient_ipid]['realActiveDays'];
				}


				$this->view->patients_visits_array = $patients_visits_array;

				$this->view->overall_visits = $visit_nr;
				$this->view->overall_time = $total_time;
				$this->view->overall_treatmentdays = $treatedcnt;
				$this->view->average_visit_per_day = round($visit_nr / $treatedcnt, 2);


				/* ################################################################ */
				/* ################################################################ */
				/* ##################### 10. Vollversorgung   ##################### */
				/* ################################################################ */
				/* ################################################################ */

				/* -------------------------- Get patients that have Vollversorgung  in periode (the Vollversorgung started from Anlage 4 WL)------------------------------------ */

				$voll_add = Doctrine_Query::create()
					->select("p.ipid as theipid, p.date AS date_start, id")
					->addSelect("if((SELECT r.date FROM VollversorgungHistory r WHERE r.date_type = 2 and r.date > p.date and p.ipid=r.ipid order by r.date ASC limit 1) <> '' ,(SELECT z.date FROM VollversorgungHistory z WHERE z.date_type = 2 and z.date > p.date and p.ipid=z.ipid order by z.date ASC limit 1),'" . date('Y-m-d H:i:s') . "') as date_end, if((SELECT x.date FROM VollversorgungHistory x WHERE x.date_type = 2 and x.date > p.date and p.ipid=x.ipid order by x.date ASC limit 1) <> '' , 1, 0) as real_end_date")
					->from("VollversorgungHistory p")
					->whereIn('p.ipid', $active_patients)
					->andWhere('p.date_type = 1')
					->having(str_replace('%', '', $active_cond['interval_sql']))
					->orderBy("theipid asc, date_start, date_end");
				$add_array = $voll_add->fetchArray();


				if(sizeof($add_array) > 0)
				{
					foreach($add_array as $kh => $add_pat)
					{

						$start_date = date('d.m.Y', strtotime($add_pat['date_start']));
						if($add_pat['date_end'] !== null && $add_pat['real_end_date'] != '0')
						{
							$end_date = date('d.m.Y', strtotime($add_pat['date_end']));
						}
						else
						{
							$end_date = '';
						}
						$total_patients[$add_pat['theipid']][$kh]['date_start'] = $start_date;
						$total_patients[$add_pat['theipid']][$kh]['date_end'] = $end_date;
					}
				}

				$voll_del = Doctrine_Query::create()
					->select("p.ipid as theipid, p.date AS date_start, id")
					->addSelect("if((SELECT r.date FROM VollversorgungHistory r WHERE r.date_type = 1 and r.date > p.date and p.ipid=r.ipid order by r.date ASC limit 1) <> '' ,(SELECT z.date FROM VollversorgungHistory z WHERE z.date_type = 1 and z.date > p.date and p.ipid=z.ipid order by z.date ASC limit 1),'" . date('Y-m-d H:i:s') . "') as date_end, if((SELECT x.date FROM VollversorgungHistory x WHERE x.date_type = 2 and x.date > p.date and p.ipid=x.ipid order by x.date ASC limit 1) <> '' , 1, 0) as real_end_date")
					->from("VollversorgungHistory p")
					->whereIn('p.ipid', $active_patients)
					->andWhere('p.date_type = 2')
					->having(str_replace('%', '', $active_cond['readmission_delete_sql']))
					->orderBy("theipid asc, date_start, date_end");
				$del_array = $voll_del->fetchArray();

				if(sizeof($del_array) > 0)
				{
					foreach($del_array as $del_pat)
					{
						$thekey = array_search($del_pat['theipid'], $total_patients);
						if($thekey !== false)
						{
							unset($total_patients[$thekey]);
						}
					}
				}


				foreach($total_patients as $kh => $val)
				{
					$pat_ipids_array[] = $kh;
					$pat_ipids_str .= "'" . $kh . "',";
				}

				if(count($pat_ipids_array) == 0)
				{
					
				}

				$i = 0;

				/* ----------------------- #DISPLAY DATA#----------------------- */

				$overall_voll_days = 0;
				foreach($pat_ipids_array as $key_patient)
				{

					$vollversorgung_patients_array[$key_patient]['epid'] = $global_patient_master[$key_patient]['patepid'];
					$vollversorgung_patients_array[$key_patient]['firstname'] = $global_patient_master[$key_patient]["first_name"];
					$vollversorgung_patients_array[$key_patient]['lastname'] = $global_patient_master[$key_patient]['last_name'];
					$vollversorgung_patients_array[$key_patient]['birthd'] = date("d.m.Y", strtotime($global_patient_master[$key_patient]['birthd']));


					foreach($total_patients[$key_patient] as $sapv_key => $sapv_detail)
					{
						$vollversorgung_patients_array[$key_patient]['sapv'][$sapv_key]['sapv_startdate'] = $sapv_detail['date_start'];
						$vollversorgung_patients_array[$key_patient]['sapv'][$sapv_key]['sapv_enddate'] = $sapv_detail['date_end'];

						if(empty($vollversorgung_patients_array[$key_patient]['sapv'][$sapv_key]['sapv_enddate']))
						{
							$vollversorgung_patients_array[$key_patient]['sapv'][$sapv_key]['sapv_enddate'] = date('d.m.Y');
						}
						$diff_days = $pm->getDaysDiff($vollversorgung_patients_array[$key_patient]['sapv'][$sapv_key]['sapv_startdate'], $vollversorgung_patients_array[$key_patient]['sapv'][$sapv_key]['sapv_enddate']);
						$diff_days = intval($diff_days);
						$vollversorgung_patients_array[$key_patient]['sapv'][$sapv_key]['sapv_days_nr'] = $diff_days;
						$median_voll_days_arr[] = $vollversorgung_patients_array[$key_patient]['sapv'][$sapv_key]['sapv_days_nr'];
						$overall_voll_days +=$vollversorgung_patients_array[$key_patient]['sapv'][$sapv_key]['sapv_days_nr'];
					}
				}

				$median_voll_days = Pms_CommonData::calculate_median($median_voll_days_arr);
				$total_voll_patients = count($vollversorgung_patients_array);
				$total_NO_voll_patients = $total_active_patients - $total_voll_patients;
				$percentage_voll = round(($total_voll_patients / $total_active_patients * 100), 2) . ' %';
				;
				$percentage_NO_voll = round(($total_NO_voll_patients / $total_active_patients * 100), 2) . ' %';
				;

				$average_voll_days = round($overall_voll_days / $total_voll_patients, 2);

				$average_voll_days_total_patients = round($overall_voll_days / $total_active_patients, 2);

				$this->view->vollversorgung_patients_array = $vollversorgung_patients_array;


				$this->view->overall_voll_days = $overall_voll_days;
				$this->view->percentage_voll = $percentage_voll;
				$this->view->average_voll_days = $average_voll_days;
				$this->view->median_voll_days = $median_voll_days;

				$this->view->average_voll_days_total_patients = $average_voll_days_total_patients;

				/* ----------------------- #DISPLAY PIE#----------------------- */


				$no10_pie_title = "Vollversorgung";

				$no10_pie_data = array(
					'1' => array(
						'l' => "Patienten mit Vollversorgung (" . $percentage_voll . "%) ",
						'v' => $total_voll_patients
					),
					'2' => array(
						'l' => "Patienten ohne Vollversorgung (" . $percentage_NO_voll . "%) ",
						'v' => $total_NO_voll_patients
					)
				);


				if(!empty($vollversorgung_patients_array))
				{
					$this->view->no10_pie_image_pdf = Pms_Graph::piechart($no10_pie_data, $no10_pie_title, true);
				}
				/* ################################################################ */
				/* ##################### REPORTS DESCRIPTIONS ##################### */
				/* ################################################################ */

				$this->view->report_no1_description = $this->view->translate('report_no1_description'); // 1. Erst-Aufnahmen
				$this->view->report_no2_description = $this->view->translate('report_no2_description'); // 2. Entlassungen
				$this->view->report_no3_description = $this->view->translate('report_no3_description'); // 3. Sterbeorte
				$this->view->report_no4_description = $this->view->translate('report_no4_description'); // 4. Krankenhauseinweisungen
				$this->view->report_no5_description = $this->view->translate('report_no5_description'); // 5. Privatpatienten
				$this->view->report_no6_description = $this->view->translate('report_no6_description'); // 6. Hauptdiagnosen
				$this->view->report_no7_description = $this->view->translate('report_no7_description'); // 7. Nebendiagnosen
				$this->view->report_no8_description = $this->view->translate('report_no8_description'); // 8. Pflegedienst
				$this->view->report_no9_description = $this->view->translate('report_no9_description'); // 9. Hausbesuche
				$this->view->report_no10_description = $this->view->translate('report_no10_description'); //10. Vollversorgung


				/* ################################################################ */
				/* ################################################################ */
				/* ######################### CACHE stuff ########################## */
				/* ################################################################ */
				/* ################################################################ */

				foreach($vars_cache as $name)
				{
					$cache_view[$name] = $this->view->{"$name"};
				}

				file_put_contents($cache_file, serialize($cache_view));
			}




			/* ################################################################ */
			/* ################################################################ */
			/* ############################## PDF  ############################ */
			/* ################################################################ */
			/* ################################################################ */


			if(strlen($_REQUEST['btnsubmit']) > 0)
			{
				$quarterarr[] = $_POST['report_quarter'];
				$htmlform = Pms_Template::createTemplate($this->view, 'templates/networkstatistics_pdf.html');
				$pdfname = "WL_interne_Netzstatistik";
				$pdf = new Pms_PDF('P', 'mm', 'A4', true, 'UTF-8', false);
				$pdf->setDefaults(true); //defaults with header
				$pdf->setImageScale(1.6);
// 				$pdf->SetFont('arial', '', 8);
				$pdf->SetFont('dejavusans', '', 8);
				$pdf->SetMargins(10, 5, 10); //reset margins
				$html = str_replace('../../images', OLD_RES_FILE_PATH . '/images', $htmlform);

				$pdf->setHTML($html);

				ob_end_clean();
				ob_start();

				$pdf->toBrowser($pdfname . '.pdf', 'D');

				exit;
			}

			/* ################################################################ */
			/* ################################################################ */
			/* ############################## XLS  ############################ */
			/* ################################################################ */
			/* ################################################################ */
			if(!empty($_REQUEST['xlssubmit']))
			{
				$xls = new PHPExcel();

				$sheet1 = $xls->getActiveSheet();


				/* ############################## XLS-1 Erst-Aufnahmen  ############################ */
				$sheet1->setTitle("Erst-Aufnahmen");

				$sheet1->setCellValue('A1', 'Nr')
					->setCellValue('B1', 'Pat. Nr.')
					->setCellValue('C1', 'Nachname')
					->setCellValue('D1', 'Vorname')
					->setCellValue('E1', 'Geburtsdatum')
					->setCellValue('F1', 'Aufnahme')
					->setCellValue('G1', 'Entlassung')
					->setCellValue('H1', 'Privatpatient');

				$i = 2;
				foreach($this->view->admitedpatients as $admitted_patient)
				{
					$sheet1->setCellValue('A' . $i, $i - 1)
						->setCellValue('B' . $i, $admitted_patient['epid'])
						->setCellValue('C' . $i, $admitted_patient['lastname'])
						->setCellValue('D' . $i, $admitted_patient['firstname'])
						->setCellValue('E' . $i, $admitted_patient['birthd'])
						->setCellValue('F' . $i, $admitted_patient['admissiondate'][0])
						->setCellValue('G' . $i, $admitted_patient['dischargedate'][0])
						->setCellValue('H' . $i, $admitted_patient['private_patient']);
					$i++;
				}


				/* ############################## XLS-2  Entlassungen  ############################ */
				$sheet2 = $xls->createSheet();
				$sheet2->setTitle("Entlassungen");
				$sheet2->setCellValue('A1', 'Nr')
					->setCellValue('B1', 'Entlassungsart')
					->setCellValue('C1', 'Anzahl')
					->setCellValue('D1', 'Prozent')
					->setCellValue('E1', 'Pat. Nr.');

				$i = 2;
				foreach($this->view->discharge_methode_array as $dis_method)
				{
					$sheet2->setCellValue('A' . $i, $i - 1)
						->setCellValue('B' . $i, $dis_method['discharge_methode'])
						->setCellValue('C' . $i, $dis_method['count'])
						->setCellValue('D' . $i, $dis_method['percentage'])
						->setCellValue('E' . $i, $dis_method['epids']);
					$i++;
				}




				/* ############################## XLS-3  Sterbeorte  ############################ */
				$sheet3 = $xls->createSheet();
				$sheet3->setTitle("Sterbeorte");
				$sheet3->setCellValue('A1', 'Nr')
					->setCellValue('B1', 'Entlassungsort')
					->setCellValue('C1', 'Anzahl')
					->setCellValue('D1', 'Prozent')
					->setCellValue('E1', 'Pat. Nr.');

				$i = 2;
				foreach($this->view->dischargeLocationSortedArr as $dis_loc)
				{
					$sheet3->setCellValue('A' . $i, $i - 1)
						->setCellValue('B' . $i, $dis_loc['dischargelocation'])
						->setCellValue('C' . $i, $dis_loc['count'])
						->setCellValue('D' . $i, $dis_loc['percentage'])
						->setCellValue('E' . $i, $dis_loc['epids']);
					$i++;
				}


				/* ############################## XLS-4  Krankenhauseinweisungen  ############################ */
				$sheet4 = $xls->createSheet();
				$sheet4->setTitle("Krankenhauseinweisungen");

				$sheet4->setCellValue('A1', 'Nr')
					->setCellValue('B1', 'Pat. Nr.')
					->setCellValue('C1', 'Nachname')
					->setCellValue('D1', 'Vorname')
					->setCellValue('E1', 'Behandlungsdauer')
					->setCellValue('F1', 'Anzahl KH Einweisungen')
					->setCellValue('G1', 'KH Tage')
					->setCellValue('H1', 'Zeitraum')
					->setCellValue('I1', 'Grund der Aufnahme')
					->setCellValue('J1', 'Einweisender Arzt')
					->setCellValue('K1', 'Transportmittel')
					->setCellValue('L1', 'Sterbeort');


				$i = 2;
				$kh = 2;

				foreach($this->view->hospital_stats_array as $details)
				{
					foreach($details['locationstatsarr'] as $location_key => $location_row)
					{
						if($location_key == min(array_keys($details['locationstatsarr'])))
						{
							$sheet4->setCellValue('A' . $i, $kh - 1)
								->setCellValue('B' . $i, $details['epid'])
								->setCellValue('C' . $i, $details['lastname'])
								->setCellValue('D' . $i, $details['firstname'])
								->setCellValue('E' . $i, $details['treateddays'])
								->setCellValue('F' . $i, $details['admissionsinhopital'])
								->setCellValue('G' . $i, $location_row['khtage'])
								->setCellValue('H' . $i, $location_row['locationstats'])
								->setCellValue('I' . $i, $location_row['reason'])
								->setCellValue('J' . $i, $location_row['hospdoc'])
								->setCellValue('K' . $i, $location_row['transport'])
								->setCellValue('L' . $i, $details['dielocation']);
						}
						else
						{
							$sheet4->setCellValue('A' . $i, ' ')
								->setCellValue('B' . $i, ' ')
								->setCellValue('C' . $i, ' ')
								->setCellValue('D' . $i, ' ')
								->setCellValue('E' . $i, ' ')
								->setCellValue('F' . $i, ' ')
								->setCellValue('G' . $i, $location_row['khtage'])
								->setCellValue('H' . $i, $location_row['locationstats'])
								->setCellValue('I' . $i, $location_row['reason'])
								->setCellValue('J' . $i, $location_row['hospdoc'])
								->setCellValue('K' . $i, $location_row['transport'])
								->setCellValue('L' . $i, ' ');
						}
						$i++;
					}
					$kh++;
				}

				/* ############################## XLS-5  Privatpatienten  ############################ */
				$sheet5 = $xls->createSheet();
				$sheet5->setTitle("Privatpatienten");
				$sheet5->setCellValue('A1', 'Nr')
					->setCellValue('B1', 'Pat. Nr.')
					->setCellValue('C1', 'Nachname')
					->setCellValue('D1', 'Vorname')
					->setCellValue('E1', 'Aufnahmedatum')
					->setCellValue('F1', 'Entlassung')
					->setCellValue('G1', 'Behandlungsdauer');

				$i = 2;
				foreach($this->view->private_patients_array as $pvpatient)
				{
					$sheet5->setCellValue('A' . $i, $i - 1)
						->setCellValue('B' . $i, $pvpatient['epid'])
						->setCellValue('C' . $i, $pvpatient['lastname'])
						->setCellValue('D' . $i, $pvpatient['firstname'])
						->setCellValue('E' . $i, $pvpatient['admissiondate'])
						->setCellValue('F' . $i, $pvpatient['dischargedate'])
						->setCellValue('G' . $i, $pvpatient['treateddays']);
					$i++;
				}

				$a = $i;
				$sheet5->setCellValue('A' . $a, '')
					->setCellValue('B' . $a, 'Gesamt')
					->setCellValue('C' . $a, '')
					->setCellValue('D' . $a, '')
					->setCellValue('E' . $a, '')
					->setCellValue('F' . $a, $this->view->total_pv_patients);

				$b = $i + 1;
				$sheet5->setCellValue('A' . $b, '')
					->setCellValue('B' . $b, 'Anteil der Privatpatienten an der Gesamtpatientenzahl')
					->setCellValue('C' . $b, '')
					->setCellValue('D' . $b, '')
					->setCellValue('E' . $b, '')
					->setCellValue('F' . $b, $this->view->percentage_pv_patients);


				/* ############################## XLS-6  Hauptdiagnosen  ############################ */
				$sheet6 = $xls->createSheet();
				$sheet6->setTitle("Hauptdiagnosen");
				$sheet6->setCellValue('A1', 'Nr')
					->setCellValue('B1', 'Primär Code')
					->setCellValue('C1', 'Beschreibung')
					->setCellValue('D1', 'Anzahl')
					->setCellValue('E1', 'Pat. Nr.')
					->setCellValue('F1', 'Durchschnittlicher Behandlungszeitraum bei Patienten mit dieser ICD');

				$i = 2;
				foreach($this->view->maindiagnosis_array as $main_diagno)
				{
					$sheet6->setCellValue('A' . $i, $i - 1)
						->setCellValue('B' . $i, $main_diagno['icdprimary'])
						->setCellValue('C' . $i, html_entity_decode(strip_tags($main_diagno['description']), ENT_QUOTES, "utf-8"))
						->setCellValue('D' . $i, $main_diagno['count'])
						->setCellValue('E' . $i, $main_diagno['epids'])
						->setCellValue('F' . $i, $main_diagno['treatment_avg']);
					$i++;
				}


				/* ############################## XLS-7  Nebendiagnosen  ############################ */
				$sheet7 = $xls->createSheet();
				$sheet7->setTitle("Nebendiagnosen");
				$sheet7->setCellValue('A1', 'Nr')
					->setCellValue('B1', 'Primär Code')
					->setCellValue('C1', 'Beschreibung')
					->setCellValue('D1', 'Anzahl')
					->setCellValue('E1', 'Pat. Nr.');

				$i = 2;
				foreach($this->view->sidediagnosis_array as $side_diagno)
				{
					$sheet7->setCellValue('A' . $i, $i - 1)
						->setCellValue('B' . $i, $side_diagno['icdprimary'])
						->setCellValue('C' . $i, html_entity_decode(strip_tags($side_diagno['description']), ENT_QUOTES, "utf-8"))
						->setCellValue('D' . $i, $side_diagno['count'])
						->setCellValue('E' . $i, $side_diagno['epids']);
					$i++;
				}

				/* ############################## XLS-8  Pflegedienst  ############################ */
				$sheet8 = $xls->createSheet();
				$sheet8->setTitle("Pflegedienst");
				$sheet8->setCellValue('A1', 'Nr')
					->setCellValue('B1', 'Pat. Nr.')
					->setCellValue('C1', 'Nachname')
					->setCellValue('D1', 'Vorname')
					->setCellValue('E1', 'Aufnahmedatum')
					->setCellValue('F1', 'Entlassungsdatum')
					->setCellValue('G1', 'Pflegedienst')
					->setCellValue('H1', 'Palliativpflegedienst');

				$i = 2;
				foreach($this->view->patients_pfleged_array as $pat_pflegedienst)
				{
					$sheet8->setCellValue('A' . $i, $i - 1)
						->setCellValue('B' . $i, $pat_pflegedienst['epid'])
						->setCellValue('C' . $i, $pat_pflegedienst['lastname'])
						->setCellValue('D' . $i, $pat_pflegedienst['firstname'])
						->setCellValue('E' . $i, $pat_pflegedienst['admissiondate'])
						->setCellValue('F' . $i, $pat_pflegedienst['dischargedate'])
						->setCellValue('G' . $i, $pat_pflegedienst['pflegedienst'])
						->setCellValue('H' . $i, $pat_pflegedienst['pal_pflegedienst']);
					$i++;
				}


				$a = $i;
				$sheet8->setCellValue('A' . $a, '')
					->setCellValue('B' . $a, 'Pflegedienst')
					->setCellValue('C' . $a, '')
					->setCellValue('D' . $a, '')
					->setCellValue('E' . $a, '')
					->setCellValue('F' . $a, '')
					->setCellValue('G' . $a, $this->view->patients_pflegedienst)
					->setCellValue('H' . $a, $this->view->patients_pfle_percentage);

				$b = $i + 1;
				$sheet8->setCellValue('A' . $b, '')
					->setCellValue('B' . $b, 'Palliativpflegedienst')
					->setCellValue('C' . $b, '')
					->setCellValue('D' . $b, '')
					->setCellValue('E' . $b, '')
					->setCellValue('F' . $b, '')
					->setCellValue('G' . $b, $this->view->patients_paliativepfle)
					->setCellValue('H' . $b, $this->view->patients_pal_percentage);

				$c = $i + 2;
				$sheet8->setCellValue('A' . $c, '')
					->setCellValue('B' . $c, 'Pflegedienst und Palliativpflegedienst')
					->setCellValue('C' . $c, '')
					->setCellValue('D' . $c, '')
					->setCellValue('E' . $c, '')
					->setCellValue('F' . $c, '')
					->setCellValue('G' . $c, $this->view->patients_pflegedienst_paliativepfle)
					->setCellValue('H' . $c, $this->view->patients_pfle_and_pal_percentage);

				$d = $i + 3;
				$sheet8->setCellValue('A' . $d, '')
					->setCellValue('B' . $d, 'kein Pflegedienst')
					->setCellValue('C' . $d, '')
					->setCellValue('D' . $d, '')
					->setCellValue('E' . $d, '')
					->setCellValue('F' . $d, '')
					->setCellValue('G' . $d, $this->view->patients_no_pflegedienst_no_paliativepfle)
					->setCellValue('H' . $d, $this->view->patients_no_pfle_no_pal_percentage);


				/* ############################## XLS-9  Hausbesuche  ############################ */
				$sheet9 = $xls->createSheet();
				$sheet9->setTitle("Hausbesuche");
				$sheet9->setCellValue('A1', 'Nr')
					->setCellValue('B1', 'Pat. Nr.')
					->setCellValue('C1', 'Nachname')
					->setCellValue('D1', 'Vorname')
					->setCellValue('E1', 'Aufnahmedatum')
					->setCellValue('F1', 'Entlassungsdatum')
					->setCellValue('G1', 'Datum des Besuchs')
					->setCellValue('H1', 'Besuch durch')
					->setCellValue('I1', 'Dauer des Besuchs');

				$i = 2;
				$vis = 2;
				foreach($this->view->patients_visits_array as $vdetails)
				{
					foreach($vdetails['visit'] as $visit_key => $visit_row)
					{
						if($visit_key == min(array_keys($vdetails['visit'])))
						{
							$sheet9->setCellValue('A' . $i, $vis - 1)
								->setCellValue('B' . $i, $vdetails['epid'])
								->setCellValue('C' . $i, $vdetails['lastname'])
								->setCellValue('D' . $i, $vdetails['firstname'])
								->setCellValue('E' . $i, $vdetails['admissiondate'])
								->setCellValue('F' . $i, $vdetails['dischargedate'])
								->setCellValue('G' . $i, $visit_row['visit_date'])
								->setCellValue('H' . $i, $visit_row['visit_by'])
								->setCellValue('I' . $i, $visit_row['visit_duration']);
						}
						else
						{
							$sheet9->setCellValue('A' . $i, ' ')
								->setCellValue('B' . $i, ' ')
								->setCellValue('C' . $i, ' ')
								->setCellValue('D' . $i, ' ')
								->setCellValue('E' . $i, ' ')
								->setCellValue('F' . $i, ' ')
								->setCellValue('G' . $i, $visit_row['visit_date'])
								->setCellValue('H' . $i, $visit_row['visit_by'])
								->setCellValue('I' . $i, $visit_row['visit_duration']);
						}
						$i++;
					}
					$vis++;
				}

				$a = $i;
				$sheet9->setCellValue('A' . $a, '')
					->setCellValue('B' . $a, 'Durchschnittliche Besuche pro Tag')
					->setCellValue('C' . $a, '')
					->setCellValue('D' . $a, '')
					->setCellValue('E' . $a, '')
					->setCellValue('F' . $a, '')
					->setCellValue('G' . $a, $this->view->average_visit_per_day);

				$b = $i + 1;
				$sheet9->setCellValue('A' . $b, '')
					->setCellValue('B' . $b, 'Gesamtsumme Besuche')
					->setCellValue('C' . $b, '')
					->setCellValue('D' . $b, '')
					->setCellValue('E' . $b, '')
					->setCellValue('F' . $b, '')
					->setCellValue('G' . $b, $this->view->overall_visits);

				$c = $i + 2;
				$sheet9->setCellValue('A' . $c, '')
					->setCellValue('B' . $c, 'Zeit Besuche gesamt')
					->setCellValue('C' . $c, '')
					->setCellValue('D' . $c, '')
					->setCellValue('E' . $c, '')
					->setCellValue('F' . $c, '')
					->setCellValue('G' . $c, '')
					->setCellValue('H' . $c, '')
					->setCellValue('I' . $c, $this->view->overall_time);

				/* ############################## XLS-10  Vollversorgung  ############################ */
				$sheet10 = $xls->createSheet();
				$sheet10->setTitle("Vollversorgung");
				$sheet10->setCellValue('A1', 'Nr')
					->setCellValue('B1', 'Pat. Nr.')
					->setCellValue('C1', 'Nachname')
					->setCellValue('D1', 'Vorname')
					->setCellValue('E1', 'Geburtsdatum')
					->setCellValue('F1', 'Vollversorgung Tage')
					->setCellValue('G1', 'Start Vollversorgung')
					->setCellValue('H1', 'Ende Vollversorgung');

				$i = 2;
				$vl = 2;
				foreach($this->view->vollversorgung_patients_array as $voll_details)
				{
					foreach($voll_details['sapv'] as $voll_key => $voll_row)
					{
						if($voll_key == min(array_keys($voll_details['sapv'])))
						{
							$sheet10->setCellValue('A' . $i, $vl - 1)
								->setCellValue('B' . $i, $voll_details['epid'])
								->setCellValue('C' . $i, $voll_details['lastname'])
								->setCellValue('D' . $i, $voll_details['firstname'])
								->setCellValue('E' . $i, $voll_details['birthd'])
								->setCellValue('F' . $i, $voll_row['sapv_days_nr'])
								->setCellValue('G' . $i, $voll_row['sapv_startdate'])
								->setCellValue('H' . $i, $voll_row['sapv_enddate']);
						}
						else
						{
							$sheet10->setCellValue('A' . $i, ' ')
								->setCellValue('B' . $i, ' ')
								->setCellValue('C' . $i, ' ')
								->setCellValue('D' . $i, ' ')
								->setCellValue('E' . $i, ' ')
								->setCellValue('F' . $i, $voll_row['sapv_days_nr'])
								->setCellValue('G' . $i, $voll_row['sapv_startdate'])
								->setCellValue('H' . $i, $voll_row['sapv_enddate']);
						}
						$i++;
					}
					$vl++;
				}


				$a = $i;
				$sheet10->setCellValue('A' . $a, '')
					->setCellValue('B' . $a, 'Tage gesamt Vollversorgung')
					->setCellValue('C' . $a, '')
					->setCellValue('D' . $a, '')
					->setCellValue('E' . $a, '')
					->setCellValue('F' . $a, $this->view->overall_voll_days);

				$b = $i + 1;
				$sheet10->setCellValue('A' . $b, '')
					->setCellValue('B' . $b, 'Gesamtzahl Patienten aktiv in Berichtszeitraum')
					->setCellValue('C' . $b, '')
					->setCellValue('D' . $b, '')
					->setCellValue('E' . $b, '')
					->setCellValue('F' . $b, '')
					->setCellValue('F' . $b, $this->view->total_active_patients);

				$c = $i + 2;
				$sheet10->setCellValue('A' . $c, '')
					->setCellValue('B' . $c, 'Anzahl der Patienten mit Vollversorgung')
					->setCellValue('C' . $c, '')
					->setCellValue('D' . $c, '')
					->setCellValue('E' . $c, '')
					->setCellValue('F' . $c, $this->view->percentage_voll);


				$d = $i + 3;
				$sheet10->setCellValue('A' . $d, '')
					->setCellValue('B' . $d, 'Durchschnittliche Vollversorgungszeit(nur Vollversorgungspatienten)')
					->setCellValue('C' . $d, '')
					->setCellValue('D' . $d, '')
					->setCellValue('E' . $d, '')
					->setCellValue('F' . $d, $this->view->average_voll_days);


				$e = $i + 4;
				$sheet10->setCellValue('A' . $e, '')
					->setCellValue('B' . $e, 'Durchschnitt Vollversorgungszeit (Gesamtheit der Patienten)')
					->setCellValue('C' . $e, '')
					->setCellValue('D' . $e, '')
					->setCellValue('E' . $e, '')
					->setCellValue('F' . $e, $this->view->average_voll_days_total_patients);


				$f = $i + 5;
				$sheet10->setCellValue('A' . $f, '')
					->setCellValue('B' . $f, 'Median Vollversorgung')
					->setCellValue('C' . $f, '')
					->setCellValue('D' . $f, '')
					->setCellValue('E' . $f, '')
					->setCellValue('F' . $f, $this->view->median_voll_days);




				$xls->setActiveSheetIndex(0);
				header("Content-Type: application/vnd.ms-excel");
				header("Content-Disposition: attachment; filename=\"WL_interne_Netzstatistik.xls\"");
				header("Cache-Control: max-age=0");

				$objWriter = PHPExcel_IOFactory::createWriter($xls, "Excel5");
				$objWriter->save("php://output");
				exit;
			}
		}

		public function users_visit($params)
		{
			// report_id = 87
			// report_name = Abrechnung Leverkusen
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			if(empty($params['custom']['ipid']))
			{
				//			1. get active patients ipids
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
				if(count($ipidarr) == '0')
				{
					$ipidarr[] = '9999999';
				}
				$ipidarr = array_values(array_unique($ipidarr));
			}
			else
			{
				$ipidarr = array($params['custom']['ipid']);
			}
			//		2. patqpamap => userids
			$assigned_users[] = '999999999999';
			$qpa_mapping = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete = 0')
				->andWhere('clientid = "' . $clientid . '"');
			if($_POST['doctorname'] > '0')
			{
				$userid = trim($_POST['doctorname']);
				$qpa_mapping->andWhere('id="' . $userid . '"');
			}
			$qpa_map_arr = $qpa_mapping->fetchArray();


			foreach($qpa_map_arr as $k_qpa => $v_qpa)
			{
				$assigned_users[] = $v_qpa['id'];
			}
			//		3. get client users details => this becomes a query for user details only
			$userlist = Doctrine_Query::create()
				->select('*')
				->from('User')
				->whereIn('id', $assigned_users)
				->andWhere('isdelete=0');
			$client_users = $userlist->fetcharray();

			foreach($client_users as $k_client_user => $v_client_user)
			{
				$client_users_details[$v_client_user['id']] = $v_client_user;
			}

			//		4. get deleted visits
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhereIn('ipid', $ipidarr);

			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			if($_REQUEST['dbg'] == '1')
			{

				print_r("deleted visits");
				print_r($del_visits);
				print_r("\n");
			}
			//		4.1 get kvno doctor visits -- Nordhein doctor visits
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("id, ipid, kvno_begin_date_h, kvno_begin_date_m, vizit_date as visit_date, quality, create_date, create_user")
				->from("KvnoDoctor")
				->whereIn('ipid', $ipidarr)
				->andWhereIn('create_user', $assigned_users)
				->andWhereNotIn('id', $del_visits['kvno_doctor_form'])
				->andWhere(str_replace('%date%', 'vizit_date', $active_cond['date_sql']));
			$kvno_doc_visits = $kvno_doctor_visits->fetchArray();

			if($_REQUEST['dbg'] == '1')
			{

				print_r("doctor visits");
				print_r($kvno_doc_visits);
				print_r("\n");
			}
			//		4.2 get kvno nurse visits -- Nordhein user visits
			$knurse_visits = Doctrine_Query::create()
				->select("id, ipid, kvno_begin_date_h, kvno_begin_date_m, vizit_date as visit_date, quality, create_date, create_user")
				->from("KvnoNurse")
				->whereIn('ipid', $ipidarr)
				->andWhereIn('create_user', $assigned_users)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere(str_replace('%date%', 'vizit_date', $active_cond['date_sql']));
			$kvno_nurse_visits = $knurse_visits->fetchArray();
			if($_REQUEST['dbg'] == '1')
			{

				print_r("nurse visits");
				print_r($kvno_nurse_visits);
				print_r("\n");
			}
			//		4.3 get kvno coordinator visits -- Nordhein user visits LE: 13.11.2012 ancuta warn
			$coord_visits = Doctrine_Query::create()
				->select("id, ipid, visit_begin_date_h as kvno_begin_date_h, visit_begin_date_m as kvno_begin_date_m, visit_date, quality, create_date, create_user")
				->from("VisitKoordination")
				->whereIn('ipid', $ipidarr)
				->andWhereIn('create_user', $assigned_users)
				->andWhereNotIn('id', $del_visits['visit_koordination_form'])
				->andWhere(str_replace('%date%', 'visit_date', $active_cond['date_sql']));

			$c_visits = $coord_visits->fetchArray();
			foreach($c_visits as $k_coord_visits => $v_coord_visits)
			{
				$coordinator_visits[$k_coord_visits] = $v_coord_visits;
				$coordinator_visits[$k_coord_visits]['tabname'] = 'koord_visits';
			}
			if($_REQUEST['dbg'] == '1')
			{

				print_r("coordinator visits");
				var_dump($coordinator_visits);
				print_r("\n");
			}
			$global_visits = array();

			if(!$coordinator_visits)
			{
				$global_visits = array_merge($global_visits, $kvno_doc_visits, $kvno_nurse_visits);
			}
			else
			{
				$global_visits = array_merge($global_visits, $kvno_doc_visits, $kvno_nurse_visits, $coordinator_visits);
			}

			$patient_ipids[] = '99999999999999999';
			$visit_incr = '0';
			foreach($global_visits as $k_visit => $v_visit)
			{
// 				$available_visits[$v_visit['create_user']][$visit_incr]['visit_date'] = date('d.m.Y', strtotime($v_visit['visit_date'])) . ' ' . str_pad($v_visit['kvno_begin_date_h'], 2, 0, STR_PAD_LEFT) . ':' . str_pad($v_visit['kvno_begin_date_m'], 2, 0, STR_PAD_LEFT);
				$available_visits[$v_visit['create_user']][$visit_incr] = $v_visit;

				$patient_ipids[] = $v_visit['ipid'];
				$available_users['visits'][] = $v_visit['create_user'];
				$visit_incr++;
			}

			//		5.1 get beratung (verlauf)
			$beratung = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong!=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("U")) . '"')
				->andWhereIn('ipid', $ipidarr)
				->andWhere('source_ipid = ""')
				->andWhereIn('create_user', $assigned_users)
				->andWhere(str_replace('%date%', 'create_date', $active_cond['date_sql']))
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$beratung_array = $beratung->fetchArray();

			foreach($beratung_array as $k_beratung => $v_beratung)
			{
				$patient_ipids[] = $v_beratung['ipid'];
				$available_users['beratrung'][] = $v_beratung['create_user'];
				$global_beratung[$v_beratung['create_user']][] = $v_beratung;
			}

			//		5.2 get koordination (verlauf)
			$koord = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong!=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("V")) . '"')
				->andWhereIn('ipid', $ipidarr)
				->andWhere('source_ipid = ""')
				->andWhereIn('create_user', $assigned_users)
				->andWhere(str_replace('%date%', 'create_date', $active_cond['date_sql']))
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$koord_array = $koord->fetchArray();

			foreach($koord_array as $k_koord => $v_koord)
			{
				$patient_ipids[] = $v_koord['ipid'];
				$available_users['koordination'][] = $v_koord['create_user'];
				$global_koord[$v_koord['create_user']][] = $v_koord;
			}

			//		5.3 get telefonat (xt verlauf)
			$tel = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong!=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("XT")) . '"')
				->andWhereIn('ipid', $ipidarr)
				->andWhereIn('create_user', $assigned_users)
				->andWhere(str_replace('%date%', 'create_date', $active_cond['date_sql']))
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$tel_array = $tel->fetchArray();

			foreach($tel_array as $k_tel => $v_tel)
			{
				$patient_ipids[] = $v_tel['ipid'];
				$available_users['telefon'][] = $v_tel['create_user'];
				$global_tel[$v_tel['create_user']][] = $v_tel;
			}

			//		6. get patient details
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdelete = 0')
				->andWhereIn('ipid', $patient_ipids);

			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere(' e.ipid = p.ipid and e.clientid = ' . $clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $k_pat_details => $v_pat_details)
			{
				$pat_details[$v_pat_details['ipid']] = $v_pat_details;
			}
			
			$all_users = array();
			foreach($available_users as  $uaction => $userslist) {
				foreach($userslist as $k=>$uid){
					if(!in_array($uid,$all_users )){
						$all_users[] = $uid; 
					}
				}
			}
		 
			$available_users = array_values(array_unique($all_users));
			
			$visit_inc = '0';
			foreach($available_users as $kk_user => $vv_user)
			{
				$sums[$client_users_details[$vv_user]['username']]['visit'][1] = '0';
				$sums[$client_users_details[$vv_user]['username']]['visit'][2] = '0';
				$sums[$client_users_details[$vv_user]['username']]['visit'][3] = '0';
				foreach($available_visits[$vv_user] as $k_row_visit => $v_row_visit)
				{
					$user_rows[$vv_user][$visit_inc] = $v_row_visit;

					$visit_type = '';
					if($_REQUEST['dbg'])
					{
						if(!empty($v_row_visit['tabname']))
						{
							$visit_type = ' - ' . $v_row_visit['tabname'];
						}
					}

					$user_rows[$vv_user][$visit_inc]['action'] = 'visit_action';
					$user_rows[$vv_user][$visit_inc]['epid'] = $pat_details[$v_row_visit['ipid']]['last_name'] . ', ' . $pat_details[$v_row_visit['ipid']]['first_name'] . ' (' . strtoupper($pat_details[$v_row_visit['ipid']]['EpidIpidMapping']['epid']) . ' )';
					$user_rows[$vv_user][$visit_inc]['row_date'] = date('d.m.Y H:i', strtotime($v_row_visit['visit_date'])) . $visit_type;

					$visit_inc++;
					if($v_row_visit['quality'] == '0')
					{
						$sums[$client_users_details[$vv_user]['username']]['visit'][2] ++;
					}
					else
					{
						$sums[$client_users_details[$vv_user]['username']]['visit'][$v_row_visit['quality']] ++;
					}
				}

				$sums[$client_users_details[$vv_user]['username']]['beratung'] = '0';
				foreach($global_beratung[$vv_user] as $k_row_beratung => $v_row_beratung)
				{

					$user_rows[$vv_user][$visit_inc] = $v_row_beratung;
					$user_rows[$vv_user][$visit_inc]['action'] = 'beratung_action';
					$user_rows[$vv_user][$visit_inc]['epid'] = $pat_details[$v_row_beratung['ipid']]['last_name'] . ', ' . $pat_details[$v_row_beratung['ipid']]['first_name'] . ' (' . strtoupper($pat_details[$v_row_beratung['ipid']]['EpidIpidMapping']['epid']) . ' )';
					$user_rows[$vv_user][$visit_inc]['row_date'] = date('d.m.Y H:i', strtotime($v_row_beratung['course_date']));
					$sums[$client_users_details[$vv_user]['username']]['beratung'] ++;
					$visit_inc++;
				}

				$sums[$client_users_details[$vv_user]['username']]['koord'] = '0';
				foreach($global_koord[$vv_user] as $k_row_koord => $v_row_koord)
				{

					$user_rows[$vv_user][$visit_inc] = $v_row_koord;
					$user_rows[$vv_user][$visit_inc]['action'] = 'koord_action';
					$user_rows[$vv_user][$visit_inc]['epid'] = $pat_details[$v_row_koord['ipid']]['last_name'] . ', ' . $pat_details[$v_row_koord['ipid']]['first_name'] . ' (' . strtoupper($pat_details[$v_row_koord['ipid']]['EpidIpidMapping']['epid']) . ' )';
					$user_rows[$vv_user][$visit_inc]['row_date'] = date('d.m.Y H:i', strtotime($v_row_koord['course_date']));
					$sums[$client_users_details[$vv_user]['username']]['koord'] ++;
					$visit_inc++;
				}

				$sums[$client_users_details[$vv_user]['username']]['tel'] = '0';
				foreach($global_tel[$vv_user] as $k_row_tel => $v_row_tel)
				{
					$course_arr = explode("|", $v_row_tel['course_title']);
					$user_rows[$vv_user][$visit_inc] = $v_row_tel;
					$user_rows[$vv_user][$visit_inc]['action'] = 'tel_action';
					$user_rows[$vv_user][$visit_inc]['epid'] = $pat_details[$v_row_tel['ipid']]['last_name'] . ', ' . $pat_details[$v_row_tel['ipid']]['first_name'] . ' (' . strtoupper($pat_details[$v_row_tel['ipid']]['EpidIpidMapping']['epid']) . ' )';
					$user_rows[$vv_user][$visit_inc]['row_date'] = date('d.m.Y H:i', strtotime($v_row_tel['course_date']));
					$sums[$client_users_details[$vv_user]['username']]['tel'] ++;
					$visit_inc++;
				}
				$visit_inc = '0';
			}

			foreach($available_users as $k_user => $v_user)
			{
				$master_data['data'][$v_user]['username'] = $client_users_details[$v_user]['username'];
				$master_data['data'][$v_user]['rows'] = $user_rows[$v_user];
				$master_data['extra'] = $sums;
			}

			return $master_data;
		}

		public function networkstatisticsajaxAction()
		{
			$this->_helper->layout->setLayout('layout_networkstatistics');
			if(!empty($_REQUEST['btnsubmit']))
			{
				$this->view->pdf = true;
				$this->view->excel = false;
			}
			elseif(!empty($_REQUEST['xlssubmit']))
			{
				$this->view->pdf = false;
				$this->view->excel = true;//print_e;
			}
			else
			{
				$this->view->pdf = false;
				$this->view->excel = false;
			}
			$this->view->iframe_src = APP_BASE . '/reportsnew/networkstatistics?refresh_cache=' . $_REQUEST['refresh_cache'] . '&year[]=' . $_REQUEST['year'][0] . '&quarter[]=' . $_REQUEST['quarter'][0] . '&xlssubmit=' . $_REQUEST['xlssubmit'] . '&btnsubmit=' . $_REQUEST['btnsubmit'];
		}

		public function anlage10test($params)
		{
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$report_period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			$this->anlage10patients($active, $report_period);
		}

		private function anlage10patients($ipids, $report_periods)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$pm = new PatientMaster();

			foreach($report_periods ['start'] as $k_s_period => $v_s_period)
			{
				if(count($final_report_period_days[0]) == 0)
				{
					$final_report_period_days[0] = array();
				}
				$final_report_period_days[0] = array_merge($final_report_period_days[0], $pm->getDaysInBetween(date("Y-m-d", strtotime($v_s_period)), date("Y-m-d", strtotime($report_periods ['end'] [$k_s_period])), false));
			}

			$final_report_period_days = array_values(array_unique($final_report_period_days));

			$period_data['start_period'] = $final_report_period_days[0][0]; // first day
			$period_data['end_period'] = end($final_report_period_days[0]); // last day
			$period_data['start_period_ts'] = strtotime($period_data['start_period']);
			$period_data['end_period_ts'] = strtotime($period_data['end_period']);
			$period_data['report_periods'] = $report_periods;

			$general_data['period'] = $period_data;

			$patients_hospitals = $this->get_period_hospitals($ipids, $clientid, $period_data);
			$patients_sapvs = $this->get_period_sapv($ipids, $period_data, $patients_hospitals, $final_report_period_days[0]);
			$patients_visits = $this->get_period_visits($ipids, $clientid, $period_data, $final_report_period_days[0]);
			exit;
		}

		private function get_period_hospitals($ipids, $clientid, $current_period)
		{
			$patientmaster = new PatientMaster();

			$disallowed_location_types = array('1', '2'); //hospital and hospiz
			$hospitalids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhereIn('location_type', $disallowed_location_types);
			$hosparray = $hospitalids->fetchArray();
			$hospital_ids[] = '999999999';
			foreach($hosparray as $hospital)
			{
				$hospital_ids[] = $hospital['id'];
			}

			//	get patient hospital locations if it has
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipids)
				->andWhere('isdelete="0"')
				->andWhereIn('location_id', $hospital_ids)
				->orderBy('valid_from,id ASC');
			$pat_locations = $patloc->fetchArray();

			$hospital_days = array();
			$hosp_days = array();

			foreach($pat_locations as $k_pat_loc => $v_pat_loc)
			{
				if(empty($hospital_days[$v_pat_loc['ipid']]))
				{
					$hospital_days[$v_pat_loc['ipid']] = array();
				}

				if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
				{
					$till = date('Y-m-d', strtotime('+1 day'));
				}
				else
				{
					$till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));
				}

				$r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
				$r1end = strtotime();
				$r2start = strtotime($current_period['start_period']);
				$r2end = strtotime($current_period['end_period']);

				if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
				{
					$period_hosp_locations[] = $v_pat_loc;
					$location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

					$hosp = $patientmaster->getDaysInBetween($location_start, $till);
					$hospital_days[$v_pat_loc['ipid']] = array_merge($hospital_days[$v_pat_loc['ipid']], $hosp);
				}

				//			find hosp heads
				$end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
				$end_hospital_period_formatted = date('Y-m-d', strtotime($till));
				$next_start_hosp = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc + 1)]['valid_from'])));

				//remove end head
				if($end_hospital_period != $next_start_hosp)
				{
					$find = array_search($end_hospital_period_formatted, $hospital_days[$v_pat_loc['ipid']]);
					$removed_days['e'][] = $hospital_days[$v_pat_loc['ipid']][$find];
					unset($hospital_days[$v_pat_loc['ipid']][$find]);
				}

				//remove start head
				if(!empty($pat_locations[($k_pat_loc - 1)]['valid_till']))
				{
					$find_s = '';
					$previous_till = strtotime(date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till'])));
					$previous_till_formatted = date('Y-m-d', strtotime($pat_locations[($k_pat_loc - 1)]['valid_till']));
					$start_hospital_period = $r1start;
					$start_hospital_formatted = date('Y-m-d', $r1start);

					if($start_hospital_period != $previous_till)
					{
						$find_s = array_search($start_hospital_formatted, $hospital_days[$v_pat_loc['ipid']]);
						$removed_days['s'][] = $hospital_days[$v_pat_loc['ipid']][$find_s];
						unset($hospital_days[$v_pat_loc['ipid']][$find_s]);
					}
				}
				else
				{
					$find_s = '';
					$start_hospital_formatted = date('Y-m-d', $r1start);
					$find_s = array_search($start_hospital_formatted, $hospital_days[$v_pat_loc['ipid']]);
					$removed_days['s2'][] = $hospital_days[$v_pat_loc['ipid']][$find_s];
					unset($hospital_days[$v_pat_loc['ipid']][$find_s]);
				}

				$full_hospital_days[$v_pat_loc['ipid']] = array_values(array_unique($hospital_days[$v_pat_loc['ipid']]));
			}

			return $full_hospital_days;
		}

		private function get_period_sapv($ipids, $current_period, $hospital_days, $period_days)
		{
			$patientmaster = new PatientMaster();
			if(count($hospital_days) == 0)
			{
				$hospital_days[] = '999999999999';
			}

			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids)
				->andWhere('verordnungbis >= "' . date('Y-m-d', strtotime($current_period['start_period'])) . '"')
				->andWhere('verordnungam <= "' . date('Y-m-d', strtotime($current_period['end_period'])) . '"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();

			foreach($droparray as $k_sapv => $v_sapv)
			{
				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				if($v_sapv['verorddisabledate'] == '0000-00-00 00:00:00' || $v_sapv['verorddisabledate'] == '1970-01-01 00:00:00')
				{
					$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
				}
				else
				{
					$s_end = date('Y-m-d', strtotime($v_sapv['verorddisabledate']));
				}
				$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);
				foreach($temp_sapv_days[$v_sapv['ipid']] as $k_tsapv => $v_tsapv)
				{
					if(in_array($v_tsapv, $period_days) && !in_array($v_tsapv, $hospital_days[$v_sapv['ipid']]))
					{
						$all_sapv_days[$v_sapv['ipid']][] = $v_tsapv;
					}
				}
			}
			return $all_sapv_days;
		}

		private function get_period_visits($ipids, $clientid, $current_period, $period_days)
		{
			$verlauf_del_forms = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,
				AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title,
				AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $ipids)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("lvn_nurse_form")) . '"')
				->orderBy('course_date ASC');

			$excluded_forms = $verlauf_del_forms->fetchArray();

			$excluded_forms_arr['kvno_doctor_form'][] = '99999999999';
			$excluded_forms_arr['kvno_nurse_form'][] = '99999999999';
			$excluded_forms_arr['visit_koordination_form'][] = '99999999999';
			$excluded_forms_arr['lvn_nurse_form'][] = '99999999999';

			foreach($excluded_forms as $k_form => $v_form)
			{
				$excluded_forms_arr[$v_form['tabname']][] = $v_form['recordid'];
			}

			//		current period sql array
			foreach($current_period['report_periods']['start'] as $k_date => $v_date)
			{
				$sql_period_vizit[] = 'vizit_date BETWEEN "' . date('Y-m-d H:i:s', strtotime($v_date)) . '" AND "' . date('Y-m-d H:i:s', strtotime($current_period['report_periods']['end'][$k_date])) . '" ';
			}

			//		1. get DOCTOR visits
			$q_doctor = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->whereIn("ipid", $ipids)
				->andWhereNotIn('id', $excluded_forms_arr['kvno_doctor_form']);
			if(count($sql_period) > 0)
			{
				$q_doctor->andWhere("(" . implode("OR ", $sql_period) . ")");
			}

			$doctor_visits_res = $q_doctor->fetchArray();

			foreach($doctor_visits_res as $k_visit => $v_visit)
			{
				if(in_array(date('Y-m-d', strtotime($v_visit['vizit_date'])), $period_days))
				{
					$d_time = Pms_CommonData::calculate_visit_duration($v_visit['kvno_begin_date_h'], $v_visit['kvno_end_date_h'], $v_visit['kvno_begin_date_m'], $v_visit['kvno_end_date_m'], $v_visit['vizit_date']);
					$master_visits['doctor'][$v_visit['ipid']][$v_visit['id']]['course_date'] = $v_visit['vizit_date'];
					$master_visits['doctor'][$v_visit['ipid']][$v_visit['id']]['duration'] = $d_time;
				}
			}

			//		2. get NURSE visits
			$q_nurse = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn("ipid", $ipids)
				->andWhereNotIn('id', $excluded_forms_arr['kvno_nurse_form']);
			if(count($sql_period) > 0)
			{
				$q_nurse->andWhere("(" . implode("OR ", $sql_period) . ")");
			}

			$nurse_visits_res = $q_nurse->fetchArray();

			foreach($nurse_visits_res as $k_nvisit => $v_nvisit)
			{
				if(in_array(date('Y-m-d', strtotime($v_nvisit['vizit_date'])), $period_days))
				{
					$d_time = Pms_CommonData::calculate_visit_duration($v_nvisit['kvno_begin_date_h'], $v_nvisit['kvno_end_date_h'], $v_nvisit['kvno_begin_date_m'], $v_nvisit['kvno_end_date_m'], $v_nvisit['vizit_date']);
					$master_visits['nurse'][$v_nvisit['ipid']][$v_nvisit['id']]['course_date'] = $v_nvisit['vizit_date'];
					$master_visits['nurse'][$v_nvisit['ipid']][$v_nvisit['id']]['duration'] = $d_time;
				}
			}

			//		3. get KOORDINATION visit
			$q_koordination = Doctrine_Query::create()
				->select("*")
				->from("VisitKoordination")
				->whereIn("ipid", $ipids)
				->andWhereNotIn('id', $excluded_forms_arr['lvn_nurse_form']);
			$koord_visit_res = $q_koordination->fetchArray();

			foreach($koord_visit_res as $k_kvisit => $v_kvisit)
			{
				if(in_array(date('Y-m-d', strtotime($v_kvisit['visit_date'])), $period_days))
				{
					$d_time = Pms_CommonData::calculate_visit_duration($v_kvisit['visit_begin_date_h'], $v_kvisit['visit_	end_date_h'], $v_kvisit['visit_begin_date_m'], $v_kvisit['visit_end_date_m'], $v_kvisit['visit_date']);
					$master_visits['nurse'][$v_kvisit['ipid']][$v_kvisit['id']]['course_date'] = $v_kvisit['visit_date'];
					$master_visits['nurse'][$v_kvisit['ipid']][$v_kvisit['id']]['duration'] = $d_time;
				}
			}
			return $master_visits;
		}

		private function get_period_courses($ipids, $clientid, $current_period)
		{
			
		}

		public function akutellepatient_contactv2($params)
		{
			// report_id = 98
			// report_name = Aktuelle Patienten Nürnberger Land Vers. 2
			//ISPC-1984 = add the column location;
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$ipidsactive_arr[] = '999999999999999';
			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$ipidsactive_arr[] = $ipid;
					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				/* -------------------------Get client Main Diagnosis type ------------------------------------------ */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";

				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}

				/* -------------------------Get Patient Master Data------------------------------------------ */
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				$patientexec = $patientMasterData->fetchArray();

				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}

				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['phone']) > 0)
					{
						$patientinfo[$patient['ipid']]['phone'] = $patient['phone'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['street1']) > 0)
					{
						$address[$patient['ipid']] .= $patient['street1'] . '<br />';
					}
					if(strlen($patient['zip']) > 0)
					{
						$address[$patient['ipid']] .= $patient['zip'] . ', ';
					}
					if(strlen($patient['city']) > 0)
					{
						$address[$patient['ipid']] .= $patient['city'];
					}

					$patient_address[$patient['ipid']]['address'] = $address[$patient['ipid']];
				}

				/* -------------------------Get contact persons------------------------------------------ */
				$Contactperson = array();
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )

				foreach($patientexec as $patient)
				{
					foreach($contactpersons_loc_array[$patient['ipid']] as $kp=>$vkp)
					{
						if($vkp['isdelete'] == 0)
						{
							$contact_item = $vkp;
						
							if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
							{
								$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_last_name'] . ',';
							}
						
							if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
							{
								$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
							}
						
							if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
							{
								$Contactperson[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
							}
						
							if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
							{
								$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
							}
							if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
							{
								$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_city'] . '';
							}
							if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
							{
								$Contactperson[$contact_item['ipid']] .= '<br />Telefon: ' . $contact_item['cnt_phone'];
							}
							break;
						}
					}
				}
				
				/* ----------------------- Get Patient location-------------------------------- */
				$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid IN (' . $ipidsactive . ')')
				->andWhere('isdelete="0"')
				->andWhere("valid_till='0000-00-00 00:00:00'")
				->orderBy('id DESC');
				$patlocs = $patloc->execute();
				
				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}
				
						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}
				
					$floc = Doctrine_Query::create()
					->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where("id IN (" . $patientlocationstr . ")")
					->andWhere('isdelete=0')
					->orderBy('location ASC');
					$locationdata = $floc->fetchArray();
				
					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}
				
					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}
				
								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id]['location_name'];
							$patlocarrayFinal[$v_loc['ipid']]['location_address'] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id]['location_street'] . '<br />' . $pat_locarrayl[$v_loc['ipid']][$patient_location_id]['location_zip'] . ' ' . $pat_locarrayl[$v_loc['ipid']][$patient_location_id]['location_city'];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_address'] = $patient_address[$v_loc['ipid']]['address'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_address'] = $locationLastData[$v_loc['location_id']]['street'] . '<br />' . $locationLastData[$v_loc['location_id']]['zip'] . ' ' . $locationLastData[$v_loc['location_id']]['city'];
							}
						}
					}
				}			

				/* -------------------------Get Family doctors details------------------------------------------ */
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}
				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']] = $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
						}

						if(strlen($doc['street1']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
						}
						if(strlen($doc['street2']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
						}
						if(strlen($doc['postcode']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['postcode'] . ", ";
						}
						if(strlen($doc['city']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['city'];
						}
					}
				}

				/* -------------------------Get SAPV details------------------------------------------ */
				$dropSapv = Doctrine_Query::create()
					->select('*, GROUP_CONCAT(verordnet) as vero')
					->from('SapvVerordnung')
					->where('ipid IN (' . $ipidsactive . ') and isdelete=0 and status != 1 ')
					->andWhere("verordnungbis >='" . date('Y-m-d', mktime(0, 0, 0, date('m'), date('d'), date('Y'))) . " 00:00:00'")
					->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();

				foreach($droparray as $verord)
				{
					$sapv = explode(',', $verord['vero']);
					$s = max($sapv);
					if($s == "1")
					{
						$sapv_value[$verord['ipid']] = "BE";
					}
					elseif($s == "2")
					{
						$sapv_value[$verord['ipid']] = "KO";
					}
					elseif($s == "3")
					{
						$sapv_value[$verord['ipid']] = "TV";
					}
					elseif($s == "4")
					{
						$sapv_value[$verord['ipid']] = "VO";
					}
					else
					{
						$sapv_value[$verord['ipid']] = "-";
					}
				}

				/* -------------------------Get Patients Epids------------------------------------------ */
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				/* -------------------------Get MEMO TODO HERE ------------------------------------------ */
				$patient_memo = new PatientMemo();
				$all_patients_memo = $patient_memo->get_multiple_patient_memo($ipidsactive_arr);

				/* ------------------------- DISPLAY MASTER DATA ------------------------------------------ */
				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['pat_addresse'] = $patient_address[$keypatient]['address'];
					$MasterData['data'][$keypatient]['phone'] = $patientinfo[$keypatient]['phone'];
					$MasterData['data'][$keypatient]['contactperson'] = $Contactperson[$keypatient];
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient]['location_name'] . '<br />' . $patlocarrayFinal[$keypatient]['location_address'];
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']];
					$MasterData['data'][$keypatient]['vo'] = $sapv_value[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . '  ';
					if(array_key_exists($patient['ipid'], $all_patients_memo))
					{
						$MasterData['data'][$keypatient]['memo'] = $all_patients_memo[$patient['ipid']];
					}
					else
					{
						$MasterData['data'][$keypatient]['memo'] = '-';
					}
				}
				return $MasterData;
			}
		}
		
		public function akutellepatient_contactv2_ffb($params)
		{
			// report_id = 156
			// report_name = Aktuelle Patienten FFB
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$ipidsactive_arr[] = '999999999999999';
			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$ipidsactive_arr[] = $ipid;
					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				/* -------------------------Get client Main Diagnosis type ------------------------------------------ */
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";

				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}

				/* -------------------------Get Patient Master Data------------------------------------------ */
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				$patientexec = $patientMasterData->fetchArray();

				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}

				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['phone']) > 0)
					{
						$patientinfo[$patient['ipid']]['phone'] = $patient['phone'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['street1'] =$patient['street1'];
						$address[$patient['ipid']] .= $patient['street1'] . '<br />';
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['zip'] =$patient['zip'];
						$address[$patient['ipid']] .= $patient['zip'] . ', ';
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['city'] =$patient['city'];
						$address[$patient['ipid']] .= $patient['city'];
					}

					$parient_address[$patient['ipid']]['address'] = $address[$patient['ipid']];
				}

				/* -------------------------Get contact persons------------------------------------------ */
				$Contactperson = array();
				$contact = new ContactPersonMaster();
				$contactpersons_array = $contact->getContactPersonsByIpids($activeipids, "ipid");

				foreach($contactpersons_array as $contact_item)
				{
					if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_last_name'] . ',';
					}

					if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
					}

					if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
					}

					if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
					}
					if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= $contact_item['cnt_city'] . '';
					}
					if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
					{
						$Contactperson[$contact_item['ipid']] .= '<br />Telefon: ' . $contact_item['cnt_phone'];
					}
				}

				/* -------------------------Get Family doctors details------------------------------------------ */
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}
				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']] = $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
						}

						if(strlen($doc['street1']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
						}
						if(strlen($doc['street2']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
						}
						if(strlen($doc['postcode']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['postcode'] . ", ";
						}
						if(strlen($doc['city']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['city'];
						}
					}
				}

				/* -------------------------Get SAPV details------------------------------------------ */
				$dropSapv = Doctrine_Query::create()
					->select('*, GROUP_CONCAT(verordnet) as vero')
					->from('SapvVerordnung')
					->where('ipid IN (' . $ipidsactive . ') and isdelete=0 and status != 1 ')
					->andWhere("verordnungbis >='" . date('Y-m-d', mktime(0, 0, 0, date('m'), date('d'), date('Y'))) . " 00:00:00'")
					->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();

			
				
				foreach($droparray as $k=>$verord)
				{
					$sapv = explode(',', $verord['vero']);
					$s = max($sapv);
					if($s == "1")
					{
						$sapv_value[$verord['ipid']] = "BE";
					}
					elseif($s == "2")
					{
						$sapv_value[$verord['ipid']] = "KO";
					}
					elseif($s == "3")
					{
						$sapv_value[$verord['ipid']] = "TV";
					}
					elseif($s == "4")
					{
						$sapv_value[$verord['ipid']] = "VO";
					}
					else
					{
						$sapv_value[$verord['ipid']] = "-";
					}
				}
				
				
				
				
				/* -------------------------Get Contact Persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($ipidsactive_arr, false, false);
				
				$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipidsactive_arr)
				->andWhere('isdelete="0"')
				->andWhere("valid_till='0000-00-00 00:00:00'")
				->orderBy('id DESC');
				
				$patlocs = $patloc->execute();
				
				if($patlocs)
				{
				    $patlocarray = $patlocs->toArray();
				    $locinc = 1;
				    foreach($patlocarray as $patloc)
				    {
				        $patlocarrayipid[$patloc['ipid']] = $patloc;
				        if($locinc != count($patlocarray))
				        {
				            $end = ",";
				        }
				        else
				        {
				            $end = "";
				        }
				
				        $patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
				        $locinc++;
				        $patientlocations_arr[] = $patloc['location_id'];
				    }
				    if(empty($patientlocations_arr))
				    {
				        $patientlocations_arr[] = "XXXXXX";
				    }
				    $floc = Doctrine_Query::create()
				    ->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				    ->from('Locations')
				    ->whereIn("id", $patientlocations_arr)
				    ->andWhere('isdelete=0')
				    ->orderBy('location ASC');
				    $locationdata = $floc->fetchArray();
				
				    foreach($locationdata as $kloc => $vloc)
				    {
				        $locationLastData[$vloc['id']] = $vloc;
				    }
				    foreach($patlocarray as $k_loc => $v_loc)
				    {
				        $locid = substr($v_loc['location_id'], 0, 4);
				        if($locid == "8888")
				        {
				            $patient_location_id = $v_loc['location_id'];
				            $z = 1;
				            $cnt_number = 1;
				            foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
				            {
				                if($value_cnt['isdelete'] == '0')
				                {
				                    $pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
				                    $pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
				                    $pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
				                    $pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
				                    $cnt_number++;
				                }
				                else
				                {
				                    $pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
				                }
				                $z++;
				            }
				            $patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
				        }
				        else
				        {
				            $patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
				            $patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
				            if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
				            {
				                $patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
				                $patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
				                $patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
				            }
				            else
				            {
				                $patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
				                $patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
				                $patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
				            }
				        }
				    }
				}
				foreach($patlocarrayFinal as $pid => $loc_details)
				{
				    $active_location[$pid]['address'] = $loc_details['location_name'] . '<br />' . $loc_details['location_street'] . '<br />' . $loc_details['location_zip'] . ' ' . $loc_details['location_city'];
				}
				
				
				
				
				/* -------------------------Get MEMO TODO HERE ------------------------------------------ */
				$patient_memo = new PatientMemo();
				$all_patients_memo = $patient_memo->get_multiple_patient_memo($ipidsactive_arr);

				/* ------------------------- DISPLAY MASTER DATA ------------------------------------------ */
				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['pat_addresse'] = $active_location[$keypatient]['address'];
					$MasterData['data'][$keypatient]['phone'] = $patientinfo[$keypatient]['phone'];
					$MasterData['data'][$keypatient]['contactperson'] = $Contactperson[$keypatient];
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']];
					$MasterData['data'][$keypatient]['vo'] = $sapv_value[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . '  ';
					if(array_key_exists($patient['ipid'], $all_patients_memo))
					{
						$MasterData['data'][$keypatient]['memo'] = $all_patients_memo[$patient['ipid']];
					}
					else
					{
						$MasterData['data'][$keypatient]['memo'] = '-';
					}
				}
				return $MasterData;
			}
		}

		private function bgpatient($params)
		{
			// report_id = 96
			// report_name  = BG Patienten
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$active = array();
			$dead = array();
			if($onlyactive != 1)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if(!is_array($active))
				{
					$active = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}
				$ipidarr = array_merge($active, $dead);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			$ipid_str = "'0',";
			foreach($ipidarr as $ipid)
			{
				$ipid_str .= "'" . $ipid . "',";
			}

			$actpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex, e.epid as patepid")
				->from('PatientMaster p');
			$actpatient->leftJoin("p.EpidIpidMapping e");
			$actpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$actpatient->leftJoin("PatientHealthInsurance h");
			$actpatient->andWhere('h.ipid = p.ipid and h.bg_patient = 1 AND p.ipid IN (' . substr($ipid_str, 0, -1) . ')');
			$actpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$actpatients = $actpatient->fetchArray();
			$i = 1;

			$activeipids = "'0',";

			foreach($actpatients as $patient)
			{
				if($i != count($actpatients))
				{
					$end = ",";
				}
				else
				{
					$end = "";
				}
				$activeipids .= "'" . $patient['ipid'] . "'" . $end;
				$activeipidsarr[] = $patient['ipid'];
				$i++;
			}

			$pm = new PatientMaster();
			if(count($activeipidsarr) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($activeipidsarr, false);
			}

			foreach($actpatients as $activepatient)
			{
				$MasterData['data'][$activepatient['ipid']]['epid'] = $activepatient['patepid'];
				$MasterData['data'][$activepatient['ipid']]['lastname'] = $activepatient['last_name'];
				$MasterData['data'][$activepatient['ipid']]['firstname'] = $activepatient['first_name'];
				$MasterData['data'][$activepatient['ipid']]['treateddays'] = $treatedarr[$activepatient['ipid']]['realActiveDays'];
			}

			return $MasterData;
		}

		public function admitedpatients_v2($params)
		{
			// report_id = 99
			// report_name = Erst-Aufnahmen Abrechnung
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$s = array('%date_start%', '%date_end%');
			$r = array('`date`', '`date`');

			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$clientIpids = $this->getAllClientPatients($clientid, $whereepid);
			$clientPatientsIpids[] = "9999999999";

			$clientPatientsIpids[] = '9999999';
			foreach($clientIpids as $patient)
			{
				$clientPatientsIpids[] = $patient['ipid'];
			}

			//get patients master data
			$patientMasterData = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, e.epid as patepid")
				->from('PatientMaster p')
				->whereIn('ipid', $clientPatientsIpids);
			$patientMasterData->leftJoin("p.EpidIpidMapping e");
			$patientMasterData->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$pmarr = $patientMasterData->fetchArray();

			//		PATIENT MASTER DATA ARR
			foreach($pmarr as $patient)
			{
				$patientMasterArray[$patient['ipid']] = $patient;
			}

			//		OLD+NEW PATIENTS (with/without entry in readmission!)
			$pm = new PatientMaster();
			$treated_days = $pm->getTreatedDaysRealMultiple($clientPatientsIpids);
			foreach($treated_days as $k_ipid => $v_patient)
			{
				if(!empty($v_patient['admissionDates']))
				{
					//get from admisison
					if(count($v_patient['admissionDates']) == '1')
					{
						$patient_admissions[$k_ipid][] = $v_patient['admissionDates'][0];
					}

					if(!empty($v_patient['dischargeDates'][0]))
					{
						$patient_discharges[$k_ipid][] = $v_patient['dischargeDates'][0];
					}
					else
					{
						$patient_discharges[$k_ipid][] = '-';
					}
				}
				else
				{
					//get old data
					$patient_admissions[$k_ipid][] = $v_patient['admission_date'];
					$patient_discharges[$k_ipid][] = $v_patient['discharge_date'];
				}
			}
			$final_ipids[] = '999999999';
			foreach($patient_admissions as $ipid => $pat_adm)
			{
				$nr_admissions = count($pat_adm);
				if($nr_admissions == "1") //exclude those who have more than one entry in PR(readmitted not admited)
				{
					foreach($pat_adm as $k_admission => $v_admision)
					{
						foreach($reportPeriod['start'] as $k_start => $v_start)
						{
							if(Pms_CommonData::isintersected(strtotime($v_admision['date']), strtotime($v_admision['date']), strtotime($v_start), strtotime($reportPeriod['end'][$k_start] . ' 23:59:59')))
							{
								$final_ipids[] = $ipid;
								$final_patient_data[$ipid]['adm'][$k_admission] = date('d.m.Y', strtotime($v_admision['date']));

								if($patient_discharges[$ipid][$k_admission]['date'] != '-')
								{
									$final_patient_data[$ipid]['dis'][$k_admission] = date('d.m.Y', strtotime($patient_discharges[$ipid][$k_admission]['date']));
								}
								else
								{
									$final_patient_data[$ipid]['dis'][$k_admission] = "-";
								}
							}
						}
					}
				}
			}


			$ipids_active_arr[] = '99999999999999';
			if($final_ipids)
			{
				$i = 1;
				foreach($final_ipids as $k_ipid => $v_ipid)
				{
					if($i != count($final_ipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$ipids_active_arr[] = $v_ipid;
					$ipidsactive .= "'" . $v_ipid . "'" . $end;
					$i++;
				}
			}

			//get main diagnosis
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ", ";
			}

			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

			foreach($dianoarray as $diangosis)
			{
				$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
			}
			foreach($diagnosisarr as $d_key => $d_val)
			{
				$diagnosisarr[$d_key] = implode(", ", $d_val);
			}

			//		get active ipids details
			$pat_master_data = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('ipid', $ipids_active_arr);
			$patientMasterData->leftJoin("p.EpidIpidMapping e");
			$patientMasterData->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$pmarr_res = $pat_master_data->fetchArray();

			foreach($pmarr_res as $k_pmarr_res => $v_pmarr_res)
			{
				$family_docs[] = $v_pmarr_res['familydoc_id'];
				$final_patient_data[$v_pmarr_res['ipid']]['familydoc_id'] = $v_pmarr_res['familydoc_id'];
			}
			$family_docs = array_values(array_unique($family_docs));

			//get familydoctor
			$Familydoctor = "";
			$famdoc = new FamilyDoctor();
			$familidoc = $famdoc->getFamilyDoctors(false, false, false, $family_docs);

			foreach($familidoc as $fd_key => $fd_value)
			{
				$familydoctors[$fd_value['id']] = $fd_value;
			}

			if(count($familidoc) > 0)
			{
				$Familydoctor = array();
				foreach($familidoc as $doc)
				{
					if(strlen($doc['title']) > 0)
					{
						$Familydoctor[$doc['id']] = $doc['title'] . " ";
					}
					if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br />";
					}

					if(strlen($doc['phone_practice']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
					}

					if(strlen($doc['street1']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
					}
					if(strlen($doc['street2']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
					}
					if(strlen($doc['postcode']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['postcode'] . ", ";
					}
					if(strlen($doc['city']) > 0)
					{
						$Familydoctor[$doc['id']] .= $doc['city'];
					}
					if(strlen($doc['doctornumber']) > 0)
					{
						$doctor_lanr[$doc['id']] = $doc['doctornumber'];
					}
				}
			}

			//get healthinsurance
			$phelathinsurance = new PatientHealthInsurance();
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($ipids_active_arr);

			foreach($healthinsu_array as $k_healthinsu => $v_healthinsu)
			{
				$patients_healthinsu[$v_healthinsu['ipid']] = $v_healthinsu;
			}

			//MASTER DATA
			foreach($final_patient_data as $kp_ipid => $val_patient)
			{

				$MasterData['data'][$kp_ipid]['epid'] = strtoupper($patientMasterArray[$kp_ipid]['patepid']);
				$MasterData['data'][$kp_ipid]['lastname'] = $patientMasterArray[$kp_ipid]['last_name'];
				$MasterData['data'][$kp_ipid]['firstname'] = $patientMasterArray[$kp_ipid]['first_name'];
				$MasterData['data'][$kp_ipid]['birthd'] = date("d.m.Y", strtotime($patientMasterArray[$kp_ipid]['birthd']));
				$MasterData['data'][$kp_ipid]['admissiondate'] = $val_patient['adm'];
				$MasterData['data'][$kp_ipid]['dischargedate'] = $val_patient['dis'];
				if(array_key_exists($kp_ipid, $diagnosisarr))
				{
					$MasterData['data'][$kp_ipid]['diagnosis'] = $diagnosisarr[$kp_ipid];
				}
				else
				{
					$MasterData['data'][$kp_ipid]['diagnosis'] = ' - ';
				}

				if(strlen($Familydoctor[$val_patient['familydoc_id']]) > 0)
				{

					$MasterData['data'][$kp_ipid]['familydoctor'] = $Familydoctor[$val_patient['familydoc_id']];
				}
				else
				{
					$MasterData['data'][$kp_ipid]['familydoctor'] = ' - ';
				}

				if(strlen($doctor_lanr[$val_patient['familydoc_id']]) > 0)
				{
					$MasterData['data'][$kp_ipid]['lanr'] = $doctor_lanr[$val_patient['familydoc_id']];
				}
				else
				{
					$MasterData['data'][$kp_ipid]['lanr'] = ' - ';
				}
				$st = new KbvKeytabs();
				$status_arr = $st->getKbvKeytabs(0);
				foreach($status_arr as $k_status => $v_status)
				{
					$status_array[$v_status['v']] = $v_status['dn'];
				}

				if(array_key_exists($kp_ipid, $patients_healthinsu))
				{
					if(strlen($patients_healthinsu[$kp_ipid]['company_name']) > 0)
					{
						$MasterData['data'][$kp_ipid]['healthinsurance'] = $patients_healthinsu[$kp_ipid]['company_name'];
					}
					else
					{
						$MasterData['data'][$kp_ipid]['healthinsurance'] = ' - ';
					}

					if(strlen($patients_healthinsu[$kp_ipid]['insurance_no']) > 0)
					{
						$MasterData['data'][$kp_ipid]['healthinsurance_nr'] = $patients_healthinsu[$kp_ipid]['insurance_no'];
					}
					else
					{
						$MasterData['data'][$kp_ipid]['healthinsurance_nr'] = ' - ';
					}

					if(strlen($patients_healthinsu[$kp_ipid]['kvk_no']) > 0)
					{
						$MasterData['data'][$kp_ipid]['healthinsurance_case'] = $patients_healthinsu[$kp_ipid]['kvk_no'];
					}
					else
					{
						$MasterData['data'][$kp_ipid]['healthinsurance_case'] = ' - ';
					}

					if(strlen($patients_healthinsu[$kp_ipid]['insurance_status']) > 0 && strlen($status_array[$patients_healthinsu[$kp_ipid]['insurance_status']]) > 0)
					{
						$MasterData['data'][$kp_ipid]['healthinsurance_status'] = $status_array[$patients_healthinsu[$kp_ipid]['insurance_status']];
					}
					else
					{
						$MasterData['data'][$kp_ipid]['healthinsurance_status'] = ' - ';
					}
				}
				else
				{
					$MasterData['data'][$kp_ipid]['healthinsurance'] = ' - ';
					$MasterData['data'][$kp_ipid]['healthinsurance_nr'] = ' - ';
					$MasterData['data'][$kp_ipid]['healthinsurance_case'] = ' - ';
					$MasterData['data'][$kp_ipid]['healthinsurance_status'] = ' - ';
				}
			}
			return $MasterData;
		}

		public function overlapping_visits_by_patients($params)
		{
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ------------------------------------  Get DELETED visits------------------------------------------ */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_doctor_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_nurse_form")) . '"   OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("bayern_doctorvisit")) . '"  ')
				->andWhereIn('ipid', $ipidarr);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['wl_doctor_form'][] = '999999999999';
			$del_visits['wl_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';
			$del_visits['bayern_doctorvisit'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ------------------------------------  Get KVNO doctor visits------------------------------------------ */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("*,  if( id <> 0, 'doctor_visit', '')  as type")
				->from("KvnoDoctor")
				->whereIn('ipid', $ipidarr)
				->andWhereNotIn('id', $del_visits['kvno_doctor_form'])
				->andWhere(str_replace('%date%', 'vizit_date', $active_cond['date_sql']))
				->orderBy('vizit_date ASC');
			$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();


			foreach($kvno_doctor_visits_arr as $doc => $value_doc)
			{
				$pat_visit_doc['doctor_visit'][$value_doc['ipid']][] = $value_doc;
			}
			/* ------------------------------------  Get KVNO nurse visits------------------------------------------ */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("*,  if( id <> 0, 'nurse_visit', '')  as type")
				->from("KvnoNurse")
				->whereIn('ipid', $ipidarr)
				->andWhere('isdelete = 0')
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere(str_replace('%date%', 'vizit_date', $active_cond['date_sql']))
				->orderBy('vizit_date ASC');
			$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();

			foreach($kvno_nurse_visits_arr as $nurse => $value_nurse)
			{
				$pat_visit_doc['nurse_visit'][$value_nurse['ipid']][] = $value_nurse;
			}

			/* ------------------------------------  Get KVNO koordination visits------------------------------------------ */
			$kvno_koordination_visits = Doctrine_Query::create()
				->select("*,  if( id <> 0, 'koordination_visit', '')  as type")
				->from("VisitKoordination")
				->whereIn('ipid', $ipidarr)
				->andWhereNotIn('id', $del_visits['visit_koordination_form'])
				->andWhere(str_replace('%date%', 'visit_date', $active_cond['date_sql']))
				->orderBy('visit_date ASC');
			$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

			foreach($kvno_koordination_visits_arr as $koordination => $value_koordination)
			{
				$pat_visit_doc['koordinator_visit'][$value_koordination['ipid']][] = $value_koordination;
			}

			/* ------------------------------------  Get Bayern doctor visits------------------------------------------ */
			$bayern_visits = Doctrine_Query::create()
				->select("*,  if( id <> 0, 'bayern_visit', '')  as type")
				->from("BayernDoctorVisit")
				->whereIn('ipid', $ipidarr)
				->andWhereNotIn('id', $del_visits['bayern_doctorvisit'])
				->andWhere(str_replace('%date%', 'visit_date', $active_cond['date_sql']))
				->orderBy('visit_date ASC');
			$bayern_visits_arr = $bayern_visits->fetchArray();

			foreach($bayern_visits_arr as $bayern => $value_bayern)
			{
				$pat_visit_doc['bayern_visit'][$value_bayern['ipid']][] = $value_bayern;
			}

			if(empty($pat_visit_doc))
			{
				$pat_visit_doc['9999999999'] = '0000';
			}

			foreach($pat_visit_doc as $visits_types => $visits_total)
			{
				foreach($visits_total as $vtk => $vt_value)
				{
					foreach($vt_value as $the_visit)
					{
						$allvisits[$the_visit['ipid']][] = $the_visit;
						$visits_users[] = $the_visit['create_user']; // get the users that visited the patient
						$patients_visits[] = $the_visit['ipid']; //get all patients WITH visits;
					}
				}
			}

			if(empty($visits_users))
			{
				$visits_users['9999999999'] = '0000';
			}
			$patients_visits = array_unique($patients_visits);
			if(empty($patients_visits))
			{
				$patients_visits['9999999999'] = '0000';
			}
			foreach($patients_visits as $value)
			{
				$patients_visits_ipids[] = $value;
			}
			/* ------------------------------------  Get Users Details------------------------------------------ */
			$visitbyUsersQ = Doctrine_Query::create()
				->select('*')
				->from('User')
				->whereIn('id', $visits_users);
			$visitbyUsersarr = $visitbyUsersQ->fetchArray();

			foreach($visitbyUsersarr as $uservisit)
			{
				$VisitsbyUsers[$uservisit['id']]['name'] = $uservisit['last_name'] . " " . $uservisit['first_name'];
				$VisitsbyUsers[$uservisit['id']]['username'] = $uservisit['username'];
			}
			/* ----------------------------- Patient Get discharge dates---------------------------------------- */
			$dispat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->wherein("ipid", $patients_visits_ipids);
			$dispatarray = $dispat->fetchArray();

			foreach($dispatarray as $dis_patient)
			{
				$dischargedpatarray[$dis_patient['ipid']] = $dis_patient['discharge_date'];
			}
			/* ----------------------------- Patient details---------------------------------------- */
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $patients_visits_ipids)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$ipidarray = $patient->fetchArray();
			$pm = new PatientMaster();
			if(count($patients_visits_ipids) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($patients_visits_ipids);
			}
			/* ----------------------------- Display all data ---------------------------------------- */
			$visit_nr = 0;
			$total_time = 0;
			$treatedcnt = 0;

			foreach($ipidarray as $patient)
			{
				foreach($allvisits[$patient['ipid']] as $k_vis => $v_vis)
				{
					if($v_vis['type'] == 'koordination_visit')
					{ // if koordination
						$vizit_date_array = date('d.m.Y', strtotime($v_vis['visit_date']));
						$vizit_date_arr = explode(".", $vizit_date_array);

						$visit[$k_vis]['start'] = mktime($v_vis['visit_begin_date_h'], $v_vis['visit_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
						$visit[$k_vis]['end'] = mktime($v_vis['visit_end_date_h'], $v_vis['visit_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
						$visit[$k_vis]['visit_details'] = $v_vis;
					}
					else if($v_vis['type'] == 'bayern_visit')
					{ // if Bayern
						$vizit_date_array = date('d.m.Y', strtotime($v_vis['visit_date']));
						$vizit_date_arr = explode(".", $vizit_date_array);

						$visit[$k_vis]['start'] = mktime($v_vis['begin_date_h'], $v_vis['begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
						$visit[$k_vis]['end'] = mktime($v_vis['end_date_h'], $v_vis['end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
					}
					elseif($v_vis['type'] == 'doctor_visit')
					{ // if doctor visit
						$vizit_date_array = date('d.m.Y', strtotime($v_vis['vizit_date']));
						$vizit_date_arr = explode(".", $vizit_date_array);

						$visit[$k_vis]['start'] = mktime($v_vis['kvno_begin_date_h'], $v_vis['kvno_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
						$visit[$k_vis]['end'] = mktime($v_vis['kvno_end_date_h'], $v_vis['kvno_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
					}
					else if($v_vis['type'] == 'nurse_visit')
					{ // if nurse visit
						$vizit_date_array = date('d.m.Y', strtotime($v_vis['vizit_date']));
						$vizit_date_arr = explode(".", $vizit_date_array);

						$visit[$k_vis]['start'] = mktime($v_vis['kvno_begin_date_h'], $v_vis['kvno_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
						$visit[$k_vis]['end'] = mktime($v_vis['kvno_end_date_h'], $v_vis['kvno_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
					}
					$visit[$k_vis]['visit_details'] = $v_vis;

					foreach($allvisits[$patient['ipid']] as $k_vis_sec => $v_vis_sec)
					{

						if($k_vis != $k_vis_sec)
						{

							if($v_vis_sec['type'] == 'koordination_visit')
							{ // if koordination
								$vizit_date_array = date('d.m.Y', strtotime($v_vis_sec['visit_date']));
								$vizit_date_arr = explode(".", $vizit_date_array);

								$visit_sec[$k_vis_sec]['start'] = mktime($v_vis_sec['visit_begin_date_h'], $v_vis_sec['visit_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
								$visit_sec[$k_vis_sec]['end'] = mktime($v_vis_sec['visit_end_date_h'], $v_vis_sec['visit_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
							}
							else if($v_vis_sec['type'] == 'bayern_visit')
							{ // if Bayern
								$vizit_date_array = date('d.m.Y', strtotime($v_vis_sec['visit_date']));
								$vizit_date_arr = explode(".", $vizit_date_array);

								$visit_sec[$k_vis_sec]['start'] = mktime($v_vis_sec['begin_date_h'], $v_vis_sec['begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
								$visit_sec[$k_vis_sec]['end'] = mktime($v_vis_sec['end_date_h'], $v_vis_sec['end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
							}
							elseif($v_vis_sec['type'] == 'doctor_visit')
							{ // if doctor visit
								$vizit_date_array = date('d.m.Y', strtotime($v_vis_sec['vizit_date']));
								$vizit_date_arr = explode(".", $vizit_date_array);

								$visit_sec[$k_vis_sec]['start'] = mktime($v_vis_sec['kvno_begin_date_h'], $v_vis_sec['kvno_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
								$visit_sec[$k_vis_sec]['end'] = mktime($v_vis_sec['kvno_end_date_h'], $v_vis_sec['kvno_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
							}
							else if($v_vis_sec['type'] == 'nurse_visit')
							{ // if nurse visit
								$vizit_date_array = date('d.m.Y', strtotime($v_vis_sec['vizit_date']));
								$vizit_date_arr = explode(".", $vizit_date_array);

								$visit_sec[$k_vis_sec]['start'] = mktime($v_vis_sec['kvno_begin_date_h'], $v_vis_sec['kvno_begin_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
								$visit_sec[$k_vis_sec]['end'] = mktime($v_vis_sec['kvno_end_date_h'], $v_vis_sec['kvno_end_date_m'], 0, $vizit_date_arr[1], $vizit_date_arr[0], $vizit_date_arr[2]);
							}

							$visit_sec[$k_vis_sec]['username'] = $VisitsbyUsers[$v_vis_sec['create_user']]['username'];
							$visit_sec[$k_vis_sec]['duration'] = round(($visit_sec[$k_vis_sec]['end'] - $visit_sec[$k_vis_sec]['start']) / 60);
							;

							$visit_sec[$k_vis_sec]['visit_type'] = $v_vis_sec['type'];
							$visit_sec[$k_vis_sec]['create_date'] = $v_vis_sec['create_date'];



							if($v_vis['type'] == $v_vis_sec['type'])
							{
								if(Pms_CommonData::isintersected($visit[$k_vis]['start'], $visit[$k_vis]['end'], $visit_sec[$k_vis_sec]['start'], $visit_sec[$k_vis_sec]['end']))
								{
									$MasterData['data'][$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
									$MasterData['data'][$patient['ipid']]['lastname'] = $patient['last_name'];
									$MasterData['data'][$patient['ipid']]['firstname'] = $patient['first_name'];

									$MasterData['data'][$patient['ipid']]['visit'][$k_vis]['visit_type'] = $visit_sec[$k_vis_sec]['visit_type'];
									$MasterData['data'][$patient['ipid']]['visit'][$k_vis]['visit_by'] = $visit_sec[$k_vis_sec]['username'];
									$MasterData['data'][$patient['ipid']]['visit'][$k_vis]['visit_date'] = date('d.m.Y', $visit_sec[$k_vis_sec]['start']);
									$MasterData['data'][$patient['ipid']]['visit'][$k_vis]['visit_start'] = date('H:i', $visit_sec[$k_vis_sec]['start']);
									$MasterData['data'][$patient['ipid']]['visit'][$k_vis]['visit_end'] = date('H:i', $visit_sec[$k_vis_sec]['end']);
									$MasterData['data'][$patient['ipid']]['visit'][$k_vis]['visit_duration'] = $visit_sec[$k_vis_sec]['duration'];
									$MasterData['data'][$patient['ipid']]['visit'][$k_vis]['create_date'] = date('d.m.Y H:i:s', strtotime($visit_sec[$k_vis_sec]['create_date']));

									$total_time += $MasterData['data'][$patient['ipid']]['visit'][$k_vis]['visit_duration'];
									$visit_nr++;
								}
							}
						}
					}
				}

				$treatedcnt += $treatedarr[$patient['ipid']]['realActiveDays'];
			}

			$MasterData['extra']['overall_visits'] = $visit_nr;
			$MasterData['extra']['overall_time'] = $total_time;
			$MasterData['extra']['overall_treatmentdays'] = $treatedcnt;
			$MasterData['extra']['average_visit_per_day'] = round($visit_nr / $treatedcnt, 2);

			return $MasterData;
		}

		public function overlapping_visits($params)
		{
			// report_id = 97
			// report_name = Uberschneidungen Besuche
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			$ipids_str = '"XXXX",';
			foreach($ipidarr as $ipid)
			{
				$ipids_str .='"' . $ipid . '",';
			}
			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$manager = Doctrine_Manager::getInstance();
			$manager->setCurrentConnection('MDAT');
			$conn = $manager->getCurrentConnection();

			/* ------------------------------------  Get Users Details------------------------------------------ */
			$visitbyUsersQ = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('clientid = ' . $clientid . '');
			$visitbyUsersarr = $visitbyUsersQ->fetchArray();

			$all_users_str = '"XXX",';
			foreach($visitbyUsersarr as $uservisit)
			{
				$user_details[$uservisit['id']]['id'] = $uservisit['id'];
				$user_details[$uservisit['id']]['name'] = $uservisit['last_name'] . " " . $uservisit['first_name'];
				$user_details[$uservisit['id']]['username'] = $uservisit['username'];

				$all_users[] = $uservisit['id'];
				$all_users_str .= '"' . $uservisit['id'] . '",';
			}
			if(empty($all_users))
			{
				$all_users[] = '9999999999';
			}
			/* ------------------------------------  Get DELETED visits------------------------------------------ */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_doctor_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_nurse_form")) . '"   OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("bayern_doctorvisit")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("contact_form")) . '"  ')
				->andWhereIn('ipid', $ipidarr)
				->andWhereIn('create_user', $all_users);

			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'] = '"999999999999",';
			$del_visits['kvno_nurse_form'] = '"999999999999",';
			$del_visits['wl_doctor_form'] = '"999999999999",';
			$del_visits['wl_nurse_form'] = '"999999999999",';
			$del_visits['visit_koordination_form'] = '"999999999999",';
			$del_visits['bayern_doctorvisit'] = '"999999999999",';
			$del_visits['contact_form'] = '"999999999999",';
			$deleted_nurse_visits = '"XXXX",';
			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']] .= '"' . $v_del_visit['recordid'] . '",';
			}
			/* ------------------------------------  UPDATE VISITS with new DATEs------------------------------------------ */
			$querystr_doc = 'SELECT kn1.id, kn2.id, kn1.create_user, kn2.create_user, kn1.start_date, kn1.end_date, kn2.start_date, kn2.end_date,kn1.ipid,kn2.ipid
							 FROM `kvno_doctor` kn1, `kvno_doctor` kn2
							 WHERE 1

								AND kn1.id NOT IN (' . substr($del_visits['kvno_doctor_form'], 0, -1) . ')
								AND kn1.id NOT IN (' . substr($del_visits['wl_doctor_form'], 0, -1) . ')
								AND kn2.id NOT IN (' . substr($del_visits['kvno_doctor_form'], 0, -1) . ')
								AND kn2.id NOT IN (' . substr($del_visits['wl_doctor_form'], 0, -1) . ')

								AND kn1.create_user IN (' . substr($all_users_str, 0, -1) . ')
								AND kn2.create_user IN (' . substr($all_users_str, 0, -1) . ')

								AND (' . str_replace('%date%', 'kn1.start_date', $active_cond['date_sql']) . ' )

								AND kn1.create_user = kn2.create_user
								AND (kn2.start_date BETWEEN kn1.start_date AND kn1.end_date OR kn2.end_date BETWEEN kn1.start_date AND kn1.end_date )
								AND kn1.id <> kn2.id';

			$queryd = $conn->prepare($querystr_doc);
			$dropexec = $queryd->execute();
			$droparr_doc = $queryd->fetchAll();

			foreach($droparr_doc as $doc => $value_doc)
			{
				$user_visits_details[$value_doc['create_user']][] = $value_doc;
			}
			/* ------------------------------------  Get KVNO nurse visits------------------------------------------ */
			$querystr = 'SELECT kn1.id, kn2.id, kn1.create_user, kn2.create_user, kn1.start_date, kn1.end_date, kn2.start_date, kn2.end_date,kn1.ipid,kn2.ipid
							 FROM `kvno_nurse` kn1, `kvno_nurse` kn2
							 WHERE 1

								AND kn1.create_user IN (' . substr($all_users_str, 0, -1) . ')
								AND kn2.create_user IN (' . substr($all_users_str, 0, -1) . ')

								AND kn1.id NOT IN (' . substr($del_visits['kvno_nurse_form'], 0, -1) . ')
								AND kn1.id NOT IN (' . substr($del_visits['wl_nurse_form'], 0, -1) . ')
								AND kn2.id NOT IN (' . substr($del_visits['kvno_nurse_form'], 0, -1) . ')
								AND kn2.id NOT IN (' . substr($del_visits['wl_nurse_form'], 0, -1) . ')

								AND (' . str_replace('%date%', 'kn1.start_date', $active_cond['date_sql']) . ' )

								AND kn1.create_user = kn2.create_user
								AND (kn2.start_date BETWEEN kn1.start_date AND kn1.end_date OR kn2.end_date BETWEEN kn1.start_date AND kn1.end_date )
								AND kn1.id <> kn2.id';
			$query = $conn->prepare($querystr);
			$dropexec = $query->execute();
			$droparr = $query->fetchAll();

			foreach($droparr as $nurse => $value_nurse)
			{
				$user_visits_details[$value_nurse['create_user']][] = $value_nurse;
			}
			/* ------------------------------------  Get KVNO koordination visits------------------------------------------ */
			$querystr_k = 'SELECT kn1.id, kn2.id, kn1.create_user, kn2.create_user, kn1.start_date, kn1.end_date, kn2.start_date, kn2.end_date,kn1.ipid,kn2.ipid
							 FROM `visit_koordination` kn1, `visit_koordination` kn2
							 WHERE 1
								AND kn1.id NOT IN (' . substr($del_visits['visit_koordination_form'], 0, -1) . ')
								AND kn2.id NOT IN (' . substr($del_visits['visit_koordination_form'], 0, -1) . ')

								AND kn1.create_user IN (' . substr($all_users_str, 0, -1) . ')
								AND kn2.create_user IN (' . substr($all_users_str, 0, -1) . ')

								AND (' . str_replace('%date%', 'kn1.start_date', $active_cond['date_sql']) . ' )

								AND kn1.create_user = kn2.create_user
								AND (kn2.start_date BETWEEN kn1.start_date AND kn1.end_date OR kn2.end_date BETWEEN kn1.start_date AND kn1.end_date )
								AND kn1.id <> kn2.id';
			$queryk = $conn->prepare($querystr_k);
			$dropexec = $queryk->execute();
			$droparr_k = $queryk->fetchAll();

			foreach($droparr_k as $k => $value_k)
			{
				$user_visits_details[$value_k['create_user']][] = $value_k;
			}
			/* ------------------------------------  Get Bayern doctor visits------------------------------------------ */
			$querystr_b = 'SELECT kn1.id, kn2.id, kn1.create_user, kn2.create_user, kn1.start_date, kn1.end_date, kn2.start_date, kn2.end_date,kn1.ipid,kn2.ipid
							 FROM `bayern_doctor_visit` kn1, `bayern_doctor_visit` kn2
							 WHERE 1
								AND kn1.id <> kn2.id
								AND kn1.id NOT IN (' . substr($del_visits['bayern_doctorvisit'], 0, -1) . ')
								AND kn2.id NOT IN (' . substr($del_visits['bayern_doctorvisit'], 0, -1) . ')
								AND kn1.create_user IN (' . substr($all_users_str, 0, -1) . ')
								AND (' . str_replace('%date%', 'kn1.start_date', $active_cond['date_sql']) . ' )
								AND (kn2.start_date BETWEEN kn1.start_date AND kn1.end_date OR kn2.end_date BETWEEN kn1.start_date AND kn1.end_date )
								AND kn1.create_user = kn2.create_user
								';

			$queryb = $conn->prepare($querystr_b);
			$dropexec = $queryb->execute();
			$droparr_b = $queryb->fetchAll();

			foreach($droparr_b as $b => $value_b)
			{
				$user_visits_details[$value_b['create_user']][] = $value_b;
			}

			/* ------------------------------------  Get Contact form ------------------------------------------ */
			$querystr_b = 'SELECT kn1.id, kn2.id, kn1.create_user, kn2.create_user, kn1.start_date, kn1.end_date, kn2.start_date, kn2.end_date,kn1.ipid,kn2.ipid
							 FROM `contact_forms` kn1, `contact_forms` kn2
							 WHERE 1
								AND kn1.id <> kn2.id
								AND kn1.id NOT IN (' . substr($del_visits['contact_form'], 0, -1) . ')
								AND kn2.id NOT IN (' . substr($del_visits['contact_form'], 0, -1) . ')
								AND kn1.create_user IN (' . substr($all_users_str, 0, -1) . ')
								AND (' . str_replace('%date%', 'kn1.start_date', $active_cond['date_sql']) . ' )
								AND (kn2.start_date BETWEEN kn1.start_date AND kn1.end_date OR kn2.end_date BETWEEN kn1.start_date AND kn1.end_date )
								AND kn1.create_user = kn2.create_user
								AND kn1.parent = 0
								AND kn2.parent = 0
								';

			$queryb = $conn->prepare($querystr_b);
			$dropexec = $queryb->execute();
			$droparr_b = $queryb->fetchAll();

			foreach($droparr_b as $b => $value_b)
			{
				$user_visits_details[$value_b['create_user']][] = $value_b;
			}
			/* --------------------------------------------------------------------------------------------------------- */

			if($_REQUEST['visits'] == 1)
			{
				print_r($user_visits_details);
			}

			foreach($user_visits_details as $users => $visit_overalldetails)
			{
				foreach($visit_overalldetails as $kv => $vv)
				{
					$patients_visits[] = $vv['ipid']; //get all patients WITH visits;
				}
			}

			$patients_visits = array_unique($patients_visits);
			if(empty($patients_visits))
			{
				$patients_visits['9999999999'] = '0000';
			}

			/* ----------------------------- Patient details---------------------------------------- */
			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $patients_visits)
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$ipidarray = $patient->fetchArray();

			foreach($ipidarray as $key => $pat_values)
			{
				$patient_details[$pat_values['ipid']] = $pat_values;
			}
			$pm = new PatientMaster();
			/* ----------------------------- Display all data ---------------------------------------- */
			$visit_nr = 0;
			$total_time = 0;
			$treatedcnt = 0;
			foreach($all_users as $user)
			{

				unset($user_visits);
				foreach($user_visits_details[$user] as $k_vis => $v_vis)
				{
					if(!in_array($v_vis['id'], $user_visits))
					{
						$MasterData['data'][$user]['username'] = $user_details[$v_vis['create_user']]['username'];
						$MasterData['data'][$user]['visit'][$k_vis]['visit_date'] = date('H:i', strtotime($v_vis['start_date'])) . '-' . date('H:i', strtotime($v_vis['end_date'])) . '  ' . date('d.m.Y', strtotime($v_vis['start_date']));
						$MasterData['data'][$user]['visit'][$k_vis]['epid'] = $patient_details[$v_vis['ipid']]['EpidIpidMapping']['epid'];
						$MasterData['data'][$user]['visit'][$k_vis]['patient_lastname'] = $patient_details[$v_vis['ipid']]['last_name'];
						$MasterData['data'][$user]['visit'][$k_vis]['patient_firstname'] = $patient_details[$v_vis['ipid']]['first_name'];

						$visit_nr++;
					}
					$user_visits[] = $v_vis['id'];
				}
			}
			return $MasterData;
		}

		public function actions_per_valid_vv_day_new($params)
		{
			// report_id = 162 - NOT USED
			// report_name =  Kontakte / Tag
			// This report looks for "contacts" to the patient WHILE BEING ACTIVE AND HAVING A VALID VOLLVERSORGUNG.
			// "Anzahl Kontakte durch alle Leistungserbringer " (Contacts of all users. Contact is VISIT, XT & U) overall ammount
			// "Anzahl Kontakte durch alle Leistungserbringer, außerhalb der üblichen Arbeitszeit 8.00 - 18.00 Uhr" ammount of these contacts which are between 18.00 and 8.00. so to times which are not normal
			// "Anzahl persönliche Kontakte" overall ammount of ONLY visits
			// "Anzahl persönliche Kontakte durch Pflegepersonen" overall ammount of VISITS which are done by group PFLEGE
			// "Anzahl Kontakte durch Arzt" overall ammount of CONTACTS (visit, XT & U) done by DOCTORS (Arzt)
			// "Anzahl persönliche Kontakte durch Arzt" overall ammount of VISITS which are done by group DOCTORS (Arzt)
			// "Anzahl Patiententage" overall ammount of days which are taken into consideration (means active and valid Vollversorgung)

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$patientMaster = new PatientMaster();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
// 			$report_period_array[$keyd]['end'] = date ( "Y-m-d", strtotime ( $period ['end'] [$keyd] ) );
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$ipidarr = array_keys($active_patient_details); // return ipids
			##################################################
			/* --------------------------- Get Report period days list ---------------------------------- */
			$pm = new PatientMaster ();
			foreach($period ['start'] as $keyd => $startDate)
			{
				$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* --------------------------- Get all sapv days of patients ---------------------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->andWhere('isdelete=0 and ((' . str_replace($s, $r, $active_cond ['interval_sql']) . '))')
				->andwhere('verordnet = "4"')
				->andWhereIn('ipid', $ipidarr)
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();

			foreach($sapvarr as $keys => $sapv)
			{
				if(!in_array($sapv['ipid'], $sapv_patients))
				{
					$sapv_patients[] = $sapv['ipid'];
				}
			}

			foreach($active_patient_details as $ipid => $p_details)
			{
			    if(in_array($p_details['details']['ipid'],$sapv_patients)){
    				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
    				$patient_days [$p_details['details'] ['ipid']]['epid'] = $p_details['details'] ['epid'];
    				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
    				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
    				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
    				$patient_days [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
    				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
    				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
    				$patient_days  [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
    				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];
    				$patientDetails [$p_details['details'] ['ipid']]['treatment_days'] = $p_details['treatment_days'];
    				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
    				$final_ipids[] = $ipid;
			    }
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}


			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{
			    if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00' && strtotime($sapv['verorddisabledate']) <= strtotime($sapv['verordnungbis']))
			    {
			        $sapv ['verordnungbis'] = date('Y-m-d', strtotime($sapv['verorddisabledate']));
			    }
			    
				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}

			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{

						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['treatment_days'])  // active day
							&& !in_array($daysapv, $patientDetails [$ipid] ['sapv_active_days']) // does not exist already in array
						)
						{
							$patientDetails [$ipid] ['sapv_active_days'] [] = $daysapv;
							$patient_days [$ipid] ['sapv_active_days'] [] = $daysapv;
						}

						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['treatment_days'])  // active day
							&& !in_array($daysapv, $overall_amount[$ipid]) // does not exist already in array
						)
						{
							$overall_amount[$ipid][] = $daysapv;
							$overall_days_ammount[] = $daysapv;
						}
					}
				}
			}
			##########################################

			/* ----------------------------------------------------------------------------------------- */
			$usergroup = new Usergroup();
			$doctor_groups = array("4", "9"); // Arzt & Hausarzt
			$pflege_groups = array("5"); // Pflege
			$doctor_group_ids = $usergroup->getUserGroups($doctor_groups);
			$pflege_group_ids = $usergroup->getUserGroups($pflege_groups);

			foreach($doctor_group_ids as $key => $value)
			{
				$doctor_group_id_array[] = $value['id'];
			}

			foreach($pflege_group_ids as $keyp => $valuep)
			{
				$pflege_group_id_array[] = $valuep['id'];
			}

			$usermod = new User();
			$doc_user_array = $usermod->getuserbyGroupId($doctor_group_id_array, $clientid);
			$pflege_user_array = $usermod->getuserbyGroupId($pflege_group_id_array, $clientid);

			foreach($doc_user_array as $ku => $vu)
			{
				$users_array['doctors'][] = $vu['id'];
			}
			foreach($pflege_user_array as $kp => $vp)
			{
				$users_array['nurse'][] = $vp['id'];
			}
			/* ----------------------------------------------------------------------------------------- */
			/* ----------------------------------------------------------------------------------------- */
			/* ------------------------------------  Get DELETED visits------------------------------------------ */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_doctor_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_nurse_form")) . '"   OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("bayern_doctorvisit")) . '"  ')
				->andWhereIn('ipid', $final_ipids);

			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = 'XXXX';
			$del_visits['kvno_nurse_form'][] = 'XXXX';
			$del_visits['wl_doctor_form'][] = 'XXXX';
			$del_visits['wl_nurse_form'][] = 'XXXX';
			$del_visits['visit_koordination_form'][] = 'XXXX';
			$del_visits['bayern_doctorvisit'][] = 'XXXX';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}
			/* ----------------------------------------------------------------------------------------- */

			/* ----------------------------------------------------------------------------------------- */
			$actions['master_actions']['overall']['count'] = 0; // array for all actions
			$actions['master_actions']['overall']['night_interval'] = 0; // all night interval actions
			$actions['master_actions']['overall']['doctor'] = 0; // all actions made by doctor
			$actions['master_actions']['overall']['all_visits'] = 0;
			/* ----------------------------------------------------------------------------------------- */
			/* ------------------------Get all "U and XT" details from patients----------------------------------- */
			$previleges = new Modules();
			$modulepriv = $previleges->checkModulePrivileges("55", $logininfo->clientid);

			if($modulepriv)
			{
				$lnrquery = " OR AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT'";
			}
			else
			{
				$lnrquery = "";
			}

			$course = Doctrine_Query::create()
				->select("ipid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title,create_user,	done_date,date(done_date) as done_day,")
				->from('PatientCourse')
				->whereIn('ipid', $final_ipids)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U' " . $lnrquery . "")
				->andWhere('(' . str_replace('%date%', 'done_date', $active_cond['date_sql']) . ' )	')
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('done_date ASC');
			$course_array = $course->fetchArray();

			foreach($course_array as $k => $vc)
			{
				$coursearr[$vc['id']] = explode("|", $vc['course_title']);
				$u_done_date[$vc['id']] = date('Y-m-d H:i:s', strtotime(end($coursearr[$vc['id']])));
				$u_done_min[$vc['id']] = date('H:i:s', strtotime(end($coursearr[$vc['id']])));
				$u_done_day[$vc['id']] = date('Y-m-d', strtotime(end($coursearr[$vc['id']])));

				if($u_done_date[$vc['id']] != "1970-01-01 02:00:00" && $u_done_date[$vc['id']] != "0000-00-00 00:00:00")
				{
					if($u_done_min[$vc['id']] != "00:00:00")
					{
						$course_done_date = $u_done_date[$vc['id']];
					}
					else
					{
						$course_done_date = $u_done_day[$vc['id']] . ' ' . date('H:i:s', strtotime($vc['done_date']));
					}
					$course_done_day = $u_done_day[$vc['id']];
				}
				else
				{
					$course_done_date = $vc['done_date'];
					$course_done_day = $vc['done_day'];
				}

				$curent_visit_begin_date = strtotime($course_done_date);
				$check_end_date = $course_done_day . " 08:00:00";
				$check_end_date = strtotime($check_end_date);

				if($curent_visit_begin_date < $check_end_date)
				{
					$start_date_6PM8AM = date('d.m.Y', strtotime('-1 day', strtotime($course_done_day))) . " 18:00:01";
					$end_date_6PM8AM = $course_done_day . " 08:00:00";
				}
				else
				{
					$start_date_6PM8AM = $course_done_day . " 18:00:01";
					$end_date_6PM8AM = date('d.m.Y', strtotime('+1 day', strtotime($course_done_day))) . " 08:00:00";
				}

				$int_6PM8AM[$vc['ipid']]['start'] = date('Y-m-d H:i:s', strtotime($start_date_6PM8AM));
				$int_6PM8AM[$vc['ipid']]['end'] = date('Y-m-d H:i:s', strtotime($end_date_6PM8AM));
				$int_6PM8AM[$vc['ipid']]['check_course'] = $course_done_date;


// 			if(in_array($course_done_day ,$patientDetails [$vc['ipid']] ['sapvtage_list']) ){
				if(in_array($course_done_day, $patientDetails [$vc['ipid']] ['sapv_active_days']))
				{

					$actions['master_actions']['overall']['count'] += 1;

					$patient_actions[$vc['ipid']]['all_actions']['count'] += 1;
					$patient_actions[$vc['ipid']]['course_actions']['count']['all'] +=1;

					// Check if action it is between 18.00 - 08.00
					if(Pms_CommonData::isintersected(strtotime($int_6PM8AM[$vc['ipid']]['start']), strtotime($int_6PM8AM[$vc['ipid']]['end']), strtotime($course_done_date), strtotime($course_done_date)))
					{
						$actions['master_actions']['overall']['night_interval'] += 1;
						$patient_actions[$vc['ipid']]['all_actions']['night_interval'] += 1;

						$actions['master_actions']['course_actions']['count']['night_interval'] +=1;
						$patient_actions[$vc['ipid']]['course_actions']['count']['night_interval'] += 1;
					}
					else
					{
						$actions['master_actions']['course_actions']['count']['normal_interval'] +=1;
						$patient_actions[$vc['ipid']]['course_actions']['count']['normal_interval'] += 1;
					}

					if(in_array($vc['create_user'], $users_array['doctors']))
					{ // Doctors actions
						$actions['master_actions']['course_actions']['doctor']['count'] += 1;
						$actions['master_actions']['overall']['doctor'] += 1;
						$patient_actions[$vc['ipid']]['course_actions']['count']['doctor'] +=1;
					}
					else if(in_array($vc['create_user'], $users_array['nurse']))
					{ // Nurse actions
						$actions['master_actions']['course_actions']['nurse']['count'] += 1;
						$patient_actions[$vc['ipid']]['course_actions']['count']['nurse'] +=1;
					}
					else
					{ //Other users actions
						$actions['master_actions']['course_actions']['other']['count'] += 1;
						$patient_actions[$vc['ipid']]['course_actions']['count']['other'] +=1;
					}
				}
			}
			/* ----------------------------------------------------------------------------------------- */
			/* ----------------------------------------------------------------------------------------- */
			/* ----------------------------------------------------------------------------------------- */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("id, ipid, start_date, end_date, date(start_date) as visit_day,  create_user")
				->from("KvnoDoctor")
				->whereIn('ipid', $final_ipids)
				->andWhereNotIn('id', $del_visits['kvno_doctor_form'])
				->andWhereNotIn('id', $del_visits['wl_doctor_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_doc_visits = $kvno_doctor_visits->fetchArray();

			foreach($kvno_doc_visits as $kdv => $vdv)
			{
				$curent_visit_begin_date = strtotime($vdv['start_date']);
				$check_end_date = $vdv['visit_day'] . " 08:00:00";
				$check_end_date = strtotime($check_end_date);

				if($curent_visit_begin_date < $check_end_date)
				{
					$start_date_6PM8AM = date('d.m.Y', strtotime('-1 day', strtotime($vdv['visit_day']))) . " 18:00:01";
					$end_date_6PM8AM = $vdv['visit_day'] . " 08:00:00";
				}
				else
				{
					$start_date_6PM8AM = $vdv['visit_day'] . " 18:00:01";
					$end_date_6PM8AM = date('d.m.Y', strtotime('+1 day', strtotime($vdv['visit_day']))) . " 08:00:00";
				}

				$int_6PM8AM[$vdv['ipid']][$vdv['id']]['start'] = date('Y-m-d H:i:s', strtotime($start_date_6PM8AM));
				$int_6PM8AM[$vdv['ipid']][$vdv['id']]['end'] = date('Y-m-d H:i:s', strtotime($end_date_6PM8AM));

// 			if(in_array($vdv['visit_day'],$patientDetails [$vdv['ipid']] ['sapvtage_list']) ){
				if(in_array($vdv['visit_day'], $patientDetails [$vdv['ipid']] ['sapv_active_days']))
				{

					$actions['master_actions']['overall']['count'] += 1; // add all visits to the action overall count
					$actions['master_actions']['overall']['all_visits'] += 1;

					if($_REQUEST['details'] == 1)
					{
						$actions['master_actions']['visits']['doctor']['visit_details'][] = $vdv;
						$patient_actions[$vdv['ipid']]['doctor_visits']['visit_details'][] = $vdv;
					}

					$patient_actions[$vdv['ipid']]['all_actions']['count'] += 1;
					$patient_actions[$vdv['ipid']]['all_actions']['visits'] += 1;

					$actions['master_actions']['overall']['doctor'] += 1;

					$actions['master_actions']['visits']['doctor']['count']['all'] += 1; // all visits that are in valid sapv days that were made by doctor
					$patient_actions[$vdv['ipid']]['doctor_visits']['count']['all'] +=1;

					// Check if visit is  between 18.00 - 08.00
					if(Pms_CommonData::isintersected(strtotime($int_6PM8AM[$vdv['ipid']][$vdv['id']]['start']), strtotime($int_6PM8AM[$vdv['ipid']][$vdv['id']]['end']), strtotime($vdv['start_date']), strtotime($vdv['end_date'])))
					{
						$actions['master_actions']['overall']['night_interval'] += 1;
						$patient_actions[$vdv['ipid']]['all_actions']['night_interval'] += 1;

						$actions['master_actions']['visits']['doctor']['count']['night_interval'] +=1;
						$patient_actions[$vdv['ipid']]['doctor_visits']['count']['night_interval'] +=1;
					}
					else
					{
						$actions['master_actions']['visits']['doctor']['count']['normal_interval'] +=1;
						$patient_actions[$vdv['ipid']]['doctor_visits']['count']['normal_interval'] +=1;
					}
				}
			}

			/* ----------------------------------------------------------------------------------------- */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("id, ipid, start_date, end_date, date(start_date) as visit_day,  create_user")
				->from("KvnoNurse")
				->whereIn('ipid', $final_ipids)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhereNotIn('id', $del_visits['wl_nurse_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_nur_visits = $kvno_nurse_visits->fetchArray();


			foreach($kvno_nur_visits as $knv => $vnv)
			{
				$curent_visit_begin_date = strtotime($vnv['start_date']);
				$check_end_date = $vnv['visit_day'] . " 08:00:00";
				$check_end_date = strtotime($check_end_date);

				if($curent_visit_begin_date < $check_end_date)
				{
					$start_date_6PM8AM = date('d.m.Y', strtotime('-1 day', strtotime($vnv['visit_day']))) . " 18:00:01";
					$end_date_6PM8AM = $vnv['visit_day'] . " 08:00:00";
				}
				else
				{
					$start_date_6PM8AM = $vnv['visit_day'] . " 18:00:01";
					$end_date_6PM8AM = date('d.m.Y', strtotime('+1 day', strtotime($vnv['visit_day']))) . " 08:00:00";
				}

				$int_6PM8AM[$vnv['ipid']][$vnv['id']]['start'] = date('Y-m-d H:i:s', strtotime($start_date_6PM8AM));
				$int_6PM8AM[$vnv['ipid']][$vnv['id']]['end'] = date('Y-m-d H:i:s', strtotime($end_date_6PM8AM));


// 			if(in_array($vnv['visit_day'],$patientDetails [$vnv['ipid']] ['sapvtage_list']) ){
				if(in_array($vnv['visit_day'], $patientDetails [$vnv['ipid']] ['sapv_active_days']))
				{

					$actions['master_actions']['overall']['count'] += 1; // add all visits to the action overall count
					$actions['master_actions']['overall']['all_visits'] += 1;


					if($_REQUEST['details'] == 1)
					{
						$actions['master_actions']['visits']['nurse']['visit_details'][] = $vnv;
						$patient_actions[$vnv['ipid']]['nurse_visits']['visit_details'][] = $vnv;
					}

					$patient_actions[$vnv['ipid']]['all_actions']['count'] += 1;
					$patient_actions[$vnv['ipid']]['all_actions']['visits'] += 1;

					$actions['master_actions']['visits']['nurse']['count']['all'] += 1; // all visits that are in valid sapv days that were made by nurse
					$patient_actions[$vnv['ipid']]['nurse_visits']['count']['all'] +=1;

					// Check if visit is  between 18.00 - 08.00
					if(Pms_CommonData::isintersected(strtotime($int_6PM8AM[$vnv['ipid']][$vnv['id']]['start']), strtotime($int_6PM8AM[$vnv['ipid']][$vnv['id']]['end']), strtotime($vnv['start_date']), strtotime($vnv['end_date'])))
					{
						$actions['master_actions']['overall']['night_interval'] += 1;
						$patient_actions[$vnv['ipid']]['all_actions']['night_interval'] += 1;

						$actions['master_actions']['visits']['nurse']['count']['night_interval'] +=1;
						$patient_actions[$vnv['ipid']]['nurse_visits']['count']['night_interval'] +=1;
					}
					else
					{
						$actions['master_actions']['visits']['nurse']['count']['normal_interval'] +=1;
						$patient_actions[$vnv['ipid']]['nurse_visits']['count']['normal_interval'] +=1;
					}
				}
			}

			/* ----------------------------------------------------------------------------------------- */
			$koordinator_visitsq = Doctrine_Query::create()
				->select("id, ipid, start_date, end_date, date(start_date) as visit_day,  create_user")
				->from("VisitKoordination")
				->whereIn('ipid', $final_ipids)
				->andWhereNotIn('id', $del_visits['visit_koordination_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$koordinator_visits = $koordinator_visitsq->fetchArray();

			foreach($koordinator_visits as $kko => $vko)
			{
				$curent_visit_begin_date = strtotime($vko['start_date']);
				$check_end_date = $vko['visit_day'] . " 08:00:00";
				$check_end_date = strtotime($check_end_date);

				if($curent_visit_begin_date < $check_end_date)
				{
					$start_date_6PM8AM = date('d.m.Y', strtotime('-1 day', strtotime($vko['visit_day']))) . " 18:00:01";
					$end_date_6PM8AM = $vko['visit_day'] . " 08:00:00";
				}
				else
				{
					$start_date_6PM8AM = $vko['visit_day'] . " 18:00:01";
					$end_date_6PM8AM = date('d.m.Y', strtotime('+1 day', strtotime($vko['visit_day']))) . " 08:00:00";
				}

				$int_6PM8AM[$vko['ipid']][$vko['id']]['start'] = date('Y-m-d H:i:s', strtotime($start_date_6PM8AM));
				$int_6PM8AM[$vko['ipid']][$vko['id']]['end'] = date('Y-m-d H:i:s', strtotime($end_date_6PM8AM));


// 			if(in_array($vko['visit_day'],$patientDetails [$vko['ipid']] ['sapvtage_list']) ){
				if(in_array($vko['visit_day'], $patientDetails [$vko['ipid']] ['sapv_active_days']))
				{

					$actions['master_actions']['overall']['count'] += 1; // add all visits to the action overall count
					$actions['master_actions']['overall']['all_visits'] += 1;

					if($_REQUEST['details'] == 1)
					{
						$actions['master_actions']['visits']['coordinator']['visit_details'][] = $vko;
						$patient_actions[$vko['ipid']]['coordinator_visits']['visit_details'][] = $vko;
					}

					$patient_actions[$vko['ipid']]['all_actions']['count'] += 1;
					$patient_actions[$vko['ipid']]['all_actions']['visits'] += 1;

					$actions['master_actions']['visits']['coordinator']['count']['all'] += 1; // all visits that are in valid sapv days that were made by coordinator
					$patient_actions[$vko['ipid']]['coordinator_visits']['count']['all'] +=1;

					// Check if visit is  between 18.00 - 08.00
					if(Pms_CommonData::isintersected(strtotime($int_6PM8AM[$vko['ipid']][$vko['id']]['start']), strtotime($int_6PM8AM[$vko['ipid']][$vko['id']]['end']), strtotime($vko['start_date']), strtotime($vko['end_date'])))
					{
						$actions['master_actions']['overall']['night_interval'] += 1;
						$patient_actions[$vko['ipid']]['all_actions']['night_interval'] += 1;

						$actions['master_actions']['visits']['coordinator']['count']['night_interval'] +=1;
						$patient_actions[$vko['ipid']]['coordinator_visits']['count']['night_interval'] +=1;
					}
					else
					{
						$actions['master_actions']['visits']['coordinator']['count']['normal_interval'] +=1;
						$patient_actions[$vko['ipid']]['coordinator_visits']['count']['normal_interval'] +=1;
					}
				}
			}

			if($_REQUEST['show_details'] == '1')
			{
				print_r($actions);
				print_r("\n Sapv Days in month: \n");
				print_r($overall_amount);
				print_r("\n Actions per patient: \n");
				exit;
			}

			foreach($actions as $action => $action_details)
			{
				$sapv_valid_days = count($overall_days_ammount);
				$overall_sapv_valid_days = count($overall_days_ammount);
				$MasterData ['data'] [1] ['overall_actions'] = $this->view->translate('overall_actions');
				$MasterData ['data'] [1] ['overall_actions_amount'] = $action_details['overall'] ['count'] . ' / ' . round(($action_details['overall']['count'] / $sapv_valid_days), 2);
				$MasterData ['data'] [2] ['overall_night_interval'] = $this->view->translate('overall_night_interval');

				if(!empty($action_details['overall']['night_interval']))
				{
					$MasterData ['data'] [2]['overall_night_interval_details'] = $action_details['overall']['night_interval'] . ' / ' . round($action_details['overall'] ['night_interval'] / $sapv_valid_days, 2);
				}
				else
				{
					$MasterData ['data'] [2]['overall_night_interval_details'] = "0";
				}

				$MasterData ['data'] [3] ['overall_visits'] = $this->view->translate('overall_visits');
				$MasterData ['data'] [3] ['overall_visits_details'] = $action_details['overall']['all_visits'] . ' / ' . round($action_details['overall'] ['all_visits'] / $sapv_valid_days, 2);
				$MasterData ['data'] [4] ['overall_actoverall_nurse_visitsions'] = $this->view->translate('overall_nurse_visits');
				$MasterData ['data'] [4] ['overall_nurse_visits_details'] = $action_details['visits']['nurse']['count']['all'] . ' / ' . round($action_details['visits']['nurse']['count']['all'] / $sapv_valid_days, 2);
				$MasterData ['data'] [5] ['overall_doctor_actions'] = $this->view->translate('overall_doctor_actions');
				$MasterData ['data'] [5] ['overall_doctor_actions_details'] = $action_details['overall'] ['doctor'] . ' / ' . round(($action_details['overall']['doctor'] / $sapv_valid_days), 2);
				$MasterData ['data'] [6] ['overall_doctor_visits'] = $this->view->translate('overall_doctor_visits');
				$MasterData ['data'] [6] ['overall_doctor_visits_details'] = $action_details['visits']['doctor']['count']['all'] . ' / ' . round($action_details['visits']['doctor']['count']['all'] / $sapv_valid_days, 2);
				$MasterData ['data'] [7] ['overall_valid_days'] = $this->view->translate('overall_valid_days');
				$MasterData ['data'] [7] ['overall_valid_days_details'] = $overall_sapv_valid_days;
			}
			return $MasterData;
		}

		public function actions_per_valid_vv_day($params)
		{
			// report_id = 100
			// report_name =  Kontakte / Tag
			// This report looks for "contacts" to the patient WHILE BEING ACTIVE AND HAVING A VALID VOLLVERSORGUNG.
			// "Anzahl Kontakte durch alle Leistungserbringer " (Contacts of all users. Contact is VISIT, XT & U) overall ammount
			// "Anzahl Kontakte durch alle Leistungserbringer, außerhalb der üblichen Arbeitszeit 8.00 - 18.00 Uhr" ammount of these contacts which are between 18.00 and 8.00. so to times which are not normal
			// "Anzahl persönliche Kontakte" overall ammount of ONLY visits
			// "Anzahl persönliche Kontakte durch Pflegepersonen" overall ammount of VISITS which are done by group PFLEGE
			// "Anzahl Kontakte durch Arzt" overall ammount of CONTACTS (visit, XT & U) done by DOCTORS (Arzt)
			// "Anzahl persönliche Kontakte durch Arzt" overall ammount of VISITS which are done by group DOCTORS (Arzt)
			// "Anzahl Patiententage" overall ammount of days which are taken into consideration (means active and valid Vollversorgung)

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}

			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}

			$ipidsarr[] = '99999999999';


			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->andWhere('isdelete=0 and ((' . str_replace($s, $r, $active_cond ['interval_sql']) . '))')
				->andWhereIn('ipid', $ipidarr)
				//->andWhere('status != "1"')
				->andWhere('verordnet = "4"') // only VV
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();

			//SAPV patient data + list days sapv
			$pm = new PatientMaster ();
			$ipids_valid = array();
			foreach($sapvarr as $keys => $sapv)
			{
			    
    			    if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00' && strtotime($sapv['verorddisabledate']) <= strtotime($sapv['verordnungbis']))
    			    {
    			        $sapv ['verordnungbis'] = date('Y-m-d', strtotime($sapv['verorddisabledate']));
    			    }
    				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
				if(!in_array($sapv ['ipid'],$ipids_valid)){
				    $ipids_valid[] = $sapv ['ipid'];
				}
			}

			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						$patientDataPseudo [$ipid] ['sapvDaysListFinal'] [] = $daysapv;
					}
				}
				$patientDataPseudo [$ipid] ['sapvDaysListFinal'] = array_unique($patientDataPseudo [$ipid] ['sapvDaysListFinal']);
				$patientData [$ipid] ['sapvDaysList'] = "";
				$patientData [$ipid] ['sapvDaysList'] = $patientDataPseudo [$ipid] ['sapvDaysListFinal'];
			}

			//Report period days list
			foreach($period ['start'] as $keyd => $startDate)
			{
				$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* -------------------------------- Client hospital and  hospiz locations ----------------------- */
			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere(' location_type = 1  OR location_type = 2 '); // hospital and hospice
			$hosparray = $hospitalids->fetchArray();

			$hospstr = "";
			foreach($hosparray as $hospital)
			{
				$hospstr .= "'" . $hospital ['id'] . "',";
				$hosp_arr[] = $hospital['id'];
			}

			$hosp_arr[] = '99999999999';
			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod ['interval_sql']));

			/* -------------------------------- Patient with hospital and  hospiz locations in report period ----------------------- */
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('location_id', $hosp_arr)
				->andWhere('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('' . $time_interval . '')
				->andWhereIn('ipid', $ipidarr);
			$locationsarr = $locations->fetchArray();

			$patient = Doctrine_Query::create()
				->select("*,e.epid,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipidarr)
				->andwhere('p.isstandby = 0')
				->leftJoin('p.EpidIpidMapping e')
				->andwhere('e.ipid = p.ipid');
			$ipidarray = $patient->fetchArray();

			$dischargedipidstr = "'99999999999'";
			foreach($ipidarray as $patient)
			{
				$patientDetails [$patient ['ipid']] ['epid'] = $patient ['EpidIpidMapping'] ['epid'];
				$patientDetails [$patient ['ipid']] ['surname'] = $patient ['last_name'];
				$patientDetails [$patient ['ipid']] ['firstname'] = $patient ['first_name'];
				$patientDetails [$patient ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($patient ['birthd']));
				$patientDetails [$patient ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($patient ['admission_date']));
				$patient_actions[$patient ['ipid']]['patient_details'] ['epid'] = $patient ['EpidIpidMapping'] ['epid'];
				$patient_actions[$patient ['ipid']]['patient_details'] ['surname'] = $patient ['last_name'];
				$patient_actions[$patient ['ipid']]['patient_details'] ['firstname'] = $patient ['first_name'];
				$patient_actions[$patient ['ipid']]['patient_details'] ['dateofbirth'] = date("d.m.Y", strtotime($patient ['birthd']));
				$patient_actions[$patient ['ipid']]['patient_details'] ['admissiondate'] = date("d.m.Y", strtotime($patient ['admission_date']));

				if($patient ['isdischarged'] == 1)
				{
					$dischargedipidstr .= ",'" . $patient ['ipid'] . "'";
					$dischargedipid_arr[] = $patient['ipid'];
				}
			}

			$dischargedipid_arr[] = '99999999999';

			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "99999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}

			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $dischargedipid_arr)
				->andWhere('isdelete = 0');
			$patientdisarray = $patientdis->fetchArray();

			foreach($patientdisarray as $dischargedPatient)
			{
				if(in_array($dischargedPatient['discharge_method'], $todIds))
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				else
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				$patientDetails [$dischargedPatient ['ipid']] ['dischargedate_final'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
			}

			foreach($locationsarr as $location)
			{
				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$till = end($finalPeriodDays);
						$from = date('Y-m-d', strtotime($location ['valid_from']));

						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
					}
					else
					{
						$till = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
						$from = date('Y-m-d', strtotime($location ['valid_from']));

						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, date('Y-m-d'), false);
					}
				}
				else if(strtotime(date('Y-m-d', strtotime($location['valid_till']))) == strtotime(date('Y-m-d', strtotime($location ['valid_from']))))
				{
					$till = date('Y-m-d', strtotime('+1 day', strtotime($location ['valid_till'])));
					$from = date('Y-m-d', strtotime('-1 day', strtotime($location ['valid_till'])));

					$realfullhospitaldays [$location ['ipid']] [] = date('Y-m-d', strtotime($location ['valid_till']));
				}
				else
				{
					$till = date('Y-m-d', strtotime($location ['valid_till']));
					$from = date('Y-m-d', strtotime($location ['valid_from']));

					$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
				}

				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('+1 day', strtotime($from)));
				$patientData [$location ['ipid']] ['hospitalStartDays'][] = date("Y-m-d", strtotime($location ['valid_from']));
				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('-1 day', strtotime($till)));

				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = end($finalPeriodDays);
					}
					else
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
					}
				}
				else
				{
					$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime($location ['valid_till']));
				}

				$current_hosp_days = array(); //imbecile!
				// check if patient DIED on the discharge day
				if(in_array(date('Y-m-d', strtotime($location['valid_till'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					in_array($patientDetails[$location ['ipid']]['dischargemtd'], $todIds) &&
					!in_array(date('Y-m-d', strtotime($location['valid_from'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					$patientDetails [$location ['ipid']] ['dischargedate_final'] == date('d.m.Y', strtotime($location['valid_till']))
				)
				{
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
					$diedinhospital [$location ['ipid']] = date('Y-m-d', strtotime($location['valid_till']));
					$patientDetails [$location ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime('-1 day', strtotime($patientDetails [$location ['ipid']] ['dischargedate'])));
				}
				else if($location ['valid_till'] == "0000-00-00 00:00:00")
				{ // if patient not discharged - it gets an addistional day at the end
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
				}
				else
				{
					$diedinhospital [$location ['ipid']] = false;
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime('-1 day', strtotime($till))), false);
				}
				$patientData [$location ['ipid']] ['hospitalDaysList'][] = $current_hosp_days;
			}

			foreach($patientData as $ipid => $hospata)
			{
				foreach($hospata ['hospitalDaysList'] as $group => $hdata)
				{
					foreach($hdata as $key => $dayh)
					{
						$patientDataPseudoH [$ipid] ['hospitalDaysList'] [] = $dayh;
					}
				}
				$patientDataPseudoH [$ipid] ['hospitalDaysList'] = array_unique($patientDataPseudoH [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['hospitalDaysList'] = "";
				$patientData [$ipid] ['hospitalDaysList'] = $patientDataPseudoH [$ipid] ['hospitalDaysList'];

				foreach($hospata['hospitalStartDays'] as $k_start_date => $v_start_date)
				{
					if(in_array($v_start_date, $hospata['hospitalEndDays']))
					{
						$patientData [$ipid] ['continuous_hospital'][] = $v_start_date;
						$patientData [$ipid] ['hospitalDaysList'][] = $v_start_date;

						if(array_search($v_start_date, $patientData[$ipid]['sapvDaysList']))
						{
							unset($patientData[$ipid]['sapvDaysList'][array_search($v_start_date, $patientData[$ipid]['sapvDaysList'])]);
						}
					}
				}

				foreach($hospata['hospitalEndDays'] as $k_end_date => $v_end_date)
				{
					if(in_array($patientDetails[$ipid]['dischargemtd'], $todIds) && $patientDetails [$ipid] ['dischargedate_final'] = date('d.m.Y', strtotime($v_end_date)))
					{
						$patientData [$ipid] ['hospitalDaysList'][] = $v_end_date;
					}
				}

				$patientData [$ipid] ['hospitalDaysList'] = array_unique($patientData [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['continuous_hospital'] = array_unique($patientData [$ipid] ['continuous_hospital']);
			}

			$patientTreatmentDays = $pm->getTreatedDaysRealMultiple($ipidarr, false);

			foreach($patientTreatmentDays as $patientTreatmentIpid => $patientTreatmentData)
			{

				if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
					{
						if(count($patientTreatmentData ['admissionDates']) == 0)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						}
						else
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
				{

					if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = $patientTreatmentData ['discharge_date'];
					}

					if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
					else
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
				else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
				{
					foreach($patientTreatmentData ['admissionDates'] as $keyadmission => $admissionvalues)
					{
						if(empty($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']))
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
						}
						else
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($admission));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($discharge));
					}
				}
				else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
					{
						$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));

						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}

				if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])))
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
			}

			foreach($patientDateRange as $treatmentIpid => $range)
			{

				foreach($range as $ktreat => $treatmentarr)
				{

					foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
					{
						$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
					}
				}
			}

			foreach($treatmentDaysArray as $ipidPat => $treatmentDaysArrayF)
			{
				if(count($treatmentDaysArrayF) > 0)
				{
					foreach($treatmentDaysArrayF as $keyt => $treatmentDayValue)
					{
						$finalActiveDaysArray [$ipidPat] ['activedays'][] = array_intersect($treatmentDayValue, $finalPeriodDays);
					}
				}
			}
			foreach($finalActiveDaysArray as $patIpid => $active)
			{
				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							if(in_array($patientDetails[$patIpid]['dischargemtd'], $todIds))
							{ // check if dies is in hospital
								$lastDischargeDate = date("Y-m-d", strtotime($patientDetails [$patIpid] ['dischargedate']));

								if(strtotime($day) <= strtotime($lastDischargeDate))
								{
									$activeDaysFinal[$patIpid][] = $day;
								}
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
							else
							{
								$activeDaysFinal[$patIpid][] = $day;
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
						}
					}
				}
				$activeDaysFinal[$patIpid] = array_unique($activeDaysFinal[$patIpid]);
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{

				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							$activeDaysFinalTotal[$patIpid][] = $day;
						}
					}
				}
				$activeDaysFinalTotal[$patIpid] = array_unique($activeDaysFinalTotal[$patIpid]);
			}


			foreach($patientData as $patientIpid => $patientDates)
			{
				$disthospdays[$patientIpid] = array();

				foreach($realfullhospitaldays[$patientIpid] as $realfullhospitaldays_per)
				{
					$disthospdays[$patientIpid] = array_merge($disthospdays[$patientIpid], (array) $realfullhospitaldays_per);
				}

				array_unique($disthospdays[$patientIpid]);
				array_unique($finalPeriodDays);
				array_unique($patientDates['sapvDaysList']);
				array_unique($activeDaysFinal[$patientIpid]);
				array_unique($patientDates['hospitalDaysList']);
				$sapv_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $patientDates['sapvDaysList']);

				$activ_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $activeDaysFinal[$patientIpid]);

				$sapv_activ_in_perioada[$patientIpid] = array_intersect($activ_in_perioada[$patientIpid], $sapv_in_perioada[$patientIpid]);

				foreach($sapv_activ_in_perioada[$patientIpid] as $sapvActiveDay)
				{
					if(!in_array($sapvActiveDay, $patientDates['hospitalDaysList']))
					{
						$finalDays [$patientIpid]['FinalCountDays'][] = $sapvActiveDay;
					}
				}
				array_unique($finalDays [$patientIpid]['FinalCountDays']);

				if(!is_array($finalDays [$patientIpid]['FinalCountDays']))
				{
					$finalDays [$patientIpid]['FinalCountDays'] = array();
				}

				$disthospdayz[$patientIpid] = array_diff($disthospdays[$patientIpid], $finalDays [$patientIpid]['FinalCountDays']);

				$daysofhostpitalinperiod[$patientIpid] = array_intersect($disthospdayz[$patientIpid], $activ_in_perioada[$patientIpid]);
			}

			//final sapv tags and days of treatment
			foreach($patientDetails as $ipidPatient => $patientDataValue)
			{
			    $overall_sapv_days [] = $finalDays [$ipidPatient] ['FinalCountDays'];
                if($finalDays [$ipidPatient] ['FinalCountDays']){
    				$overall_amount_sapv_days [$ipidPatient][] = $finalDays [$ipidPatient] ['FinalCountDays'];
                }
				$patientDetails [$ipidPatient] ['sapvtage_list'] = $finalDays [$ipidPatient] ['FinalCountDays'];
				$patientDetails [$ipidPatient] ['sapvtage'] = sizeof($finalDays [$ipidPatient] ['FinalCountDays']);
				$patient_actions [$ipidPatient] ['sapvtage'] = sizeof($finalDays [$ipidPatient] ['FinalCountDays']);
				$patient_actions [$ipidPatient] ['sapvtage_list'] = $finalDays [$ipidPatient] ['FinalCountDays'];
				$patientDetails [$ipidPatient] ['daysoftreatment'] = sizeof($activeDaysFinalTotal[$ipidPatient]);
				$final_ipids[] = $ipidPatient;
			}

			if($_REQUEST['dbg']=="sapv"){
			    print_r("\n overall sapv days in period \n "); 
			    print_r($overall_amount_sapv_days); 
			    exit;
			}
			$overall_patient_days = 0;
            foreach($overall_amount_sapv_days as $ks_ipid => $posd)
            {
                foreach($posd as $dk => $odays){
                    $overall_patient_days  += sizeof($odays);
                }
            }
			
			foreach($overall_sapv_days as $ks => $vs)
			{

				foreach($vs as $kd => $sday)
				{
					$overall_amount[] = $sday;
				}
			}
			$overall_amount = array_unique($overall_amount);
			asort($overall_amount);

			if(empty($final_ipids))
			{
				$final_ipids[] = "XXXXX";
			}
			/* ----------------------------------------------------------------------------------------- */
			$usergroup = new Usergroup();
			$doctor_groups = array("4", "9"); // Arzt & Hausarzt
			$pflege_groups = array("5"); // Pflege
			$doctor_group_ids = $usergroup->getUserGroups($doctor_groups);
			$pflege_group_ids = $usergroup->getUserGroups($pflege_groups);

			foreach($doctor_group_ids as $key => $value)
			{
				$doctor_group_id_array[] = $value['id'];
			}

			foreach($pflege_group_ids as $keyp => $valuep)
			{
				$pflege_group_id_array[] = $valuep['id'];
			}

			$usermod = new User();
			$doc_user_array = $usermod->getuserbyGroupId($doctor_group_id_array, $clientid);
			$pflege_user_array = $usermod->getuserbyGroupId($pflege_group_id_array, $clientid);

			foreach($doc_user_array as $ku => $vu)
			{
				$users_array['doctors'][] = $vu['id'];
			}
			foreach($pflege_user_array as $kp => $vp)
			{
				$users_array['nurse'][] = $vp['id'];
			}
			/* ----------------------------------------------------------------------------------------- */
			/* ----------------------------------------------------------------------------------------- */
			/* ------------------------------------  Get DELETED visits------------------------------------------ */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_doctor_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_nurse_form")) . '"   OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("bayern_doctorvisit")) . '"  ')
				->andWhereIn('ipid', $final_ipids);

			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = 'XXXX';
			$del_visits['kvno_nurse_form'][] = 'XXXX';
			$del_visits['wl_doctor_form'][] = 'XXXX';
			$del_visits['wl_nurse_form'][] = 'XXXX';
			$del_visits['visit_koordination_form'][] = 'XXXX';
			$del_visits['bayern_doctorvisit'][] = 'XXXX';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}
			/* ----------------------------------------------------------------------------------------- */

			/* ----------------------------------------------------------------------------------------- */
			$actions['master_actions']['overall']['count'] = 0; // array for all actions
			$actions['master_actions']['overall']['night_interval'] = 0; // all night interval actions
			$actions['master_actions']['overall']['doctor'] = 0; // all actions made by doctor
			$actions['master_actions']['overall']['all_visits'] = 0;
			/* ----------------------------------------------------------------------------------------- */
			/* ------------------------Get all "U and XT" details from patients----------------------------------- */
			$previleges = new Modules();
			$modulepriv = $previleges->checkModulePrivileges("55", $logininfo->clientid);

			if($modulepriv)
			{
				$lnrquery = " OR AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT'";
			}
			else
			{
				$lnrquery = "";
			}

			$course = Doctrine_Query::create()
				->select("ipid, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title,create_user,	done_date,date(done_date) as done_day,")
				->from('PatientCourse')
				->whereIn('ipid', $final_ipids)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U' " . $lnrquery . "")
				->andWhere('(' . str_replace('%date%', 'done_date', $active_cond['date_sql']) . ' )	')
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->orderBy('done_date ASC');
			$course_array = $course->fetchArray();

			foreach($course_array as $k => $vc)
			{
				$coursearr[$vc['id']] = explode("|", $vc['course_title']);
				$u_done_date[$vc['id']] = date('Y-m-d H:i:s', strtotime(end($coursearr[$vc['id']])));
				$u_done_min[$vc['id']] = date('H:i:s', strtotime(end($coursearr[$vc['id']])));
				$u_done_day[$vc['id']] = date('Y-m-d', strtotime(end($coursearr[$vc['id']])));

				if($u_done_date[$vc['id']] != "1970-01-01 02:00:00" && $u_done_date[$vc['id']] != "0000-00-00 00:00:00")
				{
					if($u_done_min[$vc['id']] != "00:00:00")
					{
						$course_done_date = $u_done_date[$vc['id']];
					}
					else
					{
						$course_done_date = $u_done_day[$vc['id']] . ' ' . date('H:i:s', strtotime($vc['done_date']));
					}
					$course_done_day = $u_done_day[$vc['id']];
				}
				else
				{
					$course_done_date = $vc['done_date'];
					$course_done_day = $vc['done_day'];
				}

				$curent_visit_begin_date = strtotime($course_done_date);
				$check_end_date = $course_done_day . " 08:00:00";
				$check_end_date = strtotime($check_end_date);

				if($curent_visit_begin_date < $check_end_date)
				{
					$start_date_6PM8AM = date('d.m.Y', strtotime('-1 day', strtotime($course_done_day))) . " 18:00:01";
					$end_date_6PM8AM = $course_done_day . " 08:00:00";
				}
				else
				{
					$start_date_6PM8AM = $course_done_day . " 18:00:01";
					$end_date_6PM8AM = date('d.m.Y', strtotime('+1 day', strtotime($course_done_day))) . " 08:00:00";
				}

				$int_6PM8AM[$vc['ipid']]['start'] = date('Y-m-d H:i:s', strtotime($start_date_6PM8AM));
				$int_6PM8AM[$vc['ipid']]['end'] = date('Y-m-d H:i:s', strtotime($end_date_6PM8AM));
				$int_6PM8AM[$vc['ipid']]['check_course'] = $course_done_date;


				if(in_array($course_done_day, $patientDetails [$vc['ipid']] ['sapvtage_list']))
				{

					$actions['master_actions']['overall']['count'] += 1;

					$patient_actions[$vc['ipid']]['all_actions']['count'] += 1;
					$patient_actions[$vc['ipid']]['course_actions']['count']['all'] +=1;

					// Check if action it is between 18.00 - 08.00
					if(Pms_CommonData::isintersected(strtotime($int_6PM8AM[$vc['ipid']]['start']), strtotime($int_6PM8AM[$vc['ipid']]['end']), strtotime($course_done_date), strtotime($course_done_date)))
					{
						$actions['master_actions']['overall']['night_interval'] += 1;
						$patient_actions[$vc['ipid']]['all_actions']['night_interval'] += 1;

						$actions['master_actions']['course_actions']['count']['night_interval'] +=1;
						$patient_actions[$vc['ipid']]['course_actions']['count']['night_interval'] += 1;
					}
					else
					{
						$actions['master_actions']['course_actions']['count']['normal_interval'] +=1;
						$patient_actions[$vc['ipid']]['course_actions']['count']['normal_interval'] += 1;
					}

					if(in_array($vc['create_user'], $users_array['doctors']))
					{ // Doctors actions
						$actions['master_actions']['course_actions']['doctor']['count'] += 1;
						$actions['master_actions']['overall']['doctor'] += 1;
						$patient_actions[$vc['ipid']]['course_actions']['count']['doctor'] +=1;
					}
					else if(in_array($vc['create_user'], $users_array['nurse']))
					{ // Nurse actions
						$actions['master_actions']['course_actions']['nurse']['count'] += 1;
						$patient_actions[$vc['ipid']]['course_actions']['count']['nurse'] +=1;
					}
					else
					{ //Other users actions
						$actions['master_actions']['course_actions']['other']['count'] += 1;
						$patient_actions[$vc['ipid']]['course_actions']['count']['other'] +=1;
					}
				}
			}
			/* ----------------------------------------------------------------------------------------- */
			/* ----------------------------------------------------------------------------------------- */
			/* ----------------------------------------------------------------------------------------- */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("id, ipid, start_date, end_date, date(start_date) as visit_day,  create_user")
				->from("KvnoDoctor")
				->whereIn('ipid', $final_ipids)
				->andWhereNotIn('id', $del_visits['kvno_doctor_form'])
				->andWhereNotIn('id', $del_visits['wl_doctor_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_doc_visits = $kvno_doctor_visits->fetchArray();

			foreach($kvno_doc_visits as $kdv => $vdv)
			{
				$curent_visit_begin_date = strtotime($vdv['start_date']);
				$check_end_date = $vdv['visit_day'] . " 08:00:00";
				$check_end_date = strtotime($check_end_date);

				if($curent_visit_begin_date < $check_end_date)
				{
					$start_date_6PM8AM = date('d.m.Y', strtotime('-1 day', strtotime($vdv['visit_day']))) . " 18:00:01";
					$end_date_6PM8AM = $vdv['visit_day'] . " 08:00:00";
				}
				else
				{
					$start_date_6PM8AM = $vdv['visit_day'] . " 18:00:01";
					$end_date_6PM8AM = date('d.m.Y', strtotime('+1 day', strtotime($vdv['visit_day']))) . " 08:00:00";
				}

				$int_6PM8AM[$vdv['ipid']][$vdv['id']]['start'] = date('Y-m-d H:i:s', strtotime($start_date_6PM8AM));
				$int_6PM8AM[$vdv['ipid']][$vdv['id']]['end'] = date('Y-m-d H:i:s', strtotime($end_date_6PM8AM));

				if(in_array($vdv['visit_day'], $patientDetails [$vdv['ipid']] ['sapvtage_list']))
				{
					$actions['master_actions']['overall']['count'] += 1; // add all visits to the action overall count
					$actions['master_actions']['overall']['all_visits'] += 1;

					if($_REQUEST['details'] == 1)
					{
						$actions['master_actions']['visits']['doctor']['visit_details'][] = $vdv;
						$patient_actions[$vdv['ipid']]['doctor_visits']['visit_details'][] = $vdv;
					}

					$patient_actions[$vdv['ipid']]['all_actions']['count'] += 1;
					$patient_actions[$vdv['ipid']]['all_actions']['visits'] += 1;

					$actions['master_actions']['overall']['doctor'] += 1;

					$actions['master_actions']['visits']['doctor']['count']['all'] += 1; // all visits that are in valid sapv days that were made by doctor
					$patient_actions[$vdv['ipid']]['doctor_visits']['count']['all'] +=1;

					// Check if visit is  between 18.00 - 08.00
					if(Pms_CommonData::isintersected(strtotime($int_6PM8AM[$vdv['ipid']][$vdv['id']]['start']), strtotime($int_6PM8AM[$vdv['ipid']][$vdv['id']]['end']), strtotime($vdv['start_date']), strtotime($vdv['end_date'])))
					{
						$actions['master_actions']['overall']['night_interval'] += 1;
						$patient_actions[$vdv['ipid']]['all_actions']['night_interval'] += 1;

						$actions['master_actions']['visits']['doctor']['count']['night_interval'] +=1;
						$patient_actions[$vdv['ipid']]['doctor_visits']['count']['night_interval'] +=1;
					}
					else
					{
						$actions['master_actions']['visits']['doctor']['count']['normal_interval'] +=1;
						$patient_actions[$vdv['ipid']]['doctor_visits']['count']['normal_interval'] +=1;
					}
				}
			}

			/* ----------------------------------------------------------------------------------------- */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("id, ipid, start_date, end_date, date(start_date) as visit_day,  create_user")
				->from("KvnoNurse")
				->whereIn('ipid', $final_ipids)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhereNotIn('id', $del_visits['wl_nurse_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_nur_visits = $kvno_nurse_visits->fetchArray();


			foreach($kvno_nur_visits as $knv => $vnv)
			{
				$curent_visit_begin_date = strtotime($vnv['start_date']);
				$check_end_date = $vnv['visit_day'] . " 08:00:00";
				$check_end_date = strtotime($check_end_date);

				if($curent_visit_begin_date < $check_end_date)
				{
					$start_date_6PM8AM = date('d.m.Y', strtotime('-1 day', strtotime($vnv['visit_day']))) . " 18:00:01";
					$end_date_6PM8AM = $vnv['visit_day'] . " 08:00:00";
				}
				else
				{
					$start_date_6PM8AM = $vnv['visit_day'] . " 18:00:01";
					$end_date_6PM8AM = date('d.m.Y', strtotime('+1 day', strtotime($vnv['visit_day']))) . " 08:00:00";
				}

				$int_6PM8AM[$vnv['ipid']][$vnv['id']]['start'] = date('Y-m-d H:i:s', strtotime($start_date_6PM8AM));
				$int_6PM8AM[$vnv['ipid']][$vnv['id']]['end'] = date('Y-m-d H:i:s', strtotime($end_date_6PM8AM));


				if(in_array($vnv['visit_day'], $patientDetails [$vnv['ipid']] ['sapvtage_list']))
				{
					$actions['master_actions']['overall']['count'] += 1; // add all visits to the action overall count
					$actions['master_actions']['overall']['all_visits'] += 1;


					if($_REQUEST['details'] == 1)
					{
						$actions['master_actions']['visits']['nurse']['visit_details'][] = $vnv;
						$patient_actions[$vnv['ipid']]['nurse_visits']['visit_details'][] = $vnv;
					}

					$patient_actions[$vnv['ipid']]['all_actions']['count'] += 1;
					$patient_actions[$vnv['ipid']]['all_actions']['visits'] += 1;

					$actions['master_actions']['visits']['nurse']['count']['all'] += 1; // all visits that are in valid sapv days that were made by nurse
					$patient_actions[$vnv['ipid']]['nurse_visits']['count']['all'] +=1;

					// Check if visit is  between 18.00 - 08.00
					if(Pms_CommonData::isintersected(strtotime($int_6PM8AM[$vnv['ipid']][$vnv['id']]['start']), strtotime($int_6PM8AM[$vnv['ipid']][$vnv['id']]['end']), strtotime($vnv['start_date']), strtotime($vnv['end_date'])))
					{
						$actions['master_actions']['overall']['night_interval'] += 1;
						$patient_actions[$vnv['ipid']]['all_actions']['night_interval'] += 1;

						$actions['master_actions']['visits']['nurse']['count']['night_interval'] +=1;
						$patient_actions[$vnv['ipid']]['nurse_visits']['count']['night_interval'] +=1;
					}
					else
					{
						$actions['master_actions']['visits']['nurse']['count']['normal_interval'] +=1;
						$patient_actions[$vnv['ipid']]['nurse_visits']['count']['normal_interval'] +=1;
					}
				}
			}

			/* ----------------------------------------------------------------------------------------- */
			$koordinator_visitsq = Doctrine_Query::create()
				->select("id, ipid, start_date, end_date, date(start_date) as visit_day,  create_user")
				->from("VisitKoordination")
				->whereIn('ipid', $final_ipids)
				->andWhereNotIn('id', $del_visits['visit_koordination_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$koordinator_visits = $koordinator_visitsq->fetchArray();

			foreach($koordinator_visits as $kko => $vko)
			{
				$curent_visit_begin_date = strtotime($vko['start_date']);
				$check_end_date = $vko['visit_day'] . " 08:00:00";
				$check_end_date = strtotime($check_end_date);

				if($curent_visit_begin_date < $check_end_date)
				{
					$start_date_6PM8AM = date('d.m.Y', strtotime('-1 day', strtotime($vko['visit_day']))) . " 18:00:01";
					$end_date_6PM8AM = $vko['visit_day'] . " 08:00:00";
				}
				else
				{
					$start_date_6PM8AM = $vko['visit_day'] . " 18:00:01";
					$end_date_6PM8AM = date('d.m.Y', strtotime('+1 day', strtotime($vko['visit_day']))) . " 08:00:00";
				}

				$int_6PM8AM[$vko['ipid']][$vko['id']]['start'] = date('Y-m-d H:i:s', strtotime($start_date_6PM8AM));
				$int_6PM8AM[$vko['ipid']][$vko['id']]['end'] = date('Y-m-d H:i:s', strtotime($end_date_6PM8AM));


				if(in_array($vko['visit_day'], $patientDetails [$vko['ipid']] ['sapvtage_list']))
				{
					$actions['master_actions']['overall']['count'] += 1; // add all visits to the action overall count
					$actions['master_actions']['overall']['all_visits'] += 1;

					if($_REQUEST['details'] == 1)
					{
						$actions['master_actions']['visits']['coordinator']['visit_details'][] = $vko;
						$patient_actions[$vko['ipid']]['coordinator_visits']['visit_details'][] = $vko;
					}

					$patient_actions[$vko['ipid']]['all_actions']['count'] += 1;
					$patient_actions[$vko['ipid']]['all_actions']['visits'] += 1;

					$actions['master_actions']['visits']['coordinator']['count']['all'] += 1; // all visits that are in valid sapv days that were made by coordinator
					$patient_actions[$vko['ipid']]['coordinator_visits']['count']['all'] +=1;

					// Check if visit is  between 18.00 - 08.00
					if(Pms_CommonData::isintersected(strtotime($int_6PM8AM[$vko['ipid']][$vko['id']]['start']), strtotime($int_6PM8AM[$vko['ipid']][$vko['id']]['end']), strtotime($vko['start_date']), strtotime($vko['end_date'])))
					{
						$actions['master_actions']['overall']['night_interval'] += 1;
						$patient_actions[$vko['ipid']]['all_actions']['night_interval'] += 1;

						$actions['master_actions']['visits']['coordinator']['count']['night_interval'] +=1;
						$patient_actions[$vko['ipid']]['coordinator_visits']['count']['night_interval'] +=1;
					}
					else
					{
						$actions['master_actions']['visits']['coordinator']['count']['normal_interval'] +=1;
						$patient_actions[$vko['ipid']]['coordinator_visits']['count']['normal_interval'] +=1;
					}
				}
			}

			if($_REQUEST['show_details'] == '1')
			{
				print_r($actions);
				print_r("\n Sapv Days in month: \n");
				print_r($overall_amount);
				print_r("\n Actions per patient: \n");
				exit;
			}

			foreach($actions as $action => $action_details)
			{
				$sapv_valid_days = count($overall_amount);
				$MasterData ['data'] [1] ['overall_actions'] = $this->view->translate('overall_actions');
				$MasterData ['data'] [1] ['overall_actions_amount'] = $action_details['overall'] ['count'] . ' / ' . round(($action_details['overall']['count'] / $sapv_valid_days), 2);
				$MasterData ['data'] [2] ['overall_night_interval'] = $this->view->translate('overall_night_interval');

				if(!empty($action_details['overall']['night_interval']))
				{
					$MasterData ['data'] [2]['overall_night_interval_details'] = $action_details['overall']['night_interval'] . ' / ' . round($action_details['overall'] ['night_interval'] / $sapv_valid_days, 2);
				}
				else
				{
					$MasterData ['data'] [2]['overall_night_interval_details'] = "0";
				}

				$MasterData ['data'] [3] ['overall_visits'] = $this->view->translate('overall_visits');
				$MasterData ['data'] [3] ['overall_visits_details'] = $action_details['overall']['all_visits'] . ' / ' . round($action_details['overall'] ['all_visits'] / $sapv_valid_days, 2);
				$MasterData ['data'] [4] ['overall_actoverall_nurse_visitsions'] = $this->view->translate('overall_nurse_visits');
				$MasterData ['data'] [4] ['overall_nurse_visits_details'] = $action_details['visits']['nurse']['count']['all'] . ' / ' . round($action_details['visits']['nurse']['count']['all'] / $sapv_valid_days, 2);
				$MasterData ['data'] [5] ['overall_doctor_actions'] = $this->view->translate('overall_doctor_actions');
				$MasterData ['data'] [5] ['overall_doctor_actions_details'] = $action_details['overall'] ['doctor'] . ' / ' . round(($action_details['overall']['doctor'] / $sapv_valid_days), 2);
				$MasterData ['data'] [6] ['overall_doctor_visits'] = $this->view->translate('overall_doctor_visits');
				$MasterData ['data'] [6] ['overall_doctor_visits_details'] = $action_details['visits']['doctor']['count']['all'] . ' / ' . round($action_details['visits']['doctor']['count']['all'] / $sapv_valid_days, 2);
				$MasterData ['data'] [7] ['overall_valid_days'] = $this->view->translate('overall_valid_days');
				$MasterData ['data'] [7] ['overall_valid_days_details'] = $overall_patient_days;
			}
			return $MasterData;
		}

		public function deadstats_cp($params)
		{
			// report_id = 101
			// report_name = Trauergesprach
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$whereepid = $this->getDocCondition();
			$clientIpids = $this->getAllClientPatients($logininfo->clientid, $whereepid);

			$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);
			
			$ipi_death = $this->getDeadPatientsByDeathbutton($quarterarr, $yeararr, $montharr);
			
			foreach($clientIpids as $patient)
			{
				$clientPatientsIpids[] = $patient['ipid'];
			}

			$ipidsArray = $ipidsarr;
			

			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}
			
			if(!empty($ipi_death))
			{
				$ipidsArray = array_merge($ipidsArray,$ipi_death);
			}

			$Q = Doctrine_Query::create()
				->select("*,
				AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
				convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
				convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
				convert(AES_DECRYPT(street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
				convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city
			")
				->from('PatientMaster')
				->whereIn('ipid', $ipidsArray)
				->andWhere('isdelete = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy('admission_date DESC');

			$deadPatients = $Q->fetchArray();

			$deadPatientFamilyDocStr = "'0',";
			$deadIpidPatientsarr[] = '99999999999999';
			foreach($deadPatients as $patient)
			{
				$deadIpidPatients[$patient['ipid']] = $patient;
				$deadPatientFamilyDocStr .= "'" . $patient['familydoc_id'] . "',";
				$deadIpidPatientsarr[] = $patient['ipid'];
			}
			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '') AND id IN(" . substr($deadPatientFamilyDocStr, 0, -1) . ")");
			$docarray = $drop->fetchArray();

			foreach($docarray as $doctor)
			{
				$doctorarry[$doctor['id']] = $doctor;
			}

			$pm = new PatientMaster();
			if(count($deadIpidPatientsarr) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($deadIpidPatientsarr, true);
			}
			$dispatloc = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge as p")
				->whereIn('p.ipid', $ipidsArray);
			$dispatlocarr = $dispatloc->fetchArray();

			$locstr = "'X'";
			$comma = ",";
			foreach($dispatlocarr as $dischargedpat)
			{
				$dischargeLocationsArray[$dischargedpat['ipid']] = $dischargedpat;
				$locstr .= $comma . "'" . $dischargedpat['discharge_location'] . "'";
				$comma = ",";
			}

			$loc = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as dislocation")
				->from("DischargeLocation")
				->where('id in (' . $locstr . ')');
			$locarr = $loc->fetchArray();

			foreach($locarr as $loc)
			{
				$Locations[$loc['id']] = $loc;
			}

			$dispatlocarr = $dispatloc->fetchArray();

			$epidIpid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->whereIn('ipid', $ipidsArray);
			$epidIpidarr = $epidIpid->fetchArray();

			foreach($epidIpidarr as $pat_epid)
			{
				$epidsarr[$pat_epid['ipid']] = $pat_epid;
			}

			/* -------------------------Get contact persons------------------------------------------ */
			$contact_person = "";
			$contact = new ContactPersonMaster();
			$contactpersons_array = $contact->get_funeral_contact_persons($deadIpidPatientsarr);

			$i = '0';
			foreach($contactpersons_array as $contact_item)
			{
				if(count($contact_persons[$contact_item['ipid']]) == '0')
				{
					$i = '0';
				}
				$contact_persons[$contact_item['ipid']][$i]['cnt_first_name'] = $contact_item['cnt_first_name'];
				$contact_persons[$contact_item['ipid']][$i]['cnt_last_name'] = $contact_item['cnt_last_name'];
				$contact_persons[$contact_item['ipid']][$i]['cnt_street1'] = $contact_item['cnt_street1'];
				$contact_persons[$contact_item['ipid']][$i]['cnt_zip'] = $contact_item['cnt_zip'];
				$contact_persons[$contact_item['ipid']][$i]['cnt_city'] = $contact_item['cnt_city'];
				if(empty($contact_item['cnt_phone']) && !empty($contact_item['cnt_mobile']))
				{
					$contact_persons[$contact_item['ipid']][$i]['cnt_phone'] = $contact_item['cnt_mobile'];
				}
				else
				{
					$contact_persons[$contact_item['ipid']][$i]['cnt_phone'] = $contact_item['cnt_phone'];
				}
				$i++;
			}

			$i = 0;
			foreach($deadIpidPatients as $k_dipid => $v_dpatient)
			{

				$MasterData['data'][$k_dipid]['epid'] = $epidsarr[$k_dipid]['epid'];
				$MasterData['data'][$k_dipid]['firstname'] = $v_dpatient['first_name'];
				$MasterData['data'][$k_dipid]['lastname'] = $v_dpatient['last_name'];

				//radu 16.10.2012
				if(!empty($v_dpatient['street2']))
				{
					$street = $v_dpatient['street1'] . ", " . $v_dpatient['street2'];
				}
				else
				{
					$street = $v_dpatient['street1'];
				}

				$MasterData['data'][$k_dipid]['street'] = $street;
				$MasterData['data'][$k_dipid]['zip'] = trim($v_dpatient['zip']);
				$MasterData['data'][$k_dipid]['city'] = $v_dpatient['city'];

				$diedage = $pm->GetTreatedDays(date("Y-m-d", strtotime($v_dpatient['birthd'])), date("Y-m-d", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date'])), true);
				$diedcnt += $diedage['years'];

				$MasterData['data'][$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd'])) . "(" . $diedage['years'] . ")";
				$MasterData['data'][$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($v_dpatient['admission_date']));
				$MasterData['data'][$k_dipid]['diedon'] = date("d.m.Y", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date']));

				if(!empty($doctorarry[$v_dpatient['familydoc_id']]['last_name']) && !empty($doctorarry[$v_dpatient['familydoc_id']]['first_name']))
				{
					$family_doctor = $doctorarry[$v_dpatient['familydoc_id']]['last_name'] . ", " . $doctorarry[$v_dpatient['familydoc_id']]['first_name'];
				}
				else if(!empty($doctorarry[$v_dpatient['familydoc_id']]['first_name']))
				{
					$family_doctor = $doctorarry[$v_dpatient['familydoc_id']]['first_name'];
				}
				else if(!empty($doctorarry[$v_dpatient['familydoc_id']]['last_name']))
				{
					$family_doctor = $doctorarry[$v_dpatient['familydoc_id']]['last_name'];
				}
				else
				{
					$family_doctor = '';
				}
				$MasterData['data'][$k_dipid]['familydoctor'] = $family_doctor;
				$MasterData['data'][$k_dipid]['dielocation'] = $Locations[$dischargeLocationsArray[$k_dipid]['discharge_location']]['dislocation'];
				$MasterData['data'][$k_dipid]['treateddays'] = $treatedarr[$k_dipid]['realActiveDays'];
				$MasterData['data'][$k_dipid]['contactperson'] = $contact_persons[$k_dipid];

				$treatedcnt += $treatedarr[$k_dipid]['realActiveDays'];
				$i++;
			}

			$MasterData['extra']['avg_die'] = round($diedcnt / $i, 2);
			$MasterData['extra']['avg_treatment'] = round($treatedcnt / $i, 2);
			return $MasterData;
		}

		public function aktuellepatientzapv($params)
		{
			// report_id = 102
			// report_name = Aktuelle Patienten ZAPV

			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$ipids_array[] = '99999999999';

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$ipids_array[] = $ipid;
					$i++;
				}

				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				$patientexec = $patientMasterData->fetchArray();

				foreach($patientexec as $patient)
				{
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}
					if(strlen($patient['admission_date']) > 0)
					{
						$patientinfo[$patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($patient['admission_date']));
					}
				}

				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
				//		Get locations
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');

				$patlocarray = $patloc->fetchArray();
				$patient_location_ids[] = '9999999999';
				if($patlocarray)
				{

					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						$patient_location_ids[] = $patloc['location_id'];
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->whereIn('id', $patient_location_ids)
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}
					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{

							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}

								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
							}
						}
					}
				}

				$actual_location = $locaray[0]['location'];
				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}
				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}

				//get doctors details
				$Familydoctor = array();
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}

				//get health insurance name
				$healthinsu = Doctrine_Query::create()
					->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
					->from('PatientHealthInsurance')
					->where('ipid IN (' . $ipidsactive . ')');
				$healthinsu_array = $healthinsu->fetchArray();

				foreach($healthinsu_array as $k_pat_healthinsu => $v_pat_healthinsu)
				{
					$patienthealth[$v_pat_healthinsu['ipid']]['company'] = $v_pat_healthinsu["company_name"];
				}

				//get patient cave
				$pat_course = Doctrine_Query::create()
					->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
					->from('PatientCourse')
					->whereIn('ipid', $ipids_array)
					->andWhere("course_type='" . addslashes(Pms_CommonData::aesEncrypt('C')) . "'")
					->andWhere('source_ipid = ""')
					->andWhere('wrong = "0"');
				$patients_cave = $pat_course->fetchArray();

				foreach($patients_cave as $k_pat_cave => $v_pat_cave)
				{
					$patients_cave_arr[$v_pat_cave['ipid']][] = $v_pat_cave['course_title'];
				}

				//get patients contactpersons
				$contact_persons = array();
				$contact = new ContactPersonMaster();
				$contactpersons_array = $contact->getContactPersonsByIpids($ipids_array);

				foreach($contactpersons_array as $contact_item)
				{
					$contact_persons[$contact_item['ipid']] = '';
					$contact_persons_phone[$contact_item['ipid']] = '';

					$incr = (count($contact_pers[$contact_item['ipid']]) + 1);
					if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $incr . '. ' . $contact_item['cnt_last_name'] . ',';
					}

					if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
					}

					if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
					}

					if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
					}

					if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_city'] . '';
					}

					if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
					{
						$contact_persons_phone[$contact_item['ipid']] .= $incr . '. ' . 'Telefon: ' . $contact_item['cnt_phone'] . '<br /> ';
					}

					if(strlen($contact_item['cnt_mobile']) > 0 || strlen($contact_item['cnt_mobile']) > 0)
					{
						$contact_persons_phone[$contact_item['ipid']] .= 'Mobbile: ' . $contact_item['cnt_mobile'] . '<br /> ';
					}


					$contact_pers[$contact_item['ipid']][] = $contact_persons[$contact_item['ipid']];
					$contact_pers_phones[$contact_item['ipid']][] = $contact_persons_phone[$contact_item['ipid']];
				}

				//get patient specialists
				$specialists = new PatientSpecialists();
				$patients_specialists = $specialists->get_patient_specialists($ipids_array, true);
				foreach($patients_specialists as $k_specialist => $v_specialist)
				{
					if(count($v_specialist['master']) != '0')
					{

						$pat_spec[$v_specialist['ipid']] = '';
						$pat_spec_phone[$v_specialist['ipid']] = '';

						$incrx = (count($pat_specialists[$v_specialist['ipid']]) + 1);

						if(strlen($v_specialist['master']['title']) > 0)
						{
							$title = $v_specialist['master']['title'] . ' ';
						}

						if(strlen($v_specialist['master']['last_name']) > 0)
						{
							$pat_spec[$v_specialist['ipid']] .= $incrx . '. ' . $title . '' . $v_specialist['master']['last_name'] . ',';
						}

						if(strlen($v_specialist['master']['first_name']) > 0)
						{
							$pat_spec[$v_specialist['ipid']] .= $v_specialist['master']['first_name'] . ' ';
						}

						if(strlen($v_specialist['master']['phone_practice']) > 0)
						{
							$pat_spec_phone[$v_specialist['ipid']] .= $incrx . '. ' . 'Telefon: ' . $v_specialist['master']['phone_practice'] . '<br /> ';
						}

						if(strlen($v_specialist['master']['phone_cell']) > 0)
						{
							$pat_spec_phone[$v_specialist['ipid']] .= 'Mobbile: ' . $v_specialist['master']['phone_cell'] . '<br /> ';
						}

						$pat_specialists[$v_specialist['ipid']][] = $pat_spec[$v_specialist['ipid']];
						$pat_specialists_phones[$v_specialist['ipid']][] = $pat_spec_phone[$v_specialist['ipid']];
					}
				}

				//get patients memo
				$memo = new PatientMemo();
				$memos = $memo->get_multiple_patient_memo($ipids_array);

				//get patients sapvs
				$sapv = new SapvVerordnung();
				$patients_last_sapv = $sapv->get_multiple_last_sapvs($ipids_array, true, false);

				foreach($patients_last_sapv as $k_sapv_ipid => $v_sapv_data)
				{
					$sapv_period_start = date('d.m.Y', strtotime($v_sapv_data[0]['verordnungam']));
					$sapv_period_end = date('d.m.Y', strtotime($v_sapv_data[0]['verordnungbis']));

					$last_sapvs[$k_sapv_ipid] = $sapv_period_start . ' - ' . $sapv_period_end;
				}

				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{
					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['healthinsurance_company'] = $patienthealth[$keypatient]['company'];
					$MasterData['data'][$keypatient]['location'] = ($patlocarrayFinal[$keypatient]['location_name'] ? $patlocarrayFinal[$keypatient]['location_name'] : '' ) . ($patlocarrayFinal[$keypatient]['location_street'] ? '<br />' . $patlocarrayFinal[$keypatient]['location_street'] . '<br />' : '') . ($patlocarrayFinal[$keypatient]['location_zip'] ? $patlocarrayFinal[$keypatient]['location_zip'] : '') . ' ' . ($patlocarrayFinal[$keypatient]['location_city'] ? $patlocarrayFinal[$keypatient]['location_city'] : '');
					$MasterData['data'][$keypatient]['contact_number'] = $patientinfo[$keypatient]['kontactnumber'];
					$MasterData['data'][$keypatient]['cave'] = ($patients_cave_arr[$keypatient] ? implode("<br />", $patients_cave_arr[$keypatient]) : '');
					$MasterData['data'][$keypatient]['contactperson'] = ($contact_pers[$keypatient] ? implode("<br />", $contact_pers[$keypatient]) : '');
					$MasterData['data'][$keypatient]['contact_phone'] = ($contact_pers_phones[$keypatient] ? implode("<br />", $contact_pers_phones[$keypatient]) : '');
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient];
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'];
					$MasterData['data'][$keypatient]['familydoctorphone'] = $Familydoctor[$patient['familydoc_id']]['phone'];
					$MasterData['data'][$keypatient]['specialist'] = ($pat_specialists[$keypatient] ? implode("<br />", $pat_specialists[$keypatient]) : '');
					$MasterData['data'][$keypatient]['specialistphone'] = ($pat_specialists_phones[$keypatient] ? implode("<br />", $pat_specialists_phones[$keypatient]) : '');
					$MasterData['data'][$keypatient]['admissiondate'] = $patientinfo[$keypatient]['admission_date'];
					$MasterData['data'][$keypatient]['sapvperiod'] = $last_sapvs[$keypatient];
					$MasterData['data'][$keypatient]['memo'] = $memos[$keypatient];
				}
				return $MasterData;
			}
		}

		public function aktuellepatientzapv_standby_discharge($params)
		{
			// report_id = 120
			// report_name = Aktuelle Patienten ZAPV II + standby + discharge in the last 7 days

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$ipids_array[] = '99999999999';

			// active patients
			$active_ipids = $this->getActiveIpids();


			// standby patients
			$standby_ipids = $this->getStandbyIpids();
			if(empty($standby_ipids))
			{
				$standby_ipids[] = "XXXXXXXXX";
			}
			// discgharged patients in the last 7 days
			$last_seven_days = date('Y-m-d', strtotime("-7 day"));

			$patient = Doctrine_Query::create()
				->select("p.*,e.*")
				->from('PatientMaster p')
				->where('isdelete = 0 ')
				->andWhere('isdischarged = 1')
				->andWhere('isstandbydelete = 0')
				->andWhere('isstandby = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$patient->leftJoin("p.EpidIpidMapping e");
			$patient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$discharge_patients_array = $patient->fetchArray();

			foreach($discharge_patients_array as $k => $dis_pat)
			{
				$discharge_ipids[] = $dis_pat['ipid'];
			}

			if(empty($discharge_ipids))
			{
				$discharge_ipids[] = "XXXXXXXXX";
			}

			/* ---------------------------GET CLIENT DISCHARGE METHODS-------------------------------------- */
			$cl_dischagre_methods = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where('clientid=' . $logininfo->clientid)
				->andWhere('isdelete = 0');
			$cl_dischagre_methods_array = $cl_dischagre_methods->fetchArray();

			foreach($cl_dischagre_methods_array as $disc_method)
			{

				$global_discharge_methods[$disc_method['id']][] = $disc_method['id'];

				if($disc_method['abbr'] == 'TOD' || $disc_method['abbr'] == 'TODNA')
				{
					$global_discharge_methods_dead[] = $disc_method['id'];
				}
			}
			/* ------------------------------------------------------------------ */

			$discharge_patients_q = Doctrine_Query::create()
				->select("ipid, discharge_method")
				->from("PatientDischarge")
				->whereIn("ipid", $discharge_ipids)
				->andWhere("isdelete = 0")
				->andWhere("DATE(discharge_date) >= '" . $last_seven_days . "' ");
			$discharge_details_array = $discharge_patients_q->fetchArray();

			foreach($discharge_details_array as $kp => $dischaged_pat)
			{
				$dischaged_ipids[] = $dischaged_pat['ipid'];

				if(in_array($dischaged_pat['discharge_method'], $global_discharge_methods_dead))
				{
					$patient_status[$dischaged_pat['ipid']] = "verstorben";
				}
				else
				{
					$patient_status[$dischaged_pat['ipid']] = "entlassen";
				}
			}

			if(empty($dischaged_ipids))
			{
				$dischaged_ipids[] = "XXXXXXXXX";
			}

			if(!empty($standby_ipids))
			{
				$ipids_array = array_merge($active_ipids, $standby_ipids);
			}
			if(!empty($dischaged_ipids))
			{
				$ipids_array = array_merge($ipids_array, $dischaged_ipids);
			}

			$activeipids = $ipids_array;
			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,e.epid,
					AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
					convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
					convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,
					convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,
					convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				$patientMasterData->leftJoin("p.EpidIpidMapping e");
				$patientMasterData->andWhere(' e.clientid = ' . $logininfo->clientid);
				
				
// 				//ISPC-2045 - get kontact-phone
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();

				foreach($patientexec as $patient)
				{
					$patient_epids[] = $patient["EpidIpidMapping"]["epid"];

					if(in_array($patient['ipid'], $standby_ipids))
					{
						$patient_status[$patient['ipid']] = "STANDBY";
					} 
					elseif(!in_array($patient['ipid'], $dischaged_ipids) && !in_array($patient['ipid'], $standby_ipids))
					{
						$patient_status[$patient['ipid']] = "aktuell";
					}

					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}
					if(strlen($patient['admission_date']) > 0)
					{
						$patientinfo[$patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($patient['admission_date']));
					}
				}
				/* -------------------------Get  all client users  ------------------------------------------ */

				$user_q = Doctrine_Query::create()
					->select('id,last_name,first_name,user_title')
					->from('User')
					->where('clientid = "' . $logininfo->clientid . '" ')
					->andWhere('isdelete = 0')
					->andWhere('isactive = 0');
				$users_arr = $user_q->fetchArray();

				foreach($users_arr as $kus => $user_val)
				{
					$user_details[$user_val['id']] = $user_val['user_title'] . ' ' . $user_val['last_name'] . ', ' . $user_val['first_name'];
				}

				/* -------------------------Get  treated by ------------------------------------------ */
				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->whereIn('epid', $patient_epids);
				$treatedbyarr = $treatedbyQ->fetchArray();

				foreach($treatedbyarr as $ku => $as_values)
				{
					$epids2users[$as_values['epid']][] = $user_details[$as_values['userid']];
				}

				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
				//		Get locations
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');

				$patlocarray = $patloc->fetchArray();


				$patient_location_ids[] = '9999999999';
				if($patlocarray)
				{

					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						$patient_location_ids[] = $patloc['location_id'];
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->whereIn('id', $patient_location_ids)
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
						$master_location_ids[] = $vloc['id'];
					}

					// get stations
					$stations_q = Doctrine_Query::create()
						->select("*,AES_DECRYPT(station,'" . Zend_Registry::get('salt') . "') as station")
						->from('LocationsStations')
						->whereIn('location_id', $master_location_ids)
						->andWhere('isdelete=0')
						->orderBy('station ASC');
					$stations_array = $stations_q->fetchArray();


					foreach($stations_array as $k => $st_values)
					{
// 					$location2stations[$st_values['location_id']][] = $st_values['id'];
						$station_details[$st_values['id']] = $st_values;
					}

					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{

							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}

								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];

								$patlocarrayFinal[$v_loc['ipid']]['location_station'] = $station_details [$v_loc['station']] ['station'];
							}
						}
						
						
								$patlocarrayFinal[$v_loc['ipid']]['location_comment'] = $v_loc['comment'];
					}
				}

				$actual_location = $locaray[0]['location'];
				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}
				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}

				//get doctors details
				$Familydoctor = array();
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}

				//get health insurance name
				$healthinsu = Doctrine_Query::create()
					->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
					->from('PatientHealthInsurance')
					->where('ipid IN (' . $ipidsactive . ')');
				$healthinsu_array = $healthinsu->fetchArray();

				foreach($healthinsu_array as $k_pat_healthinsu => $v_pat_healthinsu)
				{
					$patienthealth[$v_pat_healthinsu['ipid']]['company'] = $v_pat_healthinsu["company_name"];
				}

				//get patient cave
				$pat_course = Doctrine_Query::create()
					->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
					->from('PatientCourse')
					->whereIn('ipid', $ipids_array)
					->andWhere("course_type='" . addslashes(Pms_CommonData::aesEncrypt('C')) . "'")
					->andWhere('wrong = "0"')
					->andWhere('source_ipid = ""');
				$patients_cave = $pat_course->fetchArray();

				foreach($patients_cave as $k_pat_cave => $v_pat_cave)
				{
					$patients_cave_arr[$v_pat_cave['ipid']][] = $v_pat_cave['course_title'];
				}

				//get patients contactpersons
				$contact_persons = array();
				$contact = new ContactPersonMaster();
				$contactpersons_array = $contact->getContactPersonsByIpids($ipids_array);

				foreach($contactpersons_array as $contact_item)
				{
					$contact_persons[$contact_item['ipid']] = '';
					$contact_persons_phone[$contact_item['ipid']] = '';

					$incr = (count($contact_pers[$contact_item['ipid']]) + 1);
					if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $incr . '. ' . $contact_item['cnt_last_name'] . ',';
					}

					if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
					}

					if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
					}

					if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
					}

					if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_city'] . '';
					}

					if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
					{
						$contact_persons_phone[$contact_item['ipid']] .= $incr . '. ' . 'Telefon: ' . $contact_item['cnt_phone'] . '<br /> ';
					}

					if(strlen($contact_item['cnt_mobile']) > 0 || strlen($contact_item['cnt_mobile']) > 0)
					{
						$contact_persons_phone[$contact_item['ipid']] .= 'Mobbile: ' . $contact_item['cnt_mobile'] . '<br /> ';
					}


					$contact_pers[$contact_item['ipid']][] = $contact_persons[$contact_item['ipid']];
					$contact_pers_phones[$contact_item['ipid']][] = $contact_persons_phone[$contact_item['ipid']];
				}

				//get patient specialists
				$specialists = new PatientSpecialists();
				$patients_specialists = $specialists->get_patient_specialists($ipids_array, true);
				foreach($patients_specialists as $k_specialist => $v_specialist)
				{
					if(count($v_specialist['master']) != '0')
					{

						$pat_spec[$v_specialist['ipid']] = '';
						$pat_spec_phone[$v_specialist['ipid']] = '';

						$incrx = (count($pat_specialists[$v_specialist['ipid']]) + 1);

						if(strlen($v_specialist['master']['title']) > 0)
						{
							$title = $v_specialist['master']['title'] . ' ';
						}

						if(strlen($v_specialist['master']['last_name']) > 0)
						{
							$pat_spec[$v_specialist['ipid']] .= $incrx . '. ' . $title . '' . $v_specialist['master']['last_name'] . ',';
						}

						if(strlen($v_specialist['master']['first_name']) > 0)
						{
							$pat_spec[$v_specialist['ipid']] .= $v_specialist['master']['first_name'] . ' ';
						}

						if(strlen($v_specialist['master']['phone_practice']) > 0)
						{
							$pat_spec_phone[$v_specialist['ipid']] .= $incrx . '. ' . 'Telefon: ' . $v_specialist['master']['phone_practice'] . '<br /> ';
						}

						if(strlen($v_specialist['master']['phone_cell']) > 0)
						{
							$pat_spec_phone[$v_specialist['ipid']] .= 'Mobbile: ' . $v_specialist['master']['phone_cell'] . '<br /> ';
						}

						$pat_specialists[$v_specialist['ipid']][] = $pat_spec[$v_specialist['ipid']];
						$pat_specialists_phones[$v_specialist['ipid']][] = $pat_spec_phone[$v_specialist['ipid']];
					}
				}

				//get patients memo
				$memo = new PatientMemo();
				$memos = $memo->get_multiple_patient_memo($ipids_array);

				//get patients sapvs
				$sapv = new SapvVerordnung();
				$patients_last_sapv = $sapv->get_multiple_last_sapvs($ipids_array, true, false);

				foreach($patients_last_sapv as $k_sapv_ipid => $v_sapv_data)
				{
					$sapv_period_start = date('d.m.Y', strtotime($v_sapv_data[0]['verordnungam']));
					$sapv_period_end = date('d.m.Y', strtotime($v_sapv_data[0]['verordnungbis']));

					$last_sapvs[$k_sapv_ipid] = $sapv_period_start . ' - ' . $sapv_period_end;
				}

				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				/* -------------------------Get Patients - Custom icons------------------------------------------ */

				$client_icons = new IconsClient;
				$client_icons_details = $client_icons->get_client_icons($logininfo->clientid);

				$patient_icons = new IconsPatient;
				$patient_icons_details = $patient_icons->get_patient_icons($activeipids);
				foreach($patient_icons_details as $ik => $i_val)
				{
					$patients2icons[$i_val['ipid']]['custom_icons'][] = $client_icons_details[$i_val['icon_id']]['name'];
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{
					$data[$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$data[$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$data[$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$data[$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$data[$keypatient]['healthinsurance_company'] = $patienthealth[$keypatient]['company'];
					$data[$keypatient]['location'] = ($patlocarrayFinal[$keypatient]['location_name'] ? $patlocarrayFinal[$keypatient]['location_name'] : '' ) . ($patlocarrayFinal[$keypatient]['location_street'] ? '<br />' . $patlocarrayFinal[$keypatient]['location_street'] . '<br />' : '') . ($patlocarrayFinal[$keypatient]['location_zip'] ? $patlocarrayFinal[$keypatient]['location_zip'] : '') . ' ' . ($patlocarrayFinal[$keypatient]['location_city'] ? $patlocarrayFinal[$keypatient]['location_city'] : '') . ' ' . ($patlocarrayFinal[$keypatient]['location_station'] ? '<br />Stationen: ' . $patlocarrayFinal[$keypatient]['location_station'] : '');
					$data[$keypatient]['location_comment'] = ($patlocarrayFinal[$keypatient]['location_comment'] ? $patlocarrayFinal[$keypatient]['location_comment'] : '' ) ;
					$data[$keypatient]['contact_number'] = $patientinfo[$keypatient]['kontactnumber'];
					$data[$keypatient]['cave'] = ($patients_cave_arr[$keypatient] ? implode("<br />", $patients_cave_arr[$keypatient]) : '');
					$data[$keypatient]['contactperson'] = ($contact_pers[$keypatient] ? implode("<br />", $contact_pers[$keypatient]) : '');
					$data[$keypatient]['contact_phone'] = ($contact_pers_phones[$keypatient] ? implode("<br />", $contact_pers_phones[$keypatient]) : '');
					$data[$keypatient]['diagnosis'] = $diagnosisarr[$keypatient];
					$data[$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'];
					$data[$keypatient]['familydoctorphone'] = $Familydoctor[$patient['familydoc_id']]['phone'];
					$data[$keypatient]['specialist'] = ($pat_specialists[$keypatient] ? implode("<br />", $pat_specialists[$keypatient]) : '');
					$data[$keypatient]['specialistphone'] = ($pat_specialists_phones[$keypatient] ? implode("<br />", $pat_specialists_phones[$keypatient]) : '');
					$data[$keypatient]['admissiondate'] = $patientinfo[$keypatient]['admission_date'];
					$data[$keypatient]['sapvperiod'] = $last_sapvs[$keypatient];
					$data[$keypatient]['memo'] = $memos[$keypatient];
					$data[$keypatient]['custom_icons2patient'] = implode(", ", $patients2icons[$keypatient]['custom_icons']);
					$data[$keypatient]['treatedby'] = implode("<br /> ", $epids2users[$epidarray[$keypatient]['epid']]);
					$data[$keypatient]['patient_status'] = $patient_status[$keypatient];
				}

				foreach($data as $key => $row)
				{
					$custom_icons[$key] = $row['custom_icons2patient'];
					$lastname[$key] = $row['lastname'];
				}

				array_multisort($custom_icons, SORT_ASC, $lastname, SORT_ASC, $data);

				foreach($data as $ipid_key => $vpatient)
				{
					$MasterData['data'][$ipid_key]['epid'] = $vpatient['epid'];
					$MasterData['data'][$ipid_key]['lastname'] = $vpatient['lastname'];
					$MasterData['data'][$ipid_key]['firstname'] = $vpatient['firstname'];
					$MasterData['data'][$ipid_key]['birthd'] = $vpatient['birthd'];
					$MasterData['data'][$ipid_key]['healthinsurance_company'] = $vpatient['healthinsurance_company'];
					$MasterData['data'][$ipid_key]['location'] = $vpatient['location'];
					$MasterData['data'][$ipid_key]['location_comment'] = $vpatient['location_comment'];
					$MasterData['data'][$ipid_key]['contact_number'] = $vpatient['contact_number'];
					$MasterData['data'][$ipid_key]['cave'] = $vpatient['cave'];
					$MasterData['data'][$ipid_key]['contactperson'] = $vpatient['contactperson'];
					$MasterData['data'][$ipid_key]['contact_phone'] = $vpatient['contact_phone'];
					$MasterData['data'][$ipid_key]['diagnosis'] = $vpatient['diagnosis'];
					$MasterData['data'][$ipid_key]['familydoctor'] = $vpatient['familydoctor'];
					$MasterData['data'][$ipid_key]['familydoctorphone'] = $vpatient['familydoctorphone'];
					$MasterData['data'][$ipid_key]['specialist'] = $vpatient['specialist'];
					$MasterData['data'][$ipid_key]['specialistphone'] = $vpatient['specialistphone'];
					$MasterData['data'][$ipid_key]['admissiondate'] = $vpatient['admissiondate'];
					$MasterData['data'][$ipid_key]['sapvperiod'] = $vpatient['sapvperiod'];
					$MasterData['data'][$ipid_key]['memo'] = $vpatient['memo'];
					$MasterData['data'][$ipid_key]['custom_icons2patient'] = $vpatient['custom_icons2patient'];
					$MasterData['data'][$ipid_key]['treatedby'] = $vpatient['treatedby'];
					$MasterData['data'][$ipid_key]['patient_status'] = $vpatient['patient_status'];
				}

				return $MasterData;
			}
		}

		public function aktuelle_patient_sinsheim($params)
		{

			// report_id = 138
			// report_name = aktuelle Patienten Sinsheim II
			// actuel patients and standby!

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$ipids_array[] = '99999999999';

			// active patients
			$active_ipids = $this->getActiveIpids();


			// standby patients
			$standby_ipids = $this->getStandbyIpids();
			if(empty($standby_ipids))
			{
				$standby_ipids[] = "XXXXXXXXX";
			}

			if(!empty($standby_ipids))
			{
				$ipids_array = array_merge($active_ipids, $standby_ipids);
			}


			$activeipids = $ipids_array;
			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}

				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,e.epid,
					AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
					convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
					convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,
					convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,
					convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				$patientMasterData->leftJoin("p.EpidIpidMapping e");
				$patientMasterData->andWhere(' e.clientid = ' . $logininfo->clientid);

				//ISPC-2045 - get kontact-phone
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();

				foreach($patientexec as $patient)
				{
					$patient_epids[] = $patient["EpidIpidMapping"]["epid"];

					if(in_array($patient['ipid'], $standby_ipids))
					{
						$patient_status[$patient['ipid']] = "STANDBY";
					}

					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['phone']) > 0)
					{
						$patientinfo[$patient['ipid']]['phone'] = $patient['phone'];
					}
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}
					if(strlen($patient['admission_date']) > 0)
					{
						$patientinfo[$patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($patient['admission_date']));
					}
				}
				/* -------------------------Get  all client users  ------------------------------------------ */

				$user_q = Doctrine_Query::create()
					->select('id,last_name,first_name')
					->from('User')
					->where('clientid = "' . $logininfo->clientid . '" ')
					->andWhere('isdelete = 0')
					->andWhere('isactive = 0');
				$users_arr = $user_q->fetchArray();

				foreach($users_arr as $kus => $user_val)
				{
					$user_details[$user_val['id']] = $user_val['last_name'] . ' ' . $user_val['first_name'];
				}

				/* -------------------------Get  treated by ------------------------------------------ */
				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->whereIn('epid', $patient_epids);
				$treatedbyarr = $treatedbyQ->fetchArray();

				foreach($treatedbyarr as $ku => $as_values)
				{
					$epids2users[$as_values['epid']][] = $user_details[$as_values['userid']];
				}

				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
				//		Get locations
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');

				$patlocarray = $patloc->fetchArray();


				$patient_location_ids[] = '9999999999';
				if($patlocarray)
				{

					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						$patient_location_ids[] = $patloc['location_id'];
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->whereIn('id', $patient_location_ids)
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
						$master_location_ids[] = $vloc['id'];
					}

					// get stations
					$stations_q = Doctrine_Query::create()
						->select("*,AES_DECRYPT(station,'" . Zend_Registry::get('salt') . "') as station")
						->from('LocationsStations')
						->whereIn('location_id', $master_location_ids)
						->andWhere('isdelete=0')
						->orderBy('station ASC');
					$stations_array = $stations_q->fetchArray();


					foreach($stations_array as $k => $st_values)
					{
// 					$location2stations[$st_values['location_id']][] = $st_values['id'];
						$station_details[$st_values['id']] = $st_values;
					}

					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{

							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}

								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];

								$patlocarrayFinal[$v_loc['ipid']]['location_station'] = $station_details [$v_loc['station']] ['station'];
							}
						}
					}
				}

				$actual_location = $locaray[0]['location'];
				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}
				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}

				//get doctors details
				$Familydoctor = array();
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}


				//get patients sapvs
				$sapv = new SapvVerordnung();
				$patients_last_sapv = $sapv->get_multiple_last_sapvs($ipids_array, true, false);


				$sapv_value = array("1" => "BE", "2" => "KO", "3" => "TV", "4" => "VV");

				foreach($patients_last_sapv as $k_sapv_ipid => $v_sapv_data)
				{
					$sapv_period_start = date('d.m.Y', strtotime($v_sapv_data[0]['verordnungam']));
					$sapv_period_end = date('d.m.Y', strtotime($v_sapv_data[0]['verordnungbis']));

					$last_sapvs[$k_sapv_ipid] = $sapv_period_start . ' - ' . $sapv_period_end;

					$sapv_verordnet = explode(",", $v_sapv_data[0]['verordnet']);
					foreach($sapv_verordnet as $k => $sd)
					{
// 				print_r($sapv_value[$sd]);
// 				print_r("\n");
						$sapv_types[$k_sapv_ipid][] = $sapv_value[$sd];
					}
				}
// print_r($last_sapvs);
// print_r($sapv_types);
// exit;
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{
					$data[$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$data[$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$data[$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$data[$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$data[$keypatient]['location'] = ($patlocarrayFinal[$keypatient]['location_name'] ? $patlocarrayFinal[$keypatient]['location_name'] : '' ) . ($patlocarrayFinal[$keypatient]['location_street'] ? '<br />' . $patlocarrayFinal[$keypatient]['location_street'] . '<br />' : '') . ($patlocarrayFinal[$keypatient]['location_zip'] ? $patlocarrayFinal[$keypatient]['location_zip'] : '') . ' ' . ($patlocarrayFinal[$keypatient]['location_city'] ? $patlocarrayFinal[$keypatient]['location_city'] : '') . ' ' . ($patlocarrayFinal[$keypatient]['location_station'] ? '<br />Stationen: ' . $patlocarrayFinal[$keypatient]['location_station'] : '');
					$data[$keypatient]['kontactnumber'] = $patientinfo[$keypatient]['kontactnumber'];
					$data[$keypatient]['diagnosis'] = $diagnosisarr[$keypatient];
					$data[$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'];
					$data[$keypatient]['sapvperiod'] = $last_sapvs[$keypatient];
					$data[$keypatient]['status'] = $patient_status[$keypatient];
				}

				foreach($data as $ipid_key => $vpatient)
				{
					$MasterData['data'][$ipid_key]['epid'] = $vpatient['epid'];
					$MasterData['data'][$ipid_key]['firstname'] = $vpatient['firstname'];
					$MasterData['data'][$ipid_key]['lastname'] = $vpatient['lastname'];
					$MasterData['data'][$ipid_key]['location'] = $vpatient['location'];
					$MasterData['data'][$ipid_key]['birthd'] = $vpatient['birthd'];
					$MasterData['data'][$ipid_key]['contact_number'] = $vpatient['kontactnumber'];
					$MasterData['data'][$ipid_key]['familydoctor'] = $vpatient['familydoctor'];
					$MasterData['data'][$ipid_key]['diagnosis'] = $vpatient['diagnosis'];
					$MasterData['data'][$ipid_key]['sapvperiod'] = $vpatient['sapvperiod'];
					$MasterData['data'][$ipid_key]['status'] = $vpatient['status'];
				}

				return $MasterData;
			}
		}

		public function users_working_hours_sapv($params)
		{
			// report_id = 104
			// report_name = Kontakte & Arbeitszeiten SAPV
			//1) show in this report only patient with vollversorgung verordnung
			// Patient Surname | Patient Firstname | Patient DOB | Patient admission | Patient discharge | (X) visit times | (X) driving time | (X) time of "Telefonate" | (X) time of Dokumentation( ) | (X) time of Koordination | (X) time of Beratung
			// All patients, including standby  - in report period
			// Show for each patient:
			// - All visits done in report period((X) visit times | (X) driving time )
			// - All actions done in verlauf (Beratung, Koordination) ((X) time of Koordination | (X) time of Beratung )
			// X = this coloumn is divided into ROWS one for every USER
			// Daniel: this is for nordrhein. so(all data it is taken) for the visit forms and verlauf shortcuts
			// Daniel: Dokumentation .... remove as i dont know where to take this from
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidarr = array();


			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
				$username[$val['id']] = $val['username'];
			}

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */
			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);

				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
// 			$report_period_array[$keyd]['end'] = date ( "Y-m-d", strtotime ( $period ['end'] [$keyd] ) );
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* ################################################################################################### */

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			if($includearr['standby'] == 1)
			{
				$conditions['include_standby'] = true;
			}

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$ipidarr = array_keys($active_patient_details); // return ipids


			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['standby'] = $p_details['details'] ['isstandby'];

				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));

				if($p_details['details'] ['isstandby'] == '1')
				{
					$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = "STANDBY";
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				}

				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
				}


				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['treatment_days'] = $p_details ['treatment_days'];

				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}

			/* ----------------- Get Patients SAPV details-------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andwhere('sv.verordnet  LIKE "4"')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray();

			foreach($sapvarr as $keys => $sapv)
			{
				$valid_ipids_arr[] = $sapv['ipid'];
				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}

			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['treatment_days']) && !in_array($daysapv, $patientDetails [$ipid] ['sapvDaysListFinal']))
						{

							$patientDetails [$ipid] ['sapvDaysListFinal'] [] = $daysapv;
						}
					}
				}
// 			$patientDataPseudo [$ipid] ['sapvDaysListFinal'] = array_unique ( $patientDataPseudo [$ipid] ['sapvDaysListFinal'] );
// 			$patientData [$ipid] ['sapvDaysList'] = "";
// 			$patientData [$ipid] ['sapvDaysList'] = $patientDataPseudo [$ipid] ['sapvDaysListFinal'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}


			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhereIn('ipid', $valid_ipids_arr);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("KvnoDoctor d")
				->whereIn('d.ipid', $valid_ipids_arr)
				->andWhereNotIn('d.id', $del_visits['kvno_doctor_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();

			$visit_array['d'] = 0;
			foreach($kvno_doctor_visits_arr as $doc => $value_doc)
			{
				$valid_date_doc = date('Y-m-d', strtotime($value_doc['start_date']));

// 			if(in_array($valid_date_doc, $finalDays[$value_doc['ipid']]['FinalCountDays']))	{ // sapv
				if(in_array($valid_date_doc, $patientDetails [$value_doc['ipid']] ['sapvDaysListFinal']))
				{ // sapv
					$start_date = strtotime($value_doc['start_date']);
					$end_date = strtotime($value_doc['end_date']);
					$doc_visit_minutes = round(($end_date - $start_date) / 60);
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['user_name'] = $username[$value_doc['create_user']];
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_minutes'] += $doc_visit_minutes;
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_count'] = $minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_driving'] += $value_doc['fahrtzeit'];
					$doctor_visits_dbg[$patientDetails[$value_doc['ipid']]['epid']][$value_doc['create_date']] = $username[$value_doc['create_user']] . " --> " . $value_doc['ipid'] . '-> Besuchsformular Arzt: ' . $value_doc['start_date'] . ' -> ' . $value_doc['start_date'] . ' === minutes:  ' . $doc_visit_minutes . ' driving ->' . $value_doc['fahrtzeit'];
					$visit_array['d'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n doctor_visits \n");
				print_r($doctor_visits_dbg);
			}

			/* ----------------------Get all "nurse visits" details from patients----------------------------- */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $valid_ipids_arr)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();

			$visit_array['n'] = 0;
			foreach($kvno_nurse_visits_arr as $nur => $value_nur)
			{
				$valid_date_nurse = date('Y-m-d', strtotime($value_nur['start_date']));

// 			if(in_array($valid_date_nurse, $finalDays[$value_nur['ipid']]['FinalCountDays'])){  // sapv
				if(in_array($valid_date_nurse, $patientDetails [$value_nur['ipid']] ['sapvDaysListFinal']))
				{  // sapv
					$start_date = strtotime($value_nur['start_date']);
					$end_date = strtotime($value_nur['end_date']);
					$nurse_visit_minutes = round(($end_date - $start_date) / 60);
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['user_name'] = $username[$value_nur['create_user']];
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_minutes'] += $nurse_visit_minutes;
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_count'] = $minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_driving'] += $value_nur['fahrtzeit'];
					$nurse_visits_dbg[$patientDetails[$value_nur['ipid']]['epid']][$value_nur['create_date']] = $username[$value_nur['create_user']] . " --> " . $value_nur['ipid'] . '-> Besuchsformular Pflege: ' . $value_nur['start_date'] . ' -> ' . $value_nur['end_date'] . ' ===  ' . $nurse_visit_minutes . ' driving->' . $value_nur['fahrtzeit'];
					$visit_array['n'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n nurse_visits \n");
				print_r($nurse_visits_dbg);
			}
			/* ----------------------Get all "koordination visits" details from patients----------------------------- */
			$kvno_koordination_visits = Doctrine_Query::create()
				->select("*")
				->from("VisitKoordination")
				->whereIn('ipid', $valid_ipids_arr)
				->andWhereNotIn('id', $del_visits['visit_koordination_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

			$visit_array['k'] = 0;
			foreach($kvno_koordination_visits_arr as $koord => $value_koord)
			{
				$valid_date_koor = date('Y-m-d', strtotime($value_koord['start_date']));
// 			if(in_array($valid_date_koor, $finalDays[$value_koord['ipid']]['FinalCountDays'])){  // sapv
				if(in_array($valid_date_koor, $patientDetails [$value_koord['ipid']] ['sapvDaysListFinal']))
				{  // sapv
					$start_date = strtotime($value_koord['start_date']);
					$end_date = strtotime($value_koord['end_date']);
					$koordination_visit_minutes = round(($end_date - $start_date) / 60);
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['user_name'] = $username[$value_koord['create_user']];
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_minutes'] += $koordination_visit_minutes;
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_count'] = $minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_driving'] += $value_koord['fahrtzeit'];
					$koordinator_visits_dbg[$patientDetails[$value_koord['ipid']]['epid']][$value_koord['create_date']] = $value_koord['create_user'] . '-> Besuchsformular Koordination: ' . $value_koord['start_date'] . ' -> ' . $value_koord['end_date'] . ' === ' . $koordination_visit_minutes . ' driving->' . $value_koord['fahrtzeit'];
					$visit_array['k'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordinator_visits \n");
				print_r($koordinator_visits_dbg);
				print_r("\n rest of data \n");
			}
			/* ------------------------Get all VERLAUF - "Telefonate" details from patients----------------------------------- */
			$previleges = new Modules();
			$modulepriv = $previleges->checkModulePrivileges("55", $logininfo->clientid);

			if($modulepriv)
			{
				$course_xt = Doctrine_Query::create()
					->select("ipid,course_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
					->from('PatientCourse')
					->whereIn('ipid', $valid_ipids_arr)
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
					->andWhere("wrong = 0")
					->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$course_xt_array = $course_xt->fetchArray();

				foreach($course_xt_array as $course_xt_key => $course_xt_val)
				{
					$valid_date_xt = date('Y-m-d', strtotime($course_xt_val['course_date']));

// 				if(in_array($valid_date_xt, $finalDays[$course_xt_val['ipid']]['FinalCountDays'])){  // sapv
					if(in_array($valid_date_xt, $patientDetails [$course_xt_val['ipid']] ['sapvDaysListFinal']))
					{  // sapv
						$course_xt_arr = explode("|", $course_xt_val['course_title']);
						$xt_array[$patientDetails[$course_xt_val['ipid']]['epid']][] = $course_xt_val['course_title'];

						$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['user_name'] = $username[$course_xt_val['create_user']];
						if(count($course_xt_arr) == 3)
						{ //method implemented with 3 inputs
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[0]);
						}
						else if(count($course_xt_arr) != 3 && count($course_xt_arr) < 3)
						{ //old method before anlage 10
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[0]);
						}
						else if(count($course_xt_arr) != 3 && count($course_xt_arr) > 3)
						{ //new method (XT) 3 inputs and 1 select newly added in verlauf
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[1]);
						}

						$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_count'] = $minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_count'] + 1;
					}
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n telefon \n");
				print_r($xt_array);
			}

			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */
			$course_v = Doctrine_Query::create()
				->select("ipid,course_date,create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $valid_ipids_arr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
				->orderBy('course_date ASC');
			$course_v_array = $course_v->fetchArray();

			foreach($course_v_array as $course_v_key => $course_v_val)
			{
				$valid_date_v = date('Y-m-d', strtotime($course_v_val['course_date']));

// 			if(in_array($valid_date_v , $finalDays[$course_v_val['ipid']]['FinalCountDays'])){ // sapv
				if(in_array($valid_date_v, $patientDetails [$course_v_val ['ipid']] ['sapvDaysListFinal']))
				{ // sapv
					$course_v_arr = explode("|", $course_v_val['course_title']);
					$v_array[$patientDetails[$course_v_val['ipid']]['epid']][] = $course_v_val['course_title'];

					$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['user_name'] = $username[$course_v_val['create_user']];

					if(count($course_v_arr) == 3)
					{
						$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_minutes'] +=intval($course_v_arr[0]);
					}
					else if(count($course_v_arr) != 3)
					{
						$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_minutes'] +=intval($course_v_arr[0]);
					}

					$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_count'] = $minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_count'] + 1;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordination \n");
				print_r($v_array);
			}

			/* ------------------------Get all  VERLAUF -  "Bertrag" details from patients----------------------------------- */
			$course = Doctrine_Query::create()
				->select("ipid,course_date, create_user,  AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $valid_ipids_arr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
				->orderBy('course_date ASC');
			$coursearray = $course->fetchArray();

			foreach($coursearray as $course_key => $course_val)
			{
				$valid_date_u = date('Y-m-d', strtotime($course_val['course_date']));

// 			if(in_array($valid_date_u, $finalDays[$course_val['ipid']]['FinalCountDays'])){  // sapv
				if(in_array($valid_date_u, $patientDetails [$course_v_val ['ipid']] ['sapvDaysListFinal']))
				{  // sapv
					$coursearr = explode("|", $course_val['course_title']);
					$u_array[$patientDetails[$course_val['ipid']]['epid']][] = $course_val['course_title'];

					$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['user_name'] = $username[$course_val['create_user']];
					if(count($coursearr) == 3)
					{ //method implemented with 3 inputs
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[0]);
					}
					else if(count($coursearr) != 3 && count($coursearr) < 3)
					{ //old method before anlage 10
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[0]);
					}
					else if(count($coursearr) != 3 && count($coursearr) > 3)
					{ //new method (U) 3 inputs and 1 select newly added in verlauf
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[1]);
					}
					$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_count'] = $minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_count'] + 1;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n Bertrag \n");
				print_r($u_array);
				exit;
			}

			/* ----------------------Prepare data for display ----------------------------- */
			$patient_actions_count = array();
			$visit_count = 0;

			$total_visits_per_day = 0;
			$total_contacts_per_day = 0;

			foreach($minutes_array as $patient_ipid => $values)
			{
				$patient_values[] = $patient_ipid;
// 			$reported_days[$patient_ipid]  = sizeof ( $finalDays [$patient_ipid] ['FinalCountDays'] );  // sapv
				$reported_days[$patient_ipid] = sizeof($patientDetails [$patient_ipid] ['sapvDaysListFinal']);  // sapv

				$x = 0;
				foreach($values as $user_name => $vls)
				{
					$visit_count +=$vls['visit_count'];
					$user_documentation[$patient_ipid][$x]['user_name'] = $vls['user_name'];
					if($vls['visit_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['visit_minutes'] = $vls['visit_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_minutes'] = 0;
					}
					if($vls['visit_count'])
					{
						$user_documentation[$patient_ipid][$x]['visit_count'] = $vls['visit_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_count'] = 0;
					}

					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = 0;
					}

					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = 0;
					}

					if($vls['telefonate_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['telefonate_minutes'] = $vls['telefonate_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['telefonate_minutes'] = 0;
					}

					if($vls['telefonate_count'])
					{
						$user_documentation[$patient_ipid][$x]['telefonate_count'] = $vls['telefonate_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['telefonate_count'] = 0;
					}

					if($vls['coordination_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_minutes'] = $vls['coordination_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_minutes'] = 0;
					}

					if($vls['coordination_count'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_count'] = $vls['coordination_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_count'] = 0;
					}
					if($vls['consulting_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['consulting_minutes'] = $vls['consulting_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['consulting_minutes'] = 0;
					}

					if($vls['consulting_count'])
					{
						$user_documentation[$patient_ipid][$x]['consulting_count'] = $vls['consulting_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['consulting_count'] = 0;
					}

					$user_documentation_actions[$patient_ipid][$x]['user_actions'] = $user_documentation[$patient_ipid][$x]['visit_count'] + $user_documentation[$patient_ipid][$x]['telefonate_count'] + $user_documentation[$patient_ipid][$x]['consulting_count'];

					$user_documentation[$patient_ipid][$x]['visits_per_day'] = round($user_documentation[$patient_ipid][$x]['visit_count'] / $reported_days[$patient_ipid], 2) . ' (' . $user_documentation[$patient_ipid][$x]['visit_count'] . '/' . $reported_days[$patient_ipid] . ')';
					$user_documentation[$patient_ipid][$x]['contacts_per_day'] = round($user_documentation_actions[$patient_ipid][$x]['user_actions'] / $reported_days[$patient_ipid], 2) . '(' . $user_documentation_actions[$patient_ipid][$x]['user_actions'] . '/' . $reported_days[$patient_ipid] . ')';

					$patient_actions_count[$patient_ipid]['patient_visits_count'] += $user_documentation[$patient_ipid][$x]['visit_count'];
					$patient_actions_count[$patient_ipid]['patient_visits_minutes_count'] += $user_documentation[$patient_ipid][$x]['visit_minutes'];
					$patient_actions_count[$patient_ipid]['patient_visits_driving_count'] += $user_documentation[$patient_ipid][$x]['visit_driving'];

					$patient_actions_count[$patient_ipid]['patient_telefon_count'] += $user_documentation[$patient_ipid][$x]['telefonate_count'];
					$patient_actions_count[$patient_ipid]['patient_telefon_minutes_count'] += $user_documentation[$patient_ipid][$x]['telefonate_minutes'];

					$patient_actions_count[$patient_ipid]['patient_coordination_count'] += $user_documentation[$patient_ipid][$x]['coordination_count'];
					$patient_actions_count[$patient_ipid]['patient_coordination_minutes_count'] += $user_documentation[$patient_ipid][$x]['coordination_minutes'];

					$patient_actions_count[$patient_ipid]['patient_consulting_count'] += $user_documentation[$patient_ipid][$x]['consulting_count'];
					$patient_actions_count[$patient_ipid]['patient_consulting_minutes_count'] += $user_documentation[$patient_ipid][$x]['consulting_minutes'];

					$total_visits_per_day += round($user_documentation[$patient_ipid][$x]['visit_count'] / $reported_days[$patient_ipid], 2);
					$total_contacts_per_day += round($user_documentation_actions[$patient_ipid][$x]['user_actions'] / $reported_days[$patient_ipid], 2);

					$x++;
				}
			}

			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;
			$total_visits_minutes = 0;
			$total_visits_count = 0;
			$total_driving_sum = 0;

			$total_telefonat_count = 0;
			$total_telefonat_minutes = 0;
			$total_coordination_count = 0;
			$total_coordination_minutes = 0;
			$total_consulting_count = 0;
			$total_consulting_minutes = 0;


			if(!empty($patientDetails))
			{
				foreach($patientDetails as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patientDetails[$patient['ipid']]);
					}
				}
				foreach($patientDetails as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['surname'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['firstname'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient['dateofbirth'];
					$MasterData['data'][$patient['ipid']]['admissiondate'] = $patient['admissiondate'];
					$MasterData['data'][$patient['ipid']]['dischargedate'] = $patient['dischargedate'];
					$MasterData['data'][$patient['ipid']]['user_documentation'] = $user_documentation[$patient['ipid']];

					$total_visits_count += $patient_actions_count[$patient['ipid']]['patient_visits_count'];
					$total_visits_minutes += $patient_actions_count[$patient['ipid']]['patient_visits_minutes_count'];
					$total_driving_sum += $patient_actions_count[$patient['ipid']]['patient_visits_driving_count'];

					$total_telefonat_count += $patient_actions_count[$patient['ipid']]['patient_telefon_count'];
					$total_telefonat_minutes += $patient_actions_count[$patient['ipid']]['patient_telefon_minutes_count'];

					$total_coordination_count += $patient_actions_count[$patient['ipid']]['patient_coordination_count'];
					$total_coordination_minutes += $patient_actions_count[$patient['ipid']]['patient_coordination_minutes_count'];

					$total_consulting_count += $patient_actions_count[$patient['ipid']]['patient_consulting_count'];
					$total_consulting_minutes += $patient_actions_count[$patient['ipid']]['patient_consulting_minutes_count'];

					$i++;
				}
				$MasterData['extra']['total_visits_count'] = $total_visits_count;
				$MasterData['extra']['avg_total_visits_count'] = round($total_visits_count / $i, 2);

				$MasterData['extra']['total_visits_minutes'] = $total_visits_minutes;
				$MasterData['extra']['avg_total_visits_minutes'] = round($total_visits_minutes / $i, 2);

				$MasterData['extra']['total_driving_sum'] = $total_driving_sum;
				$MasterData['extra']['avg_total_driving_sum'] = round($total_driving_sum / $i, 2);

				$MasterData['extra']['total_telefonat_count'] = $total_telefonat_count;
				$MasterData['extra']['avg_total_telefonat_count'] = round($total_telefonat_count / $i, 2);

				$MasterData['extra']['total_telefonat_minutes'] = $total_telefonat_minutes;
				$MasterData['extra']['avg_total_telefonat_minutes'] = round($total_telefonat_minutes / $i, 2);

				$MasterData['extra']['total_coordination_minutes'] = $total_coordination_minutes;
				$MasterData['extra']['avg_total_coordination_minutes'] = round($total_coordination_minutes / $i, 2);

				$MasterData['extra']['total_coordination_count'] = $total_coordination_count;
				$MasterData['extra']['avg_total_coordination_count'] = round($total_coordination_count / $i, 2);

				$MasterData['extra']['total_consulting_minutes'] = $total_consulting_minutes;
				$MasterData['extra']['avg_total_consulting_minutes'] = round($total_consulting_minutes / $i, 2);

				$MasterData['extra']['total_consulting_count'] = $total_consulting_count;
				$MasterData['extra']['avg_total_consulting_count'] = round($total_consulting_count / $i, 2);

				$MasterData['extra']['total_visits_per_day'] = $total_visits_per_day;
				$MasterData['extra']['avg_total_visits_per_day'] = round($total_visits_per_day / $i, 2);

				$MasterData['extra']['total_contacts_per_day'] = $total_contacts_per_day;
				$MasterData['extra']['avg_total_contacts_per_day'] = round($total_contacts_per_day / $i, 2);

				return $MasterData;
			}
		}

		public function users_working_hours_sapv_old($params)
		{
			// report_id = 104
			// report_name = Kontakte & Arbeitszeiten SAPV
			//1) show in this report only patient with vollversorgung verordnung
			// Patient Surname | Patient Firstname | Patient DOB | Patient admission | Patient discharge | (X) visit times | (X) driving time | (X) time of "Telefonate" | (X) time of Dokumentation( ) | (X) time of Koordination | (X) time of Beratung
			// All patients, including standby  - in report period
			// Show for each patient:
			// - All visits done in report period((X) visit times | (X) driving time )
			// - All actions done in verlauf (Beratung, Koordination) ((X) time of Koordination | (X) time of Beratung )
			// X = this coloumn is divided into ROWS one for every USER
			// Daniel: this is for nordrhein. so(all data it is taken) for the visit forms and verlauf shortcuts
			// Daniel: Dokumentation .... remove as i dont know where to take this from
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidarr = array();
			$standby = array();
			$active_patients = array();
			$active_patients = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			if($includearr['standby'] == 1)
			{
				$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
			}

			$ipidarr = array_merge($active_patients, $standby);
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "999999999999999";
			}

			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
				$username[$val['id']] = $val['username'];
			}

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */
			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* ################################################################################################### */
			/* ----------------- Get Patients SAPV details-------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andwhere('sv.verordnet  LIKE "4"')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray();

			foreach($sapvarr as $keys => $sapv)
			{
				$valid_ipids_arr[] = $sapv['ipid'];
				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}
			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						$patientDataPseudo [$ipid] ['sapvDaysListFinal'] [] = $daysapv;
					}
				}
				$patientDataPseudo [$ipid] ['sapvDaysListFinal'] = array_unique($patientDataPseudo [$ipid] ['sapvDaysListFinal']);
				$patientData [$ipid] ['sapvDaysList'] = "";
				$patientData [$ipid] ['sapvDaysList'] = $patientDataPseudo [$ipid] ['sapvDaysListFinal'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			/* ########################################################################## */
			/* ----------------- Get hospital and hospiz locations -------------------- */
			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type in ("1","2")');
			$hosparray = $hospitalids->fetchArray();

			$hospstr = "";
			foreach($hosparray as $hospital)
			{
				$hospstr .= "'" . $hospital ['id'] . "',";
				$hosp_arr[] = $hospital['id'];
			}
			$hosp_arr[] = '99999999999';


			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod ['interval_sql']));

			/* ################################################################################################### */
			/* ----------------- Get Patient hospital and hospiz locations in report period -------------------- */
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('location_id', $hosp_arr)
				->andWhere('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('' . $time_interval . '')
				->andWhereIn('ipid', $valid_ipids_arr);
			$locationsarr = $locations->fetchArray();

			/* ################################################################################################### */
			/* ----------------- Get Patients Details -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $valid_ipids_arr)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			$dischargedipidstr = "'99999999999'";

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$patient_array[$val['ipid']]['ipid'] = $val['ipid'];
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
				if($val['isstandby'] == '1')
				{
					$patient_array[$val['ipid']]['admission_date'] = "STANDBY";
				}
				else
				{
					$patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
				}
				if($val['isdischarged'] == 1)
				{
					$dischargedipidstr .= ",'" . $val['ipid'] . "'";
					$dischargedipid_arr[] = $val['ipid'];
				}
			}

			$dischargedipid_arr[] = '99999999999';
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ################################################################################################### */
			/* ----------------- Get discharge methods dead  -------------------- */
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "99999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients discharge details -------------------- */
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $dischargedipid_arr)
				->andWhere('isdelete = 0');
			$patientdisarray = $patientdis->fetchArray();

			foreach($patientdisarray as $dischargedPatient)
			{
				if(in_array($dischargedPatient['discharge_method'], $todIds))
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				else
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				$patientDetails [$dischargedPatient ['ipid']] ['dischargedate_final'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));

				$patient_discharge_details[$dischargedPatient['ipid']]['discharge_date'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
			}
			/* ###################################################################### */
			foreach($locationsarr as $location)
			{
				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$till = end($finalPeriodDays);
						$from = date('Y-m-d', strtotime($location ['valid_from']));

						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
					}
					else
					{
						$till = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
						$from = date('Y-m-d', strtotime($location ['valid_from']));

						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, date('Y-m-d'), false);
					}
				}
				else if(strtotime(date('Y-m-d', strtotime($location['valid_till']))) == strtotime(date('Y-m-d', strtotime($location ['valid_from']))))
				{
					$till = date('Y-m-d', strtotime('+1 day', strtotime($location ['valid_till'])));
					$from = date('Y-m-d', strtotime('-1 day', strtotime($location ['valid_till'])));

					$realfullhospitaldays [$location ['ipid']] [] = date('Y-m-d', strtotime($location ['valid_till']));
				}
				else
				{
					$till = date('Y-m-d', strtotime($location ['valid_till']));
					$from = date('Y-m-d', strtotime($location ['valid_from']));

					$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
				}

				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('+1 day', strtotime($from)));
				$patientData [$location ['ipid']] ['hospitalStartDays'][] = date("Y-m-d", strtotime($location ['valid_from']));
				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('-1 day', strtotime($till)));

				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = end($finalPeriodDays);
					}
					else
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
					}
				}
				else
				{
					$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime($location ['valid_till']));
				}

				$current_hosp_days = array();

				if(in_array(date('Y-m-d', strtotime($location['valid_till'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					in_array($patientDetails[$location ['ipid']]['dischargemtd'], $todIds) &&
					!in_array(date('Y-m-d', strtotime($location['valid_from'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					$patientDetails [$location ['ipid']] ['dischargedate_final'] == date('d.m.Y', strtotime($location['valid_till']))
				)
				{
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
					$diedinhospital [$location ['ipid']] = date('Y-m-d', strtotime($location['valid_till']));
					$patientDetails [$location ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime('-1 day', strtotime($patientDetails [$location ['ipid']] ['dischargedate'])));
				}
				else if($location ['valid_till'] == "0000-00-00 00:00:00")
				{ //if not discharge - give hospital days
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
				}
				else
				{
					$diedinhospital [$location ['ipid']] = false;
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime('-1 day', strtotime($till))), false);
				}
				$patientData [$location ['ipid']] ['hospitalDaysList'][] = $current_hosp_days;
			}

			foreach($patientData as $ipid => $hospata)
			{
				foreach($hospata ['hospitalDaysList'] as $group => $hdata)
				{
					foreach($hdata as $key => $dayh)
					{
						$patientDataPseudoH [$ipid] ['hospitalDaysList'] [] = $dayh;
					}
				}
				$patientDataPseudoH [$ipid] ['hospitalDaysList'] = array_unique($patientDataPseudoH [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['hospitalDaysList'] = "";
				$patientData [$ipid] ['hospitalDaysList'] = $patientDataPseudoH [$ipid] ['hospitalDaysList'];

				foreach($hospata['hospitalStartDays'] as $k_start_date => $v_start_date)
				{

					if(in_array($v_start_date, $hospata['hospitalEndDays']))
					{

						$patientData [$ipid] ['continuous_hospital'][] = $v_start_date;
						$patientData [$ipid] ['hospitalDaysList'][] = $v_start_date;

						if(array_search($v_start_date, $patientData[$ipid]['sapvDaysList']))
						{
							unset($patientData[$ipid]['sapvDaysList'][array_search($v_start_date, $patientData[$ipid]['sapvDaysList'])]);
						}
					}
				}

				foreach($hospata['hospitalEndDays'] as $k_end_date => $v_end_date)
				{
					if(in_array($patientDetails[$ipid]['dischargemtd'], $todIds) && $patientDetails [$ipid] ['dischargedate_final'] = date('d.m.Y', strtotime($v_end_date)))
					{
						$patientData [$ipid] ['hospitalDaysList'][] = $v_end_date;
					}
				}

				$patientData [$ipid] ['hospitalDaysList'] = array_unique($patientData [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['continuous_hospital'] = array_unique($patientData [$ipid] ['continuous_hospital']);
			}

			$patientTreatmentDays = $pm->getTreatedDaysRealMultiple($ipidarr, false);

			foreach($patientTreatmentDays as $patientTreatmentIpid => $patientTreatmentData)
			{

				if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
					{
						if(count($patientTreatmentData ['admissionDates']) == 0)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						}
						else
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
				{

					if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = $patientTreatmentData ['discharge_date'];
					}

					if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
					else
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
				else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
				{
					foreach($patientTreatmentData ['admissionDates'] as $keyadmission => $admissionvalues)
					{
						if(empty($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']))
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
						}
						else
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($admission));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($discharge));
					}
				}
				else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
					{
						$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));

						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}

				if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])))
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
			}

			foreach($patientDateRange as $treatmentIpid => $range)
			{
				foreach($range as $ktreat => $treatmentarr)
				{
					foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
					{
						$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
					}
				}
			}

			foreach($treatmentDaysArray as $ipidPat => $treatmentDaysArrayF)
			{
				if(count($treatmentDaysArrayF) > 0)
				{
					foreach($treatmentDaysArrayF as $keyt => $treatmentDayValue)
					{
						$finalActiveDaysArray [$ipidPat] ['activedays'][] = array_intersect($treatmentDayValue, $finalPeriodDays);
					}
				}
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{
				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							if(in_array($patientDetails[$patIpid]['dischargemtd'], $todIds))
							{ // check if day is in hospital
								$lastDischargeDate = date("Y-m-d", strtotime($patientDetails [$patIpid] ['dischargedate']));
								if(strtotime($day) <= strtotime($lastDischargeDate))
								{
									$activeDaysFinal[$patIpid][] = $day;
								}
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
							else
							{
								$activeDaysFinal[$patIpid][] = $day;
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
						}
					}
				}
				$activeDaysFinal[$patIpid] = array_unique($activeDaysFinal[$patIpid]);
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{
				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							$activeDaysFinalTotal[$patIpid][] = $day;
						}
					}
				}
				$activeDaysFinalTotal[$patIpid] = array_unique($activeDaysFinalTotal[$patIpid]);
			}

			foreach($patientData as $patientIpid => $patientDates)
			{
				$disthospdays[$patientIpid] = array();
				foreach($realfullhospitaldays[$patientIpid] as $realfullhospitaldays_per)
				{
					$disthospdays[$patientIpid] = array_merge($disthospdays[$patientIpid], (array) $realfullhospitaldays_per);
				}
				array_unique($disthospdays[$patientIpid]);

				array_unique($finalPeriodDays);
				array_unique($patientDates['sapvDaysList']);
				array_unique($activeDaysFinal[$patientIpid]);
				array_unique($patientDates['hospitalDaysList']);
				$sapv_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $patientDates['sapvDaysList']);
				$activ_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $activeDaysFinal[$patientIpid]);
				$sapv_activ_in_perioada[$patientIpid] = array_intersect($activ_in_perioada[$patientIpid], $sapv_in_perioada[$patientIpid]);

				foreach($sapv_activ_in_perioada[$patientIpid] as $sapvActiveDay)
				{
					if(!in_array($sapvActiveDay, $patientDates['hospitalDaysList']))
					{
						$finalDays [$patientIpid]['FinalCountDays'][] = $sapvActiveDay;
					}
				}
				array_unique($finalDays [$patientIpid]['FinalCountDays']);

				if(!is_array($finalDays [$patientIpid]['FinalCountDays']))
				{
					$finalDays [$patientIpid]['FinalCountDays'] = array();
				}

				$disthospdayz[$patientIpid] = array_diff($disthospdays[$patientIpid], $finalDays [$patientIpid]['FinalCountDays']);

				$daysofhostpitalinperiod[$patientIpid] = array_intersect($disthospdayz[$patientIpid], $activ_in_perioada[$patientIpid]);
			}

			//final sapv tags and days of treatment
			foreach($patientDetails as $ipidPatient => $patientDataValue)
			{

				$patientDetails [$ipidPatient] ['sapvtage'] = sizeof($finalDays [$ipidPatient] ['FinalCountDays']);
				$patientDetails [$ipidPatient] ['daysoftreatment'] = sizeof($activeDaysFinalTotal[$ipidPatient]);
			}

			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhereIn('ipid', $allfinal);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("KvnoDoctor d")
				->whereIn('d.ipid', $allfinal)
				->andWhereNotIn('d.id', $del_visits['kvno_doctor_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();

			$visit_array['d'] = 0;
			foreach($kvno_doctor_visits_arr as $doc => $value_doc)
			{
				$valid_date_doc = date('Y-m-d', strtotime($value_doc['start_date']));

				if(in_array($valid_date_doc, $finalDays[$value_doc['ipid']]['FinalCountDays']))
				{
					$start_date = strtotime($value_doc['start_date']);
					$end_date = strtotime($value_doc['end_date']);
					$doc_visit_minutes = round(($end_date - $start_date) / 60);
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['user_name'] = $username[$value_doc['create_user']];
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_minutes'] += $doc_visit_minutes;
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_count'] = $minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_driving'] += $value_doc['fahrtzeit'];
					$doctor_visits_dbg[$patient_array[$value_doc['ipid']]['epid']][$value_doc['create_date']] = $username[$value_doc['create_user']] . " --> " . $value_doc['ipid'] . '-> Besuchsformular Arzt: ' . $value_doc['start_date'] . ' -> ' . $value_doc['start_date'] . ' === minutes:  ' . $doc_visit_minutes . ' driving ->' . $value_doc['fahrtzeit'];
					$visit_array['d'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n doctor_visits \n");
				print_r($doctor_visits_dbg);
			}

			/* ----------------------Get all "nurse visits" details from patients----------------------------- */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $allfinal)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();

			$visit_array['n'] = 0;
			foreach($kvno_nurse_visits_arr as $nur => $value_nur)
			{
				$valid_date_nurse = date('Y-m-d', strtotime($value_nur['start_date']));

				if(in_array($valid_date_nurse, $finalDays[$value_nur['ipid']]['FinalCountDays']))
				{

					$start_date = strtotime($value_nur['start_date']);
					$end_date = strtotime($value_nur['end_date']);
					$nurse_visit_minutes = round(($end_date - $start_date) / 60);
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['user_name'] = $username[$value_nur['create_user']];
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_minutes'] += $nurse_visit_minutes;
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_count'] = $minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_driving'] += $value_nur['fahrtzeit'];
					$nurse_visits_dbg[$patient_array[$value_nur['ipid']]['epid']][$value_nur['create_date']] = $value_nur['create_user'] . '-> Besuchsformular Pflege: ' . $value_nur['start_date'] . ' -> ' . $value_nur['end_date'] . ' ===  ' . $nurse_visit_minutes . ' driving->' . $value_nur['fahrtzeit'];
					$visit_array['n'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n nurse_visits \n");
				print_r($nurse_visits_dbg);
			}
			/* ----------------------Get all "koordination visits" details from patients----------------------------- */
			$kvno_koordination_visits = Doctrine_Query::create()
				->select("*")
				->from("VisitKoordination")
				->whereIn('ipid', $allfinal)
				->andWhereNotIn('id', $del_visits['visit_koordination_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

			$visit_array['k'] = 0;
			foreach($kvno_koordination_visits_arr as $koord => $value_koord)
			{
				$valid_date_koor = date('Y-m-d', strtotime($value_koord['start_date']));
				if(in_array($valid_date_koor, $finalDays[$value_koord['ipid']]['FinalCountDays']))
				{
					$start_date = strtotime($value_koord['start_date']);
					$end_date = strtotime($value_koord['end_date']);
					$koordination_visit_minutes = round(($end_date - $start_date) / 60);
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['user_name'] = $username[$value_koord['create_user']];
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_minutes'] += $koordination_visit_minutes;
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_count'] = $minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_driving'] += $value_koord['fahrtzeit'];
					$koordinator_visits_dbg[$patient_array[$value_koord['ipid']]['epid']][$value_koord['create_date']] = $value_koord['create_user'] . '-> Besuchsformular Koordination: ' . $value_koord['start_date'] . ' -> ' . $value_koord['end_date'] . ' === ' . $koordination_visit_minutes . ' driving->' . $value_koord['fahrtzeit'];
					$visit_array['k'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordinator_visits \n");
				print_r($koordinator_visits_dbg);
				print_r("\n rest of data \n");
			}
			/* ------------------------Get all VERLAUF - "Telefonate" details from patients----------------------------------- */
			$previleges = new Modules();
			$modulepriv = $previleges->checkModulePrivileges("55", $logininfo->clientid);

			if($modulepriv)
			{
				$course_xt = Doctrine_Query::create()
					->select("ipid,course_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
					->from('PatientCourse')
					->whereIn('ipid', $allfinal)
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
					->andWhere("wrong = 0")
					->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$course_xt_array = $course_xt->fetchArray();

				foreach($course_xt_array as $course_xt_key => $course_xt_val)
				{
					$valid_date_xt = date('Y-m-d', strtotime($course_xt_val['course_date']));

					if(in_array($valid_date_xt, $finalDays[$course_xt_val['ipid']]['FinalCountDays']))
					{
						$course_xt_arr = explode("|", $course_xt_val['course_title']);
						$xt_array[$patient_array[$course_xt_val['ipid']]['epid']][] = $course_xt_val['course_title'];

						$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['user_name'] = $username[$course_xt_val['create_user']];
						if(count($course_xt_arr) == 3)
						{ //method implemented with 3 inputs
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[0]);
						}
						else if(count($course_xt_arr) != 3 && count($course_xt_arr) < 3)
						{ //old method before anlage 10
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[0]);
						}
						else if(count($course_xt_arr) != 3 && count($course_xt_arr) > 3)
						{ //new method (XT) 3 inputs and 1 select newly added in verlauf
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[1]);
						}

						$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_count'] = $minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_count'] + 1;
					}
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n telefon \n");
				print_r($xt_array);
			}

			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */
			$course_v = Doctrine_Query::create()
				->select("ipid,course_date,create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $allfinal)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
				->orderBy('course_date ASC');
			$course_v_array = $course_v->fetchArray();

			foreach($course_v_array as $course_v_key => $course_v_val)
			{
				$valid_date_v = date('Y-m-d', strtotime($course_v_val['course_date']));

				if(in_array($valid_date_v, $finalDays[$course_v_val['ipid']]['FinalCountDays']))
				{
					$course_v_arr = explode("|", $course_v_val['course_title']);
					$v_array[$patient_array[$course_v_val['ipid']]['epid']][] = $course_v_val['course_title'];

					$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['user_name'] = $username[$course_v_val['create_user']];

					if(count($course_v_arr) == 3)
					{
						$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_minutes'] +=intval($course_v_arr[0]);
					}
					else if(count($course_v_arr) != 3)
					{
						$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_minutes'] +=intval($course_v_arr[0]);
					}

					$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_count'] = $minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_count'] + 1;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordination \n");
				print_r($v_array);
			}

			/* ------------------------Get all  VERLAUF -  "Bertrag" details from patients----------------------------------- */
			$course = Doctrine_Query::create()
				->select("ipid,course_date, create_user,  AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $allfinal)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
				->orderBy('course_date ASC');
			$coursearray = $course->fetchArray();

			foreach($coursearray as $course_key => $course_val)
			{
				$valid_date_u = date('Y-m-d', strtotime($course_val['course_date']));

				if(in_array($valid_date_u, $finalDays[$course_val['ipid']]['FinalCountDays']))
				{
					$coursearr = explode("|", $course_val['course_title']);
					$u_array[$patient_array[$course_val['ipid']]['epid']][] = $course_val['course_title'];

					$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['user_name'] = $username[$course_val['create_user']];
					if(count($coursearr) == 3)
					{ //method implemented with 3 inputs
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[0]);
					}
					else if(count($coursearr) != 3 && count($coursearr) < 3)
					{ //old method before anlage 10
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[0]);
					}
					else if(count($coursearr) != 3 && count($coursearr) > 3)
					{ //new method (U) 3 inputs and 1 select newly added in verlauf
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[1]);
					}
					$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_count'] = $minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_count'] + 1;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n Bertrag \n");
				print_r($u_array);
			}

			/* ----------------------Prepare data for display ----------------------------- */
			$patient_actions_count = array();
			$visit_count = 0;

			$total_visits_per_day = 0;
			$total_contacts_per_day = 0;

			foreach($minutes_array as $patient_ipid => $values)
			{
				$patient_values[] = $patient_ipid;
				$reported_days[$patient_ipid] = sizeof($finalDays [$patient_ipid] ['FinalCountDays']);
				$x = 0;
				foreach($values as $user_name => $vls)
				{
					$visit_count +=$vls['visit_count'];
					$user_documentation[$patient_ipid][$x]['user_name'] = $vls['user_name'];
					if($vls['visit_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['visit_minutes'] = $vls['visit_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_minutes'] = 0;
					}
					if($vls['visit_count'])
					{
						$user_documentation[$patient_ipid][$x]['visit_count'] = $vls['visit_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_count'] = 0;
					}

					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = 0;
					}

					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = 0;
					}

					if($vls['telefonate_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['telefonate_minutes'] = $vls['telefonate_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['telefonate_minutes'] = 0;
					}

					if($vls['telefonate_count'])
					{
						$user_documentation[$patient_ipid][$x]['telefonate_count'] = $vls['telefonate_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['telefonate_count'] = 0;
					}

					if($vls['coordination_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_minutes'] = $vls['coordination_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_minutes'] = 0;
					}

					if($vls['coordination_count'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_count'] = $vls['coordination_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_count'] = 0;
					}
					if($vls['consulting_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['consulting_minutes'] = $vls['consulting_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['consulting_minutes'] = 0;
					}

					if($vls['consulting_count'])
					{
						$user_documentation[$patient_ipid][$x]['consulting_count'] = $vls['consulting_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['consulting_count'] = 0;
					}

					$user_documentation_actions[$patient_ipid][$x]['user_actions'] = $user_documentation[$patient_ipid][$x]['visit_count'] + $user_documentation[$patient_ipid][$x]['telefonate_count'] + $user_documentation[$patient_ipid][$x]['consulting_count'];

					$user_documentation[$patient_ipid][$x]['visits_per_day'] = round($user_documentation[$patient_ipid][$x]['visit_count'] / $reported_days[$patient_ipid], 2) . ' (' . $user_documentation[$patient_ipid][$x]['visit_count'] . '/' . $reported_days[$patient_ipid] . ')';
					$user_documentation[$patient_ipid][$x]['contacts_per_day'] = round($user_documentation_actions[$patient_ipid][$x]['user_actions'] / $reported_days[$patient_ipid], 2) . '(' . $user_documentation_actions[$patient_ipid][$x]['user_actions'] . '/' . $reported_days[$patient_ipid] . ')';

					$patient_actions_count[$patient_ipid]['patient_visits_count'] += $user_documentation[$patient_ipid][$x]['visit_count'];
					$patient_actions_count[$patient_ipid]['patient_visits_minutes_count'] += $user_documentation[$patient_ipid][$x]['visit_minutes'];
					$patient_actions_count[$patient_ipid]['patient_visits_driving_count'] += $user_documentation[$patient_ipid][$x]['visit_driving'];

					$patient_actions_count[$patient_ipid]['patient_telefon_count'] += $user_documentation[$patient_ipid][$x]['telefonate_count'];
					$patient_actions_count[$patient_ipid]['patient_telefon_minutes_count'] += $user_documentation[$patient_ipid][$x]['telefonate_minutes'];

					$patient_actions_count[$patient_ipid]['patient_coordination_count'] += $user_documentation[$patient_ipid][$x]['coordination_count'];
					$patient_actions_count[$patient_ipid]['patient_coordination_minutes_count'] += $user_documentation[$patient_ipid][$x]['coordination_minutes'];

					$patient_actions_count[$patient_ipid]['patient_consulting_count'] += $user_documentation[$patient_ipid][$x]['consulting_count'];
					$patient_actions_count[$patient_ipid]['patient_consulting_minutes_count'] += $user_documentation[$patient_ipid][$x]['consulting_minutes'];

					$total_visits_per_day += round($user_documentation[$patient_ipid][$x]['visit_count'] / $reported_days[$patient_ipid], 2);
					$total_contacts_per_day += round($user_documentation_actions[$patient_ipid][$x]['user_actions'] / $reported_days[$patient_ipid], 2);

					$x++;
				}
			}

			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;
			$total_visits_minutes = 0;
			$total_visits_count = 0;
			$total_driving_sum = 0;

			$total_telefonat_count = 0;
			$total_telefonat_minutes = 0;
			$total_coordination_count = 0;
			$total_coordination_minutes = 0;
			$total_consulting_count = 0;
			$total_consulting_minutes = 0;

			if(!empty($patient_array))
			{
				foreach($patient_array as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patient_array[$patient['ipid']]);
					}
				}
				foreach($patient_array as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['last_name'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['first_name'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient['birthd'];
					$MasterData['data'][$patient['ipid']]['admissiondate'] = $patient['admission_date'];
					if($patient_discharge_details[$patient['ipid']]['discharge_date'])
					{
						$MasterData['data'][$patient['ipid']]['discharge_date'] = $patient_discharge_details[$patient['ipid']]['discharge_date'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['discharge_date'] = "-";
					}
					$MasterData['data'][$patient['ipid']]['user_documentation'] = $user_documentation[$patient['ipid']];

					$total_visits_count += $patient_actions_count[$patient['ipid']]['patient_visits_count'];
					$total_visits_minutes += $patient_actions_count[$patient['ipid']]['patient_visits_minutes_count'];
					$total_driving_sum += $patient_actions_count[$patient['ipid']]['patient_visits_driving_count'];

					$total_telefonat_count += $patient_actions_count[$patient['ipid']]['patient_telefon_count'];
					$total_telefonat_minutes += $patient_actions_count[$patient['ipid']]['patient_telefon_minutes_count'];

					$total_coordination_count += $patient_actions_count[$patient['ipid']]['patient_coordination_count'];
					$total_coordination_minutes += $patient_actions_count[$patient['ipid']]['patient_coordination_minutes_count'];

					$total_consulting_count += $patient_actions_count[$patient['ipid']]['patient_consulting_count'];
					$total_consulting_minutes += $patient_actions_count[$patient['ipid']]['patient_consulting_minutes_count'];

					$i++;
				}
				$MasterData['extra']['total_visits_count'] = $total_visits_count;
				$MasterData['extra']['avg_total_visits_count'] = round($total_visits_count / $i, 2);

				$MasterData['extra']['total_visits_minutes'] = $total_visits_minutes;
				$MasterData['extra']['avg_total_visits_minutes'] = round($total_visits_minutes / $i, 2);

				$MasterData['extra']['total_driving_sum'] = $total_driving_sum;
				$MasterData['extra']['avg_total_driving_sum'] = round($total_driving_sum / $i, 2);

				$MasterData['extra']['total_telefonat_count'] = $total_telefonat_count;
				$MasterData['extra']['avg_total_telefonat_count'] = round($total_telefonat_count / $i, 2);

				$MasterData['extra']['total_telefonat_minutes'] = $total_telefonat_minutes;
				$MasterData['extra']['avg_total_telefonat_minutes'] = round($total_telefonat_minutes / $i, 2);

				$MasterData['extra']['total_coordination_minutes'] = $total_coordination_minutes;
				$MasterData['extra']['avg_total_coordination_minutes'] = round($total_coordination_minutes / $i, 2);

				$MasterData['extra']['total_coordination_count'] = $total_coordination_count;
				$MasterData['extra']['avg_total_coordination_count'] = round($total_coordination_count / $i, 2);

				$MasterData['extra']['total_consulting_minutes'] = $total_consulting_minutes;
				$MasterData['extra']['avg_total_consulting_minutes'] = round($total_consulting_minutes / $i, 2);

				$MasterData['extra']['total_consulting_count'] = $total_consulting_count;
				$MasterData['extra']['avg_total_consulting_count'] = round($total_consulting_count / $i, 2);

				$MasterData['extra']['total_visits_per_day'] = $total_visits_per_day;
				$MasterData['extra']['avg_total_visits_per_day'] = round($total_visits_per_day / $i, 2);

				$MasterData['extra']['total_contacts_per_day'] = $total_contacts_per_day;
				$MasterData['extra']['avg_total_contacts_per_day'] = round($total_contacts_per_day / $i, 2);

				return $MasterData;
			}
		}

		public function users_working_hours($params)
		{
			// report_id = 103
			// report_name = Kontakte & Arbeitszeiten Nicht SAPV
			// "Kontakte & Arbeitszeiten Nicht SAPV
			// Patient Surname | Patient Firstname | Patient DOB | Patient admission | Patient discharge | has sapv VV? |(X) visit times | (X) driving time | (X) time of "Telefonate" | (X) time of Dokumentation( ) | (X) time of Koordination | (X) time of Beratung
			// All patients, including standby  - in report period
			// Show for each patient:
			// - All visits done in report period((X) visit times | (X) driving time )
			// - All actions done in verlauf (Beratung, Koordination) ((X) time of Koordination | (X) time of Beratung )
			// Daniel: this is for nordrhein. so(all data it is taken) for the visit forms and verlauf shortcuts
			// Show all active patients in report - actions that were done - on "inactive sapv VV" days
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$pm = new PatientMaster ();


			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidarr = array();
			$standby = array();
			$active_patients = array();

			$active_patients = $this->getActivePatients($quarterarr, $yeararr, $montharr);


			if($includearr['standby'] == 1)
			{
				$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
			}

			$ipidarr = array_merge($active_patients, $standby);

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "999999999999999";
			}

			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
				$username[$val['id']] = $val['username'];
			}

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* ################################################################################################### */
			/* ----------------- Get Patients SAPV details-------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');


			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andwhere('sv.verordnet  LIKE "4"')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray();

			foreach($sapvarr as $keys => $sapv)
			{
				$valid_ipids_arr[] = $sapv['ipid'];

				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}
			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						$patientDataPseudo [$ipid] ['sapvDaysListFinal'] [] = $daysapv;
					}
				}
				$patientDataPseudo [$ipid] ['sapvDaysListFinal'] = array_unique($patientDataPseudo [$ipid] ['sapvDaysListFinal']);
				$patientData [$ipid] ['sapvDaysList'] = "";
				$patientData [$ipid] ['sapvDaysList'] = $patientDataPseudo [$ipid] ['sapvDaysListFinal'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients OVERALL SAPV details-------------------- */

			$patient_eversapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andwhere('sv.verordnet  LIKE "4"')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$ever_sapvarr = $patient_eversapv->fetchArray();

			foreach($ever_sapvarr as $keys_sapv => $sapv_values)
			{
				$patients_with_vv_sapv[] = $sapv_values['ipid'];
			}
			if(empty($patients_with_vv_sapv))
			{
				$patients_with_vv_sapv[] = "XXX";
			}

			/* ########################################################################## */
			/* ----------------- Get hospital and hospiz locations -------------------- */
			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type in ("1","2")');
			$hosparray = $hospitalids->fetchArray();

			$hospstr = "";
			foreach($hosparray as $hospital)
			{
				$hospstr .= "'" . $hospital ['id'] . "',";
				$hosp_arr[] = $hospital['id'];
			}
			$hosp_arr[] = '99999999999';


			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod ['interval_sql']));

			/* ################################################################################################### */
			/* ----------------- Get Patient hospital and hospiz locations in report period -------------------- */
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('location_id', $hosp_arr)
				->andWhere('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('' . $time_interval . '')
				->andWhereIn('ipid', $ipidarr);
			$locationsarr = $locations->fetchArray();

			/* ################################################################################################### */
			/* ----------------- Get Patients Details -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipidarr)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			$dischargedipidstr = "'99999999999'";

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";

				$patient_array[$val['ipid']]['ipid'] = $val['ipid'];
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
				$patientDetails [$val ['ipid']] ['epid'] = $val ['EpidIpidMapping'] ['epid'];
				$patientDetails [$val ['ipid']] ['surname'] = $val ['last_name'];
				$patientDetails [$val ['ipid']] ['firstname'] = $val ['first_name'];
				$patientDetails [$val ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($val ['birthd']));
				$patientDetails [$val ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($val ['admission_date']));

				if($val['isstandby'] == '1')
				{
					$patient_array[$val['ipid']]['admission_date'] = "STANDBY";
				}
				else
				{
					$patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
				}

				if($val['isdischarged'] == 1)
				{
					$dischargedipidstr .= ",'" . $val['ipid'] . "'";
					$dischargedipid_arr[] = $val['ipid'];
				}
			}

			$dischargedipid_arr[] = '99999999999';
			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ################################################################################################### */
			/* ----------------- Get discharge methods dead  -------------------- */
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "99999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients discharge details -------------------- */
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $dischargedipid_arr)
				->andWhere('isdelete = 0');
			$patientdisarray = $patientdis->fetchArray();

			foreach($patientdisarray as $dischargedPatient)
			{
				if(in_array($dischargedPatient['discharge_method'], $todIds))
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				else
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				$patientDetails [$dischargedPatient ['ipid']] ['dischargedate_final'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));

				$patient_discharge_details[$dischargedPatient['ipid']]['discharge_date'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
			}

			/* ###################################################################### */
			foreach($locationsarr as $location)
			{
				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$till = end($finalPeriodDays);
						$from = date('Y-m-d', strtotime($location ['valid_from']));

						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
					}
					else
					{
						$till = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
						$from = date('Y-m-d', strtotime($location ['valid_from']));

						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, date('Y-m-d'), false);
					}
				}
				else if(strtotime(date('Y-m-d', strtotime($location['valid_till']))) == strtotime(date('Y-m-d', strtotime($location ['valid_from']))))
				{
					$till = date('Y-m-d', strtotime('+1 day', strtotime($location ['valid_till'])));
					$from = date('Y-m-d', strtotime('-1 day', strtotime($location ['valid_till'])));

					$realfullhospitaldays [$location ['ipid']] [] = date('Y-m-d', strtotime($location ['valid_till']));
				}
				else
				{
					$till = date('Y-m-d', strtotime($location ['valid_till']));
					$from = date('Y-m-d', strtotime($location ['valid_from']));
					$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
				}

				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('+1 day', strtotime($from)));
				$patientData [$location ['ipid']] ['hospitalStartDays'][] = date("Y-m-d", strtotime($location ['valid_from']));
				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('-1 day', strtotime($till)));

				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = end($finalPeriodDays);
					}
					else
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
					}
				}
				else
				{
					$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime($location ['valid_till']));
				}

				$current_hosp_days = array();
				if(in_array(date('Y-m-d', strtotime($location['valid_till'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					in_array($patientDetails[$location ['ipid']]['dischargemtd'], $todIds) &&
					!in_array(date('Y-m-d', strtotime($location['valid_from'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					$patientDetails [$location ['ipid']] ['dischargedate_final'] == date('d.m.Y', strtotime($location['valid_till']))
				)
				{
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
					$diedinhospital [$location ['ipid']] = date('Y-m-d', strtotime($location['valid_till']));
					$patientDetails [$location ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime('-1 day', strtotime($patientDetails [$location ['ipid']] ['dischargedate'])));
				}
				else if($location ['valid_till'] == "0000-00-00 00:00:00")
				{ //if not discharge - give hospital days
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
				}
				else
				{
					$diedinhospital [$location ['ipid']] = false;
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime('-1 day', strtotime($till))), false);
				}
				$patientData [$location ['ipid']] ['hospitalDaysList'][] = $current_hosp_days;
			}

			foreach($patientData as $ipid => $hospata)
			{
				foreach($hospata ['hospitalDaysList'] as $group => $hdata)
				{
					foreach($hdata as $key => $dayh)
					{
						$patientDataPseudoH [$ipid] ['hospitalDaysList'] [] = $dayh;
					}
				}
				$patientDataPseudoH [$ipid] ['hospitalDaysList'] = array_unique($patientDataPseudoH [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['hospitalDaysList'] = "";
				$patientData [$ipid] ['hospitalDaysList'] = $patientDataPseudoH [$ipid] ['hospitalDaysList'];

				foreach($hospata['hospitalStartDays'] as $k_start_date => $v_start_date)
				{
					if(in_array($v_start_date, $hospata['hospitalEndDays']))
					{
						$patientData [$ipid] ['continuous_hospital'][] = $v_start_date;
						$patientData [$ipid] ['hospitalDaysList'][] = $v_start_date;

						if(array_search($v_start_date, $patientData[$ipid]['sapvDaysList']))
						{
							unset($patientData[$ipid]['sapvDaysList'][array_search($v_start_date, $patientData[$ipid]['sapvDaysList'])]);
						}
					}
				}

				foreach($hospata['hospitalEndDays'] as $k_end_date => $v_end_date)
				{
					if(in_array($patientDetails[$ipid]['dischargemtd'], $todIds) && $patientDetails [$ipid] ['dischargedate_final'] = date('d.m.Y', strtotime($v_end_date)))
					{
						$patientData [$ipid] ['hospitalDaysList'][] = $v_end_date;
					}
				}
				$patientData [$ipid] ['hospitalDaysList'] = array_unique($patientData [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['continuous_hospital'] = array_unique($patientData [$ipid] ['continuous_hospital']);
			}

			$patientTreatmentDays = $pm->getTreatedDaysRealMultiple($ipidarr, false);

			foreach($patientTreatmentDays as $patientTreatmentIpid => $patientTreatmentData)
			{

				if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
					{
						if(count($patientTreatmentData ['admissionDates']) == 0)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						}
						else
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
				{

					if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = $patientTreatmentData ['discharge_date'];
					}

					if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
					else
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
				else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
				{
					foreach($patientTreatmentData ['admissionDates'] as $keyadmission => $admissionvalues)
					{
						if(empty($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']))
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
						}
						else
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($admission));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($discharge));
					}
				}
				else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
					{
						$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));

						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}

				if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])))
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
			}


			foreach($patientDateRange as $treatmentIpid => $range)
			{
				foreach($range as $ktreat => $treatmentarr)
				{
					foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
					{
						$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
					}
				}
			}

			foreach($treatmentDaysArray as $ipidPat => $treatmentDaysArrayF)
			{
				if(count($treatmentDaysArrayF) > 0)
				{
					foreach($treatmentDaysArrayF as $keyt => $treatmentDayValue)
					{
						$finalActiveDaysArray [$ipidPat] ['activedays'][] = array_intersect($treatmentDayValue, $finalPeriodDays);
					}
				}
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{
				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							if(in_array($patientDetails[$patIpid]['dischargemtd'], $todIds))
							{ // check if day is in hospital
								$lastDischargeDate = date("Y-m-d", strtotime($patientDetails [$patIpid] ['dischargedate']));
								if(strtotime($day) <= strtotime($lastDischargeDate))
								{
									$activeDaysFinal[$patIpid][] = $day;
								}
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
							else
							{
								$activeDaysFinal[$patIpid][] = $day;
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
						}
					}
				}
				$activeDaysFinal[$patIpid] = array_unique($activeDaysFinal[$patIpid]);
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{
				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							$activeDaysFinalTotal[$patIpid][] = $day;
						}
					}
				}
				$activeDaysFinalTotal[$patIpid] = array_unique($activeDaysFinalTotal[$patIpid]);
			}

			foreach($patientData as $patientIpid => $patientDates)
			{
				$disthospdays[$patientIpid] = array();
				foreach($realfullhospitaldays[$patientIpid] as $realfullhospitaldays_per)
				{
					$disthospdays[$patientIpid] = array_merge($disthospdays[$patientIpid], (array) $realfullhospitaldays_per);
				}
				array_unique($disthospdays[$patientIpid]);

				array_unique($finalPeriodDays);
				array_unique($patientDates['sapvDaysList']);
				array_unique($activeDaysFinal[$patientIpid]);
				array_unique($patientDates['hospitalDaysList']);
				$sapv_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $patientDates['sapvDaysList']);
				$non_sapv[$patientIpid] = array_diff($finalPeriodDays, $patientDates['sapvDaysList']);
				$activ_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $activeDaysFinal[$patientIpid]);
				$sapv_activ_in_perioada[$patientIpid] = array_intersect($activ_in_perioada[$patientIpid], $sapv_in_perioada[$patientIpid]);

				foreach($sapv_activ_in_perioada[$patientIpid] as $sapvActiveDay)
				{
					if(!in_array($sapvActiveDay, $patientDates['hospitalDaysList']))
					{
						$finalDays [$patientIpid]['FinalCountDays'][] = $sapvActiveDay;
					}
				}
				array_unique($finalDays [$patientIpid]['FinalCountDays']);

				if(!is_array($finalDays [$patientIpid]['FinalCountDays']))
				{
					$finalDays [$patientIpid]['FinalCountDays'] = array();
				}

				$disthospdayz[$patientIpid] = array_diff($disthospdays[$patientIpid], $finalDays [$patientIpid]['FinalCountDays']);

				$daysofhostpitalinperiod[$patientIpid] = array_intersect($disthospdayz[$patientIpid], $activ_in_perioada[$patientIpid]);
			}
			//final sapv tags and days of treatment
			foreach($patientDetails as $ipidPatient => $patientDataValue)
			{

				$patientDetails [$ipidPatient] ['sapvtage'] = sizeof($finalDays [$ipidPatient] ['FinalCountDays']);
				$patientDetails [$ipidPatient] ['daysoftreatment'] = sizeof($activeDaysFinalTotal[$ipidPatient]);
			}

			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhereIn('ipid', $allfinal);

			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}
			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("KvnoDoctor d")
				->whereIn('d.ipid', $allfinal)
				->andWhereNotIn('d.id', $del_visits['kvno_doctor_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();

			$visit_array['d'] = 0;
			foreach($kvno_doctor_visits_arr as $doc => $value_doc)
			{
				$valid_date_doc = date('Y-m-d', strtotime($value_doc['start_date']));

				if(!in_array($valid_date_doc, $finalDays[$value_doc['ipid']]['FinalCountDays']))
				{
					$start_date = strtotime($value_doc['start_date']);
					$end_date = strtotime($value_doc['end_date']);
					$doc_visit_minutes = round(($end_date - $start_date) / 60);

					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['user_name'] = $username[$value_doc['create_user']];
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_minutes'] += $doc_visit_minutes;
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_count'] = $minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_driving'] += $value_doc['fahrtzeit'];
					$doctor_visits_dbg[$patient_array[$value_doc['ipid']]['epid']][$value_doc['create_date']] = $username[$value_doc['create_user']] . " --> " . $value_doc['ipid'] . '-> Besuchsformular Arzt: ' . $value_doc['start_date'] . ' -> ' . $value_doc['start_date'] . ' === minutes:  ' . $doc_visit_minutes . ' driving ->' . $value_doc['fahrtzeit'];
					$visit_array['d'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n doctor_visits \n");
				print_r($doctor_visits_dbg);
			}
			/* ----------------------Get all "nurse visits" details from patients----------------------------- */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $allfinal)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();

			$visit_array['n'] = 0;
			foreach($kvno_nurse_visits_arr as $nur => $value_nur)
			{
				$valid_date_nurse = date('Y-m-d', strtotime($value_nur['start_date']));

				if(!in_array($valid_date_nurse, $finalDays[$value_nur['ipid']]['FinalCountDays']))
				{
					$start_date = strtotime($value_nur['start_date']);
					$end_date = strtotime($value_nur['end_date']);
					$nurse_visit_minutes = round(($end_date - $start_date) / 60);
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['user_name'] = $username[$value_nur['create_user']];
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_minutes'] += $nurse_visit_minutes;
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_count'] = $minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_driving'] += $value_nur['fahrtzeit'];

					$nurse_visits_dbg[$patient_array[$value_nur['ipid']]['epid']][$value_nur['create_date']] = $value_nur['create_user'] . '-> Besuchsformular Pflege: ' . $value_nur['start_date'] . ' -> ' . $value_nur['end_date'] . ' ===  ' . $nurse_visit_minutes . '  driving->' . $value_nur['fahrtzeit'];
					$visit_array['n'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n nurse_visits \n");
				print_r($nurse_visits_dbg);
			}

			/* ----------------------Get all "koordination visits" details from patients----------------------------- */
			$kvno_koordination_visits = Doctrine_Query::create()
				->select("*")
				->from("VisitKoordination")
				->whereIn('ipid', $allfinal)
				->andWhereNotIn('id', $del_visits['visit_koordination_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

			$visit_array['k'] = 0;
			foreach($kvno_koordination_visits_arr as $koord => $value_koord)
			{
				$valid_date_koor = date('Y-m-d', strtotime($value_koord['start_date']));

				if(!in_array($valid_date_koor, $finalDays[$value_koord['ipid']]['FinalCountDays']))
				{
					$start_date = strtotime($value_koord['start_date']);
					$end_date = strtotime($value_koord['end_date']);
					$koordination_visit_minutes = round(($end_date - $start_date) / 60);
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['user_name'] = $username[$value_koord['create_user']];
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_minutes'] += $koordination_visit_minutes;
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_count'] = $minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_driving'] += $value_koord['fahrtzeit'];

					$koordinator_visits_dbg[$patient_array[$value_koord['ipid']]['epid']][$value_koord['create_date']] = $value_koord['create_user'] . '-> Besuchsformular Koordination: ' . $value_koord['start_date'] . ' -> ' . $value_koord['end_date'] . ' === ' . $koordination_visit_minutes . ' driving->' . $value_koord['fahrtzeit'];

					$visit_array['k'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordinator_visits \n");
				print_r($koordinator_visits_dbg);
				print_r("\n rest of data \n");
			}

			/* ------------------------Get all VERLAUF - "Telefonate" details from patients----------------------------------- */
			$previleges = new Modules();
			$modulepriv = $previleges->checkModulePrivileges("55", $logininfo->clientid);

			if($modulepriv)
			{
				$course_xt = Doctrine_Query::create()
					->select("ipid,course_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
					->from('PatientCourse')
					->whereIn('ipid', $allfinal)
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
					->andWhere("wrong = 0")
					->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$course_xt_array = $course_xt->fetchArray();

				foreach($course_xt_array as $course_xt_key => $course_xt_val)
				{
					$valid_date_xt = date('Y-m-d', strtotime($course_xt_val['course_date']));

					if(!in_array($valid_date_xt, $finalDays[$course_xt_val['ipid']]['FinalCountDays']))
					{
						$course_xt_arr = explode("|", $course_xt_val['course_title']);
						$xt_array[$patient_array[$course_xt_val['ipid']]['epid']][] = $course_xt_val['course_title'];

						$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['user_name'] = $username[$course_xt_val['create_user']];
						if(count($course_xt_arr) == 3)
						{ //method implemented with 3 inputs
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[0]);
						}
						else if(count($course_xt_arr) != 3 && count($course_xt_arr) < 3)
						{ //old method before anlage 10
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[0]);
						}
						else if(count($course_xt_arr) != 3 && count($course_xt_arr) > 3)
						{ //new method (XT) 3 inputs and 1 select newly added in verlauf
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[1]);
						}
						$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_count'] = $minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_count'] + 1;
					}
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n telefon \n");
				print_r($xt_array);
			}

			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */
			$course_v = Doctrine_Query::create()
				->select("ipid,course_date,create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $allfinal)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
				->orderBy('course_date ASC');
			$course_v_array = $course_v->fetchArray();

			foreach($course_v_array as $course_v_key => $course_v_val)
			{
				$valid_date_v = date('Y-m-d', strtotime($course_v_val['course_date']));

				if(!in_array($valid_date_v, $finalDays[$course_v_val['ipid']]['FinalCountDays']))
				{
					$course_v_arr = explode("|", $course_v_val['course_title']);
					$v_array[$patient_array[$course_v_val['ipid']]['epid']][] = $course_v_val['course_title'];

					$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['user_name'] = $username[$course_v_val['create_user']];

					if(count($course_v_arr) == 3)
					{
						$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_minutes'] +=intval($course_v_arr[0]);
					}
					else if(count($course_v_arr) != 3)
					{
						$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_minutes'] +=intval($course_v_arr[0]);
					}

					$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_count'] = $minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_count'] + 1;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordination \n");
				print_r($v_array);
			}

			/* ------------------------Get all  VERLAUF -  "Bertrag" details from patients----------------------------------- */
			$course = Doctrine_Query::create()
				->select("ipid,course_date, create_user,  AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $allfinal)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
				->orderBy('course_date ASC');
			$coursearray = $course->fetchArray();

			foreach($coursearray as $course_key => $course_val)
			{
				$valid_date_u = date('Y-m-d', strtotime($course_val['course_date']));

				if(!in_array($valid_date_u, $finalDays[$course_val['ipid']]['FinalCountDays']))
				{
					$coursearr = explode("|", $course_val['course_title']);
					$u_array[$patient_array[$course_val['ipid']]['epid']][] = $course_val['course_title'];

					$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['user_name'] = $username[$course_val['create_user']];
					if(count($coursearr) == 3)
					{ //method implemented with 3 inputs
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[0]);
					}
					else if(count($coursearr) != 3 && count($coursearr) < 3)
					{ //old method before anlage 10
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[0]);
					}
					else if(count($coursearr) != 3 && count($coursearr) > 3)
					{ //new method (U) 3 inputs and 1 select newly added in verlauf
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[1]);
					}
					$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_count'] = $minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_count'] + 1;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n Bertrag \n");
				print_r($u_array);
			}

			/* ----------------------Prepare data for display ----------------------------- */
			$patient_actions_count = array();
			$visit_count = 0;

			if($_REQUEST['dbg'] == 'x')
			{
				print_r($activ_in_perioada);
				exit;
			}
			$total_visits_per_day = 0;
			$total_contacts_per_day = 0;
			foreach($minutes_array as $patient_ipid => $values)
			{

				$patient_values[] = $patient_ipid;

				$reported_days[$patient_ipid] = $patientDetails [$patient_ipid] ['daysoftreatment'];

				$x = 0;
				foreach($values as $user_name => $vls)
				{
					$visit_count +=$vls['visit_count'];
					$user_documentation[$patient_ipid][$x]['user_name'] = $vls['user_name'];

					if($vls['visit_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['visit_minutes'] = $vls['visit_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_minutes'] = 0;
					}

					if($vls['visit_count'])
					{
						$user_documentation[$patient_ipid][$x]['visit_count'] = $vls['visit_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_count'] = 0;
					}

					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = 0;
					}

					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = 0;
					}

					if($vls['telefonate_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['telefonate_minutes'] = $vls['telefonate_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['telefonate_minutes'] = 0;
					}

					if($vls['telefonate_count'])
					{
						$user_documentation[$patient_ipid][$x]['telefonate_count'] = $vls['telefonate_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['telefonate_count'] = 0;
					}

					if($vls['coordination_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_minutes'] = $vls['coordination_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_minutes'] = 0;
					}

					if($vls['coordination_count'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_count'] = $vls['coordination_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_count'] = 0;
					}
					if($vls['consulting_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['consulting_minutes'] = $vls['consulting_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['consulting_minutes'] = 0;
					}

					if($vls['consulting_count'])
					{
						$user_documentation[$patient_ipid][$x]['consulting_count'] = $vls['consulting_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['consulting_count'] = 0;
					}

					$user_documentation_actions[$patient_ipid][$x]['user_actions'] = $user_documentation[$patient_ipid][$x]['visit_count'] + $user_documentation[$patient_ipid][$x]['telefonate_count'] + $user_documentation[$patient_ipid][$x]['consulting_count'];

					$user_documentation[$patient_ipid][$x]['visits_per_day'] = round($user_documentation[$patient_ipid][$x]['visit_count'] / $reported_days[$patient_ipid], 2) . ' (' . $user_documentation[$patient_ipid][$x]['visit_count'] . '/' . $reported_days[$patient_ipid] . ')';
					$user_documentation[$patient_ipid][$x]['contacts_per_day'] = round($user_documentation_actions[$patient_ipid][$x]['user_actions'] / $reported_days[$patient_ipid], 2) . '(' . $user_documentation_actions[$patient_ipid][$x]['user_actions'] . '/' . $reported_days[$patient_ipid] . ')';

					$patient_actions_count[$patient_ipid]['patient_visits_count'] += $user_documentation[$patient_ipid][$x]['visit_count'];
					$patient_actions_count[$patient_ipid]['patient_visits_minutes_count'] += $user_documentation[$patient_ipid][$x]['visit_minutes'];
					$patient_actions_count[$patient_ipid]['patient_visits_driving_count'] += $user_documentation[$patient_ipid][$x]['visit_driving'];

					$patient_actions_count[$patient_ipid]['patient_telefon_count'] += $user_documentation[$patient_ipid][$x]['telefonate_count'];
					$patient_actions_count[$patient_ipid]['patient_telefon_minutes_count'] += $user_documentation[$patient_ipid][$x]['telefonate_minutes'];

					$patient_actions_count[$patient_ipid]['patient_coordination_count'] += $user_documentation[$patient_ipid][$x]['coordination_count'];
					$patient_actions_count[$patient_ipid]['patient_coordination_minutes_count'] += $user_documentation[$patient_ipid][$x]['coordination_minutes'];

					$patient_actions_count[$patient_ipid]['patient_consulting_count'] += $user_documentation[$patient_ipid][$x]['consulting_count'];
					$patient_actions_count[$patient_ipid]['patient_consulting_minutes_count'] += $user_documentation[$patient_ipid][$x]['consulting_minutes'];


					$total_visits_per_day += round($user_documentation[$patient_ipid][$x]['visit_count'] / $reported_days[$patient_ipid], 2);
					$total_contacts_per_day += round($user_documentation_actions[$patient_ipid][$x]['user_actions'] / $reported_days[$patient_ipid], 2);

					$x++;
				}
			}

			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;
			$total_visits_minutes = 0;
			$total_visits_count = 0;
			$total_driving_sum = 0;

			$total_telefonat_count = 0;
			$total_telefonat_minutes = 0;
			$total_coordination_count = 0;
			$total_coordination_minutes = 0;
			$total_consulting_count = 0;
			$total_consulting_minutes = 0;

			if(!empty($patient_array))
			{
				foreach($patient_array as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patient_array[$patient['ipid']]);
					}
				}
				foreach($patient_array as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['last_name'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['first_name'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient['birthd'];
					$MasterData['data'][$patient['ipid']]['admissiondate'] = $patient['admission_date'];
					if($patient_discharge_details[$patient['ipid']]['discharge_date'])
					{
						$MasterData['data'][$patient['ipid']]['dischargedate'] = $patient_discharge_details[$patient['ipid']]['discharge_date'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['dischargedate'] = "-";
					}
					if(in_array($patient['ipid'], $patients_with_vv_sapv))
					{
						$MasterData['data'][$patient['ipid']]['has_sapv_vv'] = "X";
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['has_sapv_vv'] = "-";
					}

					$MasterData['data'][$patient['ipid']]['user_documentation'] = $user_documentation[$patient['ipid']];

					$total_visits_count += $patient_actions_count[$patient['ipid']]['patient_visits_count'];
					$total_visits_minutes += $patient_actions_count[$patient['ipid']]['patient_visits_minutes_count'];
					$total_driving_sum += $patient_actions_count[$patient['ipid']]['patient_visits_driving_count'];

					$total_telefonat_count += $patient_actions_count[$patient['ipid']]['patient_telefon_count'];
					$total_telefonat_minutes += $patient_actions_count[$patient['ipid']]['patient_telefon_minutes_count'];

					$total_coordination_count += $patient_actions_count[$patient['ipid']]['patient_coordination_count'];
					$total_coordination_minutes += $patient_actions_count[$patient['ipid']]['patient_coordination_minutes_count'];

					$total_consulting_count += $patient_actions_count[$patient['ipid']]['patient_consulting_count'];
					$total_consulting_minutes += $patient_actions_count[$patient['ipid']]['patient_consulting_minutes_count'];


					$i++;
				}
				$MasterData['extra']['total_visits_count'] = $total_visits_count;
				$MasterData['extra']['avg_total_visits_count'] = round($total_visits_count / $i, 2);

				$MasterData['extra']['total_visits_minutes'] = $total_visits_minutes;
				$MasterData['extra']['avg_total_visits_minutes'] = round($total_visits_minutes / $i, 2);

				$MasterData['extra']['total_driving_sum'] = $total_driving_sum;
				$MasterData['extra']['avg_total_driving_sum'] = round($total_driving_sum / $i, 2);



				$MasterData['extra']['total_telefonat_count'] = $total_telefonat_count;
				$MasterData['extra']['avg_total_telefonat_count'] = round($total_telefonat_count / $i, 2);

				$MasterData['extra']['total_telefonat_minutes'] = $total_telefonat_minutes;
				$MasterData['extra']['avg_total_telefonat_minutes'] = round($total_telefonat_minutes / $i, 2);

				$MasterData['extra']['total_coordination_minutes'] = $total_coordination_minutes;
				$MasterData['extra']['avg_total_coordination_minutes'] = round($total_coordination_minutes / $i, 2);

				$MasterData['extra']['total_coordination_count'] = $total_coordination_count;
				$MasterData['extra']['avg_total_coordination_count'] = round($total_coordination_count / $i, 2);

				$MasterData['extra']['total_consulting_minutes'] = $total_consulting_minutes;
				$MasterData['extra']['avg_total_consulting_minutes'] = round($total_consulting_minutes / $i, 2);

				$MasterData['extra']['total_consulting_count'] = $total_consulting_count;
				$MasterData['extra']['avg_total_consulting_count'] = round($total_consulting_count / $i, 2);


				$MasterData['extra']['total_visits_per_day'] = $total_visits_per_day;
				$MasterData['extra']['avg_total_visits_per_day'] = round($total_visits_per_day / $i, 2);

				$MasterData['extra']['total_contacts_per_day'] = $total_contacts_per_day;
				$MasterData['extra']['avg_total_contacts_per_day'] = round($total_contacts_per_day / $i, 2);

				return $MasterData;
			}
		}

		public function users_working_hours_no_sapv($params)
		{
			// report_id = 108
			// report_name = Kontakte & Arbeitszeiten ohne Verordnung
			// Patient Surname | Patient Firstname | Patient DOB | Patient admission | Patient discharge | has sapv VV? |(X) visit times | (X) driving time | (X) time of "Telefonate" | (X) time of Dokumentation( ) | (X) time of Koordination | (X) time of Beratung
			// All patients, including standby  - in report period
			// Show for each patient:
			// - All visits done in report period((X) visit times | (X) driving time )
			// - All actions done in verlauf (Beratung, Koordination) ((X) time of Koordination | (X) time of Beratung )
			// Daniel: this is for nordrhein. so(all data it is taken) for the visit forms and verlauf shortcuts
			// Show all active patients in report - actions that were done - on "inactive sapv(any kind)" days
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$pm = new PatientMaster ();


			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidarr = array();
			$standby = array();

			$include_standby = false;
			if($includearr['standby'] == 1)
			{
				$include_standby = true;
			}

			/* ---------16.12.2013 -> report modified to look for client all patients ------------------- */
			$client_ipids = $this->getAllClientPatients($clientid, $whereepid, $include_standby);

			foreach($client_ipids as $k => $cipid)
			{
				$ipidarr[] = $cipid['ipid'];
			}

			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "999999999999999";
			}

			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
				$username[$val['id']] = $val['username'];
			}

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* ################################################################################################### */
			/* ----------------- Get Patients SAPV details-------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');


			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray();

			foreach($sapvarr as $keys => $sapv)
			{
				$valid_ipids_arr[] = $sapv['ipid'];

				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}
			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						$patientDataPseudo [$ipid] ['sapvDaysListFinal'] [] = $daysapv;
					}
				}
				$patientDataPseudo [$ipid] ['sapvDaysListFinal'] = array_unique($patientDataPseudo [$ipid] ['sapvDaysListFinal']);
				$patientData [$ipid] ['sapvDaysList'] = "";
				$patientData [$ipid] ['sapvDaysList'] = $patientDataPseudo [$ipid] ['sapvDaysListFinal'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}


			/* ################################################################################################### */
			/* ----------------- Get Patients OVERALL SAPV details-------------------- */

			$patient_eversapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0');
			$ever_sapvarr = $patient_eversapv->fetchArray();

			foreach($ever_sapvarr as $keys_sapv => $sapv_values)
			{
				$patients_with_vv_sapv[] = $sapv_values['ipid'];
			}
			if(empty($patients_with_vv_sapv))
			{
				$patients_with_vv_sapv[] = "XXX";
			}

			/* ########################################################################## */
			/* ----------------- Get hospital and hospiz locations -------------------- */
			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type in ("1","2")');
			$hosparray = $hospitalids->fetchArray();

			$hospstr = "";
			foreach($hosparray as $hospital)
			{
				$hospstr .= "'" . $hospital ['id'] . "',";
				$hosp_arr[] = $hospital['id'];
			}
			$hosp_arr[] = '99999999999';


			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod ['interval_sql']));


			/* ################################################################################################### */
			/* ----------------- Get Patient hospital and hospiz locations in report period -------------------- */
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('location_id', $hosp_arr)
				->andWhere('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('' . $time_interval . '')
				->andWhereIn('ipid', $ipidarr);

			$locationsarr = $locations->fetchArray();


			/* ################################################################################################### */
			/* ----------------- Get Patients Details -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipidarr)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			$dischargedipidstr = "'99999999999'";

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";

				$patient_array[$val['ipid']]['ipid'] = $val['ipid'];
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));

				$patientDetails [$val ['ipid']] ['epid'] = $val ['EpidIpidMapping'] ['epid'];
				$patientDetails [$val ['ipid']] ['surname'] = $val ['last_name'];
				$patientDetails [$val ['ipid']] ['firstname'] = $val ['first_name'];
				$patientDetails [$val ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($val ['birthd']));
				$patientDetails [$val ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($val ['admission_date']));

				if($val['isstandby'] == '1')
				{
					$patient_array[$val['ipid']]['admission_date'] = "STANDBY";
				}
				else
				{
					$patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
				}

				if($val['isdischarged'] == 1)
				{
					$dischargedipidstr .= ",'" . $val['ipid'] . "'";
					$dischargedipid_arr[] = $val['ipid'];
				}
			}

			$dischargedipid_arr[] = '99999999999';

			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			if($_REQUEST['ipids'] == "show")
			{
				print_r($allfinal);
				exit;
			}
			/* ################################################################################################### */
			/* ----------------- Get discharge methods dead  -------------------- */
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "99999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients discharge details -------------------- */
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $dischargedipid_arr)
				->andWhere('isdelete = 0');
			$patientdisarray = $patientdis->fetchArray();

			foreach($patientdisarray as $dischargedPatient)
			{
				if(in_array($dischargedPatient['discharge_method'], $todIds))
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				else
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				$patientDetails [$dischargedPatient ['ipid']] ['dischargedate_final'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));

				$patient_discharge_details[$dischargedPatient['ipid']]['discharge_date'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
			}

			/* ###################################################################### */
			foreach($locationsarr as $location)
			{
				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$till = end($finalPeriodDays);
						$from = date('Y-m-d', strtotime($location ['valid_from']));

						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
					}
					else
					{
						$till = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
						$from = date('Y-m-d', strtotime($location ['valid_from']));

						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, date('Y-m-d'), false);
					}
				}
				else if(strtotime(date('Y-m-d', strtotime($location['valid_till']))) == strtotime(date('Y-m-d', strtotime($location ['valid_from']))))
				{
					$till = date('Y-m-d', strtotime('+1 day', strtotime($location ['valid_till'])));
					$from = date('Y-m-d', strtotime('-1 day', strtotime($location ['valid_till'])));

					$realfullhospitaldays [$location ['ipid']] [] = date('Y-m-d', strtotime($location ['valid_till']));
				}
				else
				{
					$till = date('Y-m-d', strtotime($location ['valid_till']));
					$from = date('Y-m-d', strtotime($location ['valid_from']));

					$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
				}

				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('+1 day', strtotime($from)));
				$patientData [$location ['ipid']] ['hospitalStartDays'][] = date("Y-m-d", strtotime($location ['valid_from']));
				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('-1 day', strtotime($till)));

				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = end($finalPeriodDays);
					}
					else
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
					}
				}
				else
				{
					$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime($location ['valid_till']));
				}

				$current_hosp_days = array();
				if(in_array(date('Y-m-d', strtotime($location['valid_till'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					in_array($patientDetails[$location ['ipid']]['dischargemtd'], $todIds) &&
					!in_array(date('Y-m-d', strtotime($location['valid_from'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					$patientDetails [$location ['ipid']] ['dischargedate_final'] == date('d.m.Y', strtotime($location['valid_till']))
				)
				{
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
					$diedinhospital [$location ['ipid']] = date('Y-m-d', strtotime($location['valid_till']));
					$patientDetails [$location ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime('-1 day', strtotime($patientDetails [$location ['ipid']] ['dischargedate'])));
				}
				else if($location ['valid_till'] == "0000-00-00 00:00:00")
				{ //if not discharge - give hospital days
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
				}
				else
				{
					$diedinhospital [$location ['ipid']] = false;
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime('-1 day', strtotime($till))), false);
				}
				$patientData [$location ['ipid']] ['hospitalDaysList'][] = $current_hosp_days;
			}

			foreach($patientData as $ipid => $hospata)
			{
				foreach($hospata ['hospitalDaysList'] as $group => $hdata)
				{
					foreach($hdata as $key => $dayh)
					{
						$patientDataPseudoH [$ipid] ['hospitalDaysList'] [] = $dayh;
					}
				}
				$patientDataPseudoH [$ipid] ['hospitalDaysList'] = array_unique($patientDataPseudoH [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['hospitalDaysList'] = "";
				$patientData [$ipid] ['hospitalDaysList'] = $patientDataPseudoH [$ipid] ['hospitalDaysList'];

				foreach($hospata['hospitalStartDays'] as $k_start_date => $v_start_date)
				{
					if(in_array($v_start_date, $hospata['hospitalEndDays']))
					{
						$patientData [$ipid] ['continuous_hospital'][] = $v_start_date;
						$patientData [$ipid] ['hospitalDaysList'][] = $v_start_date;

						if(array_search($v_start_date, $patientData[$ipid]['sapvDaysList']))
						{
							unset($patientData[$ipid]['sapvDaysList'][array_search($v_start_date, $patientData[$ipid]['sapvDaysList'])]);
						}
					}
				}

				foreach($hospata['hospitalEndDays'] as $k_end_date => $v_end_date)
				{
					if(in_array($patientDetails[$ipid]['dischargemtd'], $todIds) && $patientDetails [$ipid] ['dischargedate_final'] = date('d.m.Y', strtotime($v_end_date)))
					{
						$patientData [$ipid] ['hospitalDaysList'][] = $v_end_date;
					}
				}

				$patientData [$ipid] ['hospitalDaysList'] = array_unique($patientData [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['continuous_hospital'] = array_unique($patientData [$ipid] ['continuous_hospital']);
			}

			$patientTreatmentDays = $pm->getTreatedDaysRealMultiple($ipidarr, false);

			foreach($patientTreatmentDays as $patientTreatmentIpid => $patientTreatmentData)
			{

				if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
					{
						if(count($patientTreatmentData ['admissionDates']) == 0)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						}
						else
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
				{

					if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = $patientTreatmentData ['discharge_date'];
					}

					if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
					else
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
				else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
				{
					foreach($patientTreatmentData ['admissionDates'] as $keyadmission => $admissionvalues)
					{
						if(empty($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']))
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
						}
						else
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($admission));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($discharge));
					}
				}
				else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
					{
						$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));

						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}

				if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])))
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
			}

			foreach($patientDateRange as $treatmentIpid => $range)
			{
				foreach($range as $ktreat => $treatmentarr)
				{
					foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
					{
						$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
					}
				}
			}

			foreach($treatmentDaysArray as $ipidPat => $treatmentDaysArrayF)
			{
				if(count($treatmentDaysArrayF) > 0)
				{
					foreach($treatmentDaysArrayF as $keyt => $treatmentDayValue)
					{
						$finalActiveDaysArray [$ipidPat] ['activedays'][] = array_intersect($treatmentDayValue, $finalPeriodDays);
					}
				}
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{
				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							if(in_array($patientDetails[$patIpid]['dischargemtd'], $todIds))
							{ // check if day is in hospital
								$lastDischargeDate = date("Y-m-d", strtotime($patientDetails [$patIpid] ['dischargedate']));
								if(strtotime($day) <= strtotime($lastDischargeDate))
								{
									$activeDaysFinal[$patIpid][] = $day;
								}
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
							else
							{
								$activeDaysFinal[$patIpid][] = $day;
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
						}
					}
				}
				$activeDaysFinal[$patIpid] = array_unique($activeDaysFinal[$patIpid]);
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{
				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							$activeDaysFinalTotal[$patIpid][] = $day;
						}
					}
				}
				$activeDaysFinalTotal[$patIpid] = array_unique($activeDaysFinalTotal[$patIpid]);
			}

			foreach($patientData as $patientIpid => $patientDates)
			{
				$disthospdays[$patientIpid] = array();
				foreach($realfullhospitaldays[$patientIpid] as $realfullhospitaldays_per)
				{
					$disthospdays[$patientIpid] = array_merge($disthospdays[$patientIpid], (array) $realfullhospitaldays_per);
				}
				array_unique($disthospdays[$patientIpid]);

				array_unique($finalPeriodDays);
				array_unique($patientDates['sapvDaysList']);
				array_unique($activeDaysFinal[$patientIpid]);
				array_unique($patientDates['hospitalDaysList']);
				$sapv_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $patientDates['sapvDaysList']);

				$non_sapv[$patientIpid] = array_diff($finalPeriodDays, $patientDates['sapvDaysList']);

				$activ_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $activeDaysFinal[$patientIpid]);

				$sapv_activ_in_perioada[$patientIpid] = array_intersect($activ_in_perioada[$patientIpid], $sapv_in_perioada[$patientIpid]);


				foreach($sapv_activ_in_perioada[$patientIpid] as $sapvActiveDay)
				{
					if(!in_array($sapvActiveDay, $patientDates['hospitalDaysList']))
					{
						$finalDays [$patientIpid]['FinalCountDays'][] = $sapvActiveDay;
					}
				}
				array_unique($finalDays [$patientIpid]['FinalCountDays']);

				if(!is_array($finalDays [$patientIpid]['FinalCountDays']))
				{
					$finalDays [$patientIpid]['FinalCountDays'] = array();
				}

				$disthospdayz[$patientIpid] = array_diff($disthospdays[$patientIpid], $finalDays [$patientIpid]['FinalCountDays']);

				$daysofhostpitalinperiod[$patientIpid] = array_intersect($disthospdayz[$patientIpid], $activ_in_perioada[$patientIpid]);
			}
			//final sapv tags and days of treatment
			foreach($patientDetails as $ipidPatient => $patientDataValue)
			{

				$patientDetails [$ipidPatient] ['sapvtage'] = sizeof($finalDays [$ipidPatient] ['FinalCountDays']);
				$patientDetails [$ipidPatient] ['daysoftreatment'] = sizeof($activeDaysFinalTotal[$ipidPatient]);
			}

			if($_REQUEST['dbg'] == 'xxx')
			{
				print_r("\n finalDays \n");
				print_r($finalDays);
				exit;
			}
			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"')
				->andWhereIn('ipid', $allfinal);

			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$kvno_doctor_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("KvnoDoctor d")
				->whereIn('d.ipid', $allfinal)
				->andWhereNotIn('d.id', $del_visits['kvno_doctor_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();

			$visit_array['d'] = 0;
			foreach($kvno_doctor_visits_arr as $doc => $value_doc)
			{
				$valid_date_doc = date('Y-m-d', strtotime($value_doc['start_date']));

				if(!in_array($valid_date_doc, $finalDays[$value_doc['ipid']]['FinalCountDays']))
				{
					$start_date = strtotime($value_doc['start_date']);
					$end_date = strtotime($value_doc['end_date']);
					$doc_visit_minutes = round(($end_date - $start_date) / 60);
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['user_name'] = $username[$value_doc['create_user']];
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_minutes'] += $doc_visit_minutes;
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_count'] = $minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_doc['ipid']][$username[$value_doc['create_user']]]['visit_driving'] += $value_doc['fahrtzeit'];
					$doctor_visits_dbg[$patient_array[$value_doc['ipid']]['epid']][$value_doc['create_date']] = $username[$value_doc['create_user']] . " --> " . $value_doc['ipid'] . '-> Besuchsformular Arzt: ' . $value_doc['start_date'] . ' -> ' . $value_doc['start_date'] . ' === minutes:  ' . $doc_visit_minutes . ' driving ->' . $value_doc['fahrtzeit'];

					$visit_array['d'] ++;
				}
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n doctor_visits \n");
				print_r($doctor_visits_dbg);
			}
			/* ----------------------Get all "nurse visits" details from patients----------------------------- */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $allfinal)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();

			$visit_array['n'] = 0;
			foreach($kvno_nurse_visits_arr as $nur => $value_nur)
			{
				$valid_date_nurse = date('Y-m-d', strtotime($value_nur['start_date']));
				if(!in_array($valid_date_nurse, $finalDays[$value_nur['ipid']]['FinalCountDays']))
				{
					$start_date = strtotime($value_nur['start_date']);
					$end_date = strtotime($value_nur['end_date']);
					$nurse_visit_minutes = round(($end_date - $start_date) / 60);

					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['user_name'] = $username[$value_nur['create_user']];
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_minutes'] += $nurse_visit_minutes;
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_count'] = $minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_nur['ipid']][$username[$value_nur['create_user']]]['visit_driving'] += $value_nur['fahrtzeit'];

					$nurse_visits_dbg[$patient_array[$value_nur['ipid']]['epid']][$value_nur['create_date']] = $value_nur['create_user'] . '-> Besuchsformular Pflege: ' . $value_nur['start_date'] . ' -> ' . $value_nur['end_date'] . ' ===  ' . $nurse_visit_minutes . '  driving->' . $value_nur['fahrtzeit'];
					$visit_array['n'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n nurse_visits \n");
				print_r($nurse_visits_dbg);
			}
			/* ----------------------Get all "koordination visits" details from patients----------------------------- */
			$kvno_koordination_visits = Doctrine_Query::create()
				->select("*")
				->from("VisitKoordination")
				->whereIn('ipid', $allfinal)
				->andWhereNotIn('id', $del_visits['visit_koordination_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

			$visit_array['k'] = 0;
			foreach($kvno_koordination_visits_arr as $koord => $value_koord)
			{
				$valid_date_koor = date('Y-m-d', strtotime($value_koord['start_date']));
				if(!in_array($valid_date_koor, $finalDays[$value_koord['ipid']]['FinalCountDays']))
				{
					$start_date = strtotime($value_koord['start_date']);
					$end_date = strtotime($value_koord['end_date']);
					$koordination_visit_minutes = round(($end_date - $start_date) / 60);

					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['user_name'] = $username[$value_koord['create_user']];
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_minutes'] += $koordination_visit_minutes;
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_count'] = $minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_count'] + 1;
					$minutes_array[$value_koord['ipid']][$username[$value_koord['create_user']]]['visit_driving'] += $value_koord['fahrtzeit'];

					$koordinator_visits_dbg[$patient_array[$value_koord['ipid']]['epid']][$value_koord['create_date']] = $value_koord['create_user'] . '-> Besuchsformular Koordination: ' . $value_koord['start_date'] . ' -> ' . $value_koord['end_date'] . ' === ' . $koordination_visit_minutes . ' driving->' . $value_koord['fahrtzeit'];

					$visit_array['k'] ++;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordinator_visits \n");
				print_r($koordinator_visits_dbg);
				print_r("\n rest of data \n");
			}
			/* ------------------------Get all VERLAUF - "Telefonate" details from patients----------------------------------- */
			$previleges = new Modules();
			$modulepriv = $previleges->checkModulePrivileges("55", $logininfo->clientid);

			if($modulepriv)
			{
				$course_xt = Doctrine_Query::create()
					->select("ipid,course_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
					->from('PatientCourse')
					->whereIn('ipid', $allfinal)
					->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
					->andWhere("wrong = 0")
					->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$course_xt_array = $course_xt->fetchArray();

				foreach($course_xt_array as $course_xt_key => $course_xt_val)
				{
					$valid_date_xt = date('Y-m-d', strtotime($course_xt_val['course_date']));

					if(!in_array($valid_date_xt, $finalDays[$course_xt_val['ipid']]['FinalCountDays']))
					{
						$course_xt_arr = explode("|", $course_xt_val['course_title']);
						$xt_array[$patient_array[$course_xt_val['ipid']]['epid']][] = $course_xt_val['course_title'];

						$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['user_name'] = $username[$course_xt_val['create_user']];
						if(count($course_xt_arr) == 3)
						{ //method implemented with 3 inputs
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[0]);
						}
						else if(count($course_xt_arr) != 3 && count($course_xt_arr) < 3)
						{ //old method before anlage 10
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[0]);
						}
						else if(count($course_xt_arr) != 3 && count($course_xt_arr) > 3)
						{ //new method (XT) 3 inputs and 1 select newly added in verlauf
							$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_minutes'] +=intval($course_xt_arr[1]);
						}

						$minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_count'] = $minutes_array[$course_xt_val['ipid']][$username[$course_xt_val['create_user']]]['telefonate_count'] + 1;
					}
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n telefon \n");
				print_r($xt_array);
			}

			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */
			$course_v = Doctrine_Query::create()
				->select("ipid,course_date,create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $allfinal)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
				->orderBy('course_date ASC');
			$course_v_array = $course_v->fetchArray();

			foreach($course_v_array as $course_v_key => $course_v_val)
			{
				$valid_date_v = date('Y-m-d', strtotime($course_v_val['course_date']));

				if(!in_array($valid_date_v, $finalDays[$course_v_val['ipid']]['FinalCountDays']))
				{
					$course_v_arr = explode("|", $course_v_val['course_title']);
					$v_array[$patient_array[$course_v_val['ipid']]['epid']][] = $course_v_val['course_title'];

					$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['user_name'] = $username[$course_v_val['create_user']];

					if(count($course_v_arr) == 3)
					{
						$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_minutes'] +=intval($course_v_arr[0]);
					}
					else if(count($course_v_arr) != 3)
					{
						$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_minutes'] +=intval($course_v_arr[0]);
					}

					$minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_count'] = $minutes_array[$course_v_val['ipid']][$username[$course_v_val['create_user']]]['coordination_count'] + 1;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordination \n");
				print_r($v_array);
			}

			/* ------------------------Get all  VERLAUF -  "Bertrag" details from patients----------------------------------- */
			$course = Doctrine_Query::create()
				->select("ipid,course_date, create_user,  AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $allfinal)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
				->orderBy('course_date ASC');
			$coursearray = $course->fetchArray();

			foreach($coursearray as $course_key => $course_val)
			{
				$valid_date_u = date('Y-m-d', strtotime($course_val['course_date']));

				if(!in_array($valid_date_u, $finalDays[$course_val['ipid']]['FinalCountDays']))
				{

					$coursearr = explode("|", $course_val['course_title']);
					$u_array[$patient_array[$course_val['ipid']]['epid']][] = $course_val['course_title'];

					$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['user_name'] = $username[$course_val['create_user']];
					if(count($coursearr) == 3)
					{ //method implemented with 3 inputs
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[0]);
					}
					else if(count($coursearr) != 3 && count($coursearr) < 3)
					{ //old method before anlage 10
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[0]);
					}
					else if(count($coursearr) != 3 && count($coursearr) > 3)
					{ //new method (U) 3 inputs and 1 select newly added in verlauf
						$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_minutes'] +=intval($coursearr[1]);
					}
					$minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_count'] = $minutes_array[$course_val['ipid']][$username[$course_val['create_user']]]['consulting_count'] + 1;
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n Bertrag \n");
				print_r($u_array);
			}

			/* ----------------------Prepare data for display ----------------------------- */
			$patient_actions_count = array();
			$visit_count = 0;

			if($_REQUEST['dbg'] == 'x')
			{
				print_r($activ_in_perioada);
				exit;
			}
			$total_visits_per_day = 0;
			$total_contacts_per_day = 0;
			foreach($minutes_array as $patient_ipid => $values)
			{

				$patient_values[] = $patient_ipid;

				$reported_days[$patient_ipid] = $patientDetails [$patient_ipid] ['daysoftreatment'];

				$x = 0;
				foreach($values as $user_name => $vls)
				{
					$visit_count +=$vls['visit_count'];
					$user_documentation[$patient_ipid][$x]['user_name'] = $vls['user_name'];

					if($vls['visit_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['visit_minutes'] = $vls['visit_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_minutes'] = 0;
					}


					if($vls['visit_count'])
					{
						$user_documentation[$patient_ipid][$x]['visit_count'] = $vls['visit_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_count'] = 0;
					}


					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = 0;
					}

					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_driving'] = 0;
					}

					if($vls['telefonate_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['telefonate_minutes'] = $vls['telefonate_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['telefonate_minutes'] = 0;
					}

					if($vls['telefonate_count'])
					{
						$user_documentation[$patient_ipid][$x]['telefonate_count'] = $vls['telefonate_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['telefonate_count'] = 0;
					}

					if($vls['coordination_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_minutes'] = $vls['coordination_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_minutes'] = 0;
					}

					if($vls['coordination_count'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_count'] = $vls['coordination_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_count'] = 0;
					}
					if($vls['consulting_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['consulting_minutes'] = $vls['consulting_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['consulting_minutes'] = 0;
					}

					if($vls['consulting_count'])
					{
						$user_documentation[$patient_ipid][$x]['consulting_count'] = $vls['consulting_count'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['consulting_count'] = 0;
					}

					$user_documentation_actions[$patient_ipid][$x]['user_actions'] = $user_documentation[$patient_ipid][$x]['visit_count'] + $user_documentation[$patient_ipid][$x]['telefonate_count'] + $user_documentation[$patient_ipid][$x]['consulting_count'];

					$user_documentation[$patient_ipid][$x]['visits_per_day'] = round($user_documentation[$patient_ipid][$x]['visit_count'] / $reported_days[$patient_ipid], 2) . ' (' . $user_documentation[$patient_ipid][$x]['visit_count'] . '/' . $reported_days[$patient_ipid] . ')';
					$user_documentation[$patient_ipid][$x]['contacts_per_day'] = round($user_documentation_actions[$patient_ipid][$x]['user_actions'] / $reported_days[$patient_ipid], 2) . '(' . $user_documentation_actions[$patient_ipid][$x]['user_actions'] . '/' . $reported_days[$patient_ipid] . ')';

					$patient_actions_count[$patient_ipid]['patient_visits_count'] += $user_documentation[$patient_ipid][$x]['visit_count'];
					$patient_actions_count[$patient_ipid]['patient_visits_minutes_count'] += $user_documentation[$patient_ipid][$x]['visit_minutes'];
					$patient_actions_count[$patient_ipid]['patient_visits_driving_count'] += $user_documentation[$patient_ipid][$x]['visit_driving'];

					$patient_actions_count[$patient_ipid]['patient_telefon_count'] += $user_documentation[$patient_ipid][$x]['telefonate_count'];
					$patient_actions_count[$patient_ipid]['patient_telefon_minutes_count'] += $user_documentation[$patient_ipid][$x]['telefonate_minutes'];

					$patient_actions_count[$patient_ipid]['patient_coordination_count'] += $user_documentation[$patient_ipid][$x]['coordination_count'];
					$patient_actions_count[$patient_ipid]['patient_coordination_minutes_count'] += $user_documentation[$patient_ipid][$x]['coordination_minutes'];

					$patient_actions_count[$patient_ipid]['patient_consulting_count'] += $user_documentation[$patient_ipid][$x]['consulting_count'];
					$patient_actions_count[$patient_ipid]['patient_consulting_minutes_count'] += $user_documentation[$patient_ipid][$x]['consulting_minutes'];


					$total_visits_per_day += round($user_documentation[$patient_ipid][$x]['visit_count'] / $reported_days[$patient_ipid], 2);
					$total_contacts_per_day += round($user_documentation_actions[$patient_ipid][$x]['user_actions'] / $reported_days[$patient_ipid], 2);

					$x++;
				}
			}

			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;
			$total_visits_minutes = 0;
			$total_visits_count = 0;
			$total_driving_sum = 0;

			$total_telefonat_count = 0;
			$total_telefonat_minutes = 0;
			$total_coordination_count = 0;
			$total_coordination_minutes = 0;
			$total_consulting_count = 0;
			$total_consulting_minutes = 0;

			if(!empty($patient_array))
			{
				foreach($patient_array as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patient_array[$patient['ipid']]);
					}
				}
				foreach($patient_array as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['last_name'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['first_name'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient['birthd'];
					$MasterData['data'][$patient['ipid']]['admissiondate'] = $patient['admission_date'];
					if($patient_discharge_details[$patient['ipid']]['discharge_date'])
					{
						$MasterData['data'][$patient['ipid']]['discharge_date'] = $patient_discharge_details[$patient['ipid']]['discharge_date'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['discharge_date'] = "-";
					}
					if(in_array($patient['ipid'], $patients_with_vv_sapv))
					{
						$MasterData['data'][$patient['ipid']]['has_sapv_vv'] = "X";
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['has_sapv_vv'] = "-";
					}

					$MasterData['data'][$patient['ipid']]['user_documentation'] = $user_documentation[$patient['ipid']];

					$total_visits_count += $patient_actions_count[$patient['ipid']]['patient_visits_count'];
					$total_visits_minutes += $patient_actions_count[$patient['ipid']]['patient_visits_minutes_count'];
					$total_driving_sum += $patient_actions_count[$patient['ipid']]['patient_visits_driving_count'];

					$total_telefonat_count += $patient_actions_count[$patient['ipid']]['patient_telefon_count'];
					$total_telefonat_minutes += $patient_actions_count[$patient['ipid']]['patient_telefon_minutes_count'];

					$total_coordination_count += $patient_actions_count[$patient['ipid']]['patient_coordination_count'];
					$total_coordination_minutes += $patient_actions_count[$patient['ipid']]['patient_coordination_minutes_count'];

					$total_consulting_count += $patient_actions_count[$patient['ipid']]['patient_consulting_count'];
					$total_consulting_minutes += $patient_actions_count[$patient['ipid']]['patient_consulting_minutes_count'];


					$i++;
				}
				$MasterData['extra']['total_visits_count'] = $total_visits_count;
				$MasterData['extra']['avg_total_visits_count'] = round($total_visits_count / $i, 2);

				$MasterData['extra']['total_visits_minutes'] = $total_visits_minutes;
				$MasterData['extra']['avg_total_visits_minutes'] = round($total_visits_minutes / $i, 2);

				$MasterData['extra']['total_driving_sum'] = $total_driving_sum;
				$MasterData['extra']['avg_total_driving_sum'] = round($total_driving_sum / $i, 2);

				$MasterData['extra']['total_telefonat_count'] = $total_telefonat_count;
				$MasterData['extra']['avg_total_telefonat_count'] = round($total_telefonat_count / $i, 2);

				$MasterData['extra']['total_telefonat_minutes'] = $total_telefonat_minutes;
				$MasterData['extra']['avg_total_telefonat_minutes'] = round($total_telefonat_minutes / $i, 2);

				$MasterData['extra']['total_coordination_minutes'] = $total_coordination_minutes;
				$MasterData['extra']['avg_total_coordination_minutes'] = round($total_coordination_minutes / $i, 2);

				$MasterData['extra']['total_coordination_count'] = $total_coordination_count;
				$MasterData['extra']['avg_total_coordination_count'] = round($total_coordination_count / $i, 2);

				$MasterData['extra']['total_consulting_minutes'] = $total_consulting_minutes;
				$MasterData['extra']['avg_total_consulting_minutes'] = round($total_consulting_minutes / $i, 2);

				$MasterData['extra']['total_consulting_count'] = $total_consulting_count;
				$MasterData['extra']['avg_total_consulting_count'] = round($total_consulting_count / $i, 2);


				$MasterData['extra']['total_visits_per_day'] = $total_visits_per_day;
				$MasterData['extra']['avg_total_visits_per_day'] = round($total_visits_per_day / $i, 2);

				$MasterData['extra']['total_contacts_per_day'] = $total_contacts_per_day;
				$MasterData['extra']['avg_total_contacts_per_day'] = round($total_contacts_per_day / $i, 2);

				return $MasterData;
			}
		}

		public function aktuellepatientzapv_standby($params)
		{
			// report_id = 105
			// report_name = Aktuelle Patienten ZAPV - Standby -
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			// get all standby patients
			$allpatient = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
				->from('PatientMaster p')
				->where('isdischarged = 0')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 1')
				->andWhere('isstandbydelete = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");

			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			
			//ISPC-2045 - get kontact-phone
			$allpatient->leftJoin("p.PatientContactphone pcp");
			$allpatient->addSelect("pcp.phone, pcp.mobile");
			
			$allarray = $allpatient->fetchArray();

			$ipids_array[] = '99999999999';

			foreach($allarray as $patient)
			{

				$ipids_array[] = $patient['ipid'];
				$ipids_str .= '"' . $patient['ipid'] . '", ';

				if(strlen($patient["last_name"]) > 0)
				{
					$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
				}
				if(strlen($patient['first_name']) > 0)
				{
					$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
				}
				if(strlen($patient['birthd']) > 0)
				{
					$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
				}
				if(strlen($patient['kontactnumber']) > 0)
				{
					$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
				}
				
				//ISPC-2045
				if ( ! empty($patient['PatientContactphone']) ) {
				
					$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
					$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
				}
				
				if(strlen($patient['street1']) > 0)
				{
					$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
				}
				if(strlen($patient['zip']) > 0)
				{
					$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
				}
				if(strlen($patient['city']) > 0)
				{
					$patientinfo[$patient['ipid']]['city'] = $patient['city'];
				}
				if(strlen($patient['admission_date']) > 0)
				{
					$patientinfo[$patient['ipid']]['admission_date'] = date('d.m.Y', strtotime($patient['admission_date']));
				}

				$doctorids[] = $patient['familydoc_id'];
				$patientMasterDetails[$patient['ipid']] = $patient;
			}


			if($ipids_array)
			{
				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($ipids_array, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
				//		Get locations
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', $ipids_array)
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');
				$patlocarray = $patloc->fetchArray();


				$patient_location_ids[] = '9999999999';
				if($patlocarray)
				{
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						$patient_location_ids[] = $patloc['location_id'];
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->whereIn('id', $patient_location_ids)
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();


					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}

					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}

								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
							}
						}
					}
				}

				$actual_location = $locaray[0]['location'];
				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";

					$diagnosis_type[] = $valdia['id'];
				}
				if(empty($diagnosis_type))
				{
					$diagnosis_type[] = "99999999999999999999999999";
				}

				//get doctors details
				$Familydoctor = array();
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->get_multiple_finaldata($ipids_array, $diagnosis_type);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}

				//get health insurance name
				$healthinsu = Doctrine_Query::create()
					->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
					->from('PatientHealthInsurance')
					->whereIn('ipid', $ipids_array);
				$healthinsu_array = $healthinsu->fetchArray();

				foreach($healthinsu_array as $k_pat_healthinsu => $v_pat_healthinsu)
				{
					$patienthealth[$v_pat_healthinsu['ipid']]['company'] = $v_pat_healthinsu["company_name"];
				}

				//get patient cave
				$pat_course = Doctrine_Query::create()
					->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
					->from('PatientCourse')
					->whereIn('ipid', $ipids_array)
					->andWhere("course_type='" . addslashes(Pms_CommonData::aesEncrypt('C')) . "'")
					->andWhere('wrong = "0"')
					->andWhere('source_ipid = ""');
				$patients_cave = $pat_course->fetchArray();

				foreach($patients_cave as $k_pat_cave => $v_pat_cave)
				{
					$patients_cave_arr[$v_pat_cave['ipid']][] = $v_pat_cave['course_title'];
				}


				//get patients contactpersons
				$contact_persons = array();
				$contact = new ContactPersonMaster();
				$contactpersons_array = $contact->getContactPersonsByIpids($ipids_array);

				foreach($contactpersons_array as $contact_item)
				{
					$contact_persons[$contact_item['ipid']] = '';
					$contact_persons_phone[$contact_item['ipid']] = '';

					$incr = (count($contact_pers[$contact_item['ipid']]) + 1);
					if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $incr . '. ' . $contact_item['cnt_last_name'] . ',';
					}

					if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
					}

					if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
					}

					if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
					}

					if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_city'] . '';
					}

					if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
					{
						$contact_persons_phone[$contact_item['ipid']] .= $incr . '. ' . 'Telefon: ' . $contact_item['cnt_phone'] . '<br /> ';
					}

					if(strlen($contact_item['cnt_mobile']) > 0 || strlen($contact_item['cnt_mobile']) > 0)
					{
						$contact_persons_phone[$contact_item['ipid']] .= 'Mobbile: ' . $contact_item['cnt_mobile'] . '<br /> ';
					}


					$contact_pers[$contact_item['ipid']][] = $contact_persons[$contact_item['ipid']];
					$contact_pers_phones[$contact_item['ipid']][] = $contact_persons_phone[$contact_item['ipid']];
				}

				//get patient specialists
				$specialists = new PatientSpecialists();
				$patients_specialists = $specialists->get_patient_specialists($ipids_array, true);
				foreach($patients_specialists as $k_specialist => $v_specialist)
				{
					if(count($v_specialist['master']) != '0')
					{

						$pat_spec[$v_specialist['ipid']] = '';
						$pat_spec_phone[$v_specialist['ipid']] = '';

						$incrx = (count($pat_specialists[$v_specialist['ipid']]) + 1);

						if(strlen($v_specialist['master']['title']) > 0)
						{
							$title = $v_specialist['master']['title'] . ' ';
						}

						if(strlen($v_specialist['master']['last_name']) > 0)
						{
							$pat_spec[$v_specialist['ipid']] .= $incrx . '. ' . $title . '' . $v_specialist['master']['last_name'] . ',';
						}

						if(strlen($v_specialist['master']['first_name']) > 0)
						{
							$pat_spec[$v_specialist['ipid']] .= $v_specialist['master']['first_name'] . ' ';
						}

						if(strlen($v_specialist['master']['phone_practice']) > 0)
						{
							$pat_spec_phone[$v_specialist['ipid']] .= $incrx . '. ' . 'Telefon: ' . $v_specialist['master']['phone_practice'] . '<br /> ';
						}

						if(strlen($v_specialist['master']['phone_cell']) > 0)
						{
							$pat_spec_phone[$v_specialist['ipid']] .= 'Mobbile: ' . $v_specialist['master']['phone_cell'] . '<br /> ';
						}

						$pat_specialists[$v_specialist['ipid']][] = $pat_spec[$v_specialist['ipid']];
						$pat_specialists_phones[$v_specialist['ipid']][] = $pat_spec_phone[$v_specialist['ipid']];
					}
				}


				//get patients memo
				$memo = new PatientMemo();
				$memos = $memo->get_multiple_patient_memo($ipids_array);

				//get patients sapvs
				$sapv = new SapvVerordnung();
				$patients_last_sapv = $sapv->get_multiple_last_sapvs($ipids_array, true, false);

				foreach($patients_last_sapv as $k_sapv_ipid => $v_sapv_data)
				{
					$sapv_period_start = date('d.m.Y', strtotime($v_sapv_data[0]['verordnungam']));
					$sapv_period_end = date('d.m.Y', strtotime($v_sapv_data[0]['verordnungbis']));

					$last_sapvs[$k_sapv_ipid] = $sapv_period_start . ' - ' . $sapv_period_end;
				}


				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->whereIn('ipid', $ipids_array);
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['healthinsurance_company'] = $patienthealth[$keypatient]['company'];
					$MasterData['data'][$keypatient]['location'] = ($patlocarrayFinal[$keypatient]['location_name'] ? $patlocarrayFinal[$keypatient]['location_name'] : '' ) . ($patlocarrayFinal[$keypatient]['location_street'] ? '<br />' . $patlocarrayFinal[$keypatient]['location_street'] . '<br />' : '') . ($patlocarrayFinal[$keypatient]['location_zip'] ? $patlocarrayFinal[$keypatient]['location_zip'] : '') . ' ' . ($patlocarrayFinal[$keypatient]['location_city'] ? $patlocarrayFinal[$keypatient]['location_city'] : '');
					$MasterData['data'][$keypatient]['contact_number'] = $patientinfo[$keypatient]['kontactnumber'];
					$MasterData['data'][$keypatient]['cave'] = ($patients_cave_arr[$keypatient] ? implode("<br />", $patients_cave_arr[$keypatient]) : '');
					$MasterData['data'][$keypatient]['contactperson'] = ($contact_pers[$keypatient] ? implode("<br />", $contact_pers[$keypatient]) : '');
					$MasterData['data'][$keypatient]['contact_phone'] = ($contact_pers_phones[$keypatient] ? implode("<br />", $contact_pers_phones[$keypatient]) : '');
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient];
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'];
					$MasterData['data'][$keypatient]['familydoctorphone'] = $Familydoctor[$patient['familydoc_id']]['phone'];
					$MasterData['data'][$keypatient]['specialist'] = ($pat_specialists[$keypatient] ? implode("<br />", $pat_specialists[$keypatient]) : '');
					$MasterData['data'][$keypatient]['specialistphone'] = ($pat_specialists_phones[$keypatient] ? implode("<br />", $pat_specialists_phones[$keypatient]) : '');
					$MasterData['data'][$keypatient]['admissiondate'] = $patientinfo[$keypatient]['admission_date'];
					$MasterData['data'][$keypatient]['sapvperiod'] = $last_sapvs[$keypatient];
					$MasterData['data'][$keypatient]['memo'] = $memos[$keypatient];
				}

				return $MasterData;
			}
		}

		public function accounting($params)
		{
			// report_id = 106
			// report_name = Abrechnung Wiesbaden
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$patientmaster = new PatientMaster();
			$locations = new Locations();
			$pat_locations = new PatientLocation();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
				$patient_array[$val['ipid']]['was_hospiz'] = '0';
			}

			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get All Discharged Patients IN REPORT PERIODE -------------------- */
			$dispatients_met = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->whereIn(" ipid", $allfinal)
				->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andWhere("isdelete=0");
			$methode_patients = $dispatients_met->fetchArray();


			foreach($methode_patients as $kh => $val_pat)
			{
				$patients_discharge_details[$val_pat['ipid']]['discharge_date'] = date('d.m.Y', strtotime($val_pat['discharge_date']));
				$total_patients_final[$kh]['ipid'] = $val_pat['ipid'];
				$total_patients_array[] = $val_pat['ipid'];
			}
			$total_patients_final[] = '99999999';
			if(count($total_patients_array) == '0')
			{
				$total_patients_array[] = 'xxxx';
			}
			if($_REQUEST['dbg'] == '4')
			{
				print_r($total_patients_array);
				exit;
			}
			/* ----------------------------------------------------------------------- */
			/* ----------------- Patients - VALID all sapv days (to do - limit to admissions and discharge dates) ---------- */
			/* ----------------------------------------------------------------------- */
			$patientsapv_days = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $total_patients_array)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.isdelete = 0');
			$sapv_days_q = $patientsapv_days->fetchArray();
			foreach($sapv_days_q as $k => $sapv_item)
			{
				$patient_all_sapv_data[$sapv_item['ipid']][] = $sapv_item;

				if($sapv_days_q[$k]['primary_set'] == "5" && $sapv_days_q[$k]['secondary_set'] == "5")
				{
					$patient_sapv_data[$sapv_item['ipid']]['original'][] = $sapv_item;
				}
				else
				{
					$patient_sapv_data[$sapv_item['ipid']]['inprogress'][] = $sapv_item;
				}
			}
			/* ------------------------------------Get patients locations (normal/hospiz/hospital) and treatment days ------------------------------------------ */

			foreach($period['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
// 			$report_period_array[$keyd]['end'] = date ("Y-m-d", strtotime ($period['end'][$keyd]));
				if(strtotime($period['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period['end'][$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $total_patients_array;
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);



			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['standby'] = $p_details['details'] ['isstandby'];

				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
				}

				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['locations'] = $p_details['locations'];
				$patientDetails [$p_details['details'] ['ipid']]['treatment_days'] = $p_details ['treatment_days'];
				$patientDetails [$p_details['details'] ['ipid']]['treatment_days_no'] = $p_details ['treatment_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}


			foreach($patientDetails as $ipid => $det)
			{
				foreach($det['locations'] as $loc_id => $values)
				{
					if($values['type'] == '2')
					{
// 					$patient2hospiz[$ipid][] = $values;
						$patient2hospiz[$ipid][] = $loc_id;
					}
// 				$patient2location_types[$ipid][$values['type']][] = $values;
				}
			}

			/* ------------------------------------Get client path - Abrechnung ToDo ------------------------------------------ */
			$paths = new OrgPaths();
			$current_path = $paths->get_paths($clientid, 'discharged_billing_todo');

			/* ------------------------------------Get client steps for path::Abrechnung ToDo ------------------------------------------ */
			$steps = new OrgSteps();
			$current_path_shortcuts = $steps->get_paths_steps($current_path, true);


			/* ------------------------------------Get patients saved data ------------------------------------------ */
			$patient_steps = new PatientSteps();
			$saved_data = $patient_steps->get_patient_steps($total_patients_array);

			$status_of_sapvs_7days_shortcut_id = array_search('AB2', $current_path_shortcuts['shortcuts']);
			$status_of_sapvs_10days_shortcut_id = array_search('AB3', $current_path_shortcuts['shortcuts']);

			/* ------------------------------------ Get health insurance ------------------------------------------ */
			//get health insurance name
			$healthinsu = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $total_patients_array);
			$healthinsu_array = $healthinsu->fetchArray();

			foreach($healthinsu_array as $k_pat_healthinsu => $v_pat_healthinsu)
			{
				$patienthealth[$v_pat_healthinsu['ipid']]['company'] = $v_pat_healthinsu["company_name"];
			}

			/* ------------------------------------ Verify if there are more items to be invoiced ------------------------------------------ */

			$dp_subproducts_days = array('normal_days', 'hosp_adm_days', 'hosp_days', 'hosp_dis_days', 'hospiz_adm_days', 'hospiz_days', 'hospiz_dis_days', 'standby_days', 'hosp_dis_hospiz_adm_days', 'hospiz_dis_hosp_adm_days');
			$days_keys = array('normal_days', 'hosp_days', 'hosp_adm_days', 'hosp_dis_days', 'hospiz_adm_days', 'hospiz_days', 'hospiz_dis_days', 'standby_days');
			//get client users
			$user = new User();
			$client_users_arr = $user->getUserByClientid($clientid, '0', true);

			foreach($client_users_arr as $k_usr => $v_usr)
			{
				$client_users[$v_usr['id']] = $v_usr;
				$client_users_ids[] = $v_usr['id'];
			}

//		print_r($period);
			//get client users associations
			$users_ids_associated = UsersAssociation::get_associated_user_multiple($client_users_ids);

			$used_users = array_merge($client_users_ids, $users_ids_associated);

			//get all client products in period
			$period_pricelist_products = InternalInvoicePriceList::get_period_pricelist($period['start'][0], end($period['end']));

			//get all client national holidays
			$national_holidays_arr = NationalHolidays::getNationalHoliday($clientid, $current_period['start'], true);

			foreach($national_holidays_arr as $k_natholiday => $v_natholiday)
			{
				$national_holidays[] = date('Y-m-d', strtotime($v_natholiday['NationalHolidays']['date']));
			}
			asort($national_holidays);
			$national_holidays = array_values($national_holidays);
//		print_r($period);

			$previous_invoices_items = InternalInvoices::get_completed_previous_invoices_multiple($clientid, $total_patients_array, $client_users_ids, $period, $active_patient_details);
			if($_REQUEST['dbg'] == '1')
			{
				print_r("previous_invoices_items\n");
				print_r($previous_invoices_items);
			}
			$sp_products = InternalInvoices::sp_rules_multiple($period_pricelist_products['sp'], $period, $total_patients_array, $clientid, $users_ids_associated, $national_holidays, $previous_invoices_items, $active_patient_details);

			$dp_products = InternalInvoices::dp_rules_multiple($period_pricelist_products['dp'], $period, $total_patients_array, $clientid, $users_ids_associated, $national_holidays, $previous_invoices_items, $active_patient_details);
			if($_REQUEST['dbg'] == '1')
			{
				print_r("sp_products\n");
				print_r($sp_products);
				print_r("dp_products\n");
				print_r($dp_products);
				exit;
			}

			//get users with products
			$product_users = array();
			foreach($sp_products as $k_ipid_sp => $v_users_sproducts)
			{
				if(empty($sp_products_users[$k_ipid_sp]))
				{
					$sp_products_users[$k_ipid_sp] = array();
				}

				$sp_products_users[$k_ipid_sp] = array_merge($sp_products_users[$k_ipid_sp], array_keys($v_users_sproducts));
			}

			foreach($dp_products as $k_ipid_dp => $v_users_dproducts)
			{
				if(empty($dp_products_users[$k_ipid_dp]))
				{
					$dp_products_users[$k_ipid_dp] = array();
				}

				$dp_products_users[$k_ipid_dp] = array_merge($dp_products_users[$k_ipid_dp], array_keys($v_users_dproducts));
			}
			if($_REQUEST['dbg'] == '2')
			{
				print_r("sp_products_users\n");
				print_r($sp_products_users);
				print_r("dp_products_users\n");
				print_r($dp_products_users);
				exit;
			}

			if($sp_products_users)
			{
				$product_users = array_merge($product_users, $sp_products_users);
			}

			if($dp_products_users)
			{
				$product_users = array_merge($product_users, $dp_products_users);
			}

			foreach($product_users as $k_ipid => $v_prod_patients)
			{
				foreach($v_prod_patients as $k_prod_user => $v_prod_user)
				{
					if(!empty($v_prod_user))
					{
						if(!array_key_exists($v_prod_user, $users_ids_associated))
						{
							$users_w_products[$v_prod_user] = $client_users[$v_prod_user]['user_title'] . ' ' . $client_users[$v_prod_user]['last_name'] . ', ' . $client_users[$v_prod_user]['first_name'];
						}
						else
						{
							$users_w_products[$users_ids_associated[$v_prod_user]] = $client_users[$users_ids_associated[$v_prod_user]]['user_title'] . ' ' . $client_users[$users_ids_associated[$v_prod_user]]['last_name'] . ', ' . $client_users[$users_ids_associated[$v_prod_user]]['first_name'];
						}
					}
				}
			}

			$group_day_products = Modules::checkModulePrivileges("76", $clientid);

			if($group_day_products)
			{
				foreach($dp_products as $k_ipid => $v_day_products_applied)
				{
					foreach($v_day_products_applied as $k_userid => $v_products)
					{
						$cnt_prod = '1';
						foreach($v_products as $k_prod_id => $prod_days)
						{
							if($prod_days['grouped'] == '1')
							{
								//get only first existing product name
								if(strlen($product_name) == 0)
								{
									$product_name = $period_pricelist_products['dp'][$k_prod_id]['normal_price_name'];
								}

								if(strlen($product_price) == 0)
								{
									$product_price = $period_pricelist_products['dp'][$k_prod_id]['normal_price'];
									$dp_products[$k_ipid][$k_userid]['grouped']['price'] = $product_price;
								}



								foreach($dp_subproducts_days as $k_subprod => $v_subprod)
								{
									if(count($prod_days[$v_subprod]) > 0)
									{
										if(empty($dp_products[$k_ipid][$k_userid]['grouped']['grouped_days']))
										{
											$dp_products[$k_ipid][$k_userid]['grouped']['grouped_days'] = array();
										}

										if(empty($dp_products[$k_ipid][$k_userid]['grouped']['grouped_days_prices']))
										{
											$dp_products[$k_ipid][$k_userid]['grouped']['grouped_days_prices'] = array();
										}

										$dp_products[$k_ipid][$k_userid]['grouped']['grouped_days_prices'] = array_merge($dp_products[$k_ipid][$k_userid]['grouped']['grouped_days_prices'], $prod_days['days_products_prices']);

										$dp_products[$k_ipid][$k_userid]['grouped']['grouped_days'] = array_merge($dp_products[$k_ipid][$k_userid]['grouped']['grouped_days'], $prod_days[$v_subprod]);
										asort($dp_products[$k_ipid][$k_userid]['grouped']['grouped_days']);
										$dp_products[$k_ipid][$k_userid]['grouped']['grouped_days'] = array_values(array_unique($dp_products[$k_ipid][$k_userid]['grouped']['grouped_days']));
										//do the sum here
										$dp_products[$k_ipid][$k_userid]['grouped']['grouped'][$v_subprod][$k_prod_id] = $prod_days[str_replace('_days', '', $v_subprod)];

										$subproduct_price = $period_pricelist_products['dp'][$k_prod_id][str_replace('_days', '_price', $v_subprod)];


										if(strlen($product_name) > '0')
										{
											$dp_products[$k_ipid][$k_userid]['grouped']['name'] = $product_name;
										}
										else
										{
											$dp_products[$k_ipid][$k_userid]['grouped']['name'] = $this->view->translate('grouped_product_name');
										}
									}
								}
								$dp_products[$k_ipid][$k_userid]['grouped']['total'] = number_format(($dp_products[$k_ipid][$k_userid]['grouped']['price'] * $dp_products[$k_ipid][$k_userid]['grouped']['qty']), 2, '.', '');
							}

							if($cnt_prod == count($v_products))
							{
								$group = '0';
								foreach($dp_products[$k_ipid][$k_userid]['grouped']['grouped_days'] as $k_day => $v_day)
								{
									$n_vday_ts = strtotime('+1 day', strtotime($v_day));
									$next_v_day_ts = strtotime($dp_products[$k_ipid][$k_userid]['grouped']['grouped_days'][$k_day + 1]);

									$dp_products[$k_ipid][$k_userid]['grouped']['grouped_days_periods'][$group][] = $v_day;
									$dp_products[$k_ipid][$k_userid]['grouped']['grouped_qty'][$group] += 1;

									if($n_vday_ts != $next_v_day_ts)
									{
										$group++;
									}
								}
							}
							$cnt_prod++;
						}
					}
				}
			}

			foreach($sp_products as $k_sppr_ipid => $v_sppr)
			{
				foreach($v_sppr as $k_requested_user => $v_product_sp)
				{
					if(count($v_product_sp) > 0)
					{
						foreach($v_product_sp as $key_prod => $v_prod)
						{
							$v_prod = array_values($v_prod);
							foreach($v_prod as $key_prod_det => $v_prod_det)
							{
								$v_prod_det['p_type'] = 'sp';
								$v_prod_det['sort_date'] = $v_prod_det['normal_days'][0];

								$all_products[$k_sppr_ipid][$k_requested_user][] = $v_prod_det;
							}
						}
					}
//				$all_products[$k_sppr_ipid][$requested_user] = array_values($all_products[$k_sppr_ipid][$requested_user]);
				}
			}


			foreach($dp_products as $k_ipid => $v_dp_products)
			{
				foreach($v_dp_products as $requested_user => $v_users_prods)
				{
					foreach($v_users_prods as $k_prod => $v_sub_prod)
					{
						if($v_sub_prod['grouped'] == '0')
						{
							foreach($days_keys as $k_day => $v_day_key)
							{
								$subproduct_key = $k_prod . '_' . $k_day;
								$days_key = str_replace('_days', '', $v_day_key);

								if(!empty($v_sub_prod[$v_day_key]) && !empty($v_sub_prod[$days_key]))
								{
									$all_products[$k_ipid][$requested_user][$subproduct_key]['p_id'] = $k_prod;
									$all_products[$k_ipid][$requested_user][$subproduct_key]['p_type'] = 'dp';
									$all_products[$k_ipid][$requested_user][$subproduct_key]['grouped'] = $v_sub_prod['grouped'];
									$all_products[$k_ipid][$requested_user][$subproduct_key]['product_all_days'] = $v_sub_prod['product_all_days'];
									$all_products[$k_ipid][$requested_user][$subproduct_key]['days_products_prices'] = $v_sub_prod['days_products_prices'];
								}

								if(!empty($v_sub_prod[$v_day_key]))
								{
									$all_products[$k_ipid][$requested_user][$subproduct_key][$v_day_key] = $v_sub_prod[$v_day_key];
									$all_products[$k_ipid][$requested_user][$subproduct_key][$v_day_key . '_periods'] = $v_sub_prod[$v_day_key . '_periods'];
									$all_products[$k_ipid][$requested_user][$subproduct_key]['sort_date'] = $v_sub_prod[$v_day_key][0];
								}

								if(!empty($v_sub_prod[$days_key]))
								{
									$all_products[$k_ipid][$requested_user][$subproduct_key][$days_key] = $v_sub_prod[$days_key];
								}
							}
							unset($all_products[$k_ipid][$requested_user][$k_prod]);
						}
						elseif($v_sub_prod['grouped'] == '1')
						{
							if(!empty($dp_products[$k_ipid][$requested_user]))
							{
								foreach($dp_products[$k_ipid][$requested_user] as $k_product_dp => $v_product_dp)
								{
									$subproduct_key = $k_product_dp . '_' . $k_day;
									$days_key = str_replace('_days', '', $v_day_key);

									if(!empty($v_sub_prod[$k_product_dp]) || !empty($v_sub_prod[$days_key]))
									{
										if($k_product_dp == 'grouped')
										{
											$v_g_product_dp['p_type'] = 'dp';
											$v_g_product_dp['p_id'] = $k_product_dp;
											$v_g_product_dp['name'] = $v_product_dp['name'];

											foreach($v_product_dp['grouped_days_periods'] as $k_gr_period => $v_gr_period)
											{
												$v_g_product_dp['grouped_qty'][$k_gr_period] = $v_product_dp['grouped_qty'][$k_gr_period];

												$v_g_product_dp['price'] = $v_product_dp['grouped_days_prices'][$v_gr_period[0]];
												$v_g_product_dp['grouped_days_periods'][$k_gr_period] = $v_gr_period;
												$v_g_product_dp['sort_date'] = $v_gr_period[0];
												$all_products[$k_ipid][$requested_user]['grouped_' . $k_gr_period] = $v_g_product_dp;
												unset($v_g_product_dp['grouped_days_periods']);
											}
										}
										else
										{
											$v_product_dp['p_type'] = 'dp';
											$v_product_dp['p_id'] = $k_product_dp;

											$v_product_dp['p_test'] = 'normal';
											$v_product_dp['product_all_days'] = array_values($v_product_dp['product_all_days']);
											$v_product_dp['sort_date'] = $v_product_dp['product_all_days'][0];
											$all_products[$k_ipid][$requested_user][$subproduct_key] = $v_product_dp;
										}
									}
								}
							}
						}
					}
				}
			}

//		print_r($users_w_products);
//		print_r($all_products['e9164479c8cb877c2604adde9142324cd1497280']);exit;

			foreach($total_patients_array as $kpat => $vpat_ipid)
			{
				if(!empty($all_products[$vpat_ipid]))
				{
					$invoiceable_patients[$vpat_ipid]['has_invoices'] = '1';
					$patient_users = array_keys($all_products[$vpat_ipid]);

					foreach($patient_users as $k_pat_user => $v_user)
					{
						if(!empty($all_products[$vpat_ipid][$v_user]))
						{
							$invoiceable_patients[$vpat_ipid]['users'][] = $users_w_products[$v_user];
						}
					}
					asort($invoiceable_patients[$vpat_ipid]['users']);
				}
				else
				{
					$invoiceable_patients[$vpat_ipid]['has_invoices'] = '0';
				}
			}

			if($_REQUEST['dbg'] == '3')
			{
				print_r("dp_products grouped\n");
				print_r($invoiceable_patients);
				exit;
			}
//		print_r($total_patients_array);
//		print_r($all_products);
			// Get  shortcut XA from Verlauf

			$qpa1 = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,
				AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong = 0')
				->andWhereIn("ipid", $total_patients_array)
				->andWhere('course_type ="' . addslashes(Pms_CommonData::aesEncrypt("XA")) . '"')
// 				->andWhere('(' . str_replace('%date%', 'course_date', $active_cond['date_sql']) . ')')
				->andWhere('source_ipid = ""')
				->orderBy('ipid,course_date ASC');
			$allrpatients = $qpa1->fetchArray();

			foreach($allrpatients as $k_shortcutp => $v_shortcutp)
			{
				$patients_shortcuts_array[$v_shortcutp['ipid']][] = $v_shortcutp['course_title'];
			}
			foreach($patients_shortcuts_array as $k_sh => $v_sh)
			{
				$patient_shortcuts_XA[$k_sh] = implode(" | ", $v_sh);
			}
			/* print_r($patient_shortcuts_XA);exit;  */
			/* ------------------------------------ Display all results ------------------------------------------ */
//		print_r($report_period_array);
//		print_r($total_patients_final);
//		exit;

			if(!empty($total_patients_final))
			{
				foreach($total_patients_final as $keypatient => $patient)
				{
					if(array_key_exists('ipid', $patient))
					{
						$MasterData['data'][$patient['ipid']]['epid'] = $patient_array[$patient['ipid']]['epid'];
						$MasterData['data'][$patient['ipid']]['lastname'] = $patient_array[$patient['ipid']]['last_name'];
						$MasterData['data'][$patient['ipid']]['firstname'] = $patient_array[$patient['ipid']]['first_name'];
						$MasterData['data'][$patient['ipid']]['birthd'] = $patient_array[$patient['ipid']]['birthd'];

						$MasterData['data'][$patient['ipid']]['admissiondate'] = $patient_array[$patient['ipid']]['admission_date'];
						$MasterData['data'][$patient['ipid']]['dischargedate'] = $patients_discharge_details[$patient['ipid']]['discharge_date'];

						$MasterData['data'][$patient['ipid']]['healthinsurance_company'] = $patienthealth[$patient['ipid']]['company'];
						$MasterData['data'][$patient['ipid']]['he_days_of_treatment'] = $patientDetails[$patient['ipid']]['treatment_days_no'];
						$MasterData['data'][$patient['ipid']]['he_days_of_hospital'] = $patientDetails[$patient['ipid']]['hospital_days_cs_no'];



						if(count($patient2hospiz[$patient['ipid']]) == 0)
						{
							$MasterData['data'][$patient['ipid']]['patient_type_hospiz_amb'] = 'ambulant';
						}
						else if(count($patient2hospiz[$patient['ipid']]) > 0)
						{
							$MasterData['data'][$patient['ipid']]['patient_type_hospiz_amb'] = 'Hospiz';
						}

						if(!$patient_all_sapv_data[$patient['ipid']] || empty($patient_all_sapv_data[$patient['ipid']]))
						{
							$data['data'][$patient['ipid']]['status_of_sapvs'] = "keine Verordnungen";
							$data['data'][$patient['ipid']]['status_of_sapvs_7days'] = "-";
//					$data['data'][$patient['ipid']]['status_of_sapvs_10days'] = "-";
						}
						else
						{
							if(count($patient_sapv_data[$patient['ipid']]['original']) == count($patient_all_sapv_data[$patient['ipid']]))
							{
								$data['data'][$patient['ipid']]['status_of_sapvs'] = "ok";
							}
							else
							{
								$data['data'][$patient['ipid']]['status_of_sapvs'] = "nicht ok";
							}

							if($saved_data[$patient['ipid']][$status_of_sapvs_7days_shortcut_id]['value'] == '1')
							{
								$data['data'][$patient['ipid']]['status_of_sapvs_7days'] = "ja";
							}
							else
							{
								$data['data'][$patient['ipid']]['status_of_sapvs_7days'] = "nein";
							}
						}

						$MasterData['data'][$patient['ipid']]['status_of_sapvs'] = $data['data'][$patient['ipid']]['status_of_sapvs'];
						$MasterData['data'][$patient['ipid']]['XA'] = $patient_shortcuts_XA[$patient['ipid']];
						$MasterData['data'][$patient['ipid']]['status_of_sapvs_7days'] = $data['data'][$patient['ipid']]['status_of_sapvs_7days'];

						
						if($invoiceable_patients[$patient['ipid']]['has_invoices'] == '1')
						{
							$invoices_string[$patient['ipid']] = "nein <br /> - ";
							//list users
							if(!empty($invoiceable_patients[$patient['ipid']]['users']))
							{
								$invoices_string[$patient['ipid']] .= implode('<br /> - ', $invoiceable_patients[$patient['ipid']]['users']);
							}
						}
						else
						{
							$invoices_string[$patient['ipid']] = "ja";
						}

						$MasterData['data'][$patient['ipid']]['status_of_sapvs_10days'] = $invoices_string[$patient['ipid']];
					}
				}
				return $MasterData;
			}
		}

		public function accounting_old($params)
		{
			// report_id = 106
			// report_name = Abrechnung Wiesbaden
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$patientmaster = new PatientMaster();
			$locations = new Locations();
			$pat_locations = new PatientLocation();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
				$patient_array[$val['ipid']]['was_hospiz'] = '0';
			}

			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ----------------- Get All Discharged Patients IN REPORT PERIODE -------------------- */
			$dispatients_met = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->whereIn(" ipid", $allfinal)
				->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
				->andWhere("isdelete=0");
			$methode_patients = $dispatients_met->fetchArray();

			foreach($methode_patients as $kh => $val_pat)
			{
				$patients_discharge_details[$val_pat['ipid']]['discharge_date'] = date('d.m.Y', strtotime($val_pat['discharge_date']));
				$total_patients_final[$kh]['ipid'] = $val_pat['ipid'];
				$total_patients_array[] = $val_pat['ipid'];
			}
			if(count($total_patients_array) == '0')
			{
				$total_patients_array[] = 'xxxx';
			}

			/* ----------------------------------------------------------------------- */
			/* ----------------- Patients - VALID all sapv days (to do - limit to admissions and discharge dates) ---------- */
			/* ----------------------------------------------------------------------- */
			$patientsapv_days = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $total_patients_array)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.isdelete = 0');
			$sapv_days_q = $patientsapv_days->fetchArray();
			foreach($sapv_days_q as $k => $sapv_item)
			{
				$patient_all_sapv_data[$sapv_item['ipid']][] = $sapv_item;

				if($sapv_days_q[$k]['primary_set'] == "5" && $sapv_days_q[$k]['secondary_set'] == "5")
				{
					$patient_sapv_data[$sapv_item['ipid']]['original'][] = $sapv_item;
				}
				else
				{
					$patient_sapv_data[$sapv_item['ipid']]['inprogress'][] = $sapv_item;
				}
			}
			/* ------------------------------------Get patients locations (normal/hospiz/hospital) and treatment days ------------------------------------------ */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
// 			$report_period_array[$keyd]['end'] = date ( "Y-m-d", strtotime ( $period ['end'] [$keyd] ) );
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $total_patients_array;
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);


			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['standby'] = $p_details['details'] ['isstandby'];

				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
				}


				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['locations'] = $p_details['locations'];

				$patientDetails [$p_details['details'] ['ipid']]['treatment_days'] = $p_details ['treatment_days'];
				$patientDetails [$p_details['details'] ['ipid']]['treatment_days_no'] = $p_details ['treatment_days_no'];

				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}


			foreach($patientDetails as $ipid => $det)
			{
				foreach($det['locations'] as $loc_id => $values)
				{
					if($values['type'] == '2')
					{
// 					$patient2hospiz[$ipid][] = $values;
						$patient2hospiz[$ipid][] = $loc_id;
					}
// 				$patient2location_types[$ipid][$values['type']][] = $values;
				}
			}


			/* ------------------------------------Get client path - Abrechnung ToDo ------------------------------------------ */
			$paths = new OrgPaths();
			$current_path = $paths->get_paths($clientid, 'discharged_billing_todo');

			/* ------------------------------------Get client steps for path::Abrechnung ToDo ------------------------------------------ */
			$steps = new OrgSteps();
			$current_path_shortcuts = $steps->get_paths_steps($current_path, true);


			/* ------------------------------------Get patients saved data ------------------------------------------ */
			$patient_steps = new PatientSteps();
			$saved_data = $patient_steps->get_patient_steps($total_patients_array);

			$status_of_sapvs_7days_shortcut_id = array_search('AB2', $current_path_shortcuts['shortcuts']);
			$status_of_sapvs_10days_shortcut_id = array_search('AB3', $current_path_shortcuts['shortcuts']);

			/* ------------------------------------ Get health insurance ------------------------------------------ */
			//get health insurance name
			$healthinsu = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $total_patients_array);
			$healthinsu_array = $healthinsu->fetchArray();

			foreach($healthinsu_array as $k_pat_healthinsu => $v_pat_healthinsu)
			{
				$patienthealth[$v_pat_healthinsu['ipid']]['company'] = $v_pat_healthinsu["company_name"];
			}




			/* ------------------------ Days of treatment and Days of hospital ----------------------------------- */
			/* 	$patient_treatment = $patientmaster->getTreatedDaysRealMultiple($total_patients_array);

			  // Get client locations
			  $locationsarray = $locations->getLocations($clientid, 3); //get location_id => location_type

			  foreach($locationsarray as $k_loc_arr => $v_loc_arr)
			  {
			  if($v_loc_arr == '2')
			  {
			  $hospiz_location_ids[] = $k_loc_arr;
			  }
			  if($v_loc_arr == '1')
			  {
			  $hospital_location_ids[] = $k_loc_arr;
			  }
			  }

			  $pat_locations_array = $pat_locations->get_valid_patients_locations($total_patients_array);

			  foreach($total_patients_final as $k_pat_ipid => $v_patient)
			  {
			  //get hospiz and hospital locations
			  foreach($pat_locations_array[$v_patient['ipid']] as $k_p_location => $v_p_location)
			  {
			  if(in_array($v_p_location['location_id'], $hospiz_location_ids))
			  {
			  $hospiz_patient_locations[$v_patient['ipid']][] = $v_p_location;
			  }

			  if(in_array($v_p_location['location_id'], $hospital_location_ids))
			  {
			  $hospital_patient_locations[$v_patient['ipid']][] = $v_p_location;
			  }
			  }
			  }

			  //discharged dead patients
			  $distod = Doctrine_Query::create()
			  ->select("*")
			  ->from('DischargeMethod')
			  ->where("isdelete = 0  and clientid=" . $clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			  $todarray = $distod->fetchArray();

			  $tod_ids[] = "9999999999999";
			  foreach($todarray as $todmethod)
			  {
			  $tod_ids[] = $todmethod['id'];
			  }

			  $dispat = Doctrine_Query::create()
			  ->select("*")
			  ->from("PatientDischarge")
			  ->whereIn('ipid', $total_patients_array)
			  ->andWhereIn("discharge_method", $tod_ids)
			  ->andWhere('isdelete = 0');
			  $discharged_arr = $dispat->fetchArray();

			  foreach($discharged_arr as $k_dis => $v_dis)
			  {
			  $death_dates[$v_dis['ipid']] = date('Y-m-d', strtotime($v_dis['discharge_date']));
			  }

			  //hospital days (with both margins)
			  //remove last day if not dead
			  $hospital_days = array();
			  $hospiz_days_arr = array();
			  $patient_treatment_days = array();

			  foreach($total_patients_final as $k_pat_ipid => $v_patient)
			  {

			  //treatment days (patient all days without hospiz days and hospital days)
			  foreach($patient_treatment[$v_patient['ipid']]['admissionDates'] as $k_admission => $v_admission)
			  {
			  $start_cycle = date('Y-m-d', strtotime($v_admission['date']));

			  if(!empty($patient_treatment[$v_patient['ipid']]['dischargeDates'][$k_admission]))
			  {
			  $end_cycle = date('Y-m-d', strtotime($patient_treatment[$v_patient['ipid']]['dischargeDates'][$k_admission]['date']));
			  }
			  else
			  {
			  $end_cycle = date('Y-m-d', strtotime($patient_treatment[$v_patient['ipid']]['discharge_date']));
			  }

			  $patient_cycle[$v_patient['ipid']] = $patientmaster->getDaysInBetween($start_cycle, $end_cycle);

			  if(empty($patient_treatment_days[$v_patient['ipid']]))
			  {
			  $patient_treatment_days[$v_patient['ipid']] = array();
			  }

			  $patient_treatment_days[$v_patient['ipid']] = array_merge($patient_treatment_days[$v_patient['ipid']], $patient_cycle[$v_patient['ipid']]);
			  $patient_treatment_days[$v_patient['ipid']] = array_values(array_unique($patient_treatment_days[$v_patient['ipid']]));

			  $start_cycle = '';
			  $end_cycle = '';
			  }


			  //hospital days
			  foreach($hospital_patient_locations[$v_patient['ipid']] as $k_pat_loc => $v_pat_loc)
			  {
			  $till = date('Y-m-d', strtotime($v_pat_loc['valid_till']));

			  $r1start = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
			  $r1end = strtotime(date('Y-m-d', strtotime($till)));
			  $r2start = strtotime($period['start'][0]);
			  $r2end = strtotime($period['end'][0]);

			  if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
			  {
			  $location_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));

			  $hosp[$v_patient['ipid']] = $patientmaster->getDaysInBetween($location_start, $till);

			  if(empty($hospital_days[$v_patient['ipid']]))
			  {
			  $hospital_days[$v_patient['ipid']] = array();
			  }

			  $hospital_days[$v_patient['ipid']] = array_merge($hospital_days[$v_patient['ipid']], $hosp[$v_patient['ipid']]);
			  }

			  //			find hosp heads
			  $start_hosp_period = strtotime(date('Y-m-d', strtotime($v_pat_loc['valid_from'])));
			  $end_hospital_period = strtotime(date('Y-m-d', strtotime($till)));
			  $end_hospital_period_formatted = date('Y-m-d', strtotime($till));
			  $next_start_hosp = strtotime(date('Y-m-d', strtotime($hospital_patient_locations[$v_patient['ipid']][($k_pat_loc + 1)]['valid_from'])));

			  //remove end head
			  if($end_hospital_period != $next_start_hosp && $start_hosp_period != $end_hospital_period)
			  {
			  $find = array_search($end_hospital_period_formatted, $hospital_days[$v_patient['ipid']]);
			  $removed_days[$v_patient['ipid']]['e'][$find] = $hospital_days[$v_patient['ipid']][$find];

			  if($death_dates[$v_patient['ipid']] != $end_hospital_period_formatted)
			  {
			  unset($hospital_days[$v_patient['ipid']][$find]);
			  }
			  }
			  }

			  //hospiz days
			  foreach($hospiz_patient_locations[$v_patient['ipid']] as $k_pat_hospiz => $v_pat_hospiz)
			  {
			  $start_hospiz = date('Y-m-d', strtotime($v_pat_hospiz['valid_from']));
			  $end_hospiz = date('Y-m-d', strtotime($v_pat_hospiz['valid_till']));

			  $hospiz_days[$v_patient['ipid']] = $patientmaster->getDaysInBetween($start_hospiz, $end_hospiz);
			  if(!empty($hospiz_days[$v_patient['ipid']]))
			  {

			  if(empty($hospiz_days_arr[$v_patient['ipid']]))
			  {
			  $hospiz_days_arr[$v_patient['ipid']] = array();
			  }
			  $hospiz_days_arr[$v_patient['ipid']] = array_merge($hospiz_days_arr[$v_patient['ipid']], $hospiz_days[$v_patient['ipid']]);
			  }
			  }

			  $hosp_days[$v_patient['ipid']] = array_values(array_unique($hospital_days[$v_patient['ipid']]));
			  $hospiz_days_arr[$v_patient['ipid']] = array_values(array_unique($hospiz_days_arr[$v_patient['ipid']]));


			  $real_treatment_days[$v_patient['ipid']] = array_values($patient_treatment_days[$v_patient['ipid']]);
			  if(!empty($hospiz_days_arr[$v_patient['ipid']]))
			  {
			  $real_treatment_days[$v_patient['ipid']] = array_diff($real_treatment_days[$v_patient['ipid']], $hospiz_days_arr[$v_patient['ipid']]);
			  }

			  if(!empty($hosp_days[$v_patient['ipid']]))
			  {
			  $real_treatment_days[$v_patient['ipid']] = array_diff($real_treatment_days[$v_patient['ipid']], $hosp_days[$v_patient['ipid']]);
			  }

			  $real_treatment_days[$v_patient['ipid']] = array_values($real_treatment_days[$v_patient['ipid']]);
			  //eliminate hospital days which are not in admission period
			  $hosp_days[$v_patient['ipid']] = array_intersect($hosp_days[$v_patient['ipid']], $patient_treatment_days[$v_patient['ipid']]);
			  $hospital_days[$v_patient['ipid']] = array_values(array_unique($hosp_days[$v_patient['ipid']]));
			  }


			  if($_REQUEST['dbg_days'])
			  {
			  print_r("patient treatment days\n");
			  print_r($patient_treatment);
			  print_r($real_treatment_days);

			  print_r("Hospital locations treatment\n");
			  print_r($hospital_location_ids);

			  print_r("Hospiz locations treatment\n");
			  print_r($removed_days);
			  print_r($hospital_days);

			  print_r("Real treatment days ( without hospital and hospiz)\n");
			  print_r($real_treatment_days);

			  print_r("Death Dates \n");
			  print_r($death_dates);

			  print_r("Hospiz \n");
			  print_r($hospiz_patient_locations);

			  print_r("Hospital \n");
			  print_r($hospital_patient_locations);
			  exit;
			  }



			 */


			/* ------------------------------------ Display all results ------------------------------------------ */
			if(!empty($total_patients_final))
			{
				foreach($total_patients_final as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient_array[$patient['ipid']]['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient_array[$patient['ipid']]['last_name'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient_array[$patient['ipid']]['first_name'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient_array[$patient['ipid']]['birthd'];

					$MasterData['data'][$patient['ipid']]['admissiondate'] = $patient_array[$patient['ipid']]['admission_date'];
					$MasterData['data'][$patient['ipid']]['dischargedate'] = $patients_discharge_details[$patient['ipid']]['discharge_date'];
// 				$MasterData['data'][$patient['ipid']]['admission_date'] = $patient_array[$patient['ipid']]['admission_date'];
// 				$MasterData['data'][$patient['ipid']]['discharge_date'] = $patients_discharge_details[$patient['ipid']]['discharge_date'];

					$MasterData['data'][$patient['ipid']]['healthinsurance_company'] = $patienthealth[$patient['ipid']]['company'];
// 				$MasterData['data'][$patient['ipid']]['he_days_of_treatment'] = count($real_treatment_days[$patient['ipid']]);
// 				$MasterData['data'][$patient['ipid']]['he_days_of_hospital'] = count($hospital_days[$patient['ipid']]);
					$MasterData['data'][$patient['ipid']]['he_days_of_treatment'] = $patientDetails[$patient['ipid']]['treatment_days_no'];
					$MasterData['data'][$patient['ipid']]['he_days_of_hospital'] = $patientDetails[$patient['ipid']]['hospital_days_cs_no'];



					if(count($patient2hospiz[$patient['ipid']]) == 0)
					{
						$MasterData['data'][$patient['ipid']]['patient_type_hospiz_amb'] = 'ambulant';
					}
					else if(count($patient2hospiz[$patient['ipid']]) > 0)
					{
						$MasterData['data'][$patient['ipid']]['patient_type_hospiz_amb'] = 'Hospiz';
					}

					if(!$patient_all_sapv_data[$patient['ipid']] || empty($patient_all_sapv_data[$patient['ipid']]))
					{
						$data['data'][$patient['ipid']]['status_of_sapvs'] = "keine Verordnungen";
						$data['data'][$patient['ipid']]['status_of_sapvs_7days'] = "-";
						$data['data'][$patient['ipid']]['status_of_sapvs_10days'] = "-";
					}
					else
					{
						if(count($patient_sapv_data[$patient['ipid']]['original']) == count($patient_all_sapv_data[$patient['ipid']]))
						{
							$data['data'][$patient['ipid']]['status_of_sapvs'] = "ok";
						}
						else
						{
							$data['data'][$patient['ipid']]['status_of_sapvs'] = "nicht ok";
						}
						if($saved_data[$patient['ipid']][$status_of_sapvs_7days_shortcut_id]['value'] == '1')
						{
							$data['data'][$patient['ipid']]['status_of_sapvs_7days'] = "ja";
						}
						else
						{
							$data['data'][$patient['ipid']]['status_of_sapvs_7days'] = "nein";
						}
						if($saved_data[$patient['ipid']][$status_of_sapvs_10days_shortcut_id]['value'] == '1')
						{
							$data['data'][$patient['ipid']]['status_of_sapvs_10days'] = "ja";
						}
						else
						{
							$data['data'][$patient['ipid']]['status_of_sapvs_10days'] = "nein";
						}
					}

					$MasterData['data'][$patient['ipid']]['status_of_sapvs'] = $data['data'][$patient['ipid']]['status_of_sapvs'];
					$MasterData['data'][$patient['ipid']]['status_of_sapvs_7days'] = $data['data'][$patient['ipid']]['status_of_sapvs_7days'];
					$MasterData['data'][$patient['ipid']]['status_of_sapvs_10days'] = $data['data'][$patient['ipid']]['status_of_sapvs_10days'];
				}

				return $MasterData;
			}
		}

		function bw_medical_services($params)
		{
			// report_id = 107
			// report_name = BW arztliche Leistungen
			// it shows the EBM / GOÄ entries from Kontaktformular
			//  Patient Surname || Patient Firstname || Health insurance || date visit || time visit start || time visit end  || EBM number || GOÄ Number || name of user ||driving distance ||  was SAPV ||

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidarr = array();
			$standby = array();
			$active_patients = array();

			$active_patients = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			$ipidarr = $active_patients;
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "999999999999999";
			}

			/* ################################################################################################### */
			/* ----------------- Get User - Group  Details -------------------- */
			$usergroup = new Usergroup();
			$DoctorGroups = array("4");
			$doctorgroupids = $usergroup->getUserGroups($DoctorGroups);

			foreach($doctorgroupids as $key => $value)
			{
				$doctorgroupid[] = $value['id'];
			}

			/* ----------------- Get User Details -------------------- */
			$usermod = new User();
			$docuserarray = $usermod->getuserbyGroupId($doctorgroupid, $clientid);
			foreach($docuserarray as $key => $val)
			{
				$users ['doctor'][] = $val ['id'];
			}
			if(empty($users['doctor']) || count($users['doctor']) == 0)
			{
				$users['doctor']['9999'] = "999999999999";
			}

			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
				$username [$val['id']] = $val['username'];
				$userdetails [$val ['id']] ['username'] = $val ['username'];
				$userdetails [$val ['id']] ['last_name'] = $val ['last_name'];
				$userdetails [$val ['id']] ['first_name'] = $val ['first_name'];
				$userdetails [$val ['id']] ['groupid'] = $val ['groupid'];
			}

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);


			/* ################################################################################################### */
			/* ----------------- Get Client Ebm and Goa settings-------------------- */

			$blocks_settings = new FormBlocksSettings();
			$blocks_settings_array = $blocks_settings->get_blocks_settings($clientid);

			foreach($blocks_settings_array as $kl => $vblock)
			{
				$option_details[$vblock['id']]['shortcut'] = $vblock['shortcut'];
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients SAPV details-------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray();

			foreach($sapvarr as $keys => $sapv)
			{
				$patient_sapv_data [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}

			foreach($patient_sapv_data as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						$patient_data_pseudo [$ipid] ['sapvDaysListFinal'] [] = $daysapv;
					}
				}
				$patient_data_pseudo [$ipid] ['sapvDaysListFinal'] = array_unique($patient_data_pseudo [$ipid] ['sapvDaysListFinal']);
				$patient_sapv_data [$ipid] ['sapvDaysList'] = "";
				$patient_sapv_data [$ipid] ['sapvDaysList'] = $patient_data_pseudo[$ipid] ['sapvDaysListFinal'];
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients Details -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipidarr)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			$dischargedipidstr = "'99999999999'";

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";

				$patient_array[$val['ipid']]['ipid'] = $val['ipid'];
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));

				if($val['isstandby'] == '1')
				{
					$patient_array[$val['ipid']]['admission_date'] = "STANDBY";
				}
				else
				{
					$patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
				}

				if($val['isdischarged'] == 1)
				{
					$dischargedipidstr .= ",'" . $val['ipid'] . "'";
					$dischargedipid_arr[] = $val['ipid'];
				}
			}

			$dischargedipid_arr[] = '99999999999';

			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}


			/* ################################################################################################### */
			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIN('ipid', $allfinal);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
				$patient_health_insurance[$patient_health['ipid']] = $patient_health;
			}

			/* ################################################################################################### */
			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("id,ipid, recordid ,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhereIn('ipid', $allfinal);

			$deleted_visits_array = $deleted_visits->fetchArray();

// 			$del_visits['contact_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ################################################################################################### */
			/* ----------------------Get all "contact forms" details from patients------------------------------------- */
			$contact_form_q = Doctrine_Query::create()
				->select("*,c.ipid,c.id")
				->from("ContactForms c")
				->whereIn('c.ipid', $allfinal)
				->andWhere('c.isdelete = 0');
				if(!empty($del_visits['contact_form'])){
					$contact_form_q->andWhereNotIn('c.id', $del_visits['contact_form']);
				}
				$contact_form_q->andWhereIn('c.create_user', $users['doctor'])
				->andWhere(str_replace('%date%', 'billable_date', $active_cond['date_sql']));
			$contact_form_arr = $contact_form_q->fetchArray();

			foreach($contact_form_arr as $doc => $value_doc)
			{
				$contactforms_ids[] = $value_doc['id'];
			}

			/* ------------------------------------Get EBMI actions ------------------------------------------ */
			$fbei = new FormBlockEbmi();
			$fbei_details = $fbei->get_patients_form_block_ebmi($allfinal, $contactforms_ids, true);
			foreach($fbei_details as $kipid => $contact_form_values)
			{
				foreach($contact_form_values as $contact_id => $actions)
				{
					foreach($actions as $ka => $action_id)
					{
						$form_blocks[$kipid][$contact_id]['ebm'][$action_id] = $option_details[$action_id]['shortcut'];
					}
				}
			}
			/* ------------------------------------Get EBMII actions ------------------------------------------ */
			$fbeii = new FormBlockEbmii();
			$fbeii_details = $fbeii->get_patients_form_block_ebmii($allfinal, $contactforms_ids, true);
			foreach($fbeii_details as $kipid => $contact_form_values)
			{
				foreach($contact_form_values as $contact_id => $actions)
				{
					foreach($actions as $ka => $action_id)
					{
						$form_blocks[$kipid][$contact_id]['ebm'][$action_id] = $option_details[$action_id]['shortcut'];
					}
				}
			}
			/* ------------------------------------Get GOAI actions ------------------------------------------ */
			$fbgi = new FormBlockGoai();
			$fbgi_details = $fbgi->get_patients_form_block_goai($allfinal, $contactforms_ids, true);

			foreach($fbgi_details as $kipid => $contact_form_values)
			{
				foreach($contact_form_values as $contact_id => $actions)
				{
					foreach($actions as $ka => $action_id)
					{
						$form_blocks[$kipid][$contact_id]['goa'][$action_id] = $option_details[$action_id]['shortcut'];
					}
				}
			}
			/* ------------------------------------Get GOAII actions ------------------------------------------ */
			$fbgii = new FormBlockGoaii();
			$fbgii_details = $fbgii->get_patients_form_block_goaii($allfinal, $contactforms_ids, true);
			foreach($fbgii_details as $kipid => $contact_form_values)
			{
				foreach($contact_form_values as $contact_id => $actions)
				{
					foreach($actions as $ka => $action_id)
					{
						$form_blocks[$kipid][$contact_id]['goa'][$action_id] = $option_details[$action_id]['shortcut'];
					}
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n form blocks \n");
				print_r($form_blocks);
				exit;
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n contact forms \n");
				print_r($contact_form_arr);
				exit;
			}

			/* ################################################################################################### */
			/* ------------------------------------Display all results ------------------------------------------ */
			if(!empty($contact_form_arr))
			{
				foreach($contact_form_arr as $key => $form)
				{
					$MasterData['data'][$form['id']]['epid'] = $patient_array[$form['ipid']]['epid'];
					$MasterData['data'][$form['id']]['lastname'] = $patient_array[$form['ipid']]['last_name'];
					$MasterData['data'][$form['id']]['firstname'] = $patient_array[$form['ipid']]['first_name'];
					$MasterData['data'][$form['id']]['health_insurance'] = $patienthelth[$form['ipid']]['company'];
					$MasterData['data'][$form['id']]['contact_form_date'] = date('d.m.Y', strtotime($form['start_date']));
					$MasterData['data'][$form['id']]['contact_form_start'] = date('H:i', strtotime($form['start_date']));
					$MasterData['data'][$form['id']]['contact_form_end'] = date('H:i', strtotime($form['end_date']));
					$MasterData['data'][$form['id']]['contact_form_ebm'] = implode(', ', $form_blocks[$form['ipid']][$form['id']]['ebm']);
					$MasterData['data'][$form['id']]['contact_form_goa'] = implode(', ', $form_blocks[$form['ipid']][$form['id']]['goa']);
					$MasterData['data'][$form['id']]['contact_form_username'] = $userdetails[$form['create_user']]['last_name'] . ', ' . $userdetails[$form['create_user']]['first_name'];
					$MasterData['data'][$form['id']]['contact_form_driving_distance'] = $form['fahrtstreke_km'];

					if(in_array(date('Y-m-d', strtotime($form['date'])), $patient_sapv_data [$form['ipid']] ['sapvDaysList']))
					{
						$MasterData['data'][$form['id']]['contact_form_sapv_active'] = "X";
					}
					else
					{
						$MasterData['data'][$form['id']]['contact_form_sapv_active'] = " ";
					}

					if($patient_health_insurance[$form['ipid']]['privatepatient'] == 1)
					{
						$MasterData['data'][$form['id']]['private_patient'] = "Ja";
					}
					else
					{
						$MasterData['data'][$form['id']]['private_patient'] = "Nein";
					}
				}

				return $MasterData;
			}
		}

		public function bremensapv($params)
		{
			// report_id = 109
			// report_name =  Bremen 
			// on a SAPV Leistungsnachweis in BREMEN there is a block of action (Vollversorgung, Beratung, Koordination, Teilversorgung) which shows the ammount and the overall price per category per patient.
			// We need a report that "just" lists cumulative for the complete REPORT PERIOD ALL these actions of ALL patients.
			// ||Leistung || Anzahl|| Betrag || Summe ||
			// | Beratung | 1 | 168.56 € | 168,56 |
			// |Koordination | 2 |56.19 €  | 112,38 |
			// | Teilversorgung | 3 | 142.55 € |427,65 |
			// | Vollversorgung | 4 | 218.51 € | 874,04|
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$patientmaster = new PatientMaster();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$x = 0;
			foreach($period['start'] as $s => $start_date)
			{
				$report_dates[$x]['start'] = $start_date;
				$x++;
			}

			$v = 0;
			foreach($period['end'] as $e => $end_date)
			{
				$report_dates[$v]['end'] = $end_date;
				$v++;
			}


			$ipids = array();
			$standby = array();
			$active_patients = array();

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* ################################################################################################### */


			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= 'convert(AES_DECRYPT(p.sex,"' . Zend_Registry::get('salt') . '") using latin1) as sex,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);

			$ipids = array_keys($active_patient_details); // return ipids
			$hospital_hospiz_days_array_dmy = array();
			$admission_dates = array();
			foreach($active_patient_details as $ipid => $p_details)
			{
				foreach($p_details['active_periods'] as $pid => $aperiod)
				{
					$admission_dates[$p_details['details'] ['ipid']][] = date('Y-m-d', strtotime($aperiod['start']));
				}

				$patient_array [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];

				$allfinal[] = $p_details['details'] ['ipid'];

				$patient_array [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patient_array [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patient_array [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patient_array [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patient_array [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patient_array [$p_details['details'] ['ipid']] ['discharge_date'] = end($p_details['discharge']);
					$patient_array [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patient_array [$p_details['details'] ['ipid']] ['discharge_date'] = "-";
				}

				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];


				$active_days_in_period_dmy [$p_details['details'] ['ipid']] = $p_details['real_active_days'];

				$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = array();
				if(!empty($p_details['hospital']['real_days_cs']))
				{
					$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = $p_details['hospital']['real_days_cs'];
				}
				if(!empty($p_details['hospiz']['real_days_cs']))
				{
					$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = array_merge($p_details['hospiz']['real_days_cs'], $hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']]);
				}

				$hospital_hospiz_days_dmy[$p_details['details'] ['ipid']] = $hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']];

				$hospiz_days_dmy[$p_details['details'] ['ipid']] = $p_details['hospiz']['real_days_cs'];
			}
//		print_r($admission_dates);
//		exit;
			if(count($ipids) == 0)
			{
				$ipids[] = "999999999999999";
			}
			$hospital_hospiz_days = array();
			$active_days = array();
			$active_days_in_period = array();
			$active_days = array();

			foreach($active_days_in_period_dmy as $pipid => $days_array)
			{
				foreach($days_array as $Kd => $dday)
				{
					$active_days_in_period[$pipid][] = date('Y-m-d', strtotime($dday));
					$active_days[$pipid][] = date('Y-m-d', strtotime($dday));
				}
			}

			foreach($hospital_hospiz_days_dmy as $pipid => $days_array)
			{
				foreach($days_array as $Kd => $dday)
				{
					$hospital_hospiz_days[$pipid][] = date('Y-m-d', strtotime($dday));
				}
			}

			foreach($hospiz_days_dmy as $pipid => $days_array)
			{
				foreach($days_array as $Kd => $dday)
				{
					$hospiz_days[$pipid][] = date('Y-m-d', strtotime($dday));
				}
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients SAPV details in report period  -------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipids)
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray();

			foreach($sapvarr as $k_sapv => $v_sapv)
			{

				$patients_sapv[$v_sapv['ipid']][] = $v_sapv;

				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				if(empty($all_sapv_days[$v_sapv['ipid']]))
				{
					$all_sapv_days[$v_sapv['ipid']] = array();
				}
				if(empty($temp_sapv_days[$v_sapv['ipid']]))
				{
					$temp_sapv_days[$v_sapv['ipid']] = array();
				}

				$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

				$all_sapv_days[$v_sapv['ipid']] = array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]);


				foreach($temp_sapv_days[$v_sapv['ipid']] as $k_tmp_sapv => $v_tmp_sapv)
				{
					if(!$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv])
					{
						$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array();
					}

					$current_verordnet[$v_sapv['ipid']] = explode(',', $v_sapv['verordnet']);
					$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array_merge($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv], $current_verordnet[$v_sapv['ipid']]);

					asort($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv]);
					$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array_values(array_unique($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv]));
				}
			}

			$all_sapv_days = array_unique($all_sapv_days);


			/* ################################################################################################### */
			/* ----------------- get client users -------------------- */
			$user = new User();
			$c_users = $user->getUserByClientid($clientid, 0, true);

			foreach($c_users as $k_c_users => $v_c_users)
			{
				$client_users[$v_c_users['id']] = $v_c_users;
			}
			//get contact forms START
			/* ################################################################################################### */
			/* ----------------- get deleted contact forms from patient course -------------------- */
			$deleted_cf = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhereIn("ipid", $ipids)
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'");
			$deleted_cf_array = $deleted_cf->fetchArray();

			$excluded_cf_ids[] = '99999999999';
			foreach($deleted_cf_array as $k_dcf => $v_dcf)
			{
				$excluded_cf_ids[] = $v_dcf['recordid'];
			}

			/* ################################################################################################### */
			/* ----------------- gget cf in period - deleted cf -------------------- */
			$cf = new ContactForms();
			$p_contactforms = $cf->get_multiple_contact_form_report_period($ipids, $report_dates, $excluded_cf_ids);


			$contact_forms_ids[] = '9999999999999';
			foreach($p_contactforms as $kk_cf => $vv_cf)
			{
				foreach($vv_cf as $k_cfs => $v_cfs)
				{
					$contact_forms_ids[] = $v_cfs['id'];
					$contact_forms_ungrouped[] = $v_cfs;
				}
			}

			$block_aditional_users = new FormBlockAdditionalUsers();
			$block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipids, $contact_forms_ids, false, true);

			$cnt = array();
			foreach($contact_forms_ungrouped as $k_cf => $v_cf)
			{
				$visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));

				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['start_date'] = $v_cf['start_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['end_date'] = $v_cf['end_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['del_id'] = 'cf_' . $v_cf['id'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['date'] = $v_cf['billable_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['extra_forms'] = '0';
				$has_creator = false;

				if(count($cnt[$v_cf['ipid']][$visit_date]) >= '3')
				{
					$contact_forms2dates[$v_cf['ipid']][$visit_date]['2']['extra_forms'] += '1'; //show the remaining
				}


				if(count($block_au_data[$v_cf['id']]) != 0)
				{
					foreach($block_au_data[$v_cf['id']] as $k_block_au_data => $v_block_au)
					{
						$visit_user = $client_users[$v_block_au['additional_user']];
						if($v_block_au['creator'] == '1')
						{
							$has_creator = true;
						}

						if(count($client_users[$v_block_au['additional_user']]) != 0)
						{
							if(strlen($visit_user['shortname']) > '0')
							{
								$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = $visit_user['shortname'];
							}
							else
							{
								$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(mb_substr($visit_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_user['last_name'], 0, 1, "UTF-8"));
							}
						}
					}
				}

				if(count($block_au_data[$v_cf['id']]) == '0' || $has_creator === false)
				{
					$visit_create_user = $client_users[$v_cf['create_user']];
					if(count($client_users[$v_cf['create_user']]) != 0)
					{
						if(strlen($visit_user['shortname']) > '0')
						{
							$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = $visit_create_user['shortname'];
						}
						else
						{
							$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(mb_substr($visit_create_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_create_user['last_name'], 0, 1, "UTF-8"));
						}
					}
				}

				foreach($contact_forms2dates[$v_cf['ipid']] as $k_cf_dates => $v_cf_dates)
				{
					$contact_forms2dates[$v_cf['ipid']][$k_cf_dates] = array_values($v_cf_dates);
				}

				$cnt[$v_cf['ipid']][$visit_date][] = $v_cf['id'];
			}
			$visits_array = $contact_forms2dates;
			/* ################################################################################################### */

			/* ################################################################################################### */
			/* ----------------- get pricelist	START -------------------- */
			$p_list = new PriceList();
			$master_price_list = $p_list->get_report_period_price_list($report_dates, $finalPeriodDays); //get bra sapv pricelist and then shortcuts

			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$totals = array();
			foreach($shortcuts['bre_sapv'] as $k_sh => $v_sh)
			{
				$totals[$v_sh] = '0';
				$totals_pdf[$v_sh] = '0';
			}

			/* ################################################################################################### */
			/* ----------------- get bre sapv saved data  -------------------- */
			$bre_sapv = new BreSapvControl();
			$saved_bre_data = $bre_sapv->get_bre_sapv_controlsheet_report_period($ipids, $report_dates, $master_price_list, $active_days, $hospital_hospiz_days);

			/* ################################################################################################### */
			/* ----------------- Get bre sapv data per patients -------------------- */
			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($shortcuts['bre_sapv'] as $k_short => $v_short)
				{
					foreach($finalPeriodDays as $k_c_day => $v_c_day)
					{
						if($v_short == 'abk' && empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							//Assessment, Beratung und Koordination
							if($v_short == 'abk' && in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}
							else if($v_short == 'abk' && !in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '0';
								$totals[$v_ipid][$v_short] += '1';
							}
						}
						else if($v_short == 'abk' && !empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
							$totals[$v_ipid][$v_short] += $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
						}

						if($v_short == 'bk' && empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							//Beratung und Koordination
							if($v_short == 'bk' && in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}
							elseif($v_short == 'bk' && !in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '0';
								$totals[$v_ipid][$v_short] += '0';
							}
						}
						else if($v_short == 'bk' && !empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							;
							$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
							$totals[$v_ipid][$v_short] += $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
						}
						$v_vv_values = $days2verordnet[$v_ipid][$v_c_day];

						//Additiv unterstützte Teilversorgung
						if($v_short == 'aut' && empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							if($v_short == 'aut' && in_array('3', $v_vv_values) && !in_array('4', $v_vv_values) && in_array($v_c_day, $finalPeriodDays) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $hospital_hospiz_days[$v_ipid]) && count($visits_array[$v_ipid][$v_c_day]) > '0') //tv reqired
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}
							elseif($v_short == 'aut' && in_array($v_c_day, $finalPeriodDays) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $hospital_hospiz_days[$v_ipid])) //tv reqired
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '0';
								$totals[$v_ipid][$v_short] += '0';
							}
						}
						else if($v_short == 'aut' && !empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
							$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
							$totals[$v_ipid][$v_short] += $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
						}

						if($v_short == 'vv' && empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							//Vollständige Versorgung
							if($v_short == 'vv' && in_array('4', $v_vv_values) && in_array($v_c_day, $finalPeriodDays) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $hospital_hospiz_days[$v_ipid]) && count($visits_array[$v_ipid][$v_c_day]) > '0') //vv required
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}
							elseif($v_short == 'vv' && in_array($v_c_day, $finalPeriodDays) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $hospital_hospiz_days[$v_ipid])) //vv required
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '0';
								$totals[$v_ipid][$v_short] += '0';
							}
						}
						else if($v_short == 'vv' && !empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
							$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
							$totals[$v_ipid][$v_short] += $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
						}
					}
				}
			}

			$total_sh = array();
			foreach($master_data as $k_master_data_ipid => $v_m_data)
			{
				foreach($v_m_data as $k_master_data => $v_master_data)
				{
					if($k_master_data != 'totals' && $active_days[$k_master_data_ipid])
					{
						foreach($v_master_data as $k_day => $v_data_values)
						{
							if(in_array($k_day, $active_days[$k_master_data_ipid]) && !in_array($k_day, $hospital_hospiz_days[$k_master_data_ipid]))
							{
								$patient_values[] = $k_master_data_ipid;
								$invoice_items[$k_master_data_ipid][$k_master_data]['shortcut_name'] = $k_master_data;
								$invoice_items[$k_master_data_ipid][$k_master_data]['qty'] += $v_data_values['qty'];
								$invoice_items[$k_master_data_ipid][$k_master_data]['price'] = $v_data_values['price'];
								$invoice_items[$k_master_data_ipid][$k_master_data]['shortcut_total'] += ($v_data_values['qty'] * $v_data_values['price']);

								$total_sh[$k_master_data]['amount'] += $v_data_values['qty'];
								$total_sh[$k_master_data]['price'] = $v_data_values['price'];
								;
								$total_sh[$k_master_data]['summe'] += ($v_data_values['qty'] * $v_data_values['price']);
							}
						}
					}
				}
			}

			foreach($invoice_items as $ipid => $shortcut_details)
			{
				foreach($shortcut_details as $ksh => $vsh)
				{
					$bre_data[$ipid][] = $vsh;
				}
			}


			/* ################################################################################################### */
			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIN('ipid', $allfinal);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
			}


			/* ################################################################################################### */
			/* ------------------------------------Display all results ------------------------------------------ */
			if(!empty($patient_array))
			{
				foreach($patient_array as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patient_array[$patient['ipid']]);
					}
				}
				foreach($patient_array as $keypatient => $patient)
				{
					$data[$patient['ipid']]['epid'] = $patient['epid'];
					$data[$patient['ipid']]['lastname'] = $patient['surname'];
					$data[$patient['ipid']]['firstname'] = $patient['firstname'];
					$data[$patient['ipid']]['birthd'] = $patient['dateofbirth'];
					$data[$patient['ipid']]['admissiondate'] = $patient['admissiondate'];
					$data[$patient['ipid']]['discharge_date'] = $patient['discharge_date'];
					$data[$patient['ipid']]['bre_sapv'] = $bre_data[$patient['ipid']];
				}

				$sortarr = 'epid';
				$data = $this->array_sort($data, $sortarr, SORT_ASC);

				$MasterData['data'] = $data;
				$MasterData['extra']['overall'] = $total_sh;
				return $MasterData;
			}
		}

		public function bremensapv_old($params)
		{
			// report_id = 109
			// report_name =  Bremen
			// on a SAPV Leistungsnachweis in BREMEN there is a block of action (Vollversorgung, Beratung, Koordination, Teilversorgung) which shows the ammount and the overall price per category per patient.
			// We need a report that "just" lists cumulative for the complete REPORT PERIOD ALL these actions of ALL patients.
			// ||Leistung || Anzahl|| Betrag || Summe ||
			// | Beratung | 1 | 168.56 € | 168,56 |
			// |Koordination | 2 |56.19 €  | 112,38 |
			// | Teilversorgung | 3 | 142.55 € |427,65 |
			// | Vollversorgung | 4 | 218.51 € | 874,04|
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$x = 0;
			foreach($period['start'] as $s => $start_date)
			{
				$report_dates[$x]['start'] = $start_date;
				$x++;
			}

			$v = 0;
			foreach($period['end'] as $e => $end_date)
			{
				$report_dates[$v]['end'] = $end_date;
				$v++;
			}

			$ipids = array();
			$standby = array();
			$active_patients = array();

			$active_patients = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			$ipids = $active_patients;
			if(count($ipids) == 0)
			{
				$ipids[] = "999999999999999";
			}

			$patientmaster = new PatientMaster();


			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* ################################################################################################### */

			/* ################################################################################################### */
			/* ----------------- Patients actvie days in report period  -------------------- */
			$cycles = $patientmaster->getTreatedDaysRealMultiple($ipids);

			$active_days = array();
			foreach($ipids as $k_ipid => $ipid)
			{
				if(!empty($cycles[$ipid]['admissionDates']))
				{
					foreach($cycles[$ipid]['admissionDates'] as $key_adm => $v_adm)
					{
						$admission_dates[$ipid][] = date('Y-m-d', strtotime($v_adm['date']));

						if(!empty($cycles[$ipid]['dischargeDates'][$key_adm]['date']))
						{
							$start_with_discharge[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
							$end_with_discharge[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['dischargeDates'][$key_adm]['date']));
							$discharge_dates[$ipid] = $end_with_discharge[$ipid];

							if(!$active_days[$ipid])
							{
								$active_days[$ipid] = array();
							}
							$active_days[$ipid] = array_merge($active_days[$ipid], $patientmaster->getDaysInBetween($start_with_discharge[$ipid], $end_with_discharge[$ipid]));

							//discharge date is active!
							$active_days[$ipid][] = date('Y-m-d', strtotime($end_with_discharge[$ipid]));
						}
						else
						{
							if(!$active_days[$ipid])
							{
								$active_days[$ipid] = array();
							}

							$start_without_discharge[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['admissionDates'][$key_adm]['date']));
							$end_without_discharge[$ipid] = date('Y-m-d', time());
							$discharge_dates[$ipid] = $end_without_discharge[$ipid];

							$active_days[$ipid] = array_merge($active_days[$ipid], $patientmaster->getDaysInBetween($start_without_discharge[$ipid], $end_without_discharge[$ipid]));
						}
					}
				}
				else
				{
					$cycle_start_period[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['admission_date']));

					if(empty($cycles[$ipid]['discharge_date']))
					{

						$cycle_end_period[$ipid] = date('Y-m-d', time());
					}
					else
					{
						$cycle_end_period[$ipid] = date('Y-m-d', strtotime($cycles[$ipid]['discharge_date']));
					}

					if(!$active_days[$ipid])
					{
						$active_days[$ipid] = array();
					}
					$active_days[$ipid] = array_merge($active_days[$ipid], $patientmaster->getDaysInBetween($cycle_start_period[$ipid], $cycle_end_period[$ipid]));

					$active_days[$ipid][] = $cycle_end_period[$ipid];
					$admission_dates[$ipid][] = $cycle_start_period[$ipid];
					$discharge_dates[$ipid][] = $cycle_end_period[$ipid];
				}

				$admission_dates[$ipid] = array_values(array_unique($admission_dates[$ipid]));
				$discharge_dates[$ipid] = array_values(array_unique($discharge_dates[$ipid]));

				//get active days in period
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $finalPeriodDays))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}
				}

				foreach($active_days_in_period as $k_ipid => $v_active_days)
				{
					$first_active_day[$k_ipid] = date('d.m.Y', strtotime($v_active_days[0]));
					$last_day = end($v_active_days);
					$last_active_day[$k_ipid] = date('d.m.Y', strtotime($last_day));
				}
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients SAPV details in report period  -------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipids)
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray();

			foreach($sapvarr as $k_sapv => $v_sapv)
			{

				$patients_sapv[$v_sapv['ipid']][] = $v_sapv;

				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				if(empty($all_sapv_days[$v_sapv['ipid']]))
				{
					$all_sapv_days[$v_sapv['ipid']] = array();
				}
				if(empty($temp_sapv_days[$v_sapv['ipid']]))
				{
					$temp_sapv_days[$v_sapv['ipid']] = array();
				}

				$temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

				$all_sapv_days[$v_sapv['ipid']] = array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]);


				foreach($temp_sapv_days[$v_sapv['ipid']] as $k_tmp_sapv => $v_tmp_sapv)
				{
					if(!$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv])
					{
						$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array();
					}

					$current_verordnet[$v_sapv['ipid']] = explode(',', $v_sapv['verordnet']);
					$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array_merge($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv], $current_verordnet[$v_sapv['ipid']]);

					asort($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv]);
					$days2verordnet[$v_sapv['ipid']][$v_tmp_sapv] = array_values(array_unique($days2verordnet[$v_sapv['ipid']][$v_tmp_sapv]));
				}
			}

			$all_sapv_days = array_unique($all_sapv_days);

			/* ################################################################################################### */
			/* ----------------- Get Patients get patients hospital days in report period  -------------------- */
			$hospital_hospiz_days = $this->get_patients_hospital_hospiz_days($ipids, $clientid, $active_days_in_period);
			/* ################################################################################################### */
			/* ----------------- Get Patients get patients hospital days in report period  -------------------- */
			$hospiz_days = $this->get_patients_hospiz_days($ipids, $clientid, $active_days_in_period);

			/* ################################################################################################### */
			/* ----------------- get client users -------------------- */
			$user = new User();
			$c_users = $user->getUserByClientid($clientid, 0, true);

			foreach($c_users as $k_c_users => $v_c_users)
			{
				$client_users[$v_c_users['id']] = $v_c_users;
			}
			//get contact forms START
			/* ################################################################################################### */
			/* ----------------- get deleted contact forms from patient course -------------------- */
			$deleted_cf = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhereIn("ipid", $ipids)
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'");
			$deleted_cf_array = $deleted_cf->fetchArray();

			$excluded_cf_ids[] = '99999999999';
			foreach($deleted_cf_array as $k_dcf => $v_dcf)
			{
				$excluded_cf_ids[] = $v_dcf['recordid'];
			}

			/* ################################################################################################### */
			/* ----------------- gget cf in period - deleted cf -------------------- */
			$cf = new ContactForms();
			$p_contactforms = $cf->get_multiple_contact_form_report_period($ipids, $report_dates, $excluded_cf_ids);


			$contact_forms_ids[] = '9999999999999';
			foreach($p_contactforms as $kk_cf => $vv_cf)
			{
				foreach($vv_cf as $k_cfs => $v_cfs)
				{
					$contact_forms_ids[] = $v_cfs['id'];
					$contact_forms_ungrouped[] = $v_cfs;
				}
			}

			$block_aditional_users = new FormBlockAdditionalUsers();
			$block_au_data = $block_aditional_users->getPatientFormBlockAdditionalUsers($ipids, $contact_forms_ids, false, true);

			$cnt = array();
			foreach($contact_forms_ungrouped as $k_cf => $v_cf)
			{
				$visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));

				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['start_date'] = $v_cf['start_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['end_date'] = $v_cf['end_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['del_id'] = 'cf_' . $v_cf['id'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['date'] = $v_cf['billable_date'];
				$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['extra_forms'] = '0';
				$has_creator = false;

				if(count($cnt[$v_cf['ipid']][$visit_date]) >= '3')
				{
					$contact_forms2dates[$v_cf['ipid']][$visit_date]['2']['extra_forms'] += '1'; //show the remaining
				}


				if(count($block_au_data[$v_cf['id']]) != 0)
				{
					foreach($block_au_data[$v_cf['id']] as $k_block_au_data => $v_block_au)
					{
						$visit_user = $client_users[$v_block_au['additional_user']];
						if($v_block_au['creator'] == '1')
						{
							$has_creator = true;
						}

						if(count($client_users[$v_block_au['additional_user']]) != 0)
						{
							if(strlen($visit_user['shortname']) > '0')
							{
								$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = $visit_user['shortname'];
							}
							else
							{
								$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_user['id']] = strtoupper(mb_substr($visit_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_user['last_name'], 0, 1, "UTF-8"));
							}
						}
					}
				}

				if(count($block_au_data[$v_cf['id']]) == '0' || $has_creator === false)
				{
					$visit_create_user = $client_users[$v_cf['create_user']];
					if(count($client_users[$v_cf['create_user']]) != 0)
					{
						if(strlen($visit_user['shortname']) > '0')
						{
							$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = $visit_create_user['shortname'];
						}
						else
						{
							$contact_forms2dates[$v_cf['ipid']][$visit_date][$v_cf['id']]['user_shortcuts'][$visit_create_user['id']] = strtoupper(mb_substr($visit_create_user['first_name'], 0, 1, "UTF-8") . mb_substr($visit_create_user['last_name'], 0, 1, "UTF-8"));
						}
					}
				}

				foreach($contact_forms2dates[$v_cf['ipid']] as $k_cf_dates => $v_cf_dates)
				{
					$contact_forms2dates[$v_cf['ipid']][$k_cf_dates] = array_values($v_cf_dates);
				}

				$cnt[$v_cf['ipid']][$visit_date][] = $v_cf['id'];
			}
			$visits_array = $contact_forms2dates;
			//get contact forms END
			/* ################################################################################################### */

			/* ################################################################################################### */
			/* ----------------- get pricelist	START -------------------- */
			$p_list = new PriceList();
			$master_price_list = $p_list->get_report_period_price_list($report_dates, $finalPeriodDays); //get bra sapv pricelist and then shortcuts

			$shortcuts = Pms_CommonData::get_prices_shortcuts();
			$totals = array();
			foreach($shortcuts['bre_sapv'] as $k_sh => $v_sh)
			{
				$totals[$v_sh] = '0';
				$totals_pdf[$v_sh] = '0';
			}

			/* ################################################################################################### */
			/* ----------------- get bre sapv saved data  -------------------- */
			$bre_sapv = new BreSapvControl();
			$saved_bre_data = $bre_sapv->get_bre_sapv_controlsheet_report_period($ipids, $report_dates, $master_price_list, $active_days, $hospital_hospiz_days);

			/* ################################################################################################### */
			/* ----------------- Get bre sapv data per patients -------------------- */
			foreach($ipids as $k_ipid => $v_ipid)
			{
				foreach($shortcuts['bre_sapv'] as $k_short => $v_short)
				{
					foreach($finalPeriodDays as $k_c_day => $v_c_day)
					{
						if($v_short == 'abk' && empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							//Assessment, Beratung und Koordination
							if($v_short == 'abk' && in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}
							else if($v_short == 'abk' && !in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '0';
								$totals[$v_ipid][$v_short] += '1';
							}
						}
						else if($v_short == 'abk' && !empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
							$totals[$v_ipid][$v_short] += $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
						}

						if($v_short == 'bk' && empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							//Beratung und Koordination
							if($v_short == 'bk' && in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}
							elseif($v_short == 'bk' && !in_array($v_c_day, $admission_dates[$v_ipid]))
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '0';
								$totals[$v_ipid][$v_short] += '0';
							}
						}
						else if($v_short == 'bk' && !empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							;
							$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
							$totals[$v_ipid][$v_short] += $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
						}
						$v_vv_values = $days2verordnet[$v_ipid][$v_c_day];

						//Additiv unterstützte Teilversorgung
						if($v_short == 'aut' && empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							if($v_short == 'aut' && in_array('3', $v_vv_values) && !in_array('4', $v_vv_values) && in_array($v_c_day, $finalPeriodDays) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $hospital_hospiz_days[$v_ipid]) && count($visits_array[$v_ipid][$v_c_day]) > '0') //tv reqired
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}
							elseif($v_short == 'aut' && in_array($v_c_day, $finalPeriodDays) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $hospital_hospiz_days[$v_ipid])) //tv reqired
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '0';
								$totals[$v_ipid][$v_short] += '0';
							}
						}
						else if($v_short == 'aut' && !empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
							$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
							$totals[$v_ipid][$v_short] += $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
						}

						if($v_short == 'vv' && empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							//Vollständige Versorgung
							if($v_short == 'vv' && in_array('4', $v_vv_values) && in_array($v_c_day, $finalPeriodDays) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $hospital_hospiz_days[$v_ipid]) && count($visits_array[$v_ipid][$v_c_day]) > '0') //vv required
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '1';
								$totals[$v_ipid][$v_short] += '1';
							}
							elseif($v_short == 'vv' && in_array($v_c_day, $finalPeriodDays) && in_array($v_c_day, $active_days[$v_ipid]) && !in_array($v_c_day, $hospital_hospiz_days[$v_ipid])) //vv required
							{
								$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
								$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
								$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
								$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = '0';
								$totals[$v_ipid][$v_short] += '0';
							}
						}
						else if($v_short == 'vv' && !empty($saved_bre_data[$v_ipid][$v_short][$v_c_day]))
						{
							$master_data[$v_ipid][$v_short][$v_c_day] = $master_price_list[$v_c_day][0][$v_short];
							$master_data[$v_ipid][$v_short]['price'] = $master_price_list[$v_c_day][0][$v_short]['price'];
							$master_data[$v_ipid][$v_short][$v_c_day]['vv'] = $v_vv_values;
							$master_data[$v_ipid][$v_short][$v_c_day]['qty'] = $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
							$totals[$v_ipid][$v_short] += $saved_bre_data[$v_ipid][$v_short][$v_c_day]['qty'];
						}
					}
				}
			}

			$total_sh = array();
			foreach($master_data as $k_master_data_ipid => $v_m_data)
			{
				foreach($v_m_data as $k_master_data => $v_master_data)
				{
					if($k_master_data != 'totals' && $active_days[$k_master_data_ipid])
					{
						foreach($v_master_data as $k_day => $v_data_values)
						{
							if(in_array($k_day, $active_days[$k_master_data_ipid]) && !in_array($k_day, $hospital_hospiz_days[$k_master_data_ipid]))
							{
								$patient_values[] = $k_master_data_ipid;
								$invoice_items[$k_master_data_ipid][$k_master_data]['shortcut_name'] = $k_master_data;
								$invoice_items[$k_master_data_ipid][$k_master_data]['qty'] += $v_data_values['qty'];
								$invoice_items[$k_master_data_ipid][$k_master_data]['price'] = $v_data_values['price'];
								$invoice_items[$k_master_data_ipid][$k_master_data]['shortcut_total'] += ($v_data_values['qty'] * $v_data_values['price']);

								$total_sh[$k_master_data]['amount'] += $v_data_values['qty'];
								$total_sh[$k_master_data]['price'] = $v_data_values['price'];
								;
								$total_sh[$k_master_data]['summe'] += ($v_data_values['qty'] * $v_data_values['price']);
							}
						}
					}
				}
			}

			foreach($invoice_items as $ipid => $shortcut_details)
			{
				foreach($shortcut_details as $ksh => $vsh)
				{
					$bre_data[$ipid][] = $vsh;
				}
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients Details -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipids)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			$dischargedipidstr = "'99999999999'";

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";

				$patient_array[$val['ipid']]['ipid'] = $val['ipid'];
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));

				if($val['isstandby'] == '1')
				{
					$patient_array[$val['ipid']]['admission_date'] = "STANDBY";
				}
				else
				{
					$patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
				}

				if($val['isdischarged'] == 1)
				{
					$dischargedipidstr .= ",'" . $val['ipid'] . "'";
					$dischargedipid_arr[] = $val['ipid'];
				}
			}

			$dischargedipid_arr[] = '99999999999';

			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ################################################################################################### */
			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIN('ipid', $allfinal);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
			}

			/* ----------------- Get Patients discharge details -------------------- */
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $allfinal)
				->andWhere('isdelete = 0');
			$patientdisarray = $patientdis->fetchArray();

			foreach($patientdisarray as $dischargedPatient)
			{

				$patient_discharge_details[$dischargedPatient['ipid']]['discharge_date'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
			}

			/* ################################################################################################### */
			/* ------------------------------------Display all results ------------------------------------------ */
			if(!empty($patient_array))
			{
				foreach($patient_array as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patient_array[$patient['ipid']]);
					}
				}
				foreach($patient_array as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['last_name'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['first_name'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient['birthd'];
					$MasterData['data'][$patient['ipid']]['admissiondate'] = $patient['admission_date'];


					if($patient_discharge_details[$patient['ipid']]['discharge_date'])
					{
						$MasterData['data'][$patient['ipid']]['discharge_date'] = $patient_discharge_details[$patient['ipid']]['discharge_date'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['discharge_date'] = "-";
					}
					$MasterData['data'][$patient['ipid']]['bre_sapv'] = $bre_data[$patient['ipid']];
				}
				$MasterData['extra']['overall'] = $total_sh;

				return $MasterData;
			}
		}

		private function get_patients_hospital_hospiz_days($ipids, $clientid, $patients_active_days, $overall = false)
		{// Ancuta
			$patientmaster = new PatientMaster();
			if(empty($ipids))
			{
				$ipids[] = "XXXXX";
			}
			//get master locations
			$hospitalids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"');
			$hosparray = $hospitalids->fetchArray();

			$hospital_ids[] = '999999999';
			foreach($hosparray as $key => $hospital)
			{
				$hospital_ids[] = $hospital['id'];
				$locations[$hospital['id']]['type'] = $hospital['location_type'];
			}

			//	get patient locations
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipids)
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$pat_locations = $patloc->fetchArray();

			//get discharge methods
			$dis = new DischargeMethod();
			$discharge_methods = $dis->getDischargeMethod($clientid, 0);

			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA" || $v_dis_method['abbr'] == "Tod")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids); // get discharge details for all ipids

			foreach($patients_discharge as $key => $discharge_details)
			{
				if(in_array($discharge_details['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$discharge_details['ipid']] = date('Y-m-d', strtotime($discharge_details['discharge_date']));
				}
			}

			$hospital_days = array();
			$hosp_days = array();
			$full_hospital_days = array();

			foreach($pat_locations as $k_loc => $location_values)
			{
				$patients_locations[$location_values['ipid']][] = $location_values;
			}
			foreach($patients_locations as $pat_ipid => $pat_locations_values)
			{
				foreach($pat_locations_values as $k_pat_loc => $v_pat_loc)
				{
					if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
					{
						$till = date('Y-m-d');
						$till = date("Y-m-d", strtotime("-1 day"));
					}
					else
					{
						$till = date("Y-m-d", strtotime("-1 day", strtotime($v_pat_loc['valid_till'])));
					}
					if((date('Y-m-d', strtotime($v_pat_loc['valid_till'])) == $discharge_dead_date[$v_pat_loc['ipid']]) && empty($pat_locations_values[($k_pat_loc + 1)]['valid_till']) && ($locations[$v_pat_loc['location_id']]['type'] == '1' || $locations[$v_pat_loc['location_id']]['type'] == '2')
					)
					{
						$till = $discharge_dead_date[$v_pat_loc['ipid']];
					}
					$v_pat_loc['valid_from'] = date("Y-m-d", strtotime("+1 day", strtotime($v_pat_loc['valid_from'])));

					$s_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
					$s_end = date('Y-m-d', strtotime($till));

					if($locations[$v_pat_loc['location_id']]['type'] == '1' || $locations[$v_pat_loc['location_id']]['type'] == '2')
					{
						if(empty($full_hospital_days[$v_pat_loc['ipid']]))
						{
							$full_hospital_days[$v_pat_loc['ipid']] = array();
						}

						if(empty($hospital_days[$v_pat_loc['ipid']]))
						{
							$hospital_days[$v_pat_loc['ipid']] = array();
						}

						$hospital_days[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

						$full_hospital_days[$v_pat_loc['ipid']] = array_merge($full_hospital_days[$v_pat_loc['ipid']], $hospital_days[$v_pat_loc['ipid']]);


						$current_location = date('Y-m-d', strtotime($pat_locations_values[$k_pat_loc]['valid_till']));
						$nextlocation = date('Y-m-d', strtotime($pat_locations_values[$k_pat_loc + 1]['valid_from']));

						if($locations[$pat_locations_values[$k_pat_loc + 1]['location_id']]['type'] == '1' || $locations[$pat_locations_values[$k_pat_loc + 1]['location_id']]['type'] == '2')
						{
							if($overall)
							{
								if($current_location == $nextlocation)
								{
									$full_hospital_days[$v_pat_loc['ipid']] = array_merge($full_hospital_days[$v_pat_loc['ipid']], array($nextlocation));
								}
							}
							else
							{
								if($current_location == $nextlocation && in_array($nextlocation, $patients_active_days[$v_pat_loc['ipid']]))
								{
									$full_hospital_days[$v_pat_loc['ipid']] = array_merge($full_hospital_days[$v_pat_loc['ipid']], array($nextlocation));
								}
							}
						}
					}
				}
			}

			foreach($full_hospital_days as $pipid => $h_days_array)
			{
				foreach($h_days_array as $k => $h_days)
				{
					if($overall)
					{
						$overall_hospital_days[$pipid][] = $h_days;
					}
					else
					{
						if(in_array($h_days, $patients_active_days[$pipid]))
						{
							$overall_hospital_days[$pipid][] = $h_days;
						}
						else
						{
							$overall_hospital_days_outside[$pipid][] = $h_days;
						}
					}
				}
			}
			return $overall_hospital_days;
		}

		private function get_patients_hospiz_days($ipids, $clientid, $patients_active_days)
		{// Ancuta
			$patientmaster = new PatientMaster();
			if(empty($ipids))
			{
				$ipids[] = "XXXXX";
			}
			//get master locations
			$hospizids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"');
			$hosparray = $hospizids->fetchArray();

			$hospiz_ids[] = '999999999';
			foreach($hosparray as $key => $hospiz)
			{
				$hospiz_ids[] = $hospiz['id'];
				$locations[$hospiz['id']]['type'] = $hospiz['location_type'];
			}

			//	get patient locations
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipids)
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$pat_locations = $patloc->fetchArray();

			//get discharge methods
			$dis = new DischargeMethod();
			$discharge_methods = $dis->getDischargeMethod($clientid, 0);

			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			$patients_discharge = PatientDischarge::get_patients_discharge($ipids); // get discharge details for all ipids


			foreach($patients_discharge as $key => $discharge_details)
			{
				if(in_array($discharge_details['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$discharge_details['ipid']] = date('Y-m-d', strtotime($discharge_details['discharge_date']));
				}
			}

			$hospiz_days = array();
			$hosp_days = array();
			$full_hospiz_days = array();

			foreach($pat_locations as $k_loc => $location_values)
			{
				$patients_locations[$location_values['ipid']][] = $location_values;
			}
			foreach($patients_locations as $pat_ipid => $pat_locations_values)
			{
				foreach($pat_locations_values as $k_pat_loc => $v_pat_loc)
				{
					if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
					{
						$till = date('Y-m-d');
						$till = date("Y-m-d", strtotime("-1 day"));
					}
					else
					{
						$till = date("Y-m-d", strtotime("-1 day", strtotime($v_pat_loc['valid_till'])));
					}
					if((date('Y-m-d', strtotime($v_pat_loc['valid_till'])) == $discharge_dead_date[$v_pat_loc['ipid']]) && empty($pat_locations_values[($k_pat_loc + 1)]['valid_till']) && $locations[$v_pat_loc['location_id']]['type'] == '2'
					)
					{
						$till = $discharge_dead_date[$v_pat_loc['ipid']];
					}
					$v_pat_loc['valid_from'] = date("Y-m-d", strtotime("+1 day", strtotime($v_pat_loc['valid_from'])));

					$s_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
					$s_end = date('Y-m-d', strtotime($till));

					if($locations[$v_pat_loc['location_id']]['type'] == '2')
					{
						if(empty($full_hospiz_days[$v_pat_loc['ipid']]))
						{
							$full_hospiz_days[$v_pat_loc['ipid']] = array();
						}

						if(empty($hospiz_days[$v_pat_loc['ipid']]))
						{
							$hospiz_days[$v_pat_loc['ipid']] = array();
						}

						$hospiz_days[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

						$full_hospiz_days[$v_pat_loc['ipid']] = array_merge($full_hospiz_days[$v_pat_loc['ipid']], $hospiz_days[$v_pat_loc['ipid']]);


						$current_location = date('Y-m-d', strtotime($pat_locations_values[$k_pat_loc]['valid_till']));
						$nextlocation = date('Y-m-d', strtotime($pat_locations_values[$k_pat_loc + 1]['valid_from']));

						if($locations[$pat_locations_values[$k_pat_loc + 1]['location_id']]['type'] == '2')
						{
							if($current_location == $nextlocation && in_array($nextlocation, $patients_active_days[$v_pat_loc['ipid']]))
							{
								$full_hospiz_days[$v_pat_loc['ipid']] = array_merge($full_hospiz_days[$v_pat_loc['ipid']], array($nextlocation));
							}
						}
					}
				}
			}

			foreach($full_hospiz_days as $pipid => $h_days_array)
			{
				foreach($h_days_array as $k => $h_days)
				{
					if(in_array($h_days, $patients_active_days[$pipid]))
					{
						$overall_hospiz_days[$pipid][] = $h_days;
					}
					else
					{
						$overall_hospiz_days_outside[$pipid][] = $h_days;
					}
				}
			}
			return $overall_hospiz_days;
		}

		private function get_patients_overall_hospiz_days($ipids, $clientid, $first_day = false)
		{// Ancuta
			$patientmaster = new PatientMaster();
			if(empty($ipids))
			{
				$ipids[] = "XXXXX";
			}
			//get master locations
			$hospizids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"');
			$hosparray = $hospizids->fetchArray();

			$hospiz_ids[] = '999999999';
			foreach($hosparray as $key => $hospiz)
			{
				$hospiz_ids[] = $hospiz['id'];
				$locations[$hospiz['id']]['type'] = $hospiz['location_type'];
			}

			//	get patient locations
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipids)
				->andWhere('isdelete="0"')
				->orderBy('valid_from,id ASC');
			$pat_locations = $patloc->fetchArray();

			//get discharge methods
			$dis = new DischargeMethod();
			$discharge_methods = $dis->getDischargeMethod($clientid, 0);

			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids); // get discharge details for all ipids

			foreach($patients_discharge as $key => $discharge_details)
			{
				if(in_array($discharge_details['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$discharge_details['ipid']] = date('Y-m-d', strtotime($discharge_details['discharge_date']));
				}
			}

			$hospiz_days = array();
			$hosp_days = array();
			$full_hospiz_days = array();

			foreach($pat_locations as $k_loc => $location_values)
			{
				$patients_locations[$location_values['ipid']][] = $location_values;
			}
			foreach($patients_locations as $pat_ipid => $pat_locations_values)
			{
				foreach($pat_locations_values as $k_pat_loc => $v_pat_loc)
				{
					if($v_pat_loc['valid_till'] == '0000-00-00 00:00:00')
					{
						$till = date('Y-m-d');
						$till = date("Y-m-d", strtotime("-1 day"));
					}
					else
					{
						$till = date("Y-m-d", strtotime("-1 day", strtotime($v_pat_loc['valid_till'])));
					}
					if((date('Y-m-d', strtotime($v_pat_loc['valid_till'])) == $discharge_dead_date[$v_pat_loc['ipid']]) && empty($pat_locations_values[($k_pat_loc + 1)]['valid_till']) && $locations[$v_pat_loc['location_id']]['type'] == '2'
					)
					{
						$till = $discharge_dead_date[$v_pat_loc['ipid']];
					}

					if($first_day)
					{
						$v_pat_loc['valid_from'] = date("Y-m-d", strtotime($v_pat_loc['valid_from']));
					}
					else
					{
						$v_pat_loc['valid_from'] = date("Y-m-d", strtotime("+1 day", strtotime($v_pat_loc['valid_from'])));
					}

					$s_start = date('Y-m-d', strtotime($v_pat_loc['valid_from']));
					$s_end = date('Y-m-d', strtotime($till));

					if($locations[$v_pat_loc['location_id']]['type'] == '2')
					{
						if(empty($full_hospiz_days[$v_pat_loc['ipid']]))
						{
							$full_hospiz_days[$v_pat_loc['ipid']] = array();
						}

						if(empty($hospiz_days[$v_pat_loc['ipid']]))
						{
							$hospiz_days[$v_pat_loc['ipid']] = array();
						}

						$hospiz_days[$v_pat_loc['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);

						$full_hospiz_days[$v_pat_loc['ipid']] = array_merge($full_hospiz_days[$v_pat_loc['ipid']], $hospiz_days[$v_pat_loc['ipid']]);


						$current_location = date('Y-m-d', strtotime($pat_locations_values[$k_pat_loc]['valid_till']));
						$nextlocation = date('Y-m-d', strtotime($pat_locations_values[$k_pat_loc + 1]['valid_from']));

						if($locations[$pat_locations_values[$k_pat_loc + 1]['location_id']]['type'] == '2')
						{
							// 						if($current_location == $nextlocation  && in_array($nextlocation,$patients_active_days[$v_pat_loc['ipid']])){
							if($current_location == $nextlocation)
							{
								$full_hospiz_days[$v_pat_loc['ipid']] = array_merge($full_hospiz_days[$v_pat_loc['ipid']], array($nextlocation));
							}
						}
					}
				}
			}

			foreach($full_hospiz_days as $pipid => $h_days_array)
			{
				foreach($h_days_array as $k => $h_days)
				{
					$overall_hospiz_days[$pipid][] = $h_days;
				}
			}
			return $overall_hospiz_days;
		}


		public function discharged_patients_dead_160824($params)
		{
		    // report_id = 111-old
		    // report_name = 39a Anlage 6
		    // *§39a Anlage 6*: it looks only for DEAD patients (report period looks for discharges type = death)
		    // |Name (Surname) |Vorname  (Firstname) |Geburtstag  (DoB)|Krankenkasse (Health insurance) | Beginn(admission) | Ende (discharge) |
		
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    	
		    	
		    $quarterarr = $params['quarterarr'];
		    $yeararr = $params['yeararr'];
		    $montharr = $params['montharr'];
		    $reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		
		    $whereepid = $this->getDocCondition();
		    $ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);
		
		    $ipidsval = "'X'";
		    $comma = ",";
		    foreach($ipidsarr as $ipid)
		    {
		        $ipidsval .= $comma . "'" . $ipid . "'";
		        $comma = ",";
		    }
		
		    $ipidsArray = $ipidsarr;
		
		    if(empty($ipidsArray))
		    {
		        $ipidsArray[] = "99999999999";
		    }
		
		    $Q = Doctrine_Query::create()
		    ->select("p.*,e.ipid,e.epid,
					AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
					convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
					convert(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
					convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city
					");
		    $Q->from('PatientMaster p');
		    $Q->whereIn('p.ipid', $ipidsArray);
		    $Q->andWhere('p.isdelete = 0');
		    $Q->andWhere('p.isstandbydelete = 0');
		    $Q->orderBy('p.admission_date DESC');
		    $Q->leftJoin("p.EpidIpidMapping e");
		    $Q->andWhere('p.ipid = e.ipid ');
		    $Q->andWhere($whereepid . 'e.clientid = ' . $clientid);
		    $Q->orderBy('CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ASC');
		    $deadPatients = $Q->fetchArray();
		
		    foreach($deadPatients as $patient)
		    {
		        $deadIpidPatients[$patient['ipid']] = $patient;
		        $deadIpidPatientsarr[] = $patient['ipid'];
		        $epidsarr[$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
		    }
		
		    $dispatloc = Doctrine_Query::create()
		    ->select("*")
		    ->from("PatientDischarge as p")
		    ->whereIn('p.ipid', $ipidsArray)
		    ->andWhere('isdelete = 0');
		    $dispatlocarr = $dispatloc->fetchArray();
		
		    $comma = ",";
		    foreach($dispatlocarr as $dischargedpat)
		    {
		        $dischargeLocationsArray[$dischargedpat['ipid']] = $dischargedpat;
		        $comma = ",";
		    }
		    /* ----------------------- Get Health Insurance-------------------------------- */
		    $Health = Doctrine_Query::create()
		    ->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
		    ->from('PatientHealthInsurance')
		    ->whereIn('ipid', $ipidsArray);
		    $Healtharray = $Health->fetchArray();
		
		    foreach($Healtharray as $patient_health)
		    {
		        $patienthelth[$patient_health['ipid']]['number'] = $patient_health["insurance_no"];
		        $patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
		        $patienthelth[$patient_health['ipid']]['ik'] = $patient_health["institutskennzeichen"];
		        $patienthelth[$patient_health['ipid']]['kasse_nr'] = $patient_health["kvk_no"];
		    }
		
		    foreach($deadIpidPatients as $k_dipid => $v_dpatient)
		    {
		        $master[$k_dipid]['epid'] = $epidsarr[$k_dipid]['epid'];
		        $master[$k_dipid]['lastname'] = $v_dpatient['last_name'];
		        $master[$k_dipid]['firstname'] = $v_dpatient['first_name'];
		        $master[$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd']));
		
		        if(strlen($patienthelth[$v_dpatient['ipid']]['company']) > 0)
		        {
		            $master[$k_dipid]['healthinsurance'] = $patienthelth[$v_dpatient['ipid']]['company'];
		        }
		        else
		        {
		            $master[$k_dipid]['healthinsurance'] = "keine Angabe";
		        }
		
		        $master[$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($v_dpatient['admission_date']));
		        $master[$k_dipid]['diedon'] = date("d.m.Y", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date']));
		    }
		
		    foreach($master as $key => $row)
		    {
		        $health[$key] = $row['healthinsurance'];
		        $lastname[$key] = $row['lastname'];
		    }
		
		    array_multisort($health, SORT_ASC, $lastname, SORT_ASC, $master);
		
		    foreach($master as $ipid_key => $vpatient)
		    {
		        $MasterData['data'][$ipid_key]['epid'] = $vpatient['epid'];
		        $MasterData['data'][$ipid_key]['lname'] = $vpatient['lastname'];
		        $MasterData['data'][$ipid_key]['fname'] = $vpatient['firstname'];
		        $MasterData['data'][$ipid_key]['birth_day'] = $vpatient['birthd'];
		        $MasterData['data'][$ipid_key]['healthinsurance_name'] = $vpatient['healthinsurance'];
		        $MasterData['data'][$ipid_key]['adm_start'] = $vpatient['admissiondate'];
		        $MasterData['data'][$ipid_key]['discharge_end'] = $vpatient['diedon'];
		    }
		
		    return $MasterData;
		}
		
		
		
		public function discharged_patients_dead($params)
		{
			// report_id = 111
			// report_name = 39a Anlage 6
			// *§39a Anlage 6*: it looks only for DEAD patients (report period looks for discharges type = death)
			// |Name (Surname) |Vorname  (Firstname) |Geburtstag  (DoB)|Krankenkasse (Health insurance) | Beginn(admission) | Ende (discharge) |

		    //ISPC-1753
		    // 2) add all patients discharged with a discharge reason which is checked (1) into the report "§39 Anlage 6"
            // 3) please verify that every patient is only "reported" ONCE. means for the first fall which ended with a reason from above. if he is re admitted and discharged, re admitted and discharged etc etc .. every patient just ONCE exported for the first ever case.
		    
		    
		    
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			
			
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$pm = new PatientMaster ();
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
				
			
			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */
			
			foreach($period ['start'] as $keyd => $startDate)
			{
			    $period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			    $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
			    if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
			    {
			        $report_period_array[$keyd]['end'] = date("Y-m-d");
			    }
			    else
			    {
			        $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
			    }
			}
			
			foreach($period_days as $keyp => $daysp)
			{
			    foreach($daysp as $day)
			    {
			        $finalPeriodDays [] = $day;
			    }
			}
			$finalPeriodDays = array_unique($finalPeriodDays);
			/* ################################################################################################### */
			
			$whereepid = $this->getDocCondition();
// 			$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);

			$ipidsval = "'X'";
			$comma = ",";
			foreach($ipidsarr as $ipid)
			{
				$ipidsval .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}

			$ipidsArray = $ipidsarr;
			$dead_ipids = $ipidsarr;

			if(empty($ipidsArray))
			{
			    $ipidsArray[] = "99999999999";
			}

			if(empty($dead_ipids))
			{
			    $dead_ipids[] = "99999999999";
			}
			
			// include patients discharged - with new options
			$dm_report = DischargeMethod::get_report_discharge_method($clientid);
			$dm_dead = DischargeMethod::get_client_discharge_method($clientid,true);

// 			print_r($dm_dead); exit;
// 			$cond['anlage_6_report'] = 1;
// 			$cond['only_first_period'] = 1;
			$cond_overall['all_discharge_details'] = 1;
			$all_patients_discharges = $this->get_all_discharge_patients($quarterarr, $yeararr, $montharr,$cond_overall);
// 			print_r($all_patients_discharges); exit;	
			
			foreach($all_patients_discharges as $dipid=>$dis_details){
		        $first_discharge_ever[$dipid] = $dis_details[0];
			    foreach($dis_details as $d_pos=>$ddata){
			        if(in_array($ddata['discharge_method'],$dm_report)){
			            $all_discharge[$dipid]['special'][] = $ddata; 
			        }
			        if(in_array($ddata['discharge_method'],$dm_dead)){
			            $all_discharge[$dipid]['dead'][] = $ddata; 
			        }
			    }
			}
			
			$special_ipids = array();
			$dead_ipids = array();
			
			foreach($all_discharge as $ipid=>$discharge_type){
			    if(!empty($all_discharge[$ipid]['special'])   && in_array(date("Y-m-d",strtotime($all_discharge[$ipid]['special'][0]['discharge_date'])),$finalPeriodDays)){
    			    $first_discharged[$ipid]['special'] = $all_discharge[$ipid]['special'][0];
                    $special_ipids[] = $ipid;
			    }
			    
			    if(!empty($all_discharge[$ipid]['dead'])  && in_array(date("Y-m-d",strtotime($all_discharge[$ipid]['dead'][0]['discharge_date'])),$finalPeriodDays) && !in_array($ipid,$special_ipids) && empty($all_discharge[$ipid]['special'])){
    			    $first_discharged[$ipid]['dead'] = $all_discharge[$ipid]['dead'][0]; 
                    $dead_ipids[] = $ipid;
			    }
			}
			
			// get first discharges - check if they are in period- and set ipid array 
			if(empty($special_ipids)){
			    $special_ipids[] = "99999999999999999";
			}
			
			if(empty($dead_ipids)){
			    $dead_ipids[] = "99999999999999999";
			}
			$ipidsArray = array_merge($dead_ipids,$special_ipids);
			
			$qa = Doctrine_Query::create()
				->select("*")
				->from("PatientActive")
				->whereIn('ipid', $ipidsArray);
			$qarr = $qa->fetchArray();
			
			foreach($qarr as $k=>$p_det){
			    $patients_act[$p_det['ipid']][$p_det['end']] = $p_det['start']; 
			}
 
			$Q = Doctrine_Query::create()
				->select("p.*,e.ipid,e.epid,
					AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
					convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
					convert(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
					convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city
					");
			$Q->from('PatientMaster p');
			$Q->whereIn('p.ipid', $ipidsArray);
			$Q->andWhere('p.isdelete = 0');
			$Q->andWhere('p.isstandbydelete = 0');
			$Q->orderBy('p.admission_date DESC');
			$Q->leftJoin("p.EpidIpidMapping e");
			$Q->andWhere('p.ipid = e.ipid ');
			$Q->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$Q->orderBy('CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ASC');
			$deadPatients = $Q->fetchArray();

			foreach($deadPatients as $patient)
			{
				$deadIpidPatients[$patient['ipid']] = $patient;
				$deadIpidPatientsarr[] = $patient['ipid'];
				$epidsarr[$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
			}

			$dispatloc = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge as p")
				->whereIn('p.ipid', $ipidsArray)
// 				->andWhere('isdelete = 0')
			;
			$dispatlocarr = $dispatloc->fetchArray();

			foreach($dispatlocarr as $dischargedpat)
			{
			    if(in_array($dischargedpat['ipid'],$dead_ipids) && $dischargedpat['isdelete'] == '0'){
				    $dischargeLocationsArray[$dischargedpat['ipid']] = $dischargedpat;
			    }
			}
			
			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $ipidsArray);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['number'] = $patient_health["insurance_no"];
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
				$patienthelth[$patient_health['ipid']]['ik'] = $patient_health["institutskennzeichen"];
				$patienthelth[$patient_health['ipid']]['kasse_nr'] = $patient_health["kvk_no"];
			}

			foreach($deadIpidPatients as $k_dipid => $v_dpatient)
			{
			    if($_REQUEST['dbg'] == "dead"){
    				$master[$k_dipid]['epid'] = $epidsarr[$k_dipid]['epid'].'<br/>'.$k_dipid;
			    } else{
    				$master[$k_dipid]['epid'] = $epidsarr[$k_dipid]['epid'];
			    }
				$master[$k_dipid]['lastname'] = $v_dpatient['last_name'];
				$master[$k_dipid]['firstname'] = $v_dpatient['first_name'];
				$master[$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd']));

				if(strlen($patienthelth[$v_dpatient['ipid']]['company']) > 0)
				{
					$master[$k_dipid]['healthinsurance'] = $patienthelth[$v_dpatient['ipid']]['company'];
				}
				else
				{
					$master[$k_dipid]['healthinsurance'] = "keine Angabe";
				}
				
				if(!in_array($k_dipid,$special_ipids)){ // show discharge dead details
				    $master[$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($v_dpatient['admission_date']));
				    if($_REQUEST['dbg'] == "dead"){
    	   			    $master[$k_dipid]['diedon'] = date("d.m.Y", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date'])) ."  &#8224;"; 
				    } else{
    	   			    $master[$k_dipid]['diedon'] = date("d.m.Y", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date'])); 
				    }
				} 
				else
				{
				    $adm[$k_dipid] =  $patients_act[$k_dipid][date("Y-m-d", strtotime($first_discharged[$k_dipid]['special']['discharge_date']))];
				    $master[$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($adm[$k_dipid]));// get the admission relevant to the discharge
				    $master[$k_dipid]['diedon'] = date("d.m.Y", strtotime($first_discharged[$k_dipid]['special']['discharge_date']));
				}
			}

			foreach($master as $key => $row)
			{
				$health[$key] = $row['healthinsurance'];
				$lastname[$key] = $row['lastname'];
			}

			array_multisort($health, SORT_ASC, $lastname, SORT_ASC, $master);

			foreach($master as $ipid_key => $vpatient)
			{
				$MasterData['data'][$ipid_key]['epid'] = $vpatient['epid'];
				$MasterData['data'][$ipid_key]['lname'] = $vpatient['lastname'];
				$MasterData['data'][$ipid_key]['fname'] = $vpatient['firstname'];
				$MasterData['data'][$ipid_key]['birth_day'] = $vpatient['birthd'];
				$MasterData['data'][$ipid_key]['healthinsurance_name'] = $vpatient['healthinsurance'];
				$MasterData['data'][$ipid_key]['adm_start'] = $vpatient['admissiondate'];
				$MasterData['data'][$ipid_key]['discharge_end'] = $vpatient['diedon'];
			}

			return $MasterData;
		}

		public function healthinsurance2deadpatients($params)
		{
			// report_id = 112
			// report_name = Anlage 7*
			// |Name der Krankenkasse(health insurance)|Anzahl der abgeschlossenen Sterbebegleitungen (Dead patients) |
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$whereepid = $this->getDocCondition();
			$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);

			$ipidsval = "'X'";
			$comma = ",";
			foreach($ipidsarr as $ipid)
			{
				$ipidsval .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}

			$ipidsArray = $ipidsarr;

			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}

			$Q = Doctrine_Query::create()
				->select("p.*,e.ipid,e.epid,
					AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
					convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
					convert(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
					convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city
					");
			$Q->from('PatientMaster p');
			$Q->whereIn('p.ipid', $ipidsArray);
			$Q->andWhere('p.isdelete = 0');
			$Q->andWhere('p.isstandbydelete = 0');
			$Q->orderBy('p.admission_date DESC');
			$Q->leftJoin("p.EpidIpidMapping e");
			$Q->andWhere('p.ipid = e.ipid ');
			$Q->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$Q->orderBy('CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ASC');
			$deadPatients = $Q->fetchArray();

			$deadPatientFamilyDocStr = "'0',";
			foreach($deadPatients as $patient)
			{
				$deadIpidPatients[$patient['ipid']] = $patient;
				$deadPatientFamilyDocStr .= "'" . $patient['familydoc_id'] . "',";
				$deadIpidPatientsarr[] = $patient['ipid'];
				$epidsarr[$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
			}

			$dispatloc = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge as p")
				->whereIn('p.ipid', $ipidsArray)
				->andWhere('isdelete = 0');
			$dispatlocarr = $dispatloc->fetchArray();

			foreach($dispatlocarr as $dischargedpat)
			{
				$dischargeLocationsArray[$dischargedpat['ipid']] = $dischargedpat;
			}

			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $ipidsArray);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patients_with_health[] = $patient_health["ipid"];
			}

			$i = 0;
			foreach($ipidsArray as $k => $ipid)
			{

				if(!in_array($ipid, $patients_with_health))
				{
					$key = count($Healtharray) + $i;
					$Healtharray[$key]['ipid'] = $ipid;
					$Healtharray[$key]['company_name'] = "-";
					$Healtharray[$key]['companyid'] = "0";
				}
				$i++;
			}

			$health_insurance_ids[] = "XXXXX";
			foreach($Healtharray as $patient_health)
			{
				$healt2patients[$patient_health["company_name"]]['amount'][] = $patient_health["ipid"];
				$health_insurance_ids[] = $patient_health["companyid"];
				
				if($patient_health['privatepatient'] == "1"){
				    $healt2patients[$patient_health["company_name"]]['PKV'][] = $patient_health["ipid"];
				}else{
				    $healt2patients[$patient_health["company_name"]]['GKV'][] = $patient_health["ipid"];
				    
				}
			}
			
			$health_insurance_data = HealthInsurance::get_multiple_healthinsurances($health_insurance_ids);

			$total_dead_patients = 0;
			$s = 0;
			$status = " - ";
			foreach($healt2patients as $key_id => $patients)
			{
				$data[$s]['health_insurance_name'] = $key_id;
				$data[$s]['health_insurance2patients'] = count($healt2patients[$key_id]['amount']);
				
				if(count($patients['PKV']) > 0  ){
    				$status = "PKV";
				} else {
    				$status = "GKV";
				} 
				
   				$data[$s]['health_insurance2patients_status'] = $status;
				
				$total_dead_patients += count($healt2patients[$key_id]['amount']);
				$s++;
			}

			$sortarr = 'health_insurance2patients';
			$data = $this->array_sort($data, $sortarr, SORT_DESC);


			$MasterData['data'] = $data;
			$MasterData['extra']['sum'] = $total_dead_patients;

			return $MasterData;
		}

		private function maindiagnosis2deadpatients($params)
		{
			// main diagnosis for dead patients
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$active = array();
			$dead = array();
			$standby = array();

			$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);

			$ipidsval = "'X'";
			$comma = ",";
			foreach($ipidsarr as $ipid)
			{
				$ipidsval .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}

			$ipidsArray = $ipidsarr;

			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}

			$dg = new DiagnosisType();
			$diagarr = $dg->getDiagnosisTypes($logininfo->clientid, '"HD"');

			foreach($diagarr as $key => $valdiag)
			{
				$diagnosis_type .= '"' . $valdiag['id'] . '",';
			}

			$diag_pat = Doctrine_Query::create()
				->select('*, count(diagnosis_id) as sum_diagnos, AES_DECRYPT(tabname, "' . Zend_Registry::get('salt') . '") as a_tabname')
				->from("PatientDiagnosis")
				->where('ipid in ("999999",' . $ipidsval . ') and diagnosis_type_id in (' . substr($diagnosis_type, 0, -1) . ') ')
				->groupBy('diagnosis_id')
				->orderBy('diagnosis_id DESC');
			$diag_patarr = $diag_pat->fetchArray();

			$i = 0;
			foreach($diag_patarr as $diag_patitem)
			{
				$data[$i]['icdprimary'] = '&nbsp;';
				$data[$i]['description'] = '&nbsp;';
				$data[$i]['tabname'] = $diag_patitem['a_tabname'];
				$data[$i]['count'] = $diag_patitem['sum_diagnos'];

				if($diag_patitem['diagnosis_id'] == '')
				{
					$diagnosis_id = 0;
				}
				else
				{
					$diagnosis_id = $diag_patitem['diagnosis_id'];
				}

				$data[$i]['diagnosis_id'] = $diagnosis_id;

				switch($diag_patitem['a_tabname'])
				{

					case 'diagnosis':
						$diagnosis_tab[] = $diagnosis_id;
						break;


					case 'diagnosis_freetext':
						$diagnosis_freetext_tab[] = $diagnosis_id;
						break;

					case 'diagnosis_icd':
						$diagnosis_icd_tab[] = $diagnosis_id;
						break;


					default:
						break;
				}

				$i++;
			}

			if(sizeof($diagnosis_tab) > 0)
			{
				$diagnosis = Doctrine_Query::create()
					->select("*")
					->from("Diagnosis")
					->where("id IN (9999999," . implode(',', $diagnosis_tab) . ")");
				$diagnosisarray = $diagnosis->fetchArray();
				foreach($diagnosisarray as $diagnosis_item)
				{
					$diagnosis_details[] = '"' . $diagnosis_item['icd_primary'] . '"; ' . '"' . $diagnosis_item['description'] . '"';
				}
			}

			if(sizeof($diagnosis_freetext_tab) > 0)
			{
				$diagnosisfreetext = Doctrine_Query::create()
					->select('*')
					->from('DiagnosisText')
					->where("id IN (9999999," . implode(',', $diagnosis_freetext_tab) . ")");
				$diagnosisfreetextarray = $diagnosisfreetext->fetchArray();
				foreach($diagnosisfreetextarray as $diagnosisfreetext_item)
				{
					$diagnosis_details[] = '"' . $diagnosisfreetext_item['icd_primary'] . '"; ' . '"' . $diagnosisfreetext_item['free_name'] . '"';
				}
			}

			if(sizeof($diagnosis_icd_tab) > 0)
			{
				$diagnosisicd = Doctrine_Query::create()
					->select('*')
					->from('DiagnosisIcd')
					->where("id IN (9999999," . implode(',', $diagnosis_icd_tab) . ")");
				$diagnosisicdarray = $diagnosisicd->fetchArray();
				foreach($diagnosisicdarray as $diagnosisicd_item)
				{
					$diagnosis_details[] = '"' . $diagnosisicd_item['icd_primary'] . '"; ' . '"' . $diagnosisicd_item['description'] . '"';
				}
			}

			foreach($diagnosis_details as $k => $dig)
			{
				echo $dig . ';<br />';
			}
			exit;
		}

		public function brandenburg_services($params)
		{
			// report_id = 113
			// report_name = Brandenburg Leistungen
			// the report shows all patients treated in SAPV in that year.

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidarr = array();
			$standby = array();
			$active_patients = array();

			$active_patients = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			if($includearr['standby'] == 1)
			{
				$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
			}

			$ipidarr = array_merge($active_patients, $standby);
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "999999999999999";
			}

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* ################################################################################################### */
			$sql = 'e.epid, p.ipid, e.ipid,d.*,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= 'd.discharge_location,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			if($includearr['standby'] == 1)
			{
				$conditions['include_standby'] = true;
			}

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);

			$ipidarr = array_keys($active_patient_details); // return ipids

			$hospital_hospiz_days_array_dmy = array();
			$last_acive_day = "";
			foreach($active_patient_details as $ipid => $p_details)
			{

				$patientDetails [$p_details['details'] ['ipid']] ['active_periods'] = $p_details['active_periods'];
				$last_acive_day = end($p_details['active_periods']);
				$patientDetails [$p_details['details'] ['ipid']] ['last_active_day'] = $last_acive_day['end'];
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['standby'] = $p_details['details'] ['isstandby'];

				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['zip'] = $p_details['details'] ['zip'];
				$patientDetails [$p_details['details'] ['ipid']] ['city'] = $p_details['details'] ['city'];
				$patientDetails [$p_details['details'] ['ipid']] ['family_doc'] = $p_details['details'] ['familydoc_id'];
				$family_doctors_ids[] = $p_details['details'] ['familydoc_id'];

				if($p_details['details'] ['isstandby'] == '1')
				{
					$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = "STANDBY";
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				}

				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
				}


				$patientDetails [$p_details['details'] ['ipid']]['active_days'] = $p_details['active_days'];

				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];

				$patientDetails [$p_details['details'] ['ipid']]['hospital_days'] = $p_details['hospital']['real_days'];

				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days'] = $p_details['hospiz']['real_days'];


				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['treatment_days'] = $p_details ['treatment_days'];
				$patientDetails [$p_details['details'] ['ipid']]['treatment_days_no'] = $p_details ['treatment_days_no'];

				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
				$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = array();
				if(!empty($p_details['hospital']['real_days_cs']))
				{
					$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = $p_details['hospital']['real_days_cs'];
				}
				if(!empty($p_details['hospiz']['real_days_cs']))
				{
					$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = array_merge($p_details['hospiz']['real_days_cs'], $hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']]);
				}

				$patients_overall_data_dmy['hospiz_hospital'][$p_details['details'] ['ipid']] = $hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']];
				$patients_overall_data_dmy['active_days'][$p_details['details'] ['ipid']] = $p_details['active_days'];
				$patients_overall_data_dmy['real_active_days'][$p_details['details'] ['ipid']] = $p_details['real_active_days'];
			}
			if(count($dischargedipid_arr) == 0)
			{
				$dischargedipid_arr[] = "XXXXXX";
			}


			###########################
			$conditions_ov['periods'] = array('0' => array('start' => "2007-01-01", 'end' => date("Y-m-d")));
			$conditions_ov['client'] = $clientid;
			$conditions_ov['ipids'] = $ipidarr;
			$overall_patient_details = Pms_CommonData::patients_days($conditions_ov);


			foreach($overall_patient_details as $ipid => $op_details)
			{
				$overall_details [$op_details['details'] ['ipid']] ['epid'] = $op_details['details'] ['epid'];

				foreach($op_details['active_periods'] as $pid => $aperiod)
				{
					$admission_dates[$op_details['details'] ['ipid']][] = date('Y-m-d', strtotime($aperiod['start']));
				}

				$overall_details [$op_details['details'] ['ipid']]['real_active_days'] = $op_details['real_active_days'];
				$overall_details [$op_details['details'] ['ipid']]['real_active_days_no'] = $op_details['real_active_days_no'];
				$overall_details [$op_details['details'] ['ipid']]['hospital_days'] = $op_details['hospital']['real_days'];
				$overall_details [$op_details['details'] ['ipid']]['hospital_days_cs'] = $op_details['hospital']['real_days_cs'];
				$overall_details [$op_details['details'] ['ipid']]['hospiz_days'] = $op_details['hospiz']['real_days'];
				$overall_details [$op_details['details'] ['ipid']]['hospiz_days_cs'] = $op_details['hospiz']['real_days_cs'];
				$overall_details [$op_details['details'] ['ipid']]['hospital_days_cs_no'] = $op_details['hospital']['real_days_cs_no'];
				$overall_details [$op_details['details'] ['ipid']]['active_days_no_hospital_days'] = $op_details['real_active_days_no'] - $op_details['hospital']['real_days_cs_no'];

				$ov_hospital_hospiz_days_array_dmy[$op_details['details'] ['ipid']] = array();
				if(!empty($op_details['hospital']['real_days_cs']))
				{
					$ov_hospital_hospiz_days_array_dmy[$op_details['details'] ['ipid']] = $op_details['hospital']['real_days_cs'];
				}
				if(!empty($op_details['hospiz']['real_days_cs']))
				{
					$ov_hospital_hospiz_days_array_dmy[$op_details['details'] ['ipid']] = array_merge($op_details['hospiz']['real_days_cs'], $ov_hospital_hospiz_days_array_dmy[$op_details['details'] ['ipid']]);
				}

				$ov_patients_overall_data_dmy['hospiz_hospital'][$op_details['details'] ['ipid']] = $ov_hospital_hospiz_days_array_dmy[$op_details['details'] ['ipid']];
				$ov_patients_overall_data_dmy['active_days'][$op_details['details'] ['ipid']] = $op_details['active_days'];
				$ov_patients_overall_data_dmy['real_active_days'][$op_details['details'] ['ipid']] = $op_details['real_active_days'];
			}



			foreach($ov_patients_overall_data_dmy['hospiz_hospital'] as $pipid => $hhdays_array)
			{
				foreach($hhdays_array as $k => $aday)
				{
					$patients_overall_data['hospiz_hospital'][$pipid][] = date('Y-m-d', strtotime($aday));
				}
			}


			foreach($ov_patients_overall_data_dmy['active_days'] as $pipid => $acdays_array)
			{
				foreach($acdays_array as $k => $aday)
				{
					$patients_overall_data['active_days'][$pipid][] = date('Y-m-d', strtotime($aday));
				}
			}

			// overall patients Days
			foreach($ipidarr as $k => $ipidp)
			{
				$patients_overall_data['app_dot'][$ipidp] = $pm->getDaysInBetween(date("Y-m-d", strtotime($admission_dates[$ipidp][0])), date("Y-m-d", strtotime($patientDetails [$ipidp] ['last_active_day'])), false);
			}

			foreach($ov_patients_overall_data_dmy['real_active_days'] as $rad_ipid => $racdays_array)
			{
				foreach($racdays_array as $k_rad => $rad_day)
				{
					$patients_overall_data['real_active_days'][$rad_ipid][] = date('Y-m-d', strtotime($rad_day));
				}
			}

			// overall patients discharge Days
			foreach($ipidarr as $kd => $ipidpd)
			{
				$patients_overall_data['discharge_days'][$ipidpd] = array_diff($patients_overall_data['app_dot'][$ipidpd], $patients_overall_data['real_active_days'][$ipidpd]);
			}

			/* ################################################################################################### */
			/* ----------------- Get User - Group  Details -------------------- */
			$usergroup = new Usergroup();
			$MasterGroups = array("4", "5");
			$master_group_ids = $usergroup->getUserGroups($MasterGroups);

			foreach($master_group_ids as $key => $value)
			{
				$groups_id[$value['groupmaster']] = $value['id'];
				$group_info[$value['id']]['master'] = $value['groupmaster'];
			}
			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usermod = new User();
			$groups_users_array = $usermod->getuserbyGroupId($groups_id, $clientid, true);


			foreach($groups_users_array as $key => $val)
			{
				if($group_info[$val['groupid']]['master'] == '4')
				{
					$users ['doctor'][] = $val ['id'];
				}

				if($group_info[$val['groupid']]['master'] == '5')
				{
					$users ['nurse'][] = $val ['id'];
				}

				if($group_info[$val['groupid']]['master'] == '4' || $group_info[$val['groupid']]['master'] == '5')
				{
					$users ['doctor_nurse'][] = $val ['id'];
				}
			}
			if(empty($users['doctor']) || count($users['doctor']) == 0)
			{
				$users['doctor']['9999'] = "999999999999";
			}
			if(empty($users['nurse']) || count($users['nurse']) == 0)
			{
				$users['nurse']['9999'] = "999999999999";
			}
			if(empty($users['doctor_nurse']) || count($users['doctor_nurse']) == 0)
			{
				$users['doctor_nurse']['9999'] = "999999999999";
			}

			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
				$username[$val['id']] = $val['username'];
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r($users);
				print_r("\n");
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients SAPV details-------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray();


			foreach($sapvarr as $keys => $sapv)
			{
				$valid_ipids_arr[] = $sapv['ipid'];

				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}
			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['treatment_days']) && !in_array($daysapv, $patientData [$ipid] ['period_active_sapv']))
						{
							$patientData [$ipid] ['period_active_sapv'] [] = $daysapv;
						}
					}
				}
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}

			/* ################# Overall sapv days of patients ################ */
			$patients_overall_data['sapv'] = $this->get_patients_all_sapv($valid_ipids_arr);

			if($_REQUEST['dbg'] == '1')
			{
				print_r($patients_overall_data);
				print_r("\n");
			}
			/* ################################################################################################### */
			/* ----------------- Get family doctors  -------------------- */
			if(empty($family_doctors_ids))
			{
				$family_doctors_ids[] = "XXXXXX";
			}

			$fam_doc_q = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->whereIN("id", $family_doctors_ids);
			$fam_doc_array = $fam_doc_q->fetchArray();

			foreach($fam_doc_array as $fk => $f_value)
			{
				$fam_doc_details[$f_value['id']]['zip'] = $f_value['zip'];
				$fam_doc_details[$f_value['id']]['city'] = $f_value['city'];
			}

			/* ################################################################################################### */
			/* ----------------- Get discharge Locations  -------------------- */
			$dis_loc_q = Doctrine_Query::create()
				->select("*")
				->from('DischargeLocation')
				->where("clientid=" . $logininfo->clientid)
				->andWhere("isdelete = 0");
			$dis_loc_array = $dis_loc_q->fetchArray();

			foreach($dis_loc_array as $k_loc => $v_loc)
			{
				$discharg_location2type[$v_loc['id']] = $v_loc['type'];
			}

			/* ################################################################################################### */
			/* ----------------- Get discharge methods dead  -------------------- */
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "99999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients discharge details -------------------- */
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $dischargedipid_arr)
				->andWhere('isdelete = 0');
			$patientdisarray = $patientdis->fetchArray();

			foreach($patientdisarray as $dischargedPatient)
			{
				if(in_array($dischargedPatient['discharge_method'], $todIds))
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];

					$patient_death_details [$dischargedPatient ['ipid']] ['death_date'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patient_death_details [$dischargedPatient ['ipid']] ['discharge_location'] = $discharg_location2type[$dischargedPatient ['discharge_location']];
				}
				else
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				$patientDetails [$dischargedPatient ['ipid']] ['dischargedate_final'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));

				$patient_discharge_details[$dischargedPatient['ipid']]['discharge_date'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
			}


			/* ################################################################################################### */
			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhereIn('ipid', $valid_ipids_arr);

			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['contact_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ################################################################################################### */
			/* ----------------------Get all "contact forms" details from patients------------------------------------- */
			$contact_form_q = Doctrine_Query::create()
				->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
				->from("ContactForms c")
				->whereIn('c.ipid', $valid_ipids_arr)
				->andWhere('c.isdelete = 0')
				->andWhereNotIn('c.id', $del_visits['contact_form'])
				->andWhereIn('c.create_user', $users['doctor_nurse'])
				->andWhere(str_replace('%date%', 'billable_date', $active_cond['date_sql']));
			if($_REQUEST['dbg'] == '1')
			{
				echo $contact_form_q->getSqlQuery();
			}
			$contact_form_arr = $contact_form_q->fetchArray();

			foreach($valid_ipids_arr as $kp_ipid => $p_ipid)
			{

				//final sapv days and days of treatment
				$patientDetails [$p_ipid] ['period_active_sapv_days_count'] = sizeof($patientData [$p_ipid] ['period_active_sapv']);
				$patientDetails [$p_ipid] ['period_active_sapv_days'] = $patientData [$p_ipid] ['period_active_sapv'];
				$patientDetails [$p_ipid] ['daysoftreatment'] = sizeof($patientDetails [$p_ipid]['real_active_days_no']);
				$patientDetails [$p_ipid] ['period_first_active_sapv_day'] = date('d.m.Y', strtotime($patientData [$p_ipid] ['period_active_sapv'][0]));

				$patientDetails [$p_ipid] ['period_valid_sapv_tv'] = array_intersect($patientData [$p_ipid] ['period_active_sapv'], $patients_overall_data['sapv'][$p_ipid]['tv_days']);
				$patientDetails [$p_ipid] ['period_valid_sapv_vv'] = array_intersect($patientData [$p_ipid] ['period_active_sapv'], $patients_overall_data['sapv'][$p_ipid]['vv_days']);

				if($patientDetails [$p_ipid] ['period_valid_sapv_tv'])
				{
					$patientDetails [$p_ipid] ['pct03a_valid'] = 'X';
					$patientDetails [$p_ipid] ['pct03a_days'] = count($patientDetails [$p_ipid] ['period_valid_sapv_tv']);
					$patientDetails [$p_ipid] ['pct03b_valid'] = 'X';
					$patientDetails [$p_ipid] ['pct03b_days'] = count($patientDetails [$p_ipid] ['period_valid_sapv_tv']);
				}
				else
				{
					$patientDetails [$p_ipid] ['pct03a_valid'] = '-';
					$patientDetails [$p_ipid] ['pct03a_days'] = '-';
					$patientDetails [$p_ipid] ['pct03b_valid'] = '-';
					$patientDetails [$p_ipid] ['pct03b_days'] = '-';
				}

				if($patientDetails [$p_ipid] ['period_valid_sapv_vv'])
				{
					$patientDetails [$p_ipid] ['pct04a_valid'] = 'X';
					$patientDetails [$p_ipid] ['pct04a_days'] = count($patientDetails [$p_ipid] ['period_valid_sapv_vv']);
					$patientDetails [$p_ipid] ['pct04b_valid'] = 'X';
					$patientDetails [$p_ipid] ['pct04b_days'] = count($patientDetails [$p_ipid] ['period_valid_sapv_vv']);
				}
				else
				{
					$patientDetails [$p_ipid] ['pct04a_valid'] = '-';
					$patientDetails [$p_ipid] ['pct04a_days'] = '-';
					$patientDetails [$p_ipid] ['pct04b_valid'] = '-';
					$patientDetails [$p_ipid] ['pct04b_days'] = '-';
				}

				//  GET OVERALL ACTIVE DAYS OF PATIENT - STARTING WITH FIRST ADMISSION UNTILL LAST DISCHARGE


				$overall_active_days_of_patient[$p_ipid] = array_intersect($patients_overall_data['active_days'][$p_ipid], $patients_overall_data['sapv'][$p_ipid]['sapv_days_overall']);

				if($patients_overall_data['hospiz_hospital'][$p_ipid])
				{
					$overall_active_days_of_patient[$p_ipid] = array_diff($overall_active_days_of_patient[$p_ipid], $patients_overall_data['hospiz_hospital'][$p_ipid]);
				}

				if($patients_overall_data['discharge_days'][$p_ipid])
				{
					$overall_active_days_of_patient[$p_ipid] = array_diff($overall_active_days_of_patient[$p_ipid], $patients_overall_data['discharge_days'][$p_ipid]);
				}
				array_unique($overall_active_days_of_patient[$p_ipid]);
				asort($overall_active_days_of_patient[$p_ipid]);
				$overall_active_days_of_patient[$p_ipid] = array_values($overall_active_days_of_patient[$p_ipid]);

				$patientDetails[$p_ipid]['overall_count_active_sapv_days'] = count($overall_active_days_of_patient[$p_ipid]);

				$patientDetails[$p_ipid]['overall_active_sapv_days'] = $overall_active_days_of_patient[$p_ipid];

				if(count($overall_active_days_of_patient[$p_ipid]) > 0)
				{
					$patientDetails [$p_ipid] ['overall_first_active_sapv_day'] = date('d.m.Y', strtotime($overall_active_days_of_patient[$p_ipid][0]));
				}
				else
				{
					$patientDetails [$p_ipid] ['overall_first_active_sapv_day'] = '-';
				}


				//  GET OVERALL INACTIVE DAYS OF PATIENT - STARTING WITH FIRST ADMISSION UNTILL LAST DISCHARGE
				$overall_non_sapv_days_of_patient[$p_ipid] = array();
// 			$non_sapv_days[$p_ipid] = array_diff($patients_overall_data['real_active_days'][$p_ipid],$patients_overall_data['sapv'][$p_ipid]['sapv_days_overall']);
				$non_sapv_days[$p_ipid] = array_diff($patients_overall_data['active_days'][$p_ipid], $patients_overall_data['sapv'][$p_ipid]['sapv_days_overall']);

				$overall_non_sapv_days_of_patient[$p_ipid] = $non_sapv_days[$p_ipid];

				if($patients_overall_data['hospiz_hospital'][$p_ipid])
				{
					$overall_non_sapv_days_of_patient[$p_ipid] = array_merge($overall_non_sapv_days_of_patient[$p_ipid], $patients_overall_data['hospiz_hospital'][$p_ipid]);
				}
				if($patients_overall_data['discharge_days'][$p_ipid])
				{
					$overall_non_sapv_days_of_patient[$p_ipid] = array_merge($overall_non_sapv_days_of_patient[$p_ipid], $patients_overall_data['discharge_days'][$p_ipid]);
				}

				array_unique($overall_non_sapv_days_of_patient[$p_ipid]);
				asort($overall_non_sapv_days_of_patient[$p_ipid]);
				$overall_non_sapv_days_of_patient[$p_ipid] = array_values($overall_non_sapv_days_of_patient[$p_ipid]);
				$patientDetails[$p_ipid]['non_sapv_days_count'] = count($overall_non_sapv_days_of_patient[$p_ipid]);

				$patientDetails[$p_ipid]['non_sapv_days'] = $overall_non_sapv_days_of_patient[$p_ipid];
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n");
				print_r("non_sapv_days");
				print_r("\n");
				print_r($non_sapv_days);
				print_r("\n");
				print_r("\n");
				print_r($patientDetails);
				print_r("\n");
			}

			foreach($contact_form_arr as $kci => $contact_form_details)
			{
				if($patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_tv'])
				{
					if(in_array(date('Y-m-d', strtotime($contact_form_details['billable_date'])), $patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_tv']) && in_array($contact_form_details['create_user'], $users['nurse']))
					{
						$pct_details[$contact_form_details['ipid']]['pct03a']['contact_forms_date'][] = date('d.m.Y', strtotime($contact_form_details['billable_date']));
						$pct_details[$contact_form_details['ipid']]['pct03a']['contact_forms_ids'][] = $contact_form_details['id'];
						$pct_details[$contact_form_details['ipid']]['pct03a']['contact_forms_time'] += $contact_form_details['contact_form_duration'];
					}
					elseif(in_array(date('Y-m-d', strtotime($contact_form_details['start_date'])), $patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_tv']) && in_array($contact_form_details['create_user'], $users['doctor']))
					{
						$pct_details[$contact_form_details['ipid']]['pct03b']['contact_forms_date'][] = date('d.m.Y', strtotime($contact_form_details['billable_date']));
						$pct_details[$contact_form_details['ipid']]['pct03b']['contact_forms_ids'][] = $contact_form_details['id'];
						$pct_details[$contact_form_details['ipid']]['pct03b']['contact_forms_time'] += $contact_form_details['contact_form_duration'];
					}
				}

				if($patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_vv'])
				{
					if(in_array(date('Y-m-d', strtotime($contact_form_details['billable_date'])), $patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_vv']) && in_array($contact_form_details['create_user'], $users['nurse']))
					{
						$pct_details[$contact_form_details['ipid']]['pct04a']['contact_forms_date'][] = date('d.m.Y', strtotime($contact_form_details['billable_date']));
						$pct_details[$contact_form_details['ipid']]['pct04a']['contact_forms_ids'][] = $contact_form_details['id'];
						$pct_details[$contact_form_details['ipid']]['pct04a']['contact_forms_time'] += $contact_form_details['contact_form_duration'];
					}
					elseif(in_array(date('Y-m-d', strtotime($contact_form_details['billable_date'])), $patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_vv']) && in_array($contact_form_details['create_user'], $users['doctor']))
					{
						$pct_details[$contact_form_details['ipid']]['pct04b']['contact_forms_date'][] = date('d.m.Y', strtotime($contact_form_details['billable_date']));
						$pct_details[$contact_form_details['ipid']]['pct04b']['contact_forms_ids'][] = $contact_form_details['id'];
						$pct_details[$contact_form_details['ipid']]['pct04b']['contact_forms_time'] += $contact_form_details['contact_form_duration'];
					}
				}
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n");
				print_r($pct_details);
				print_r("\n");
				exit;
			}
			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;
			if(!empty($valid_ipids_arr))
			{

				foreach($valid_ipids_arr as $key => $patient_ipid)
				{
					$MasterData['data'][$patient_ipid]['epid'] = $patientDetails [$patient_ipid]['epid'];
					$MasterData['data'][$patient_ipid]['lastname'] = $patientDetails [$patient_ipid]['surname'];
					$MasterData['data'][$patient_ipid]['firstname'] = $patientDetails [$patient_ipid]['firstname'];

					$MasterData['data'][$patient_ipid]['patient_zip'] = $patientDetails [$patient_ipid]['zip'];
					$MasterData['data'][$patient_ipid]['patient_city'] = $patientDetails [$patient_ipid]['city'];

					$MasterData['data'][$patient_ipid]['first_sapv_active_day'] = $patientDetails [$patient_ipid] ['overall_first_active_sapv_day'];

					$MasterData['data'][$patient_ipid]['patient_discharge_date'] = $patientDetails [$patient_ipid]['dischargedate'];


					$MasterData['data'][$patient_ipid]['non_sapv_days_count'] = count(array_unique($patientDetails [$patient_ipid]['non_sapv_days']));

					if(!empty($patientDetails [$patient_ipid]['dischargedate_death']))
					{
						$MasterData['data'][$patient_ipid]['patient_death_date'] = $patientDetails [$patient_ipid]['dischargedate_death'];
					}
					else
					{
						$MasterData['data'][$patient_ipid]['patient_death_date'] = "-";
					}

					if($patient_death_details[$patient_ipid]['discharge_location'] && $patient_death_details[$patient_ipid]['discharge_location'] == '1')
					{
						$MasterData['data'][$patient_ipid]['discharge_location_home'] = "X";
					}
					else
					{
						$MasterData['data'][$patient_ipid]['discharge_location_home'] = '-';
					}


					if($patient_death_details[$patient_ipid]['discharge_location'] && $patient_death_details[$patient_ipid]['discharge_location'] == '2')
					{
						$MasterData['data'][$patient_ipid]['discharge_location_hospital'] = "X";
					}
					else
					{
						$MasterData['data'][$patient_ipid]['discharge_location_hospital'] = '-';
					}

					if($patient_death_details[$patient_ipid]['discharge_location'] && $patient_death_details[$patient_ipid]['discharge_location'] == '3')
					{
						$MasterData['data'][$patient_ipid]['discharge_location_hospiz'] = "X";
					}
					else
					{
						$MasterData['data'][$patient_ipid]['discharge_location_hospiz'] = '-';
					}

					if($patient_death_details[$patient_ipid]['discharge_location'] && $patient_death_details[$patient_ipid]['discharge_location'] == '4')
					{
						$MasterData['data'][$patient_ipid]['discharge_location_pflegeheim'] = "X";
					}
					else
					{
						$MasterData['data'][$patient_ipid]['discharge_location_pflegeheim'] = '-';
					}


					$MasterData['data'][$patient_ipid]['family_doctor_zip'] = $fam_doc_details[$patientDetails [$patient_ipid]['family_doc']]['zip'];
					$MasterData['data'][$patient_ipid]['family_doctor_city'] = $fam_doc_details[$patientDetails [$patient_ipid]['family_doc']]['city'];

					$MasterData['data'][$patient_ipid]['family_doctor_patient_distance'] = "";
					$MasterData['data'][$patient_ipid]['ik_palliative_pflege'] = "";
					$MasterData['data'][$patient_ipid]['palliative_pflege_patient_distance'] = "";


					/* ###################### PCT03a  ##################################### */
					if(count($pct_details[$patient_ipid]['pct03a']['contact_forms_ids']) > 0)
					{
						$MasterData['data'][$patient_ipid]['pct03a_valid'] = "X";
						$MasterData['data'][$patient_ipid]['pct03a_days_count'] = count(array_unique($pct_details[$patient_ipid]['pct03a']['contact_forms_date']));
						$MasterData['data'][$patient_ipid]['pct03a_visits_count'] = count(array_unique($pct_details[$patient_ipid]['pct03a']['contact_forms_ids']));
						$MasterData['data'][$patient_ipid]['pct03a_visits_time'] = $pct_details[$patient_ipid]['pct03a']['contact_forms_time'];
					}
					else
					{
						$MasterData['data'][$patient_ipid]['pct03a_valid'] = "";
						$MasterData['data'][$patient_ipid]['pct03a_days_count'] = "";
						$MasterData['data'][$patient_ipid]['pct03a_visits_count'] = '';
						$MasterData['data'][$patient_ipid]['pct03a_visits_time'] = '';
					}


					/* ###################### PCT03b  ##################################### */
					if(count($pct_details[$patient_ipid]['pct03b']['contact_forms_ids']) > 0)
					{
						$MasterData['data'][$patient_ipid]['pct03b_valid'] = "X";
						$MasterData['data'][$patient_ipid]['pct03b_days_count'] = count(array_unique($pct_details[$patient_ipid]['pct03b']['contact_forms_date']));
						$MasterData['data'][$patient_ipid]['pct03b_visits_count'] = count(array_unique($pct_details[$patient_ipid]['pct03b']['contact_forms_ids']));
						$MasterData['data'][$patient_ipid]['pct03b_visits_time'] = $pct_details[$patient_ipid]['pct03b']['contact_forms_time'];
					}
					else
					{
						$MasterData['data'][$patient_ipid]['pct03b_valid'] = "";
						$MasterData['data'][$patient_ipid]['pct03b_days_count'] = "";
						$MasterData['data'][$patient_ipid]['pct03b_visits_count'] = "";
						$MasterData['data'][$patient_ipid]['pct03b_visits_time'] = "";
					}



					/* ###################### PCT04a  ##################################### */
					if(count($pct_details[$patient_ipid]['pct04a']['contact_forms_ids']) > 0)
					{
						$MasterData['data'][$patient_ipid]['pct04a_valid'] = "X";
						$MasterData['data'][$patient_ipid]['pct04a_days_count'] = count(array_unique($pct_details[$patient_ipid]['pct04a']['contact_forms_date']));
						$MasterData['data'][$patient_ipid]['pct04a_visits_count'] = count(array_unique($pct_details[$patient_ipid]['pct04a']['contact_forms_ids']));
						$MasterData['data'][$patient_ipid]['pct04a_visits_time'] = $pct_details[$patient_ipid]['pct04a']['contact_forms_time'];
					}
					else
					{
						$MasterData['data'][$patient_ipid]['pct04a_valid'] = "";
						$MasterData['data'][$patient_ipid]['pct04a_days_count'] = "";
						$MasterData['data'][$patient_ipid]['pct04a_visits_count'] = "";
						$MasterData['data'][$patient_ipid]['pct04a_visits_time'] = "";
					}


					/* ###################### PCT04b  ##################################### */
					if(count($pct_details[$patient_ipid]['pct04b']['contact_forms_ids']) > 0)
					{
						$MasterData['data'][$patient_ipid]['pct04b_valid'] = "X";
						$MasterData['data'][$patient_ipid]['pct04b_days_count'] = count(array_unique($pct_details[$patient_ipid]['pct04b']['contact_forms_date']));
						$MasterData['data'][$patient_ipid]['pct04b_visits_count'] = count(array_unique($pct_details[$patient_ipid]['pct04b']['contact_forms_ids']));
						$MasterData['data'][$patient_ipid]['pct04b_visits_time'] = $pct_details[$patient_ipid]['pct04b']['contact_forms_time'];
					}
					else
					{
						$MasterData['data'][$patient_ipid]['pct04b_valid'] = "";
						$MasterData['data'][$patient_ipid]['pct04b_days_count'] = "";
						$MasterData['data'][$patient_ipid]['pct04b_visits_count'] = "";
						$MasterData['data'][$patient_ipid]['pct04b_visits_time'] = "";
					}
					$i++;
				}
				$MasterData['data'] = $this->array_sort($MasterData['data'], 'epid', SORT_ASC);
				return $MasterData;
			}
		}

		public function brandenburg_services_old($params)
		{
			// report_id = 113
			// report_name = Brandenburg Leistungen
			// the report shows all patients treated in SAPV in that year.

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidarr = array();
			$standby = array();
			$active_patients = array();

			$active_patients = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			if($includearr['standby'] == 1)
			{
				$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
			}

			$ipidarr = array_merge($active_patients, $standby);
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "999999999999999";
			}
			/* ################################################################################################### */
			/* ----------------- Get User - Group  Details -------------------- */
			$usergroup = new Usergroup();
			$MasterGroups = array("4", "5");
			$master_group_ids = $usergroup->getUserGroups($MasterGroups);

			foreach($master_group_ids as $key => $value)
			{
				$groups_id[$value['groupmaster']] = $value['id'];
				$group_info[$value['id']]['master'] = $value['groupmaster'];
			}
			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usermod = new User();
			$groups_users_array = $usermod->getuserbyGroupId($groups_id, $clientid, true);


			foreach($groups_users_array as $key => $val)
			{
				if($group_info[$val['groupid']]['master'] == '4')
				{
					$users ['doctor'][] = $val ['id'];
				}

				if($group_info[$val['groupid']]['master'] == '5')
				{
					$users ['nurse'][] = $val ['id'];
				}

				if($group_info[$val['groupid']]['master'] == '4' || $group_info[$val['groupid']]['master'] == '5')
				{
					$users ['doctor_nurse'][] = $val ['id'];
				}
			}
			if(empty($users['doctor']) || count($users['doctor']) == 0)
			{
				$users['doctor']['9999'] = "999999999999";
			}
			if(empty($users['nurse']) || count($users['nurse']) == 0)
			{
				$users['nurse']['9999'] = "999999999999";
			}
			if(empty($users['doctor_nurse']) || count($users['doctor_nurse']) == 0)
			{
				$users['doctor_nurse']['9999'] = "999999999999";
			}

			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
				$username[$val['id']] = $val['username'];
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r($users);
				print_r("\n");
			}

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);


			/* ################################################################################################### */
			/* ----------------- Get Patients SAPV details-------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $ipidarr)
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray();


			foreach($sapvarr as $keys => $sapv)
			{
				$valid_ipids_arr[] = $sapv['ipid'];

				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}
			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						$patientDataPseudo [$ipid] ['sapvDaysListFinal'] [] = $daysapv;
					}
				}
				$patientDataPseudo [$ipid] ['sapvDaysListFinal'] = array_unique($patientDataPseudo [$ipid] ['sapvDaysListFinal']);
				$patientData [$ipid] ['sapvDaysList'] = "";
				$patientData [$ipid] ['sapvDaysList'] = $patientDataPseudo [$ipid] ['sapvDaysListFinal'];
			}

			if(count($valid_ipids_arr) == '0')
			{
				$valid_ipids_arr[] = 'xxxx';
			}


			/* ################# Overall sapv days of patients ################ */
			$patients_overall_data['sapv'] = $this->get_patients_all_sapv($valid_ipids_arr);


			/* ################# Overall hospiz hospital days of patients ################ */
			$patients_overall_data['hospiz_hospital'] = $this->get_patients_hospital_hospiz_days($valid_ipids_arr, $clientid, false, true);

			/* ########################################################################## */
			/* ----------------- Get hospital and hospiz locations -------------------- */
			$hospitalids = Doctrine_Query::create()
				->select("*")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"')
				->andWhere('location_type in ("1","2")');
			$hosparray = $hospitalids->fetchArray();

			$hospstr = "";
			foreach($hosparray as $hospital)
			{
				$hospstr .= "'" . $hospital ['id'] . "',";
				$hosp_arr[] = $hospital['id'];
			}
			$hosp_arr[] = '99999999999';


			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod ['interval_sql']));


			/* ################################################################################################### */
			/* ----------------- Get Patient hospital and hospiz locations in report period -------------------- */
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('location_id', $hosp_arr)
				->andWhere('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('' . $time_interval . '')
				->andWhereIn('ipid', $valid_ipids_arr);

			$locationsarr = $locations->fetchArray();


			/* ################################################################################################### */
			/* ----------------- Get Patients Details -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $valid_ipids_arr)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			$dischargedipidstr = "'99999999999'";

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";

				$patient_array[$val['ipid']]['ipid'] = $val['ipid'];
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['zip'] = $val['zip'];
				$patient_array[$val['ipid']]['city'] = $val['city'];
				$patient_array[$val['ipid']]['family_doc'] = $val['familydoc_id'];

				$family_doctors_ids[] = $val['familydoc_id'];

				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));

				if($val['isstandby'] == '1')
				{
					$patient_array[$val['ipid']]['admission_date'] = "STANDBY";
				}
				else
				{
					$patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
				}

				if($val['isdischarged'] == 1)
				{
					$dischargedipidstr .= ",'" . $val['ipid'] . "'";
					$dischargedipid_arr[] = $val['ipid'];
				}
			}

			$dischargedipid_arr[] = '99999999999';

			if(empty($allfinal))
			{
				$allfinal[999999]['ipid'] = 'X';
			}

			/* ################################################################################################### */
			/* ----------------- Get family doctors  -------------------- */
			if(empty($family_doctors_ids))
			{
				$family_doctors_ids[] = "XXXXXX";
			}

			$fam_doc_q = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->whereIN("id", $family_doctors_ids);
			$fam_doc_array = $fam_doc_q->fetchArray();

			foreach($fam_doc_array as $fk => $f_value)
			{
				$fam_doc_details[$f_value['id']]['zip'] = $f_value['zip'];
				$fam_doc_details[$f_value['id']]['city'] = $f_value['city'];
			}

			/* ################################################################################################### */
			/* ----------------- Get discharge Locations  -------------------- */
			$dis_loc_q = Doctrine_Query::create()
				->select("*")
				->from('DischargeLocation')
				->where("clientid=" . $logininfo->clientid)
				->andWhere("isdelete = 0");
			$dis_loc_array = $dis_loc_q->fetchArray();

			foreach($dis_loc_array as $k_loc => $v_loc)
			{
				$discharg_location2type[$v_loc['id']] = $v_loc['type'];
			}

			/* ################################################################################################### */
			/* ----------------- Get discharge methods dead  -------------------- */
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $logininfo->clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$todarray = $distod->fetchArray();

			$todIds[] = "99999999999999";
			foreach($todarray as $kTod => $vTod)
			{
				$todIds[] = $vTod['id'];
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients discharge details -------------------- */
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $dischargedipid_arr)
				->andWhere('isdelete = 0');
			$patientdisarray = $patientdis->fetchArray();

			foreach($patientdisarray as $dischargedPatient)
			{
				if(in_array($dischargedPatient['discharge_method'], $todIds))
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];

					$patient_death_details [$dischargedPatient ['ipid']] ['death_date'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patient_death_details [$dischargedPatient ['ipid']] ['discharge_location'] = $discharg_location2type[$dischargedPatient ['discharge_location']];
				}
				else
				{
					$patientDetails [$dischargedPatient ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
					$patientDetails [$dischargedPatient ['ipid']] ['dischargemtd'] = $dischargedPatient ['discharge_method'];
				}
				$patientDetails [$dischargedPatient ['ipid']] ['dischargedate_final'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));

				$patient_discharge_details[$dischargedPatient['ipid']]['discharge_date'] = date("d.m.Y", strtotime($dischargedPatient ['discharge_date']));
			}

			/* ###################################################################### */
			foreach($locationsarr as $location)
			{
				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$till = end($finalPeriodDays);
						$from = date('Y-m-d', strtotime($location ['valid_from']));

						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
					}
					else
					{
						$till = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
						$from = date('Y-m-d', strtotime($location ['valid_from']));

						$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, date('Y-m-d'), false);
					}
				}
				else if(strtotime(date('Y-m-d', strtotime($location['valid_till']))) == strtotime(date('Y-m-d', strtotime($location ['valid_from']))))
				{
					$till = date('Y-m-d', strtotime('+1 day', strtotime($location ['valid_till'])));
					$from = date('Y-m-d', strtotime('-1 day', strtotime($location ['valid_till'])));

					$realfullhospitaldays [$location ['ipid']] [] = date('Y-m-d', strtotime($location ['valid_till']));
				}
				else
				{
					$till = date('Y-m-d', strtotime($location ['valid_till']));
					$from = date('Y-m-d', strtotime($location ['valid_from']));

					$realfullhospitaldays [$location ['ipid']] [] = $pm->getDaysInBetween($from, $till, false);
				}

				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('+1 day', strtotime($from)));
				$patientData [$location ['ipid']] ['hospitalStartDays'][] = date("Y-m-d", strtotime($location ['valid_from']));
				$patientData [$location ['ipid']] ['hospitalDaysRange'][] = date("Y-m-d", strtotime('-1 day', strtotime($till)));

				if($location ['valid_till'] == "0000-00-00 00:00:00")
				{
					if(strtotime(end($finalPeriodDays)) <= strtotime('now'))
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = end($finalPeriodDays);
					}
					else
					{
						$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime("+1 day")); //quick hack hospital open
					}
				}
				else
				{
					$patientData [$location ['ipid']] ['hospitalEndDays'][] = date("Y-m-d", strtotime($location ['valid_till']));
				}

				$current_hosp_days = array();

				if(in_array(date('Y-m-d', strtotime($location['valid_till'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					in_array($patientDetails[$location ['ipid']]['dischargemtd'], $todIds) &&
					!in_array(date('Y-m-d', strtotime($location['valid_from'])), $patientData [$location ['ipid']] ['hospitalEndDays']) &&
					$patientDetails [$location ['ipid']] ['dischargedate_final'] == date('d.m.Y', strtotime($location['valid_till']))
				)
				{
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
					$diedinhospital [$location ['ipid']] = date('Y-m-d', strtotime($location['valid_till']));
					$patientDetails [$location ['ipid']] ['dischargedate'] = date("d.m.Y", strtotime('-1 day', strtotime($patientDetails [$location ['ipid']] ['dischargedate'])));
				}
				else if($location ['valid_till'] == "0000-00-00 00:00:00")
				{ //if not discharge - give hospital days
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime($till)), false);
				}
				else
				{
					$diedinhospital [$location ['ipid']] = false;
					$current_hosp_days = $pm->getDaysInBetween(date("Y-m-d", strtotime('+1 day', strtotime($from))), date("Y-m-d", strtotime('-1 day', strtotime($till))), false);
				}
				$patientData [$location ['ipid']] ['hospitalDaysList'][] = $current_hosp_days;
			}

			foreach($patientData as $ipid => $hospata)
			{
				foreach($hospata ['hospitalDaysList'] as $group => $hdata)
				{
					foreach($hdata as $key => $dayh)
					{
						$patientDataPseudoH [$ipid] ['hospitalDaysList'] [] = $dayh;
					}
				}
				$patientDataPseudoH [$ipid] ['hospitalDaysList'] = array_unique($patientDataPseudoH [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['hospitalDaysList'] = "";
				$patientData [$ipid] ['hospitalDaysList'] = $patientDataPseudoH [$ipid] ['hospitalDaysList'];

				foreach($hospata['hospitalStartDays'] as $k_start_date => $v_start_date)
				{


					if(in_array($v_start_date, $hospata['hospitalEndDays']))
					{

						$patientData [$ipid] ['continuous_hospital'][] = $v_start_date;
						$patientData [$ipid] ['hospitalDaysList'][] = $v_start_date;

						if(array_search($v_start_date, $patientData[$ipid]['sapvDaysList']))
						{
							unset($patientData[$ipid]['sapvDaysList'][array_search($v_start_date, $patientData[$ipid]['sapvDaysList'])]);
						}
					}
				}

				foreach($hospata['hospitalEndDays'] as $k_end_date => $v_end_date)
				{
					if(in_array($patientDetails[$ipid]['dischargemtd'], $todIds) && $patientDetails [$ipid] ['dischargedate_final'] = date('d.m.Y', strtotime($v_end_date)))
					{
						$patientData [$ipid] ['hospitalDaysList'][] = $v_end_date;
					}
				}

				$patientData [$ipid] ['hospitalDaysList'] = array_unique($patientData [$ipid] ['hospitalDaysList']);
				$patientData [$ipid] ['continuous_hospital'] = array_unique($patientData [$ipid] ['continuous_hospital']);
			}


			$patientTreatmentDays = $pm->getTreatedDaysRealMultiple($valid_ipids_arr, false);

			foreach($patientTreatmentDays as $patientTreatmentIpid => $patientTreatmentData)
			{

				if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
					{
						if(count($patientTreatmentData ['admissionDates']) == 0)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						}
						else
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
				{

					if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = $patientTreatmentData ['discharge_date'];
					}

					if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
					else
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
				else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
				{
					foreach($patientTreatmentData ['admissionDates'] as $keyadmission => $admissionvalues)
					{
						if(empty($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']))
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
						}
						else
						{
							$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
							$discharge = date("Y-m-d", strtotime($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($admission));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($discharge));
					}
				}
				else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
					{
						$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));

						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}

				if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])))
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}

				$overall_app_days[$patientTreatmentIpid] = $pm->getDaysInBetween(date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])), date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])));
			}


			/* ################# Overall application days of patients ################ */
			$patients_overall_data['app_dot'] = $overall_app_days;


			foreach($patientDateRange as $treatmentIpid => $range)
			{
				foreach($range as $ktreat => $treatmentarr)
				{
					foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
					{
						$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
					}

					foreach($treatmentarr['end'] as $key_discharge_val => $days_val)
					{

						if(array_key_exists($key_discharge_val + 1, $treatmentarr['start']) && $days_val != $treatmentarr['start'][$key_discharge_val + 1])
						{
							$discharge_date = date('Y-m-d', strtotime('+1 day', strtotime($days_val)));
							$next_start_date = date('Y-m-d', strtotime('-1 day', strtotime($treatmentarr['start'][$key_discharge_val + 1])));
							if($next_start_date >= $discharge_date)
							{
								$discharge_days_array [$treatmentIpid] [] = $pm->getDaysInBetween($discharge_date, $next_start_date);
							}
						}
					}
				}
			}


			/* ################# Overall discharge days of patients ################ */
			foreach($discharge_days_array as $d_patiant_ipid => $discharge_periods)
			{
				foreach($discharge_periods as $dk => $discharge_intvals)
				{
					foreach($discharge_intvals as $dvalues)
					{
						$patients_overall_data['discharge_days'][$d_patiant_ipid][] = $dvalues;
					}
				}
			}

			/* ################# Overall active days of patients ################ */
			foreach($treatmentDaysArray as $a_patiant_ipid => $active_periods)
			{
				foreach($active_periods as $dk => $active_intvals)
				{
					foreach($active_intvals as $avalues)
					{
						$patients_overall_data['active_days'][$a_patiant_ipid][] = $avalues;
					}
				}
			}


			/* ################# Active days of patients in report period ################ */
			foreach($treatmentDaysArray as $ipidPat => $treatmentDaysArrayF)
			{
				if(count($treatmentDaysArrayF) > 0)
				{
					foreach($treatmentDaysArrayF as $keyt => $treatmentDayValue)
					{
						$finalActiveDaysArray [$ipidPat] ['activedays'][] = array_intersect($treatmentDayValue, $finalPeriodDays);
					}
				}
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{
				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							if(in_array($patientDetails[$patIpid]['dischargemtd'], $todIds))
							{ // check if day is in hospital
								$lastDischargeDate = date("Y-m-d", strtotime($patientDetails [$patIpid] ['dischargedate']));
								if(strtotime($day) <= strtotime($lastDischargeDate))
								{
									$activeDaysFinal[$patIpid][] = $day;
								}
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
							else
							{
								$activeDaysFinal[$patIpid][] = $day;
								$activeDaysFinalWithHeads[$patIpid][] = $day;
							}
						}
					}
				}
				$activeDaysFinal[$patIpid] = array_unique($activeDaysFinal[$patIpid]);
			}

			foreach($finalActiveDaysArray as $patIpid => $active)
			{
				foreach($active as $keya => $DaysGroup)
				{
					foreach($DaysGroup as $keyg => $group)
					{
						foreach($group as $day)
						{
							$activeDaysFinalTotal[$patIpid][] = $day;
						}
					}
				}
				$activeDaysFinalTotal[$patIpid] = array_unique($activeDaysFinalTotal[$patIpid]);
			}
			/* ###################################################################### */

			/* ################# Active days of patients in report period NON hospital and active sapv ################ */
			foreach($patientData as $patientIpid => $patientDates)
			{
				$disthospdays[$patientIpid] = array();
				foreach($realfullhospitaldays[$patientIpid] as $realfullhospitaldays_per)
				{
					$disthospdays[$patientIpid] = array_merge($disthospdays[$patientIpid], (array) $realfullhospitaldays_per);
				}
				array_unique($disthospdays[$patientIpid]);

				array_unique($finalPeriodDays);
				array_unique($patientDates['sapvDaysList']);
				array_unique($activeDaysFinal[$patientIpid]);
				array_unique($patientDates['hospitalDaysList']);
				$sapv_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $patientDates['sapvDaysList']);

				$activ_in_perioada[$patientIpid] = array_intersect($finalPeriodDays, $activeDaysFinal[$patientIpid]);

				$sapv_activ_in_perioada[$patientIpid] = array_intersect($activ_in_perioada[$patientIpid], $sapv_in_perioada[$patientIpid]);

				foreach($sapv_activ_in_perioada[$patientIpid] as $sapvActiveDay)
				{
					if(!in_array($sapvActiveDay, $patientDates['hospitalDaysList']))
					{
						$finalDays [$patientIpid]['FinalCountDays'][] = $sapvActiveDay;
					}
				}
				array_unique($finalDays [$patientIpid]['FinalCountDays']);

				if(!is_array($finalDays [$patientIpid]['FinalCountDays']))
				{
					$finalDays [$patientIpid]['FinalCountDays'] = array();
				}

				$disthospdayz[$patientIpid] = array_diff($disthospdays[$patientIpid], $finalDays [$patientIpid]['FinalCountDays']);

				$daysofhostpitalinperiod[$patientIpid] = array_intersect($disthospdayz[$patientIpid], $activ_in_perioada[$patientIpid]);
			}

			/* ################################################################################################### */
			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhereIn('ipid', $valid_ipids_arr);

			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['contact_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ################################################################################################### */
			/* ----------------------Get all "contact forms" details from patients------------------------------------- */
			$contact_form_q = Doctrine_Query::create()
				->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
				->from("ContactForms c")
				->whereIn('c.ipid', $valid_ipids_arr)
				->andWhere('c.isdelete = 0')
				->andWhereNotIn('c.id', $del_visits['contact_form'])
				->andWhereIn('c.create_user', $users['doctor_nurse'])
				->andWhere(str_replace('%date%', 'billable_date', $active_cond['date_sql']));
			if($_REQUEST['dbg'] == '1')
			{
				echo $contact_form_q->getSqlQuery();
			}
			$contact_form_arr = $contact_form_q->fetchArray();

			foreach($patient_array as $p_ipid => $patientDataValue)
			{

				//final sapv tags and days of treatment
				$patientDetails [$p_ipid] ['period_active_sapv_days_count'] = sizeof($finalDays [$p_ipid] ['FinalCountDays']);
				$patientDetails [$p_ipid] ['period_active_sapv_days'] = $finalDays [$p_ipid] ['FinalCountDays'];
				$patientDetails [$p_ipid] ['daysoftreatment'] = sizeof($activeDaysFinalTotal[$p_ipid]);
				$patientDetails [$p_ipid] ['period_first_active_sapv_day'] = date('d.m.Y', strtotime($finalDays [$p_ipid] ['FinalCountDays'][0]));

				$patientDetails [$p_ipid] ['period_valid_sapv_tv'] = array_intersect($finalDays [$p_ipid] ['FinalCountDays'], $patients_overall_data['sapv'][$p_ipid]['tv_days']);
				$patientDetails [$p_ipid] ['period_valid_sapv_vv'] = array_intersect($finalDays [$p_ipid] ['FinalCountDays'], $patients_overall_data['sapv'][$p_ipid]['vv_days']);

				if($patientDetails [$p_ipid] ['period_valid_sapv_tv'])
				{
					$patientDetails [$p_ipid] ['pct03a_valid'] = 'X';
					$patientDetails [$p_ipid] ['pct03a_days'] = count($patientDetails [$p_ipid] ['period_valid_sapv_tv']);
					$patientDetails [$p_ipid] ['pct03b_valid'] = 'X';
					$patientDetails [$p_ipid] ['pct03b_days'] = count($patientDetails [$p_ipid] ['period_valid_sapv_tv']);
				}
				else
				{
					$patientDetails [$p_ipid] ['pct03a_valid'] = '-';
					$patientDetails [$p_ipid] ['pct03a_days'] = '-';
					$patientDetails [$p_ipid] ['pct03b_valid'] = '-';
					$patientDetails [$p_ipid] ['pct03b_days'] = '-';
				}

				if($patientDetails [$p_ipid] ['period_valid_sapv_vv'])
				{
					$patientDetails [$p_ipid] ['pct04a_valid'] = 'X';
					$patientDetails [$p_ipid] ['pct04a_days'] = count($patientDetails [$p_ipid] ['period_valid_sapv_vv']);
					$patientDetails [$p_ipid] ['pct04b_valid'] = 'X';
					$patientDetails [$p_ipid] ['pct04b_days'] = count($patientDetails [$p_ipid] ['period_valid_sapv_vv']);
				}
				else
				{
					$patientDetails [$p_ipid] ['pct04a_valid'] = '-';
					$patientDetails [$p_ipid] ['pct04a_days'] = '-';
					$patientDetails [$p_ipid] ['pct04b_valid'] = '-';
					$patientDetails [$p_ipid] ['pct04b_days'] = '-';
				}



				//  GET OVERALL ACTIVE DAYS OF PATIENT - STARTING WITH FIRST ADMISSION UNTILL LAST DISCHARGE
				$overall_active_days_of_patient[$p_ipid] = array_intersect($patients_overall_data['active_days'][$p_ipid], $patients_overall_data['sapv'][$p_ipid]['sapv_days_overall']);

				if($patients_overall_data['hospiz_hospital'][$p_ipid])
				{
					$overall_active_days_of_patient[$p_ipid] = array_diff($overall_active_days_of_patient[$p_ipid], $patients_overall_data['hospiz_hospital'][$p_ipid]);
				}

				if($patients_overall_data['discharge_days'][$p_ipid])
				{
					$overall_active_days_of_patient[$p_ipid] = array_diff($overall_active_days_of_patient[$p_ipid], $patients_overall_data['discharge_days'][$p_ipid]);
				}
				array_unique($overall_active_days_of_patient[$p_ipid]);
				asort($overall_active_days_of_patient[$p_ipid]);
				$overall_active_days_of_patient[$p_ipid] = array_values($overall_active_days_of_patient[$p_ipid]);

				$patientDetails[$p_ipid]['overall_count_active_sapv_days'] = count($overall_active_days_of_patient[$p_ipid]);

				$patientDetails[$p_ipid]['overall_active_sapv_days'] = $overall_active_days_of_patient[$p_ipid];
				if(count($overall_active_days_of_patient[$p_ipid]) > 0)
				{
					$patientDetails [$p_ipid] ['overall_first_active_sapv_day'] = date('d.m.Y', strtotime($overall_active_days_of_patient[$p_ipid][0]));
				}
				else
				{
					$patientDetails [$p_ipid] ['overall_first_active_sapv_day'] = '-';
				}

				//  GET OVERALL INACTIVE DAYS OF PATIENT - STARTING WITH FIRST ADMISSION UNTILL LAST DISCHARGE
				$overall_non_sapv_days_of_patient[$p_ipid] = array();
				$non_sapv_days[$p_ipid] = array_diff($patients_overall_data['active_days'][$p_ipid], $patients_overall_data['sapv'][$p_ipid]['sapv_days_overall']);

				$overall_non_sapv_days_of_patient[$p_ipid] = $non_sapv_days[$p_ipid];

				if($patients_overall_data['hospiz_hospital'][$p_ipid])
				{
					$overall_non_sapv_days_of_patient[$p_ipid] = array_merge($overall_non_sapv_days_of_patient[$p_ipid], $patients_overall_data['hospiz_hospital'][$p_ipid]);
				}
				if($patients_overall_data['discharge_days'][$p_ipid])
				{
					$overall_non_sapv_days_of_patient[$p_ipid] = array_merge($overall_non_sapv_days_of_patient[$p_ipid], $patients_overall_data['discharge_days'][$p_ipid]);
				}

				array_unique($overall_non_sapv_days_of_patient[$p_ipid]);
				asort($overall_non_sapv_days_of_patient[$p_ipid]);
				$overall_non_sapv_days_of_patient[$p_ipid] = array_values($overall_non_sapv_days_of_patient[$p_ipid]);
				$patientDetails[$p_ipid]['non_sapv_days_count'] = count($overall_non_sapv_days_of_patient[$p_ipid]);

				$patientDetails[$p_ipid]['non_sapv_days'] = $overall_non_sapv_days_of_patient[$p_ipid];
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n");
				print_r($patientDetails);
				print_r("\n");
			}

			foreach($contact_form_arr as $kci => $contact_form_details)
			{
				if($patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_tv'])
				{
					if(in_array(date('Y-m-d', strtotime($contact_form_details['date'])), $patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_tv']) && in_array($contact_form_details['create_user'], $users['nurse']))
					{
						$pct_details[$contact_form_details['ipid']]['pct03a']['contact_forms_date'][] = date('d.m.Y', strtotime($contact_form_details['start_date']));
						$pct_details[$contact_form_details['ipid']]['pct03a']['contact_forms_ids'][] = $contact_form_details['id'];
						$pct_details[$contact_form_details['ipid']]['pct03a']['contact_forms_time'] += $contact_form_details['contact_form_duration'];
					}
					elseif(in_array(date('Y-m-d', strtotime($contact_form_details['date'])), $patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_tv']) && in_array($contact_form_details['create_user'], $users['doctor']))
					{
						$pct_details[$contact_form_details['ipid']]['pct03b']['contact_forms_date'][] = date('d.m.Y', strtotime($contact_form_details['start_date']));
						$pct_details[$contact_form_details['ipid']]['pct03b']['contact_forms_ids'][] = $contact_form_details['id'];
						$pct_details[$contact_form_details['ipid']]['pct03b']['contact_forms_time'] += $contact_form_details['contact_form_duration'];
					}
				}

				if($patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_vv'])
				{
					if(in_array(date('Y-m-d', strtotime($contact_form_details['date'])), $patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_vv']) && in_array($contact_form_details['create_user'], $users['nurse']))
					{
						$pct_details[$contact_form_details['ipid']]['pct04a']['contact_forms_date'][] = date('d.m.Y', strtotime($contact_form_details['start_date']));
						$pct_details[$contact_form_details['ipid']]['pct04a']['contact_forms_ids'][] = $contact_form_details['id'];
						$pct_details[$contact_form_details['ipid']]['pct04a']['contact_forms_time'] += $contact_form_details['contact_form_duration'];
					}
					elseif(in_array(date('Y-m-d', strtotime($contact_form_details['date'])), $patientDetails [$contact_form_details['ipid']] ['period_valid_sapv_vv']) && in_array($contact_form_details['create_user'], $users['doctor']))
					{
						$pct_details[$contact_form_details['ipid']]['pct04b']['contact_forms_date'][] = date('d.m.Y', strtotime($contact_form_details['start_date']));
						$pct_details[$contact_form_details['ipid']]['pct04b']['contact_forms_ids'][] = $contact_form_details['id'];
						$pct_details[$contact_form_details['ipid']]['pct04b']['contact_forms_time'] += $contact_form_details['contact_form_duration'];
					}
				}
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n");
				print_r($pct_details);
				print_r("\n");
				exit;
			}

			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;
			if(!empty($patient_array))
			{

				foreach($patient_array as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['last_name'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['first_name'];

					$MasterData['data'][$patient['ipid']]['patient_zip'] = $patient['zip'];
					$MasterData['data'][$patient['ipid']]['patient_city'] = $patient['city'];

					$MasterData['data'][$patient['ipid']]['first_sapv_active_day'] = $patientDetails [$patient['ipid']] ['overall_first_active_sapv_day'];

					if($patient_discharge_details[$patient['ipid']]['discharge_date'])
					{
						$MasterData['data'][$patient['ipid']]['patient_discharge_date'] = $patient_discharge_details[$patient['ipid']]['discharge_date'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['patient_discharge_date'] = "-";
					}

					$MasterData['data'][$patient['ipid']]['non_sapv_days_count'] = count(array_unique($patientDetails[$patient['ipid']]['non_sapv_days']));

					if($patient_death_details[$patient['ipid']]['death_date'])
					{
						$MasterData['data'][$patient['ipid']]['patient_death_date'] = $patient_death_details[$patient['ipid']]['death_date'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['patient_death_date'] = '-';
					}


					if($patient_death_details[$patient['ipid']]['discharge_location'] && $patient_death_details[$patient['ipid']]['discharge_location'] == '1')
					{
						$MasterData['data'][$patient['ipid']]['discharge_location_home'] = "X";
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['discharge_location_home'] = '-';
					}


					if($patient_death_details[$patient['ipid']]['discharge_location'] && $patient_death_details[$patient['ipid']]['discharge_location'] == '2')
					{
						$MasterData['data'][$patient['ipid']]['discharge_location_hospital'] = "X";
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['discharge_location_hospital'] = '-';
					}

					if($patient_death_details[$patient['ipid']]['discharge_location'] && $patient_death_details[$patient['ipid']]['discharge_location'] == '3')
					{
						$MasterData['data'][$patient['ipid']]['discharge_location_hospiz'] = "X";
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['discharge_location_hospiz'] = '-';
					}

					if($patient_death_details[$patient['ipid']]['discharge_location'] && $patient_death_details[$patient['ipid']]['discharge_location'] == '4')
					{
						$MasterData['data'][$patient['ipid']]['discharge_location_pflegeheim'] = "X";
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['discharge_location_pflegeheim'] = '-';
					}


					$MasterData['data'][$patient['ipid']]['family_doctor_zip'] = $fam_doc_details[$patient['family_doc']]['zip'];
					$MasterData['data'][$patient['ipid']]['family_doctor_city'] = $fam_doc_details[$patient['family_doc']]['city'];

					$MasterData['data'][$patient['ipid']]['family_doctor_patient_distance'] = "";
					$MasterData['data'][$patient['ipid']]['ik_palliative_pflege'] = "";
					$MasterData['data'][$patient['ipid']]['palliative_pflege_patient_distance'] = "";


					/* ###################### PCT03a  ##################################### */
					if(count($pct_details[$patient['ipid']]['pct03a']['contact_forms_ids']) > 0)
					{
						$MasterData['data'][$patient['ipid']]['pct03a_valid'] = "X";
						$MasterData['data'][$patient['ipid']]['pct03a_days_count'] = count(array_unique($pct_details[$patient['ipid']]['pct03a']['contact_forms_date']));
						$MasterData['data'][$patient['ipid']]['pct03a_visits_count'] = count(array_unique($pct_details[$patient['ipid']]['pct03a']['contact_forms_ids']));
						$MasterData['data'][$patient['ipid']]['pct03a_visits_time'] = $pct_details[$patient['ipid']]['pct03a']['contact_forms_time'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['pct03a_valid'] = "";
						$MasterData['data'][$patient['ipid']]['pct03a_days_count'] = "";
						$MasterData['data'][$patient['ipid']]['pct03a_visits_count'] = '';
						$MasterData['data'][$patient['ipid']]['pct03a_visits_time'] = '';
					}


					/* ###################### PCT03b  ##################################### */
					if(count($pct_details[$patient['ipid']]['pct03b']['contact_forms_ids']) > 0)
					{
						$MasterData['data'][$patient['ipid']]['pct03b_valid'] = "X";
						$MasterData['data'][$patient['ipid']]['pct03b_days_count'] = count(array_unique($pct_details[$patient['ipid']]['pct03b']['contact_forms_date']));
						$MasterData['data'][$patient['ipid']]['pct03b_visits_count'] = count(array_unique($pct_details[$patient['ipid']]['pct03b']['contact_forms_ids']));
						$MasterData['data'][$patient['ipid']]['pct03b_visits_time'] = $pct_details[$patient['ipid']]['pct03b']['contact_forms_time'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['pct03b_valid'] = "";
						$MasterData['data'][$patient['ipid']]['pct03b_days_count'] = "";
						$MasterData['data'][$patient['ipid']]['pct03b_visits_count'] = "";
						$MasterData['data'][$patient['ipid']]['pct03b_visits_time'] = "";
					}



					/* ###################### PCT04a  ##################################### */
					if(count($pct_details[$patient['ipid']]['pct04a']['contact_forms_ids']) > 0)
					{
						$MasterData['data'][$patient['ipid']]['pct04a_valid'] = "X";
						$MasterData['data'][$patient['ipid']]['pct04a_days_count'] = count(array_unique($pct_details[$patient['ipid']]['pct04a']['contact_forms_date']));
						$MasterData['data'][$patient['ipid']]['pct04a_visits_count'] = count(array_unique($pct_details[$patient['ipid']]['pct04a']['contact_forms_ids']));
						$MasterData['data'][$patient['ipid']]['pct04a_visits_time'] = $pct_details[$patient['ipid']]['pct04a']['contact_forms_time'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['pct04a_valid'] = "";
						$MasterData['data'][$patient['ipid']]['pct04a_days_count'] = "";
						$MasterData['data'][$patient['ipid']]['pct04a_visits_count'] = "";
						$MasterData['data'][$patient['ipid']]['pct04a_visits_time'] = "";
					}


					/* ###################### PCT04b  ##################################### */
					if(count($pct_details[$patient['ipid']]['pct04b']['contact_forms_ids']) > 0)
					{
						$MasterData['data'][$patient['ipid']]['pct04b_valid'] = "X";
						$MasterData['data'][$patient['ipid']]['pct04b_days_count'] = count(array_unique($pct_details[$patient['ipid']]['pct04b']['contact_forms_date']));
						$MasterData['data'][$patient['ipid']]['pct04b_visits_count'] = count(array_unique($pct_details[$patient['ipid']]['pct04b']['contact_forms_ids']));
						$MasterData['data'][$patient['ipid']]['pct04b_visits_time'] = $pct_details[$patient['ipid']]['pct04b']['contact_forms_time'];
					}
					else
					{
						$MasterData['data'][$patient['ipid']]['pct04b_valid'] = "";
						$MasterData['data'][$patient['ipid']]['pct04b_days_count'] = "";
						$MasterData['data'][$patient['ipid']]['pct04b_visits_count'] = "";
						$MasterData['data'][$patient['ipid']]['pct04b_visits_time'] = "";
					}
					$i++;
				}

				return $MasterData;
			}
		}

		public function get_patients_all_sapv($ipids,$period_days = false)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids)
				->andWhere('verordnungbis !="000-00-00 00:00:00" ')
				->andWhere('verordnungam !="000-00-00 00:00:00" ')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();

			$s = 1;
			foreach($sapv_array as $sapvkey => $sapvvalue)
			{
				$sapv[$sapvvalue['ipid']]['sapv_start_days'][] = date('Y-m-d', strtotime($sapvvalue['verordnungam']));

				$sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'] = date('Y-m-d', strtotime($sapvvalue['verordnungam']));
				$sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end'] = date('Y-m-d', strtotime($sapvvalue['verordnungbis']));

				$patient_active_sapv[$sapvvalue['ipid']][] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);

				$sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types'] = explode(',', $sapvvalue['verordnet']);

				$sapv[$sapvvalue['ipid']][$sapvvalue['id']]['type'] = $sapvvalue['verordnet'];
				$sapv[$sapvvalue['ipid']][$sapvvalue['id']]['from'] = $sapvvalue['verordnungam'];
				$sapv[$sapvvalue['ipid']][$sapvvalue['id']]['till'] = $sapvvalue['verordnungbis'];
				
				$sapv[$sapvvalue['ipid']][$sapvvalue['id']]['sapv_order'] = $sapvvalue['sapv_order'];


				if(in_array('1', $sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types']) && !in_array('2', $sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types']) && !in_array('3', $sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types']) && !in_array('4', $sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types']))
				{
					$sapv_details[$sapvvalue['ipid']]['be_days'][] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);
				}

				if(in_array('2', $sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types']) && !in_array('3', $sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types']) && !in_array('4', $sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types']))
				{
					$sapv_details[$sapvvalue['ipid']]['ko_days'][] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);
				}

				if(in_array('3', $sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types']) && !in_array('4', $sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types']))
				{
					$sapv_details[$sapvvalue['ipid']]['tv_days'][] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);
				}

				if(in_array('4', $sapv[$sapvvalue['ipid']][$sapvvalue['id']]['all_types']))
				{
					$sapv_details[$sapvvalue['ipid']]['vv_days'][] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);
				}

				$s++;
			}

			foreach($sapv_details as $patient_ipid => $types_intervals)
			{
				foreach($types_intervals['be_days'] as $kbes => $be_intervals)
				{
					foreach($be_intervals as $be_days)
					{
						$sapv[$patient_ipid]['be_days'][] = $be_days;
					}
				}

				foreach($types_intervals['ko_days'] as $kkos => $ko_intervals)
				{
					foreach($ko_intervals as $ko_days)
					{
						$sapv[$patient_ipid]['ko_days'][] = $ko_days;
					}
				}

				foreach($types_intervals['tv_days'] as $ktvs => $tv_intervals)
				{
					foreach($tv_intervals as $tv_days)
					{
						$sapv[$patient_ipid]['tv_days'][] = $tv_days;
					}
				}

				foreach($types_intervals['vv_days'] as $kvvs => $vv_intervals)
				{
					foreach($vv_intervals as $vv_days)
					{
						$sapv[$patient_ipid]['vv_days'][] = $vv_days;
					}
				}
			}


			foreach($patient_active_sapv as $pat_ipid => $overall_sdays)
			{
				foreach($overall_sdays as $sinter => $sinterval_days)
				{
					foreach($sinterval_days as $sdays)
					{
						$sapv[$pat_ipid]['sapv_days_overall'][] = $sdays;
						
						
						if($period_days && !empty($period_days)){
							
							if(in_array(date('Y-m-d',strtotime($sdays)),$period_days) ){
								$sapv[$pat_ipid]['sapv_days_in_period'][] = $sdays;
							}
						}
						
						
					}
				}
			}
			return $sapv;
		}

		public function get_patients_all_valid_sapv($ipids,$period_days = false,$sql_interval=false)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();
			
			if($sql_interval){
				$s = array('%date_start%', '%date_end%');
				$r = array('verordnungam', 'verordnungbis');
			}
			
			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids)
				->andWhere('verordnungbis !="000-00-00 00:00:00" ')
				->andWhere('verordnungam !="000-00-00 00:00:00" ')
				->andWhere('isdelete=0');
				if($sql_interval){
					$dropSapv->andWhere(str_replace($s, $r, $sql_interval['interval_sql']));
				}
				$dropSapv->orderBy('verordnungam ASC');
			$sapv_array = $dropSapv->fetchArray();

			$s = 1;
			foreach($sapv_array as $sapvkey => $sapvvalue)
			{
				$allow_sapv = true;				
				
				if($sapvvalue['status'] == '1' && $sapvvalue['verorddisabledate'] != '0000-00-00 00:00:00'){
					$allow_sapv = false;
					
					
					$sapv[$sapvvalue['ipid']]['sapv_denied_falls'][$sapvvalue['id']]['all_types'] = explode(',', $sapvvalue['verordnet']);
					
					if(in_array('4', $sapv[$sapvvalue['ipid']]['sapv_denied_falls'][$sapvvalue['id']]['all_types']))
					{
						$sapv[$sapvvalue['ipid']]['all_denied_vv_in_period'][] = $sapvvalue['id'];

					}
					$sapv[$sapvvalue['ipid']]['all_denied_in_period'][] = $sapvvalue['id'];
				}
				
				if($allow_sapv){
					
					if($sapvvalue['status'] == '1' && $sapvvalue['verorddisabledate'] != '0000-00-00 00:00:00' && $sapvvalue['verorddisabledate'] != '1970-01-01 00:00:00' && strtotime($sapvvalue['verorddisabledate']) <= strtotime($sapvvalue['verordnungbis']))
					{
						$sapvvalue ['verordnungbis'] = date('Y-m-d', strtotime($sapvvalue['verorddisabledate']));
						$sapv[$sapvvalue['ipid']]['all_denied_in_period'][] = $sapvvalue['id'];
					}
					
					$sapv[$sapvvalue['ipid']]['sapv_start_days'][] = date('Y-m-d', strtotime($sapvvalue['verordnungam']));
	
					$sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'] = date('Y-m-d', strtotime($sapvvalue['verordnungam']));
					$sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end'] = date('Y-m-d', strtotime($sapvvalue['verordnungbis']));
	
					$patient_active_sapv[$sapvvalue['ipid']][] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);
	
					
					$sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types'] = explode(',', $sapvvalue['verordnet']);
					$sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['type'] = $sapvvalue['verordnet'];
					$sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['from'] = $sapvvalue['verordnungam'];
					$sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['till'] = $sapvvalue['verordnungbis'];
					$sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['sapv_order'] = $sapvvalue['sapv_order'];
					$sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_days'] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);
					$sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_days_no'] = count($sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['days']);

					if(!empty($period_days))
					{
						foreach($sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_days'] as $k=>$sday){
							if(in_array(date('Y-m-d',strtotime($sday)),$period_days) ){
								$sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['days'][] = $sday;
							}
						}
						$sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['days_no'] = count($sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['days']);
					}
					
					
					
					
					if($sapvvalue['sapv_order']=="1"){
						$sapv[$sapvvalue['ipid']]['first_sapv_in_period'][] = $sapvvalue['id'];
					}
					
					if($sapvvalue['sapv_order']=="2"){
						$sapv[$sapvvalue['ipid']]['follow_sapv_in_period'][] = $sapvvalue['id'];
						
						if($period_days && !empty($period_days)){
								
							if(in_array($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'],$period_days) ){
								$sapv[$sapvvalue['ipid']]['follow_sapv_STARTED_in_period'][] = $sapvvalue['id'];
							}
						}
					
					}
					
					
	
					if(in_array('1', $sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types']) && !in_array('2', $sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types']) && !in_array('3', $sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types']) && !in_array('4', $sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types']))
					{
						$sapv_details[$sapvvalue['ipid']]['be_days'][] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);
					}
	
					if(in_array('2', $sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types']) && !in_array('3', $sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types']) && !in_array('4', $sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types']))
					{
						$sapv_details[$sapvvalue['ipid']]['ko_days'][] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);
					}
	
					if(in_array('3', $sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types']) && !in_array('4', $sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types']))
					{
						$sapv_details[$sapvvalue['ipid']]['tv_days'][] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);
					}
	
					if(in_array('4', $sapv[$sapvvalue['ipid']]['sapv_falls'][$sapvvalue['id']]['all_types']))
					{
						$sapv_details[$sapvvalue['ipid']]['vv_days'][] = $patientmaster->getDaysInBetween($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'], $sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['end']);
						
						$sapv[$sapvvalue['ipid']]['all_vv_in_period'][] = $sapvvalue['id'];
						
						if($sapvvalue['sapv_order']=="2"){
							$sapv[$sapvvalue['ipid']]['all_follow_vv_in_period'][] = $sapvvalue['id'];
						}
						
						if($sapvvalue['status'] == "1"){
							$sapv[$sapvvalue['ipid']]['all_denied_vv_in_period'][] = $sapvvalue['id'];
						}
						
						
						if($period_days && !empty($period_days)){
						
							if(in_array($sapv[$sapvvalue['ipid']]['sapv_intervals'][$s]['start'],$period_days) ){
								$sapv[$sapvvalue['ipid']]['all_vv_STARTED_in_period'][] = $sapvvalue['id'];
								
								
								if($sapvvalue['sapv_order']=="2"){
									$sapv[$sapvvalue['ipid']]['all_follow_vv_STARTED_in_period'][] = $sapvvalue['id'];
								}
								
							}
						}
						
						
					}
	
					$s++;
					
				}
			}

			foreach($sapv_details as $patient_ipid => $types_intervals)
			{
				foreach($types_intervals['be_days'] as $kbes => $be_intervals)
				{
					foreach($be_intervals as $be_days)
					{
						$sapv[$patient_ipid]['be_days'][] = $be_days;
					}
				}

				foreach($types_intervals['ko_days'] as $kkos => $ko_intervals)
				{
					foreach($ko_intervals as $ko_days)
					{
						$sapv[$patient_ipid]['ko_days'][] = $ko_days;
					}
				}

				foreach($types_intervals['tv_days'] as $ktvs => $tv_intervals)
				{
					foreach($tv_intervals as $tv_days)
					{
						$sapv[$patient_ipid]['tv_days'][] = $tv_days;
					}
				}

				foreach($types_intervals['vv_days'] as $kvvs => $vv_intervals)
				{
					foreach($vv_intervals as $vv_days)
					{
						$sapv[$patient_ipid]['vv_days'][] = $vv_days;
					}
				}
			}


			foreach($patient_active_sapv as $pat_ipid => $overall_sdays)
			{
				foreach($overall_sdays as $sinter => $sinterval_days)
				{
					foreach($sinterval_days as $sdays)
					{
						$sapv[$pat_ipid]['sapv_days_overall'][] = $sdays;
						
						
						if($period_days && !empty($period_days)){
							
							if(in_array(date('Y-m-d',strtotime($sdays)),$period_days) ){
								$sapv[$pat_ipid]['sapv_days_in_period'][] = $sdays;
							}
						}
						
						
					}
				}
			}
			return $sapv;
		}

		public function akutellepatient_aschaffenburg($params)
		{
			// report_id = 114
			// report_name = Aktuelle Patienten Aschaffenburg
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			if($activeipids)
			{
				$i = 1;
				$ipidsactive_arr[] = '9999999999999';
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$ipidsactive_arr[] = $ipid;
					$i++;
				}
				//Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');

				//ISPC-2045 - get kontact-phone
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}
				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']] = $doc['title'] . ", ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['first_name'] . " " . $doc['last_name'] . ", ";
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['phone_practice'] . ", ";
						}

						if(strlen($doc['street1']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street1'] . ", ";
						}
						if(strlen($doc['street2']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['street2'] . ", ";
						}
						if(strlen($doc['postcode']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['postcode'] . ", ";
						}
						if(strlen($doc['city']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['city'];
						}
					}
				}


				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				foreach($patientexec as $patient)
				{

					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}

					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}

					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}

					if(strlen($patient["kontactnumber"]) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient["kontactnumber"];
					}

					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['street1']) > 0)
					{
						$address[$patient['ipid']] .= $patient['street1'] . '<br />';
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}

					if(strlen($patient['zip']) > 0)
					{
						$address[$patient['ipid']] .= $patient['zip'] . ', ';
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}

					if(strlen($patient['city']) > 0)
					{
						$address[$patient['ipid']] .= $patient['city'];
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}

					$parient_address[$patient['ipid']]['address'] = $address[$patient['ipid']];
				}


				//get active patients memo
				$memos = new PatientMemo();
				$patients_memo = $memos->get_multiple_patient_memo($ipidsactive_arr);


				/* -------------------------Get Contact Persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($ipidsactive_arr, false, false);

				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->whereIn('ipid', $ipidsactive_arr)
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');

				$patlocs = $patloc->execute();

				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
						$patientlocations_arr[] = $patloc['location_id'];
					}
					if(empty($patientlocations_arr))
					{
						$patientlocations_arr[] = "XXXXXX";
					}
					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->whereIn("id", $patientlocations_arr)
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}
					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}
								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
							}
						}
					}
				}
				foreach($patlocarrayFinal as $pid => $loc_details)
				{
					$active_location[$pid] = $loc_details['location_name'] . '<br />' . $loc_details['location_street'] . '<br />' . $loc_details['location_zip'] . ' ' . $loc_details['location_city'];
					;
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{

					//$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['pat_addresse'] = $parient_address[$keypatient]['address'];
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . '  ';
					$MasterData['data'][$keypatient]['contact_phone'] = $patientinfo[$keypatient]['kontactnumber'];

					if(strlen($patients_memo[$keypatient]) > '0')
					{
						$MasterData['data'][$keypatient]['memo'] = $patients_memo[$keypatient];
					}
					else
					{
						$MasterData['data'][$keypatient]['memo'] = '-';
					}
					$MasterData['data'][$keypatient]['address_location'] = trim(rtrim($active_location[$keypatient]));
				}

				return $MasterData;
			}
		}

		public function hessen_patient_statistics($params)
		{//Hessen
			// report_id = 115
			// report_name = Hessen Statistik- Patient
			// the report shows all patients treated in SAPV in that year.
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);
			/* ################################################################################################### */


			/* ----------------- GEt client patients  -------------------- */
			$client_patients = $this->getClientPatients($clientid, $whereepid);
			if(empty($client_patients))
			{
				$client_patients[] = '99999999';
			}

			/* ----------------- Get dishcharged patients in report period  -------------------- */
			$loc = Doctrine_Query::create()
				->select("*")
				->from('PatientReadmission')
				->whereIn('ipid', $client_patients)
				->andWhere('date_type = 2 and ((' . str_replace('%date%', 'date', $active_cond['date_sql']) . '))');
			$disarr = $loc->fetchArray();

			$valid_ipids_str = '"XXXXXX",';
			foreach($disarr as $k => $pval)
			{
				$valid_ipids[] = $pval['ipid']; // discharge in period
				$valid_ipids_str .= '"' . $pval['ipid'] . '",'; // discharge in period
			}
			if(empty($valid_ipids))
			{
				$valid_ipids[] = "XXXXXX";
			}
			/* ----------------- Get dishcharged patients in report period  -------------------- */
			$patientTreatmentDays = $pm->getTreatedDaysRealMultiple($valid_ipids, false);

			foreach($patientTreatmentDays as $patientTreatmentIpid => $patientTreatmentData)
			{

				if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
					{
						if(count($patientTreatmentData ['admissionDates']) == 0)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						}
						else
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
				{

					if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = $patientTreatmentData ['discharge_date'];
					}

					if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
					else
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
				else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
				{
					
				}
				else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
					{
						$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));

						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}

				if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])) && count($patientTreatmentData ['admissionDates']) == 0 && count($patientTreatmentData ['dischargeDates']) == 0
				)
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}

				$overall_app_days[$patientTreatmentIpid] = $pm->getDaysInBetween(date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])), date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])));
			}

			foreach($patientDateRange as $treatmentIpid => $range)
			{

				foreach($range as $ktreat => $treatmentarr)
				{

					foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
					{
						$startDate = date("Y-m-d", strtotime($treatmentval));
						$endDate = date("Y-m-d", strtotime($treatmentarr['end'][$keytreatval]));

						if(in_array($endDate, $finalPeriodDays))
						{
							$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
						}
					}
				}
			}

			/* ################################################################################################### */
			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhereIn('ipid', $valid_ipids);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['contact_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ################################################################################################### */
			//get maste form types by action
			$actions_array = array("5", "6");

			$types = Doctrine_Query::create()
				->select('*')
				->from('FormTypes')
				->where('clientid =?', $clientid)
				->andWhere('isdelete =?','0')
				->andWhereIn('action', $actions_array);
			$types_res = $types->fetchArray();

			$form_type_ids[] = '99999999999';
			foreach($types_res as $k_ft => $v_ft)
			{
				$form_type_ids[] = $v_ft['id'];
			}

			/* ################################################################################################### */

			$ecog_array = array('1' => 'normale Aktivität', '2' => 'Gehfähig, leichte Arbeiten möglich', '3' => 'nicht arbeitsfähig, kann &gt; 50&#37; der Wachzeit aufstehen', '4' => 'begrenzte Selbstversorgung, &gt; 50&#37; Wachzeit bettlägrig', '5' => 'Pflegebedürftig, permanent bettlägrig');
// 			$ecog_numeric_array = array('1' => '0', '2' => '1', '3' => '2', '4' => '3', '5' => '4');

			/* ----------------------Get all "contact forms" details from patients------------------------------------- */
			$contact_form_q = Doctrine_Query::create()
				->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
				->from("ContactForms c")
				->where('c.isdelete = 0')
				->andWhereIn('c.ipid', $valid_ipids)
				->andWhereIn('c.form_type', $form_type_ids)
				->andWhereNotIn('c.id', $del_visits['contact_form'])
				->orderBy('c.start_date asc');
			$contact_form_arr = $contact_form_q->fetchArray();

			foreach($treatmentDaysArray as $ipid => $patient_fall)
			{
				foreach($patient_fall as $fall => $period_fl)
				{
					foreach($contact_form_arr as $c_pat => $vfc)
					{
						if(in_array(date("Y-m-d", strtotime($vfc['billable_date'])), $period_fl) && $vfc['ipid'] == $ipid)
						{
							if($vfc['ecog'] != 0)
							{
// 								$ecog2contactform[$ipid][$fall][$vfc['id']]['ecog'] = $ecog_numeric_array[$vfc['ecog']];
								$ecog2contactform[$ipid][$fall][$vfc['id']]['ecog'] = $vfc['ecog'];
							}
							else
							{
								$ecog2contactform[$ipid][$fall][$vfc['id']]['ecog'] = "";
							}
							$contactforms2fall[$ipid][$fall][] = $vfc['id'];

							$required_cf[] = $vfc['id'];
						}
					}
				}
			}

			if(empty($required_cf))
			{
				$required_cf[] = "XXXXXX";
			}
			$required_cf = array_unique($required_cf);

			$setv = Doctrine_Query::create()
				->select('*, sv.value as sym_description')
				->from('SymptomatologyValues sv')
				->where('isdelete = 0')
				->orderBy('id');
			$svalue_array = $setv->fetchArray();

			foreach($svalue_array as $ki => $svv)
			{
				$symptoms_values[$svv['id']]['sym_description'] = utf8_encode($svv['sym_description']);
			}

			$symp_zapv_details = new SymptomatologyZapvDetails();
			$zapv_details_items = $symp_zapv_details->getSymptpomatologyZapvItems();

			$symps = Doctrine_Query::create()
				->select('*')
				->from('ContactFormsSymp')
				->whereIn('ipid', $valid_ipids)
				->andWhereIn('contact_form_id', $required_cf)
				->orderBy('current_value DESC');
			$symarr = $symps->fetchArray();

			foreach($symarr as $ksy => $vsy)
			{
				if(strlen($zapv_details_items[$vsy['details']]) > 0)
				{
					$patient_symp[$vsy['ipid']][$vsy['contact_form_id']][] = $zapv_details_items[$vsy['details']] . ' (' . $vsy['current_value'] . ')';
				}
				else
				{
					$patient_symp[$vsy['ipid']][$vsy['contact_form_id']][] = $symptoms_values[$vsy['symp_id']]['sym_description'] . ' (' . $vsy['current_value'] . ')';
				}
			}

			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $valid_ipids);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
			}

			/* -------------------------Get client Main Diagnosis type ------------------------------------------ */

			$modules = new Modules();
			$hs_type_module = $modules->checkModulePrivileges("81", $clientid);

			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			if($hs_type_module)
			{
				$abb2 .= ",'HS'";
			}
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";

			foreach($ddarr2 as $key => $valdia)
			{
				if($valdia['abbrevation'] == 'HS')
				{
					$hs_type_id = $valdia['id'];
				}
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ", ";
			}

			/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
			$valid_ipids_str = substr($valid_ipids_str, 0, -1);
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($valid_ipids_str, $typeid, true);

//		print_r($ddarr2);
//		print_r($dianoarray);
//		exit;
			foreach($dianoarray as $diangosis)
			{

				if($diangosis['diagnosis_type_id'] == $hs_type_id)
				{
					$diagnosis_icds_hs_arr[$diangosis['ipid']][] = $diangosis['icdnumber'];
				}
				else
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
					$diagnosis_icds_arr[$diangosis['ipid']][] = $diangosis['icdnumber'];
				}
			}
			foreach($diagnosisarr as $d_key => $d_val)
			{
				$diagnosisarr[$d_key] = implode(", ", $d_val);
			}
			foreach($diagnosis_icds_arr as $di_key => $di_val)
			{
				$patient_icds[$di_key] = implode(", ", $di_val);
			}

			/* -------------------------Get PatiPflegestufeMain Diagnosis data------------------------------------------ */
			$patientstage = Doctrine_Query::create()
				->select("*")
				->from('PatientMaintainanceStage p')
				->whereIn('p.ipid', $valid_ipids)
				->andWhere('tilldate = "0000-00-00"')
				->orderby('id DESC');
			$patientstagearray = $patientstage->fetchArray();

			foreach($patientstagearray as $stage)
			{
				$stagestr = "";
				$stagestr .=$stage['stage'] . '<br />';
				if($stage['erstantrag'] == 1)
				{
					$stagestr .="Erstantrag<br />";
				}
				if($stage['horherstufung'] == 1)
				{
					$stagestr .="Höherstufung beantragt <br />";
				}
				$patientDetails[$stage['ipid']]['carelevel'] = $stagestr;
			}

			/* ----------------- Get Patients Details -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $valid_ipids)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			$dischargedipidstr = "'99999999999'";

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";

				$patient_array[$val['ipid']]['ipid'] = $val['ipid'];
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['zip'] = $val['zip'];
				$patient_array[$val['ipid']]['city'] = $val['city'];
				$patient_array[$val['ipid']]['family_doc'] = $val['familydoc_id'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
			}

			// Prepare results
			$i = 1;
			foreach($treatmentDaysArray as $keypatient => $patient_falls)
			{
				foreach($patient_falls as $fll => $vfall)
				{
					$mdata[$i]['epid'] = $patient_array[$keypatient]['epid'];
					$mdata[$i]['admissiondate'] = date('d.m.Y', strtotime($vfall[0]));
					$mdata[$i]['dischargedate'] = date('d.m.Y', strtotime(end($vfall)));
					$mdata[$i]['ipid'] = $keypatient;
					$mdata[$i]['lastname'] = $patient_array[$keypatient]['last_name'];
					$mdata[$i]['firstname'] = $patient_array[$keypatient]['first_name'];
					$mdata[$i]['birthd'] = $patient_array[$keypatient]['birthd'];
					$mdata[$i]['zip'] = $patient_array[$keypatient]['zip'];
					$mdata[$i]['healthinsurance'] = $patienthelth[$keypatient]['company'];
					$mdata[$i]['maindiagnosis_icd'] = $patient_icds[$keypatient];
					$mdata[$i]['maindiagnosis'] = $diagnosisarr[$keypatient];
//				$mdata[$i]['lastsymptom'] = $patient_symp[ $keypatient ][ $contactforms2fall[$keypatient][$fll][0] ][0];
					if(!empty($diagnosis_icds_hs_arr[$keypatient]))
					{
						$mdata[$i]['lastsymptom'] = implode(',', $diagnosis_icds_hs_arr[$keypatient]);
					}
					else
					{
						$mdata[$i]['lastsymptom'] = ' - ';
					}
					$mdata[$i]['pflegestufe'] = $patientDetails[$keypatient]['carelevel'];
					$mdata[$i]['ecog'] = $ecog2contactform [$keypatient] [$fll] [$contactforms2fall[$keypatient][$fll][0]]['ecog'];
					$i++;
				}
			}

			foreach($mdata as $key => $row)
			{
				$epid[$key] = $row['epid'];
				$admissiondate[$key] = strtotime($row['admissiondate']);
			}
			array_multisort($epid, SORT_ASC, $admissiondate, SORT_ASC, $mdata);

			/* ------------------------------------Display all results ------------------------------------------ */
			$x = 1;
			foreach($mdata as $k => $dvalues)
			{
				$MasterData['data'][$x]['epid'] = $dvalues['epid'];
				if($_REQUEST['dbg'] == 'falls')
				{
					$MasterData['data'][$x]['admissiondate'] = $dvalues['admissiondate'];
					$MasterData['data'][$x]['dischargedate'] = $dvalues['dischargedate'];
					$MasterData['data'][$x]['ipid'] = $dvalues['ipid'];
				}
				$MasterData['data'][$x]['lastname'] = $dvalues['lastname'];
				$MasterData['data'][$x]['firstname'] = $dvalues['firstname'];
				$MasterData['data'][$x]['birthd'] = $dvalues['birthd'];
				$MasterData['data'][$x]['zip'] = $dvalues['zip'];
				$MasterData['data'][$x]['healthinsurance_company'] = $dvalues['healthinsurance'];
				$MasterData['data'][$x]['main_diagnosis_icd'] = $dvalues['maindiagnosis_icd'];
				$MasterData['data'][$x]['main_diagnosis'] = $dvalues['maindiagnosis'];
				$MasterData['data'][$x]['highest_symptom'] = $dvalues['lastsymptom'];
				$MasterData['data'][$x]['pflegestufe'] = $dvalues['pflegestufe'];
				$MasterData['data'][$x]['ecog'] = $dvalues['ecog'];
				$x++;
			}

			return $MasterData;
		}

		public function hessen_patient_statistics_active($params)
		{//Hessen
			// report_id = 141
			// report_name = Hessen Statistik- Patient II
			// the report shows all patients treated in SAPV in that year.
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);

			$valid_ipids = array_keys($active_patient_details); // return ipids
			$valid_ipids_str = '"XXXXXX",';
			foreach($active_patient_details as $ipid => $p_details)
			{
				$patient_active_periods [$p_details['details'] ['ipid']] = $p_details['active_periods'];
				$patient_array [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patient_array [$p_details['details'] ['ipid']] ['last_name'] = $p_details['details'] ['last_name'];
				$patient_array [$p_details['details'] ['ipid']] ['first_name'] = $p_details['details'] ['first_name'];
				$patient_array [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patient_array [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));

				$valid_ipids_str .='"' . $p_details['details'] ['ipid'] . '",';
			}
			if(empty($valid_ipids))
			{
				$valid_ipids[] = "XXXXXX";
			}
			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);
			/* ################################################################################################### */


			/* ----------------- Get  patients dates in report period  -------------------- */

			foreach($patient_active_periods as $p_ipid => $fall)
			{
				foreach($fall as $fall_id => $fall_data)
				{
					$startDate = date("Y-m-d", strtotime($fall_data['start']));
					$endDate = date("Y-m-d", strtotime($fall_data['end']));

					$treatmentDaysArray [$p_ipid] [] = $pm->getDaysInBetween($startDate, $endDate);
				}
			}

			/* ################################################################################################### */
			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhereIn('ipid', $valid_ipids);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['contact_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ################################################################################################### */
			//get maste form types by action
			$actions_array = array("5", "6");

			$types = Doctrine_Query::create()
				->select('*')
				->from('FormTypes')
				->where('clientid =?', $clientid)
				->andWhere('isdelete =?','0')
				->andWhereIn('action', $actions_array);
			$types_res = $types->fetchArray();

			$form_type_ids[] = '99999999999';
			foreach($types_res as $k_ft => $v_ft)
			{
				$form_type_ids[] = $v_ft['id'];
			}

			/* ################################################################################################### */

			$ecog_array = array('1' => 'normale Aktivität', '2' => 'Gehfähig, leichte Arbeiten möglich', '3' => 'nicht arbeitsfähig, kann &gt; 50&#37; der Wachzeit aufstehen', '4' => 'begrenzte Selbstversorgung, &gt; 50&#37; Wachzeit bettlägrig', '5' => 'Pflegebedürftig, permanent bettlägrig');
			$ecog_numeric_array = array('1' => '0', '2' => '1', '3' => '2', '4' => '3', '5' => '4');
			/* ----------------------Get all "contact forms" details from patients------------------------------------- */
			$contact_form_q = Doctrine_Query::create()
				->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
				->from("ContactForms c")
				->where('c.isdelete = 0')
				->andWhereIn('c.ipid', $valid_ipids)
				->andWhereIn('c.form_type', $form_type_ids)
				->andWhereNotIn('c.id', $del_visits['contact_form'])
				->orderBy('c.start_date asc');
			$contact_form_arr = $contact_form_q->fetchArray();

			foreach($treatmentDaysArray as $ipid => $patient_fall)
			{
				foreach($patient_fall as $fall => $period)
				{
					foreach($contact_form_arr as $c_pat => $vfc)
					{
						if(in_array(date("Y-m-d", strtotime($vfc['billable_date'])), $period) && $vfc['ipid'] == $ipid)
						{
						    if($vfc['karnofsky'] != null)
						    {
//     							if($vfc['ecog'] != 0)
//     							{
//     								$ecog2contactform[$ipid][$fall][$vfc['id']]['ecog'] = $ecog_numeric_array[$vfc['ecog']];
    								$ecog2contactform[$ipid][$fall][$vfc['id']]['ecog'] = $vfc['ecog'];
//     							}
//     							else
//     							{
//     								$ecog2contactform[$ipid][$fall][$vfc['id']]['ecog'] = "";
//     							}
    							$contactforms2fall[$ipid][$fall][] = $vfc['id'];
						    }
    
   							$required_cf[] = $vfc['id'];
						}
					}
				}
			}

			if(empty($required_cf))
			{
				$required_cf[] = "XXXXXX";
			}
			$required_cf = array_unique($required_cf);

			$setv = Doctrine_Query::create()
				->select('*, sv.value as sym_description')
				->from('SymptomatologyValues sv')
				->where('isdelete = 0')
				->orderBy('id');
			$svalue_array = $setv->fetchArray();

			foreach($svalue_array as $ki => $svv)
			{
				$symptoms_values[$svv['id']]['sym_description'] = utf8_encode($svv['sym_description']);
			}

			$symp_zapv_details = new SymptomatologyZapvDetails();
			$zapv_details_items = $symp_zapv_details->getSymptpomatologyZapvItems();

			$symps = Doctrine_Query::create()
				->select('*')
				->from('ContactFormsSymp')
				->whereIn('ipid', $valid_ipids)
				->andWhereIn('contact_form_id', $required_cf)
				->orderBy('current_value DESC');
			$symarr = $symps->fetchArray();

			foreach($symarr as $ksy => $vsy)
			{
				if(strlen($zapv_details_items[$vsy['details']]) > 0)
				{
					$patient_symp[$vsy['ipid']][$vsy['contact_form_id']][] = $zapv_details_items[$vsy['details']] . ' (' . $vsy['current_value'] . ')';
				}
				else
				{
					$patient_symp[$vsy['ipid']][$vsy['contact_form_id']][] = $symptoms_values[$vsy['symp_id']]['sym_description'] . ' (' . $vsy['current_value'] . ')';
				}
			}

			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $valid_ipids);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
			}

			/* -------------------------Get client Main Diagnosis type ------------------------------------------ */

			$modules = new Modules();
			$hs_type_module = $modules->checkModulePrivileges("81", $clientid);

			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			if($hs_type_module)
			{
				$abb2 .= ",'HS'";
			}
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";

			foreach($ddarr2 as $key => $valdia)
			{
				if($valdia['abbrevation'] == 'HS')
				{
					$hs_type_id = $valdia['id'];
				}
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ", ";
			}

			/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
			$valid_ipids_str = substr($valid_ipids_str, 0, -1);
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($valid_ipids_str, $typeid, true);

			//		print_r($ddarr2);
			//		print_r($dianoarray);
			//		exit;
			foreach($dianoarray as $diangosis)
			{

				if($diangosis['diagnosis_type_id'] == $hs_type_id)
				{
					$diagnosis_icds_hs_arr[$diangosis['ipid']][] = $diangosis['icdnumber'];
				}
				else
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
					$diagnosis_icds_arr[$diangosis['ipid']][] = $diangosis['icdnumber'];
				}
			}
			foreach($diagnosisarr as $d_key => $d_val)
			{
				$diagnosisarr[$d_key] = implode(", ", $d_val);
			}
			foreach($diagnosis_icds_arr as $di_key => $di_val)
			{
				$patient_icds[$di_key] = implode(", ", $di_val);
			}

			/* -------------------------Get PatiPflegestufeMain Diagnosis data------------------------------------------ */
			$patientstage = Doctrine_Query::create()
				->select("*")
				->from('PatientMaintainanceStage p')
				->whereIn('p.ipid', $valid_ipids)
				->andWhere('tilldate = "0000-00-00"')
				->orderby('id DESC');
			$patientstagearray = $patientstage->fetchArray();

			foreach($patientstagearray as $stage)
			{
				$stagestr = "";
				$stagestr .=$stage['stage'] . '<br />';
				if($stage['erstantrag'] == 1)
				{
					$stagestr .="Erstantrag<br />";
				}
				if($stage['horherstufung'] == 1)
				{
					$stagestr .="Höherstufung beantragt <br />";
				}
				$patientDetails[$stage['ipid']]['carelevel'] = $stagestr;
			}

			/* ----------------- Get Patients Details -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $valid_ipids)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			$dischargedipidstr = "'99999999999'";

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";

				$patient_array[$val['ipid']]['ipid'] = $val['ipid'];
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['zip'] = $val['zip'];
				$patient_array[$val['ipid']]['city'] = $val['city'];
				$patient_array[$val['ipid']]['family_doc'] = $val['familydoc_id'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
			}

			// Prepare results
			$i = 1;
			foreach($treatmentDaysArray as $keypatient => $patient_falls)
			{
				foreach($patient_falls as $fll => $vfall)
				{
					$mdata[$i]['epid'] = $patient_array[$keypatient]['epid'];
					$mdata[$i]['admissiondate'] = date('d.m.Y', strtotime($vfall[0]));
					$mdata[$i]['dischargedate'] = date('d.m.Y', strtotime(end($vfall)));
					$mdata[$i]['ipid'] = $keypatient;
					$mdata[$i]['lastname'] = $patient_array[$keypatient]['last_name'];
					$mdata[$i]['firstname'] = $patient_array[$keypatient]['first_name'];
					$mdata[$i]['birthd'] = $patient_array[$keypatient]['birthd'];
					$mdata[$i]['zip'] = $patient_array[$keypatient]['zip'];
					$mdata[$i]['healthinsurance'] = $patienthelth[$keypatient]['company'];
					$mdata[$i]['maindiagnosis_icd'] = $patient_icds[$keypatient];
					$mdata[$i]['maindiagnosis'] = $diagnosisarr[$keypatient];
					//				$mdata[$i]['lastsymptom'] = $patient_symp[ $keypatient ][ $contactforms2fall[$keypatient][$fll][0] ][0];
					if(!empty($diagnosis_icds_hs_arr[$keypatient]))
					{
						$mdata[$i]['lastsymptom'] = implode(',', $diagnosis_icds_hs_arr[$keypatient]);
					}
					else
					{
						$mdata[$i]['lastsymptom'] = ' - ';
					}
					$mdata[$i]['pflegestufe'] = $patientDetails[$keypatient]['carelevel'];
					$mdata[$i]['ecog'] = $ecog2contactform [$keypatient] [$fll] [$contactforms2fall[$keypatient][$fll][0]]['ecog'];
					$i++;
				}
			}

			foreach($mdata as $key => $row)
			{
				$epid[$key] = $row['epid'];
				$admissiondate[$key] = strtotime($row['admissiondate']);
			}
			array_multisort($epid, SORT_ASC, $admissiondate, SORT_ASC, $mdata);

			/* ------------------------------------Display all results ------------------------------------------ */
			$x = 1;
			foreach($mdata as $k => $dvalues)
			{
				$MasterData['data'][$x]['epid'] = $dvalues['epid'];
				if($_REQUEST['dbg'] == 'falls')
				{
					$MasterData['data'][$x]['admissiondate'] = $dvalues['admissiondate'];
					$MasterData['data'][$x]['dischargedate'] = $dvalues['dischargedate'];
					$MasterData['data'][$x]['ipid'] = $dvalues['ipid'];
				}
				$MasterData['data'][$x]['lastname'] = $dvalues['lastname'];
				$MasterData['data'][$x]['firstname'] = $dvalues['firstname'];
				$MasterData['data'][$x]['birthd'] = $dvalues['birthd'];
				$MasterData['data'][$x]['zip'] = $dvalues['zip'];
				$MasterData['data'][$x]['healthinsurance_company'] = $dvalues['healthinsurance'];
				$MasterData['data'][$x]['main_diagnosis_icd'] = $dvalues['maindiagnosis_icd'];
				$MasterData['data'][$x]['main_diagnosis'] = $dvalues['maindiagnosis'];
				$MasterData['data'][$x]['highest_symptom'] = $dvalues['lastsymptom'];
				$MasterData['data'][$x]['pflegestufe'] = $dvalues['pflegestufe'];
				$MasterData['data'][$x]['ecog'] = $dvalues['ecog'];
				$x++;
			}

			return $MasterData;
		}

		public function hessen_patient_statistics_old($params)
		{//Hessen
			// report_id = 115
			// report_name = Hessen Statistik- Patient
			// the report shows all patients treated in SAPV in that year.
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);
			/* ################################################################################################### */


			/* ----------------- GEt client patients  -------------------- */
			$client_patients = $this->getClientPatients($clientid, $whereepid);
			if(empty($client_patients))
			{
				$client_patients[] = '99999999';
			}

			/* ----------------- Get dishcharged patients in report period  -------------------- */
			$loc = Doctrine_Query::create()
				->select("*")
				->from('PatientReadmission')
				->whereIn('ipid', $client_patients)
				->andWhere('date_type = 2 and ((' . str_replace('%date%', 'date', $active_cond['date_sql']) . '))');
			$disarr = $loc->fetchArray();

			$valid_ipids_str = '"XXXXXX",';
			foreach($disarr as $k => $pval)
			{
				$valid_ipids[] = $pval['ipid']; // discharge in period
				$valid_ipids_str .= '"' . $pval['ipid'] . '",'; // discharge in period
			}
			if(empty($valid_ipids))
			{
				$valid_ipids[] = "XXXXXX";
			}
			/* ----------------- Get dishcharged patients in report period  -------------------- */
			$patientTreatmentDays = $pm->getTreatedDaysRealMultiple($valid_ipids, false);

			foreach($patientTreatmentDays as $patientTreatmentIpid => $patientTreatmentData)
			{

				if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
					{
						if(count($patientTreatmentData ['admissionDates']) == 0)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						}
						else
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
						}
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
				{

					if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
					{
						$dischargeDate = $patientTreatmentData ['discharge_date'];
					}

					if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
					else
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
					}
				}
				else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}
				else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
				{
					
				}
				else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
				{
					foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
					{
						$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));

						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
					}
				}

				if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])) && count($patientTreatmentData ['admissionDates']) == 0 && count($patientTreatmentData ['dischargeDates']) == 0
				)
				{
					$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
				}

				$overall_app_days[$patientTreatmentIpid] = $pm->getDaysInBetween(date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])), date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])));
			}

			foreach($patientDateRange as $treatmentIpid => $range)
			{

				foreach($range as $ktreat => $treatmentarr)
				{

					foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
					{
						$startDate = date("Y-m-d", strtotime($treatmentval));
						$endDate = date("Y-m-d", strtotime($treatmentarr['end'][$keytreatval]));

						if(in_array($endDate, $finalPeriodDays))
						{
							$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
						}
					}
				}
			}

			/* ################################################################################################### */
			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhereIn('ipid', $valid_ipids);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['contact_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ################################################################################################### */
			//get maste form types by action
			$actions_array = array("5", "6");

			$types = Doctrine_Query::create()
				->select('*')
				->from('FormTypes')
				->where('clientid =?', $clientid)
				->andWhere('isdelete =?','0')
				->andWhereIn('action', $actions_array);
			$types_res = $types->fetchArray();

			$form_type_ids[] = '99999999999';
			foreach($types_res as $k_ft => $v_ft)
			{
				$form_type_ids[] = $v_ft['id'];
			}

			/* ################################################################################################### */

			$ecog_array = array('1' => 'normale Aktivität', '2' => 'Gehfähig, leichte Arbeiten möglich', '3' => 'nicht arbeitsfähig, kann &gt; 50&#37; der Wachzeit aufstehen', '4' => 'begrenzte Selbstversorgung, &gt; 50&#37; Wachzeit bettlägrig', '5' => 'Pflegebedürftig, permanent bettlägrig');

			/* ----------------------Get all "contact forms" details from patients------------------------------------- */
			$contact_form_q = Doctrine_Query::create()
				->select("*, c.ipid, c.id, c.start_date, c.end_date, TIMESTAMPDIFF(MINUTE, c.start_date, c.end_date) as contact_form_duration")
				->from("ContactForms c")
				->where('c.isdelete = 0')
				->andWhereIn('c.ipid', $valid_ipids)
				->andWhereIn('c.form_type', $form_type_ids)
				->andWhereNotIn('c.id', $del_visits['contact_form'])
				->orderBy('c.start_date asc');
			$contact_form_arr = $contact_form_q->fetchArray();

			$ecog2contactform = array();
			$contactforms2fall = array();
			foreach($treatmentDaysArray as $ipid => $patient_fall)
			{
				foreach($patient_fall as $fall => $period)
				{
					foreach($contact_form_arr as $c_pat => $vfc)
					{
						if(in_array(date("Y-m-d", strtotime($vfc['billable_date'])), $period) && $vfc['ipid'] == $ipid)
						{
							if($vfc['ecog'] != 0)
							{
								$ecog2contactform[$ipid][$fall][$vfc['id']]['ecog'] = $vfc['ecog'];
							}
							else
							{
								$ecog2contactform[$ipid][$fall][$vfc['id']]['ecog'] = "";
							}
							
// 							getKarnofskyFulltext
							
							if($vfc['ecog'] != 0)
							{
								$ecog2contactform[$ipid][$fall][$vfc['id']]['ecog'] = $vfc['ecog'];
							}
							else
							{
								$ecog2contactform[$ipid][$fall][$vfc['id']]['ecog'] = "";
							}
							
							$contactforms2fall[$ipid][$fall][] = $vfc['id'];

							$required_cf[] = $vfc['id'];
						}
					}
				}
			}
			
			if(empty($required_cf))
			{
				$required_cf[] = "XXXXXX";
			}
			$required_cf = array_unique($required_cf);

			$setv = Doctrine_Query::create()
				->select('*, sv.value as sym_description')
				->from('SymptomatologyValues sv')
				->where('isdelete = 0')
				->orderBy('id');
			$svalue_array = $setv->fetchArray();

			foreach($svalue_array as $ki => $svv)
			{
				$symptoms_values[$svv['id']]['sym_description'] = utf8_encode($svv['sym_description']);
			}

			$symp_zapv_details = new SymptomatologyZapvDetails();
			$zapv_details_items = $symp_zapv_details->getSymptpomatologyZapvItems();

			$symps = Doctrine_Query::create()
				->select('*')
				->from('ContactFormsSymp')
				->whereIn('ipid', $valid_ipids)
				->andWhereIn('contact_form_id', $required_cf)
				->orderBy('current_value DESC');
			$symarr = $symps->fetchArray();

			foreach($symarr as $ksy => $vsy)
			{
				if(strlen($zapv_details_items[$vsy['details']]) > 0)
				{
					$patient_symp[$vsy['ipid']][$vsy['contact_form_id']][] = $zapv_details_items[$vsy['details']] . ' (' . $vsy['current_value'] . ')';
				}
				else
				{
					$patient_symp[$vsy['ipid']][$vsy['contact_form_id']][] = $symptoms_values[$vsy['symp_id']]['sym_description'] . ' (' . $vsy['current_value'] . ')';
				}
			}

			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $valid_ipids);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
			}

			/* -------------------------Get client Main Diagnosis type ------------------------------------------ */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";

			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ", ";
			}

			/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
			$valid_ipids_str = substr($valid_ipids_str, 0, -1);
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->getFinalData($valid_ipids_str, $typeid, true);

			foreach($dianoarray as $diangosis)
			{
				$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				$diagnosis_icds_arr[$diangosis['ipid']][] = $diangosis['icdnumber'];
			}
			foreach($diagnosisarr as $d_key => $d_val)
			{
				$diagnosisarr[$d_key] = implode(", ", $d_val);
			}
			foreach($diagnosis_icds_arr as $di_key => $di_val)
			{
				$patient_icds[$di_key] = implode(", ", $di_val);
			}

			/* -------------------------Get PatiPflegestufeMain Diagnosis data------------------------------------------ */
			$patientstage = Doctrine_Query::create()
				->select("*")
				->from('PatientMaintainanceStage p')
				->whereIn('p.ipid', $valid_ipids)
				->andWhere('tilldate = "0000-00-00"')
				->orderby('id DESC');
			$patientstagearray = $patientstage->fetchArray();

			foreach($patientstagearray as $stage)
			{
				$stagestr = "";
				$stagestr .=$stage['stage'] . '<br />';
				if($stage['erstantrag'] == 1)
				{
					$stagestr .="Erstantrag<br />";
				}
				if($stage['horherstufung'] == 1)
				{
					$stagestr .="Höherstufung beantragt <br />";
				}
				$patientDetails[$stage['ipid']]['carelevel'] = $stagestr;
			}

			/* ----------------- Get Patients Details -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $valid_ipids)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			$dischargedipidstr = "'99999999999'";

			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";

				$patient_array[$val['ipid']]['ipid'] = $val['ipid'];
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
				$patient_array[$val['ipid']]['zip'] = $val['zip'];
				$patient_array[$val['ipid']]['city'] = $val['city'];
				$patient_array[$val['ipid']]['family_doc'] = $val['familydoc_id'];
				$patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
			}

			// Prepare results
			$i = 1;
			foreach($treatmentDaysArray as $keypatient => $patient_falls)
			{
				foreach($patient_falls as $fll => $vfall)
				{
					$mdata[$i]['epid'] = $patient_array[$keypatient]['epid'];
					$mdata[$i]['admissiondate'] = date('d.m.Y', strtotime($vfall[0]));
					$mdata[$i]['dischargedate'] = date('d.m.Y', strtotime(end($vfall)));
					$mdata[$i]['ipid'] = $keypatient;
					$mdata[$i]['lastname'] = $patient_array[$keypatient]['last_name'];
					$mdata[$i]['firstname'] = $patient_array[$keypatient]['first_name'];
					$mdata[$i]['birthd'] = $patient_array[$keypatient]['birthd'];
					$mdata[$i]['zip'] = $patient_array[$keypatient]['zip'];
					$mdata[$i]['healthinsurance'] = $patienthelth[$keypatient]['company'];
					$mdata[$i]['maindiagnosis_icd'] = $patient_icds[$keypatient];
					$mdata[$i]['maindiagnosis'] = $diagnosisarr[$keypatient];
					$mdata[$i]['lastsymptom'] = $patient_symp[$keypatient][$contactforms2fall[$keypatient][$fll][0]][0];
					$mdata[$i]['pflegestufe'] = $patientDetails[$keypatient]['carelevel'];
// 					$mdata[$i]['ecog'] = $ecog2contactform [$keypatient] [$fll] [$contactforms2fall[$keypatient][$fll][0]]['ecog'];
					$mdata[$i]['ecog'] = $ecog2contactform [$keypatient] [$fll] [$contactforms2fall[$keypatient][$fll][0]]['karnofsky'];
					$i++;
				}
			}

			foreach($mdata as $key => $row)
			{
				$epid[$key] = $row['epid'];
				$admissiondate[$key] = strtotime($row['admissiondate']);
			}
			array_multisort($epid, SORT_ASC, $admissiondate, SORT_ASC, $mdata);

			/* ------------------------------------Display all results ------------------------------------------ */
			$x = 1;
			foreach($mdata as $k => $dvalues)
			{
				$MasterData['data'][$x]['epid'] = $dvalues['epid'];
				if($_REQUEST['dbg'] == 'falls')
				{
					$MasterData['data'][$x]['admissiondate'] = $dvalues['admissiondate'];
					$MasterData['data'][$x]['dischargedate'] = $dvalues['dischargedate'];
					$MasterData['data'][$x]['ipid'] = $dvalues['ipid'];
				}
				$MasterData['data'][$x]['lastname'] = $dvalues['lastname'];
				$MasterData['data'][$x]['firstname'] = $dvalues['firstname'];
				$MasterData['data'][$x]['birthd'] = $dvalues['birthd'];
				$MasterData['data'][$x]['zip'] = $dvalues['zip'];
				$MasterData['data'][$x]['healthinsurance'] = $dvalues['healthinsurance'];
				$MasterData['data'][$x]['main_diagnosis_icd'] = $dvalues['maindiagnosis_icd'];
				$MasterData['data'][$x]['main_diagnosis'] = $dvalues['maindiagnosis'];
				$MasterData['data'][$x]['lastsymptom'] = $dvalues['lastsymptom'];
				$MasterData['data'][$x]['pflegestufe'] = $dvalues['pflegestufe'];
				$MasterData['data'][$x]['ecog'] = $dvalues['ecog'];
				$x++;
			}

			return $MasterData;
		}

		public function hessen_statistics($params)
		{
			// report id = 116
			// report_name = Hessen Statistik - Fall
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$patient_master = new PatientMaster();

			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$s = array('%date_start%', '%date_end%');
			$r = array('`date`', '`date`');

			$clientIpids = $this->getAllClientPatients($clientid, $whereepid);

			$client_patients_ipids[] = '9999999';
			foreach($clientIpids as $patient)
			{
				$client_patients_ipids[] = $patient['ipid'];
			}

			//get ipids with discharge date(s) between the reported period
			$get_readm_patients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->where('date_type = "2"')
				->andWhere('' . str_replace($s, $r, $active_cond['interval_sql']) . '')
				->whereIn('ipid', $client_patients_ipids)
				->orderBy('date DESC');

			$patients_discharged_data = $get_readm_patients->fetchArray();

			$discharged_ipids[] = '9999999999';
			foreach($patients_discharged_data as $k_discharge => $v_discharge_data)
			{
				$patient_discharged_dates[$v_discharge_data['ipid']][] = date('Y-m-d', strtotime($v_discharge_data['date']));
				$discharged_ipids[] = $v_discharge_data['ipid'];
			}
			$discharged_ipids = array_values(array_unique($discharged_ipids));

			//get all patients details
			$allpatient = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('p.ipid', $discharged_ipids)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $clientid);
			$patients_array = $allpatient->fetchArray();

			foreach($patients_array as $key => $val)
			{

				$patient_array[$val['ipid']]['ipid'] = $val['ipid'];
				$patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
				$patient_array[$val['ipid']]['last_name'] = $val['last_name'];
				$patient_array[$val['ipid']]['first_name'] = $val['first_name'];
			}


			//get all admission-discharge interval data for discharged patients in report period
			$patients_readmission_details = $patient_master->getTreatedDaysRealMultiple($discharged_ipids);
			
			//get sapv(s) in all falls
			$s_sapv = array('%date_start%', '%date_end%');
			$r_sapv = array('verordnungam', 'verordnungbis');
			$int_cond = str_replace($s_sapv, $r_sapv, $active_cond['interval_sql']);
			$sv_status = 'status != 1';
			
			$sapv_arr_details = array('1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');

			/*$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $discharged_ipids)
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s_sapv, $r_sapv, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray();*/
			
			$sapv = new SapvVerordnung();
			$sapvarr = $sapv->get_all_sapvs_new($discharged_ipids, $clientid,"",$int_cond, $sv_status);
			
			foreach($sapvarr as $k_sapv => $v_sapv)
			{
				$sapv_arr['verordnet_arr'] = explode(',', $v_sapv['verordnet']);

				foreach($sapv_arr['verordnet_arr'] as $k_vv => $v_vv)
				{
					$v_sapv['verordnet_arr'][] = $sapv_arr_details[$v_vv];
				}
				$v_sapv['verordnet_arr'] = array_values(array_unique($v_sapv['verordnet_arr']));

				$patients_sapv_arr[] = $v_sapv;

				//$sapv_vons_str .= '"' . $v_sapv['verordnet_von'] . '",';
			}

			//$family_doctors = FamilyDoctor::getFamilyDocMultiple(substr($sapv_vons_str, 0, -1));

			//get contact person
			$contact = new ContactPersonMaster();
			$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($discharged_ipids, false, false);

			//get patient location in report period
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $active_cond['interval_location_sql_qtz']));

			//get patient locations and ipids based on master hospital ids and into selected time period
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('' . $time_interval . '')
				->andWhereIn('ipid', $discharged_ipids)
				->orderBy('valid_from ASC');
			$pat_locations_arr = $locations->fetchArray();

			$pat_loc_ids[] = '99999999999';
			foreach($pat_locations_arr as $k_p_loc => $v_p_loc)
			{
				$pat_loc_ids[] = $v_p_loc['location_id'];
			}

			//get master locations data
			$floc = Doctrine_Query::create()
				->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->whereIn("id", $pat_loc_ids)
				->andWhere('isdelete=0')
				->orderBy('location ASC');
			$locationdata = $floc->fetchArray();

			foreach($locationdata as $k_loc => $v_loc)
			{
				$master_locations[$v_loc['id']] = $v_loc;
			}

			//za foreach to combine 2 universe locations in one
			foreach($pat_locations_arr as $k_pat_arr => $v_pat_arr)
			{
				$locid = substr($v_pat_arr['location_id'], 0, 4);
				if($locid == "8888")
				{
					$patient_location_id = $v_pat_arr['location_id'];
					$z = 1;
					$cnt_number = 1;
					foreach($contactpersons_loc_array[$v_pat_arr['ipid']] as $k => $value_cnt)
					{
						if($value_cnt['isdelete'] == '0')
						{
							$pat_locarrayl[$v_pat_arr['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
							$cnt_number++;
						}
						else
						{
							$pat_locarrayl[$v_pat_arr['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
						}
						$z++;
					}
					$patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr] = $pat_locarrayl[$v_pat_arr['ipid']][$patient_location_id];
				}
				else
				{
					$patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_name'] = $master_locations[$v_pat_arr['location_id']]['location'];
				}
				$pat_locations_arr[$k_pat_arr]['location_name'] = $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_name'];
			}

			//get discharge methods
			$dis_methods = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid='" . $clientid . "'");
			$dis_methods->getSqlQuery();
			$dis_methods_array = $dis_methods->fetchArray();

			foreach($dis_methods_array as $k_d_method => $v_d_method)
			{
				$dis_methods_details[$v_d_method['id']] = $v_d_method;
			}

			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $discharged_ipids);
			$patientdisarray = $patientdis->fetchArray();

			foreach($patientdisarray as $k_dis => $v_dis)
			{
				$patients_discharges[$v_dis['ipid']][] = $v_dis;
			}

			//get only admission-discharge data in report period
			foreach($discharged_ipids as $k_dis_ipid => $v_dis_ipid)
			{
				$i = '0';
				foreach($patients_readmission_details[$v_dis_ipid]['dischargeDates'] as $k_dis_date => $v_dis_date)
				{
					$admission_date = date('Y-m-d', strtotime($patients_readmission_details[$v_dis_ipid]['admissionDates'][$k_dis_date]['date']));
					$discharge_date = date('Y-m-d', strtotime($v_dis_date['date']));
					if(in_array($discharge_date, $patient_discharged_dates[$v_dis_ipid]))
					{
						$patient_falls[$v_dis_ipid][$i]['admission'] = $admission_date;
						$patient_falls[$v_dis_ipid][$i]['discharge'] = $discharge_date;

						foreach($patients_discharges[$v_dis_ipid] as $k_pat_dis => $v_pat_dis)
						{
							if(strtotime($v_dis_date['date']) == strtotime($v_pat_dis['discharge_date']))
							{
								$patient_falls[$v_dis_ipid][$i]['discharge_method'] = $dis_methods_details[$v_pat_dis['discharge_method']]['description'];
							}
						}

						$i++;
					}
				}
			}

			//foreach to gather data locations per fall
			foreach($pat_locations_arr as $k_loc => $v_loc)
			{
				foreach($patient_falls[$v_loc['ipid']] as $k_fall => $v_fall)
				{
					$location_start = date('Y-m-d', strtotime($v_loc['valid_from']));

					if($v_loc['valid_till'] != '0000-00-00 00:00:00')
					{
						$location_end = date('Y-m-d', strtotime($v_loc['valid_till']));
					}
					else
					{
						$location_end = date('Y-m-d', time());
					}

					$fall_start = date('Y-m-d', strtotime($v_fall['admission']));
					$fall_end = date('Y-m-d', strtotime($v_fall['discharge']));


					if(Pms_CommonData::isintersected($location_start, $location_end, $fall_start, $fall_end))
					{
						$patient_falls[$v_loc['ipid']][$k_fall]['locations'][] = $v_loc;
					}
				}
			}


			//foreach to gather data sapv(s) per fall
			foreach($patients_sapv_arr as $k_sapv => $v_sapv)
			{
				$sapv_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$sapv_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				foreach($patient_falls[$v_sapv['ipid']] as $k_fall => $v_fall)
				{
					$fall_start = date('Y-m-d', strtotime($v_fall['admission']));
					$fall_end = date('Y-m-d', strtotime($v_fall['discharge']));


					if(Pms_CommonData::isintersected($sapv_start, $sapv_end, $fall_start, $fall_end))
					{
						if(empty($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr']))
						{
							$patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array();
							$patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'] = array();
						}

						$patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array_merge($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'], $v_sapv['verordnet_arr']);
						//$patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'][] = $family_doctors[$v_sapv['verordnet_von']]['last_name'] . ', ' . $family_doctors[$v_sapv['verordnet_von']]['first_name'];
						$patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'][] = $v_sapv['verordner'];
					}
					$patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array_unique(array_values($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr']));
					$patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'] = array_unique(array_values($patient_falls[$v_sapv['ipid']][$k_fall]['von_arr']));
				}
			}

			$x = '0';
			foreach($patient_falls as $k_ipid => $v_falls_data)
			{
				foreach($v_falls_data as $k_fall => $v_fall_data)
				{
					if(count($v_fall_data['locations']) > '0')
					{
						$master_data['data'][$x]['epid'] = strtoupper($patient_array[$k_ipid]['epid']);
						$master_data['data'][$x]['lastname'] = $patient_array[$k_ipid]['last_name'];
						$master_data['data'][$x]['firstname'] = $patient_array[$k_ipid]['first_name'];

						if(count($v_fall_data['sapv_arr']) > '0')
						{
							$master_data['data'][$x]['sapv_activity'] = implode(', ', $v_fall_data['sapv_arr']);
						}
						else
						{
							$master_data['data'][$x]['sapv_activity'] = '-';
						}

						if(count($v_fall_data['von_arr']) > '0')
						{
							$master_data['data'][$x]['sapv_by'] = implode('<br />', $v_fall_data['von_arr']);
						}
						else
						{
							$master_data['data'][$x]['sapv_by'] = '-';
						}

						if(count($v_fall_data['locations']) > '0')
						{
							foreach($v_fall_data['locations'] as $k_loc => $v_loc)
							{
								$master_data['data'][$x]['locations']['location_name'][] = $v_loc['location_name'];
								$master_data['data'][$x]['locations']['location_start'][] = date('d.m.Y', strtotime($v_loc['valid_from']));
							}
						}
						else
						{
							$master_data['data'][$x]['locations'] = array();
						}

						$master_data['data'][$x]['dischargedate'] = date('d.m.Y', strtotime($v_fall_data['discharge']));
						$master_data['data'][$x]['discharge_methode'] = $v_fall_data['discharge_method'];

						$master_data['location_count'][] = count($master_data['data'][$x]['locations']['location_name']);
						$x++;
					}
				}
			}

			$master_data['data'] = $this->array_sort($master_data['data'], 'epid', SORT_ASC);
			return $master_data;
		}

		public function hessen_statistics_fall_active($params)
		{
			// report id = 140
			// report_name = Hessen Statistik - Fall --- FOR ACTIVE PATIENTs
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$patient_master = new PatientMaster();

			//$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			//$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$s = array('%date_start%', '%date_end%');
			$r = array('`date`', '`date`');

			// 		$clientIpids = $this->getAllClientPatients($clientid, $whereepid);
			// 		$client_patients_ipids[] = '9999999';
			// 		foreach($clientIpids as $patient)
			// 		{
			// 			$client_patients_ipids[] = $patient['ipid'];
			// 		}
			//  get active patients
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);

			$active_ipids = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $p_details)
			{
				$patient_array [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patient_array [$p_details['details'] ['ipid']] ['last_name'] = $p_details['details'] ['last_name'];
				$patient_array [$p_details['details'] ['ipid']] ['first_name'] = $p_details['details'] ['first_name'];
				$patient_array [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patient_array [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				
				
				foreach($p_details['active_periods'] as $pid => $aperiod)
				{
				    $patient_array[$p_details['details'] ['ipid']]['adm'][] = date('Y-m-d', strtotime($aperiod['start']));
				    if($aperiod['end'] != "0000-00-00" && !empty($p_details['discharge']))
				    {
				        $patient_array[$p_details['details'] ['ipid']]['dis'][] = date('Y-m-d', strtotime($aperiod['end']));
				    }
				    else
				    {
				        $patient_array[$p_details['details'] ['ipid']]['dis'][] = "";
				    }
				}
				
			}
			
			if(empty($active_ipids))
			{
				$active_ipids[] = "XXXXXX";
			}
			//get ipids with discharge date(s) between the reported period
			$get_readm_patients = Doctrine_Query::create()
				->select('*')
				->from('PatientReadmission')
				->where('date_type = "2"')
				->andWhere('' . str_replace($s, $r, $active_cond['interval_sql']) . '')
				->whereIn('ipid', $active_ipids)
				->orderBy('date DESC');

			$patients_discharged_data = $get_readm_patients->fetchArray();

			// 		$discharged_ipids[] = '9999999999';
			foreach($patients_discharged_data as $k_discharge => $v_discharge_data)
			{
				$patient_discharged_dates[$v_discharge_data['ipid']][] = date('Y-m-d', strtotime($v_discharge_data['date']));
				// 			$discharged_ipids[] = $v_discharge_data['ipid'];
			}
			// 		$discharged_ipids = array_values(array_unique($discharged_ipids));
			//get all admission-discharge interval data for discharged patients in report period
			$patients_readmission_details = $patient_master->getTreatedDaysRealMultiple($active_ipids);

			//get sapv(s) in all falls
			$s_sapv = array('%date_start%', '%date_end%');
			$r_sapv = array('verordnungam', 'verordnungbis');
			$int_cond = str_replace($s_sapv, $r_sapv, $active_cond['interval_sql']);
			$sv_status = 'status != 1';
			
			$sapv_arr_details = array('1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');

			/*$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $active_ipids)
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0 and ((' . str_replace($s_sapv, $r_sapv, $active_cond['interval_sql']) . '))');
			$sapvarr = $patientsapv->fetchArray(); */
			$sapv = new SapvVerordnung();
			$sapvarr = $sapv->get_all_sapvs_new($active_ipids, $clientid,"",$int_cond, $sv_status);
						
			foreach($sapvarr as $k_sapv => $v_sapv)
			{
				$sapv_arr['verordnet_arr'] = explode(',', $v_sapv['verordnet']);

				foreach($sapv_arr['verordnet_arr'] as $k_vv => $v_vv)
				{
					$v_sapv['verordnet_arr'][] = $sapv_arr_details[$v_vv];
				}
				$v_sapv['verordnet_arr'] = array_values(array_unique($v_sapv['verordnet_arr']));

				$patients_sapv_arr[] = $v_sapv;

				//$sapv_vons_str .= '"' . $v_sapv['verordnet_von'] . '",' ;
			}

			//$family_doctors = FamilyDoctor::getFamilyDocMultiple(substr($sapv_vons_str, 0, -1));

			//get contact person
			$contact = new ContactPersonMaster();
			$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($active_ipids, false, false);

			//get patient location in report period
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $active_cond['interval_location_sql_qtz']));

			//get patient locations and ipids based on master hospital ids and into selected time period
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('' . $time_interval . '')
				->andWhereIn('ipid', $active_ipids)
				->orderBy('valid_from ASC');
			$pat_locations_arr = $locations->fetchArray();

			$pat_loc_ids[] = '99999999999';
			foreach($pat_locations_arr as $k_p_loc => $v_p_loc)
			{
				$pat_loc_ids[] = $v_p_loc['location_id'];
			}

			//get master locations data
			$floc = Doctrine_Query::create()
				->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->whereIn("id", $pat_loc_ids)
				->andWhere('isdelete=0')
				->orderBy('location ASC');
			$locationdata = $floc->fetchArray();

			foreach($locationdata as $k_loc => $v_loc)
			{
				$master_locations[$v_loc['id']] = $v_loc;
			}

			//za foreach to combine 2 universe locations in one
			foreach($pat_locations_arr as $k_pat_arr => $v_pat_arr)
			{
				$locid = substr($v_pat_arr['location_id'], 0, 4);
				if($locid == "8888")
				{
					$patient_location_id = $v_pat_arr['location_id'];
					$z = 1;
					$cnt_number = 1;
					foreach($contactpersons_loc_array[$v_pat_arr['ipid']] as $k => $value_cnt)
					{
						if($value_cnt['isdelete'] == '0')
						{
							$pat_locarrayl[$v_pat_arr['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
							$cnt_number++;
						}
						else
						{
							$pat_locarrayl[$v_pat_arr['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
						}
						$z++;
					}
					$patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr] = $pat_locarrayl[$v_pat_arr['ipid']][$patient_location_id];
				}
				else
				{
					$patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_name'] = $master_locations[$v_pat_arr['location_id']]['location'];
				}
				$pat_locations_arr[$k_pat_arr]['location_name'] = $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_name'];
			}

			//get discharge methods
			$dis_methods = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid='" . $clientid . "'");
			$dis_methods->getSqlQuery();
			$dis_methods_array = $dis_methods->fetchArray();

			foreach($dis_methods_array as $k_d_method => $v_d_method)
			{
				$dis_methods_details[$v_d_method['id']] = $v_d_method;
			}

			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $active_ipids);
			$patientdisarray = $patientdis->fetchArray();

			foreach($patientdisarray as $k_dis => $v_dis)
			{
				$patients_discharges[$v_dis['ipid']][] = $v_dis;
			}

			//get only admission-discharge data in report period
			foreach($active_ipids as $k_dis_ipid => $v_dis_ipid)
			{
				$i = '0';
				foreach($patients_readmission_details[$v_dis_ipid]['admissionDates'] as $k_dis_date => $v_dis_date)
				{
					$admission_date = date('Y-m-d', strtotime($v_dis_date['date']));
					$patient_falls[$v_dis_ipid][$i]['admission'] = $admission_date;

					if($patients_readmission_details[$v_dis_ipid]['dischargeDates'][$k_dis_date]['date'])
					{
						$discharge_date = date('Y-m-d', strtotime($patients_readmission_details[$v_dis_ipid]['dischargeDates'][$k_dis_date]['date']));
					}
					else 
					{
						$discharge_date = "";
					}
					$patient_falls[$v_dis_ipid][$i]['discharge'] = $discharge_date;

					if(in_array($discharge_date, $patient_discharged_dates[$v_dis_ipid]))
					{

						foreach($patients_discharges[$v_dis_ipid] as $k_pat_dis => $v_pat_dis)
						{
							if(strtotime($patients_readmission_details[$v_dis_ipid]['dischargeDates'][$k_dis_date]['date']) == strtotime($v_pat_dis['discharge_date']))
							{
								$patient_falls[$v_dis_ipid][$i]['discharge_method'] = $dis_methods_details[$v_pat_dis['discharge_method']]['description'];
							}
						}

						$i++;
					}
				}
			}

			
			//foreach to gather data locations per fall
			foreach($pat_locations_arr as $k_loc => $v_loc)
			{
				foreach($patient_falls[$v_loc['ipid']] as $k_fall => $v_fall)
				{
					$location_start = date('Y-m-d', strtotime($v_loc['valid_from']));

					if($v_loc['valid_till'] != '0000-00-00 00:00:00')
					{
						$location_end = date('Y-m-d', strtotime($v_loc['valid_till']));
					}
					else
					{
						$location_end = date('Y-m-d', time());
					}

					$fall_start = date('Y-m-d', strtotime($v_fall['admission']));

					if($v_fall['discharge'])
					{
						$fall_end = date('Y-m-d', strtotime($v_fall['discharge']));
					}
					else
					{
						$fall_end = date('Y-m-d', strtotime(end($period['end'])));
					}


					if(Pms_CommonData::isintersected($location_start, $location_end, $fall_start, $fall_end))
					{
						$patient_falls[$v_loc['ipid']][$k_fall]['locations'][] = $v_loc;
					}
				}
			}


			//foreach to gather data sapv(s) per fall
			foreach($patients_sapv_arr as $k_sapv => $v_sapv)
			{
				$sapv_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$sapv_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				foreach($patient_falls[$v_sapv['ipid']] as $k_fall => $v_fall)
				{
					$fall_start = date('Y-m-d', strtotime($v_fall['admission']));
					// 				$fall_end = date('Y-m-d', strtotime($v_fall['discharge']));

					if($v_fall['discharge'])
					{
						$fall_end = date('Y-m-d', strtotime($v_fall['discharge']));
					}
					else
					{
						$fall_end = date('Y-m-d', strtotime(end($period['end'])));
					}
					if(Pms_CommonData::isintersected($sapv_start, $sapv_end, $fall_start, $fall_end))
					{
						if(empty($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr']))
						{
							$patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array();
							$patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'] = array();
						}

						$patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array_merge($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'], $v_sapv['verordnet_arr']);
						//$patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'][] = $family_doctors[$v_sapv['verordnet_von']]['last_name'] . ', ' . $family_doctors[$v_sapv['verordnet_von']]['first_name'];
						$patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'][] = $v_sapv['verordner'];
					}
					$patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array_unique(array_values($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr']));
					$patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'] = array_unique(array_values($patient_falls[$v_sapv['ipid']][$k_fall]['von_arr']));
				}
			}
			/* ------------------------------------ DISPLAY DATA -------------------------------------- */
			$x = '0';
			foreach($patient_falls as $k_ipid => $v_falls_data)
			{
				foreach($v_falls_data as $k_fall => $v_fall_data)
				{
					if(count($v_fall_data['locations']) > '0')
					{
						$master_data['data'][$x]['epid'] = strtoupper($patient_array[$k_ipid]['epid']);
						$master_data['data'][$x]['lastname'] = $patient_array[$k_ipid]['last_name'];
						$master_data['data'][$x]['firstname'] = $patient_array[$k_ipid]['first_name'];

						if(count($v_fall_data['sapv_arr']) > '0')
						{
							$master_data['data'][$x]['sapv_activity'] = implode(', ', $v_fall_data['sapv_arr']);
						}
						else
						{
							$master_data['data'][$x]['sapv_activity'] = '-';
						}

						if(count($v_fall_data['von_arr']) > '0')
						{
							$master_data['data'][$x]['sapv_by'] = implode('<br />', $v_fall_data['von_arr']);
						}
						else
						{
							$master_data['data'][$x]['sapv_by'] = '-';
						}

						if(count($v_fall_data['locations']) > '0')
						{
							foreach($v_fall_data['locations'] as $k_loc => $v_loc)
							{
								$master_data['data'][$x]['locations']['location_name'][] = $v_loc['location_name'];
								$master_data['data'][$x]['locations']['location_start'][] = date('d.m.Y', strtotime($v_loc['valid_from']));
							}
						}
						else
						{
							$master_data['data'][$x]['locations'] = array();
						}
						if($v_fall_data['discharge'])
						{
							$master_data['data'][$x]['dischargedate'] = date('d.m.Y', strtotime($v_fall_data['discharge']));
							$master_data['data'][$x]['discharge_methode'] = $v_fall_data['discharge_method'];
						}
						else
						{
							$master_data['data'][$x]['dischargedate'] = "-";
							$master_data['data'][$x]['discharge_methode'] = "-";
						}

						$master_data['location_count'][] = count($master_data['data'][$x]['locations']['location_name']);
						$x++;
					}
				}
			}

			$master_data['data'] = $this->array_sort($master_data['data'], 'epid', SORT_ASC);
			return $master_data;
		}

		public function aktuellepatienten_sinsheim($params)
		{
			// report_id = 118
			// report_name =  Aktuelle Patienten Sinsheim
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$ipids_array[] = '9999999999';
			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$ipids_array[] = $ipid;
					$i++;
				}

				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				
				//ISPC-2045 - get kontact-phone
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();

				foreach($patientexec as $patient)
				{

					$patientinfo[$patient['ipid']]['full_addresss'] = '';
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['full_addresss'] .= $patient['street1'] . '<br />';
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['full_addresss'] .= $patient['zip'] . ' ';
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['full_addresss'] .= $patient['city'] . '';
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}

					if($ptarray[0]['last_update'] != '0000-00-00 00:00:00')
					{
						$patientinfo[$patient['ipid']]['last_update_date'] = date('d.m.Y H:i', strtotime($patient['last_update']));
					}
					else
					{
						$patientinfo[$patient['ipid']]['last_update_date'] = " - ";
					}
				}

				/* -------------------------Get Patients - Contact persons------------------------------------------ */

				$contact_persons = array();
				$contact = new ContactPersonMaster();
				$contactpersons_array = $contact->getContactPersonsByIpids($ipids_array);

				foreach($contactpersons_array as $contact_item)
				{
					$contact_persons[$contact_item['ipid']] = '';
					$contact_persons_phone[$contact_item['ipid']] = '';

					$incr = (count($contact_pers[$contact_item['ipid']]) + 1);
					if(strlen($contact_item['cnt_last_name']) > 0 || strlen($contact_item['cnt_last_name']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $incr . '. ' . $contact_item['cnt_last_name'] . ',';
					}

					if(strlen($contact_item['cnt_first_name']) > 0 || strlen($contact_item['cnt_first_name']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_first_name'] . ' ';
					}

					if(strlen($contact_item['cnt_street1']) > 0 || strlen($contact_item['cnt_street1']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= '<br />' . $contact_item['cnt_street1'] . '<br />';
					}

					if(strlen($contact_item['cnt_zip']) > 0 || strlen($contact_item['cnt_zip']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_zip'] . ' ';
					}

					if(strlen($contact_item['cnt_city']) > 0 || strlen($contact_item['cnt_city']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_city'] . '<br />';
					}

					if(strlen($contact_item['cnt_phone']) > 0 || strlen($contact_item['cnt_phone']) > 0)
					{
						$contact_persons[$contact_item['ipid']] .= $contact_item['cnt_phone'];
					}

					$contact_pers[$contact_item['ipid']][] = $contact_persons[$contact_item['ipid']];
				}

				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}

				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}

				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}

				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}

				//get active sapv
				$dropSapv = Doctrine_Query::create()
					->select('*, GROUP_CONCAT(verordnet) as vero')
					->from('SapvVerordnung')
					->where('ipid IN (' . $ipidsactive . ') and isdelete=0 and status != 1 ')
					->andWhere("verordnungbis >='" . date('Y-m-d', mktime(0, 0, 0, date('m'), date('d'), date('Y'))) . " 00:00:00'")
					->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();

				foreach($droparray as $verord)
				{
					$sapv = explode(',', $verord['vero']);
					$s = max($sapv);
					if($s == "1")
					{
						$sapv_value[$verord['ipid']] = "BE";
						$sapv_value[$verord['ipid']] .= ' ' . date('d.m.Y', strtotime($verord['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($verord['verordnungbis']));
					}
					elseif($s == "2")
					{
						$sapv_value[$verord['ipid']] = "KO";
						$sapv_value[$verord['ipid']] .= ' ' . date('d.m.Y', strtotime($verord['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($verord['verordnungbis']));
					}
					elseif($s == "3")
					{
						$sapv_value[$verord['ipid']] = "TV";
						$sapv_value[$verord['ipid']] .= ' ' . date('d.m.Y', strtotime($verord['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($verord['verordnungbis']));
					}
					elseif($s == "4")
					{
						$sapv_value[$verord['ipid']] = "VO";
						$sapv_value[$verord['ipid']] .= ' ' . date('d.m.Y', strtotime($verord['verordnungam'])) . ' - ' . date('d.m.Y', strtotime($verord['verordnungbis']));
					}
					else
					{
						$sapv_value[$verord['ipid']] = "-";
					}
				}

				foreach($patientMasterDetails as $keypatient => $patient)
				{
					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'];
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'];
					$MasterData['data'][$keypatient]['pat_addresse'] = $patientinfo[$patient['ipid']]['full_addresss'];
					$MasterData['data'][$keypatient]['contact_number'] = $patientinfo[$keypatient]['kontactnumber'];
					$MasterData['data'][$keypatient]['contactperson'] = ($contact_pers[$keypatient] ? implode("<br />", $contact_pers[$keypatient]) : ' ');
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'];
					$MasterData['data'][$keypatient]['verordnungen'] = $sapv_value[$keypatient];
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient];
					$MasterData['data'][$keypatient]['last_contact'] = $patientinfo[$keypatient]['last_update_date'];
					$MasterData['data'][$keypatient]['notes'] = ' ';
				}
				return $MasterData;
			}
		}

		public function admission_statistics($params)
		{
			// report_id = 119
			// report_name = Neuaufnahmen Statistik
			$patientmaster = new PatientMaster();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];
			$active_patients = array();


			$report_period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$active_patients = $this->getClientPatients($clientid, $whereepid);

			//get genders
			$genders = Pms_CommonData::getGender();

			$pm = new PatientMaster();
			$treated_days = $pm->getTreatedDaysRealMultiple($active_patients);
			foreach($treated_days as $k_ipid => $v_patient)
			{
				if(!empty($v_patient['admissionDates']))
				{
					//get from admisison
					if(count($v_patient['admissionDates']) >= '1')
					{

						$patient_admissions[$k_ipid][] = $v_patient['admissionDates'][0]['date'];
					}

					if(!empty($v_patient['dischargeDates'][0]))
					{

						$patient_discharges[$k_ipid][] = $v_patient['dischargeDates'][0]['date'];
					}
					else
					{
						$patient_discharges[$k_ipid][] = date('Y-m-d', time());
					}
				}
				else
				{
					//get old (prev readmission system) data
					$patient_admissions[$k_ipid][] = $v_patient['admission_date'];
					$patient_discharges[$k_ipid][] = $v_patient['discharge_date'];
				}
			}
			$patient_ipids[] = '999999999999';

			foreach($patient_admissions as $ipid => $pat_adm)
			{
				foreach($pat_adm as $k_admission => $v_admision)
				{
					if($k_admission == '0') //check only if first admission is in period
					{
						$pat_adm_dates[$ipid] = date('d.m.Y', strtotime($v_admision));
						foreach($report_period['start'] as $k_start => $v_start)
						{
// 						if(Pms_CommonData::isintersected(strtotime($v_admision), strtotime($v_admision), strtotime($v_start), strtotime($report_period['end'][$k_start])))
							if(Pms_CommonData::isintersected(strtotime(date('d-m-Y', strtotime($v_admision))), strtotime(date('d-m-Y', strtotime($v_admision))), strtotime($v_start), strtotime($report_period['end'][$k_start])))
							{
								$patient_ipids[] = $ipid;
							}
						}
					}
				}
			}

			//get days in between only for applicable patients
			foreach($treated_days as $k_treated_ipid => $v_treated_arr)
			{
				if(in_array($k_treated_ipid, $patient_ipids))
				{
					if(!empty($v_treated_arr['admissionDates']))
					{
						if(empty($real_treated_days[$k_treated_ipid]))
						{
							$real_treated_days[$k_treated_ipid] = array();
						}

						foreach($v_treated_arr['admissionDates'] as $k_adm => $v_adm)
						{
							$start = $v_adm['date'];

							if(!empty($v_treated_arr['dischargeDates'][$k_adm]))
							{
								$end = $v_treated_arr['dischargeDates'][$k_adm]['date'];
							}
							else
							{
								$end = date('Y-m-d', time());
							}

							$real_treated_days[$k_treated_ipid] = array_merge($real_treated_days[$k_treated_ipid], $patientmaster->getDaysInBetween($start, $end));
						}
					}
					else
					{
						$start = $v_treated_arr['admission_date'];
						$end = $v_treated_arr['discharge_date'];

						if(empty($real_treated_days[$k_treated_ipid]))
						{
							$real_treated_days[$k_treated_ipid] = array();
						}

						$real_treated_days[$k_treated_ipid] = array_merge($real_treated_days[$k_treated_ipid], $patientmaster->getDaysInBetween($start, $end));
					}
				}
			}
			//get patients master data
			$all_patient_data = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('ipid', $patient_ipids)
				->andWhere('isdelete = 0');
			$all_patient_data->leftJoin("p.EpidIpidMapping e");
			$all_patient_data->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $clientid);

			$patients_data_res = $all_patient_data->fetchArray();


			foreach($patients_data_res as $k_pat_det => $v_pat_det)
			{
				$patient_details[$v_pat_det['ipid']] = $v_pat_det;
			}
			/* ------------------------- Get Highest Verordnet ------------------------------------------ */
			$highest_sapv_values = $this->get_highest_sapv($patient_ipids);
			/* ------------------------- Get Referred By ------------------------------------------ */
			$referred_arr = PatientReferredBy::getPatientReferredByreport($clientid, 0);

			$referred_by_name[0] = 'keine Angabe';
			foreach($referred_arr as $k_ref => $refname)
			{
				$referred_by_name[$refname['id']] = $refname['referred_name'];
			}

			/* -------------------------Get Locations Related Columns ------------------------------------------ */
			$hospitalids = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where('isdelete = 0')
				->andWhere('client_id ="' . $clientid . '"');
			$hosparray = $hospitalids->fetchArray();

			foreach($hosparray as $k_hosp => $v_hosp)
			{
				if($v_hosp['location_type'] == '1')
				{
					$hosp_ids[] = $v_hosp['id'];
				}

				$all_master_locations[$v_hosp['id']] = $v_hosp;
			}

			//get patient locations and ipids based on master hospital ids and into selected time period
			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->andWhereIn('ipid', $patient_ipids)
				->andWhere('location_id != 0')
				->andWhere('isdelete = 0')
				->andWhere('ipid != ""')
				->orderBy('valid_from,id ASC');
			$locationsarr = $locations->fetchArray();

			foreach($locationsarr as $location)
			{
				$start = date('Y-m-d', strtotime($location['valid_from']));

				if($location['valid_till'] != '0000-00-00 00:00:00')
				{
					$end = date('Y-m-d', strtotime($location['valid_till']));
				}
				else
				{
					$end = date('Y-m-d', time());
				}
				//get hospital location duration
				if(in_array($location['location_id'], $hosp_ids))
				{
					//get all hospital admissions
					$hospital_locations[$location['ipid']][] = $all_master_locations[$location['location_id']]['location'];

					if(empty($patient_hosp_days[$location['ipid']]))
					{
						$patient_hosp_days[$location['ipid']] = array();
					}

					$patient_hosp_days[$location['ipid']] = array_merge($patient_hosp_days[$location['ipid']], $patientmaster->getDaysInBetween($start, $end));
					$patient_hosp_days[$location['ipid']] = array_values(array_unique($patient_hosp_days[$location['ipid']]));
				}

				//get admission location(s)
				$r1start = $r1end = date('Y-m-d', strtotime($treated_days[$location['ipid']]['admission_date']));

				if(Pms_CommonData::isintersected($r1start, $r1end, $start, $end) && count($admission_location[$location['ipid']]) == '0')
				{
					$admission_location[$location['ipid']] = $all_master_locations[$location['location_id']]['location'];
				}
				//get all patients locations
				$all_patient_locations[$location['ipid']][] = $location;
			}
			/* -------------------------Get Client Pflegedienst------------------------------------------ */
			$c_pflege = Doctrine_Query::create()
				->select("*")
				->from('Pflegedienstes')
				->where('clientid = ' . $clientid);
			$c_pflege_res = $c_pflege->fetchArray();

			foreach($c_pflege_res as $k_c_pflege => $v_c_pflege)
			{
				$pflegedienste[$v_c_pflege['id']] = $v_c_pflege['nursing'];
			}

			/* -------------------------Get Patient Pflegedienst------------------------------------------ */
			$p_pflege = Doctrine_Query::create()
				->select("*")
				->from('PatientPflegedienste p')
				->whereIn('p.ipid', $patient_ipids)
				->andwhere('p.isdelete = 0');
			$p_pflege_res = $p_pflege->fetchArray();

			$ppfle = array();
			foreach($p_pflege_res as $k_p_pflege => $v_p_pflege)
			{
				$ppfle[$v_p_pflege['ipid']][] = $pflegedienste[$v_p_pflege['pflid']];
			}

			/* -------------------------Get Diagnosis HD (main)------------------------------------------ */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($clientid, $abb2);

			$typeid[] = '99999999';
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid[] = $valdia['id'];
			}
			$abbr = "'ND'";
			$ddarr_nd = $dg->getDiagnosisTypes($clientid, $abbr);

			$typeid_nd[] = '99999999';
			foreach($ddarr_nd as $nkey => $nvaldia)
			{
				$typeid_nd[] = $nvaldia['id'];
			}

			/* -------------------------Get Patients - Diagnosis data------------------------------------------ */
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->get_multiple_patients_diagnosis($patient_ipids, $typeid);
			$dianoarray_nd = $patdia->get_multiple_patients_diagnosis($patient_ipids, $typeid_nd);

			foreach($dianoarray as $diangosis)
			{
				$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
			}
			foreach($diagnosisarr as $d_key => $d_val)
			{
				$diagnosisarr[$d_key] = implode(", ", $d_val);
			}

			foreach($dianoarray_nd as $diangosis_nd)
			{
				$diagnosisarr_nd[$diangosis_nd['ipid']][] = $diangosis_nd['diagnosis'];
			}
			foreach($diagnosisarr_nd as $nd_key => $nd_val)
			{
				$diagnosisarr_nd[$nd_key] = implode(", ", $nd_val);
			}

			/* ----------------- Get discharge methods dead  -------------------- */
			$distod = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("isdelete = 0  and clientid=" . $clientid . " and (abbr = 'TOD' or abbr = 'tod' or abbr='Tod' or abbr='Verstorben' or abbr='verstorben'  or abbr='VERSTORBEN')");
			$distod->getSqlQuery();
			$tod_array = $distod->fetchArray();

			$tod_ids[] = "99999999999999";
			foreach($tod_array as $k_tod => $v_tod)
			{
				$tod_ids[] = $v_tod['id'];
			}
			$patientdis = Doctrine_Query::create()
				->select("*")
				->from('PatientDischarge')
				->whereIn('ipid', $patient_ipids)
				->andWhereIn('discharge_method', $tod_ids)
				->andWhere('isdelete = 0');
			$patientdisarray = $patientdis->fetchArray();

			$dis_locations_ids[] = '999999999';
			foreach($patientdisarray as $k_pat_dis => $v_pat_dis)
			{
				$discharge_locations[$v_pat_dis['ipid']] = $v_pat_dis['discharge_location'];
				$dis_locations_ids[] = $v_pat_dis['discharge_location'];
			}

			$dis_loc = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as dislocation")
				->from("DischargeLocation")
				->whereIn('id', $dis_locations_ids);
			$discharged_locations_arr = $dis_loc->fetchArray();

			foreach($discharged_locations_arr as $k_loc => $v_loc)
			{
				$dis_locations[$v_loc['id']] = $v_loc;
			}

			###########################
			$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $patient_ipids;
			$active_patient_details = Pms_CommonData::patients_days($conditions);
// 		print_R($active_patient_details); exit;
			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];

				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days'] = $p_details['hospital']['real_days'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}
			###########################
// 		print_R($patientDetails); exit;
			unset($patient_ipids[array_search('999999999999', $patient_ipids)]);
			$median_arr = array();
			foreach($patient_ipids as $k_patient => $v_patient_ipid)
			{
				$patient_hosp_days_intersected = array();
				$master_data['data'][$v_patient_ipid]['epid'] = $patient_details[$v_patient_ipid]['EpidIpidMapping']['epid'];
				$master_data['data'][$v_patient_ipid]['lastname'] = $patient_details[$v_patient_ipid]['last_name'];
				$master_data['data'][$v_patient_ipid]['firstname'] = $patient_details[$v_patient_ipid]['first_name'];
				$master_data['data'][$v_patient_ipid]['verordnungen'] = $highest_sapv_values[$v_patient_ipid];
				$master_data['data'][$v_patient_ipid]['admissiondate'] = $pat_adm_dates[$v_patient_ipid];
				$master_data['data'][$v_patient_ipid]['referredby'] = $referred_by_name[$patient_details[$v_patient_ipid]['referred_by']];
				//				treatment days - hospital days
				if($_REQUEST['dbgz'] == '1')
				{
					$patient_hosp_days_intersected = array_intersect($real_treated_days[$v_patient_ipid], $patient_hosp_days[$v_patient_ipid]);
					$patient_hosp_days_intersected = array_values(array_unique($patient_hosp_days_intersected));
					$master_data['data'][$v_patient_ipid]['overall_treateddays'] = '(' . ($treated_days[$v_patient_ipid]['realActiveDays'] - sizeof($patient_hosp_days_intersected)) . ')' . $treated_days[$v_patient_ipid]['realActiveDays'] . ' - ' . sizeof($patient_hosp_days_intersected);
				}
				else
				{
// 				$patient_hosp_days_intersected = array_intersect($real_treated_days[$v_patient_ipid], $patient_hosp_days[$v_patient_ipid]);
// 				$patient_hosp_days_intersected = array_values(array_unique($patient_hosp_days_intersected));
// 				$master_data['data'][$v_patient_ipid]['overall_treateddays'] = ($treated_days[$v_patient_ipid]['realActiveDays'] - sizeof($patient_hosp_days_intersected));
// 				$master_data['data'][$v_patient_ipid]['overall_treateddays'] = $patientDetails [ $v_patient_ipid ]['active_days_no_hospital_days'].'<br />('. ($treated_days[$v_patient_ipid]['realActiveDays']-sizeof($patient_hosp_days_intersected)) .')'.$treated_days[$v_patient_ipid]['realActiveDays'].' - '.sizeof($patient_hosp_days_intersected); ;
					$master_data['data'][$v_patient_ipid]['overall_treateddays'] = $patientDetails [$v_patient_ipid]['active_days_no_hospital_days'];
				}

				$master_data['data'][$v_patient_ipid]['patient_zip'] = $patient_details[$v_patient_ipid]['zip'];
				$master_data['data'][$v_patient_ipid]['gender'] = $genders[$patient_details[$v_patient_ipid]['sex']];

				//diagnosis
				$master_data['data'][$v_patient_ipid]['main_diagnosis'] = $diagnosisarr[$v_patient_ipid];
				$master_data['data'][$v_patient_ipid]['side_diagnosis'] = $diagnosisarr_nd[$v_patient_ipid];

				//hospital admissions
				$master_data['data'][$v_patient_ipid]['hosp_admissions'] = count($hospital_locations[$v_patient_ipid]);
				//pflegedienste
				$master_data['data'][$v_patient_ipid]['nursing_service'] = implode(',', $ppfle[$v_patient_ipid]);
				//first admission location
				$master_data['data'][$v_patient_ipid]['admission_location'] = $admission_location[$v_patient_ipid];
				//dead discharge location
				$master_data['data'][$v_patient_ipid]['die_location'] = $dis_locations[$discharge_locations[$v_patient_ipid]]['dislocation'];
				$median_arr[] = $master_data['data'][$v_patient_ipid]['overall_treateddays'];
			}
			$median = Pms_CommonData::calculate_median($median_arr);
			$master_data['extra']['median'] = $median;
			return $master_data;
		}

		private function get_highest_sapv($ipids, $period_sql = false, $all_verordnets = false)
		{
			$ipids[] = '999999999999';
			$sapv = Doctrine_Query::create()
				->select('*, GROUP_CONCAT(verordnet) as all_verodnets')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids)
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->groupBy('ipid');
			if($period_sql)
			{
				$sapv->andWhere('((' . $period_sql . '))');
			}
			$sapv_res = $sapv->fetchArray();
			$sapvs_arr = Pms_CommonData::getSapvCheckBox(true);

			foreach($sapv_res as $k_verord => $verord)
			{
				if($all_verordnets)
				{
					$splited_vv[$verord['ipid']] = explode(',', $verord['all_verodnets']);

					foreach($splited_vv[$verord['ipid']] as $k_vv => $v_vv)
					{
						if(array_key_exists($v_vv, $sapvs_arr))
						{
							$sapv_verordnets_arr[$verord['ipid']][] = $sapvs_arr[$v_vv];
						}
					}
					asort($sapv_verordnets_arr[$verord['ipid']]);
					$sapv_verordnets_arr[$verord['ipid']] = array_values(array_unique($sapv_verordnets_arr[$verord['ipid']]));
					$sapv_value[$verord['ipid']] = implode(',', $sapv_verordnets_arr[$verord['ipid']]);
				}
				else
				{
					$max_sapv = max(explode(',', $verord['all_verodnets']));
					if(array_key_exists($max_sapv, $sapvs_arr))
					{
						$sapv_value[$verord['ipid']] = $sapvs_arr[$max_sapv];
					}
				}
			}

			foreach($ipids as $k_ipid => $v_ipid)
			{
				if(array_key_exists($v_ipid, $sapv_value))
				{
					$final_ipids_sapv[$v_ipid] = $sapv_value[$v_ipid];
				}
				else
				{
					$final_ipids_sapv[$v_ipid] = '-';
				}
			}
			return $final_ipids_sapv;
		}

		public function zapvtmverbrauch($params)
		{
			// report id=121
			// ZAPV BTM Verbrauch

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			// epids  asigned to user selected from report parameters

			$whereepid = $this->getDocCondition();

			$epid_ipid = Doctrine_query::create()
				->select('ipid')
				->from('EpidIpidMapping')
				->where($whereepid . 'clientid=' . $clientid);
			$ipids = $epid_ipid->fetchArray();

			foreach($ipids as $k => $ipid)
			{
				$patient_ipid[] = $ipid['ipid'];
			}

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $patient_ipid;
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);



			$ipidarr = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
			}


			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}
			$qn = Doctrine_Query::create()
				->select('*')
				->from('User');
			$userarr = $qn->fetchArray();

			foreach($userarr as $k => $user)
			{
				$username[$user['id']] = $user['first_name'] . " " . $user['last_name'];
			}

			$qpa1 = Doctrine_Query::create()
				->select("id, user_id, ipid, course_date, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong != 1')
				->andWhereIn('ipid', $ipidarr)
				->andWhere('course_type = ? ' , Pms_CommonData::aesEncrypt("XO") )
				->andWhere('(' . str_replace('%date%', 'course_date', $active_cond['date_sql']) . ')')
				->andWhere('source_ipid = ""');
			$allrpatients = $qpa1->fetchArray();


			foreach($allrpatients as $k => $p_course)
			{
				$master_data['data'][$p_course['id']]['username'] = $username[$p_course['user_id']];
				$master_data['data'][$p_course['id']]['epid'] = $patientDetails[$p_course['ipid']]['epid'];
				$master_data['data'][$p_course['id']]['firstname'] = $patientDetails[$p_course['ipid']]['firstname'];
				$master_data['data'][$p_course['id']]['lastname'] = $patientDetails[$p_course['ipid']]['surname'];
				$master_data['data'][$p_course['id']]['birthd'] = date('d.m.Y', strtotime($patientDetails[$p_course['ipid']]['dateofbirth']));
				$master_data['data'][$p_course['id']]['entry_date'] = date('d.m.Y', strtotime($p_course['course_date']));
				$master_data['data'][$p_course['id']]['course'] = $p_course['course_title'];
			}

			return $master_data;
		}

		public function munster_a($params)
		{

			//report_id=122
			// report_name=Munster 1

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$whereepid = $this->getDocCondition();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid,p.familydoc_id,p.birthd,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= 'convert(AES_DECRYPT(p.kontactnumber,"' . Zend_Registry::get('salt') . '") using latin1) as kontactnumber,';
			/* $conditions['periods'] = $report_period_array;
			  $conditions['client'] = $clientid;
			  $conditions['ipids'] = $patient_ipid; */


			$ipidarr = $this->getActiveIpids();

			if(empty($ipidarr))
			{
				$ipidarr[] = '9999999999';
			}
			/* print_r($ipidarr);
			  exit; */
			$active_patients = Doctrine_Query::create()
				->select($sql)
				->from('PatientMaster p')
				->wherein('ipid', $ipidarr);
			$active_patients->leftJoin("p.EpidIpidMapping e");
			$active_patient_details = $active_patients->fetchArray();

			foreach($active_patient_details as $ipid => $p_details)
			{

				$patient_details [$p_details ['ipid']] ['epid'] = $p_details ['EpidIpidMapping'] ['epid'];
				$patient_details [$p_details ['ipid']] ['ipid'] = $p_details ['ipid'];
				$patient_details [$p_details ['ipid']] ['surname'] = $p_details ['last_name'];
				$patient_details [$p_details ['ipid']] ['firstname'] = $p_details ['first_name'];
				$patient_details [$p_details ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['birthd']));
				$patient_details [$p_details ['ipid']] ['kontactnumber'] = $p_details ['kontactnumber'];
				$patient_details [$p_details ['ipid']] ['familydoc_id'] = $p_details ['familydoc_id'];
			}


			$locmas = Doctrine_Query::create()
				->select('*,AES_DECRYPT(location,"' . Zend_Registry::get('salt') . '") as location')
				->from('Locations')
				->where("client_id='" . $clientid . "'")
				->andWhere('isdelete="0"')
				->orderBy('1 DESC');
			$locsmas = $locmas->fetchArray();


			foreach($locsmas as $k => $locdetails)
			{
				$location_details[$locdetails['id']] ['location_name'] = $locdetails['location'];
				$location_details[$locdetails['id']] ['adress'] = $locdetails['street'] . "<br /> " . $locdetails['zip'] . " " . $locdetails['city'];
				$location_details[$locdetails['id']] ['details'] = $locdetails['location'] . "<br />" . $locdetails['street'] . "<br /> " . $locdetails['zip'] . " " . $locdetails['city'];
			}

			// get locations active
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->wherein('ipid', $ipidarr)
				->andWhere('isdelete="0"')
				->andWhere("valid_till='0000-00-00 00:00:00'")
				->orderBy('id DESC');
			$patlocs = $patloc->fetchArray();

			foreach($patlocs as $kl => $location)
			{
				$patientlocation[$location['ipid']]['location_detail'] = $location_details[$location['location_id']] ['details'];
			}


			$famdoc = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $clientid . "'");
			$fdocdetails = $famdoc->fetchArray();


			foreach($fdocdetails as $k => $patfamdoc)
			{
				$patient_familydoc[$patfamdoc['id']]['practice'] = $patfamdoc['practice'];
				$patient_familydoc[$patfamdoc['id']]['first_name'] = $patfamdoc['first_name'];
				$patient_familydoc[$patfamdoc['id']]['last_name'] = $patfamdoc['last_name'];
				$patient_familydoc[$patfamdoc['id']]['adress'] = $patfamdoc['street1'] . "<br />" . $patfamdoc['zip'] . "<br />" . $patfamdoc['city'];
				$patient_familydoc[$patfamdoc['id']]['details'] = $patfamdoc['practice'] . "<br />" . $patfamdoc['first_name'] . " " . $patfamdoc['last_name'] . "<br />" . $patfamdoc['street1'] . "<br />" . $patfamdoc['zip'] . "<br />" . $patfamdoc['city'] . "<br />" . $patfamdoc['phone_practice'];
			}

			//Client Pflegedienste
			$clpfle = Doctrine_Query::create()
				->select("*")
				->from('Pflegedienstes')
				->where('clientid = ' . $clientid);
			$clpflearray = $clpfle->fetchArray();

			foreach($clpflearray as $val)
			{
				$pflegedienste[$val['id']]['id'] = $val['id'];
				$pflegedienste[$val['id']]['name'] = $val['nursing'];
			}


			$patientpfle = Doctrine_Query::create()
				->select("*")
				->from('PatientPflegedienste p')
				->whereIn('p.ipid', $ipidarr)
				->andwhere('p.isdelete = 0');
			$patientpflearray = $patientpfle->fetchArray();


			foreach($patientpflearray as $k => $pval)
			{
				$ppfle[$pval['ipid']]['pflid'] = $pflegedienste[$pval['pflid']]['id'];
				$ppfle[$pval['ipid']]['name'] = $pflegedienste[$pval['pflid']]['name'];
			}

			foreach($patient_details as $k => $pdet)
			{
				$master_data['data'][$pdet['ipid']]['epid'] = $patient_details[$pdet['ipid']]['epid'];
				$master_data['data'][$pdet['ipid']]['firstname'] = $patient_details[$pdet['ipid']]['firstname'];
				$master_data['data'][$pdet['ipid']]['lastname'] = $patient_details[$pdet['ipid']]['surname'];
				$master_data['data'][$pdet['ipid']]['birthd'] = $patient_details[$pdet['ipid']]['dateofbirth'];
				$master_data['data'][$pdet['ipid']]['locationadress'] = $patientlocation[$pdet['ipid']]['location_detail'];
				$master_data['data'][$pdet['ipid']]['kontact_number'] = $patient_details[$pdet['ipid']]['kontactnumber'];
				$master_data['data'][$pdet['ipid']]['familydoctor'] = $patient_familydoc[$pdet['familydoc_id']]['details'];
				$master_data['data'][$pdet['ipid']]['nurse'] = $ppfle[$pdet['ipid']]['name'];
			}

			return $master_data;
		}

		public function patients_users($params)
		{
			//report_id=123
			// report_name = Auslastung

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$ipidarr = $this->getActiveIpids();

			if(empty($ipidarr))
			{
				$ipidarr[] = '9999999999';
			}

			$epid_ipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->whereIn('ipid', $ipidarr)
				->andWhere('epid IS NOT NULL');
			$epid_ipid_res = $epid_ipid->fetchArray();

			$epids[] = '999999999';
			foreach($epid_ipid_res as $k_epid => $v_epid)
			{
				$epid2ipid[$v_epid['epid']] = $v_epid['ipid'];
				$epids[] = $v_epid['epid'];
			}
			/*  print_r($epids);
			  exit; */

			// get active patients asigned to users

			$pats_users = Doctrine_Query::create()
				->select('userid, count(epid) as user_epids')
				->from('PatientQpaMapping')
				->whereIn('epid', $epids)
				->andWhere(' clientid = ' . $clientid)
				->andWhere('epid!=""')
				->groupBy('userid');
			// ->andWhere("till_assign='0000-00-00 00:00:00'");
			$assigned_users = $pats_users->fetchArray();
			/* print_r($assigned_users) ;
			  exit; */
			$pats_users_debug = Doctrine_Query::create()
				->select('userid, epid ')
				->from('PatientQpaMapping')
				->whereIn('epid', $epids)
				->andWhere(' clientid = ' . $clientid)
				->andWhere('epid!=""');

			// ->andWhere("till_assign='0000-00-00 00:00:00'");
			$pats_debug = $pats_users_debug->fetchArray();

			/* print_r($pats_debug);exit; */
			foreach($assigned_users as $kp => $v_userpats)
			{
				$user_patients[$v_userpats['userid']] = $v_userpats['user_epids'];
			}

			/* print_r($user_patients) ;
			  exit; */
			$users = Doctrine_Query::create()
				->select("*")
				->from('User')
				->Where('clientid = ' . $clientid)
				->andWhere('isdelete=0')
				->andWhere('isactive=0')
				->orderBy('last_name ASC');
			$users_array = $users->fetchArray();


			/* print_r($users_array);
			  exit; */

			foreach($users_array as $user)
			{
				$master_data['data'][$user['id']]['user'] = $user['username'];
				$master_data['data'][$user['id']]['user_firstname'] = $user['last_name'];
				$master_data['data'][$user['id']]['user_lastname'] = $user['first_name'];
				$master_data['data'][$user['id']]['nr_of_patients'] = $user_patients[$user['id']];
			}

			return $master_data;
		}

		public function wl_anlage_7_evaluation($params)
		{
			// report_id = 124
			// report_name = WL Anlage 7 Auswertung
			// filter for discharged patients in report period.
			// look for WL - Anlage 7 the bottom part:
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];

			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			/* ----------------- Get All Discharged Patients of Client -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("*,
				AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name")
				->from('PatientMaster p')
				->where('isdischarged = 1')
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$allarray = $allpatient->fetchArray();

			$allfinal_str = "'000000000000',";
			foreach($allarray as $key => $val)
			{
				$allfinal[] = $val['ipid'];
				$allfinal_str .= "'" . $val['ipid'] . "',";
			}

			if(empty($allfinal))
			{
				$allfinal[] = 'X';
			}

			/* ----------------- Get Discharged Patients in report period -------------------- */
			$dispatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge p')
				->whereIn("ipid", $allfinal)
				->andWhere("(" . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ")")
				->andWhere("isdelete=0");
			$deadpatientarray = $dispatients->fetchArray();

			foreach($deadpatientarray as $key => $val)
			{
				$ipidsArray[] = $val['ipid'];
				$dischargedetails[$val['ipid']]['dischargedate'] = $val['discharge_date'];
			}

			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}

			/* ----------------- Get Patients details     --------------------------- */
			$Q = Doctrine_Query::create()
				->select("*,
				AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,
				convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip")
				->from('PatientMaster')
				->whereIn('ipid', $ipidsArray)
				->andWhere('isdelete = 0')
				->andWhere('isstandbydelete = 0')
				->orderBy('admission_date DESC');
			$discharged_patients = $Q->fetchArray();

			$patient_familydoc_str = "'0',";

			foreach($discharged_patients as $patient)
			{
				$patients_ipids[$patient['ipid']] = $patient;

				$family_doctors[] = $patient['familydoc_id'];
			}

			if(empty($family_doctors))
			{
				$family_doctors[] = "XXXX";
			}

			/* ------------------------- Get Epid -------------------------------- */
			$epidipid = Doctrine_Query::create()
				->select('*')
				->from('EpidIpidMapping')
				->whereIn('ipid', $ipidsArray);
			$epidarr = $epidipid->fetchArray();


			$epidstr = "'0',";
			foreach($epidarr as $epids)
			{
				$epid[$epids['ipid']] = $epids['epid'];
				$epidstr .= "'" . $epids['epid'] . "',";
				$epidarray[$epids['ipid']] = $epids;
			}
			if(empty($epidarray))
			{
				$epidarray[999999]['ipid'] = 'X';
			}
			$epidstr = substr($epidstr, 0, -1);

			/* ------------ Get Family doctor name -------------------------------- */
			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '')")
				->andWhereIn('id', $family_doctors);
			$docarray = $drop->fetchArray();

			foreach($docarray as $doc)
			{
				if(strlen($doc['title']) > 0)
				{
					$Familydoctor[$doc['id']] = $doc['title'] . " ";
				}
				if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
				{
					$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'];
				}
			}
			/* ------------ Get Anlage 7 -------------------------------- */
			$anlage_7_data = new WlAnlage7();
			$anlage_7_array = $anlage_7_data->get_anlage7_data_multiple($ipidsArray);


			$evaluation_status = array(
				"1" => "sehr gut",
				"2" => "gut",
				"3" => "befriedigend",
				"4" => "nicht zufriedenstellend",
				"5" => "keine Angabe");

			/* ----------------------- DISPLAY MASTER DATA -------------------------------- */

			foreach($patients_ipids as $k_dipid => $v_dpatient)
			{
				$MasterData['data'][$k_dipid]['epid'] = $epidarray[$k_dipid]['epid'];
				$MasterData['data'][$k_dipid]['lastname'] = $v_dpatient['last_name'];
				$MasterData['data'][$k_dipid]['firstname'] = $v_dpatient['first_name'];
				$MasterData['data'][$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd']));
				$MasterData['data'][$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($v_dpatient['admission_date']));
				$MasterData['data'][$k_dipid]['dischargedate'] = date("d.m.Y", strtotime($dischargedetails[$k_dipid]['dischargedate']));
				$MasterData['data'][$k_dipid]['anlage_evaluation'] = $evaluation_status[$anlage_7_array[$k_dipid]['rated']];
				$MasterData['data'][$k_dipid]['family_doctor'] = $Familydoctor[$v_dpatient['familydoc_id']];
			}
			return $MasterData;
		}

		public function standby_report_LNR($params)
		{
			// report_id=125
			// report_name=Standby Report LNR

			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$whereepid = $this->getDocCondition();
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			// Get standby patients in period
			$ipids_standby_per = $this->getStandbyPatients($quarterarr, $yeararr, $montharr, $date_field = 'admission_date');

			if(empty($ipids_standby_per))
			{
				$ipids_standby_per[] = '999999999999';
			}

			//Get details patients standby
			$Q = Doctrine_Query::create()
				->select("p.ipid,e.epid,
				AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,
				p.birthd,
				p.admission_date")
				->from('PatientMaster p')
				->whereIn('ipid', $ipids_standby_per)
				->orderBy('admission_date DESC');
			$Q->leftJoin("p.EpidIpidMapping e");
			$Q->andWhere('p.ipid = e.ipid ');
			$Q->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			$standby_patients = $Q->fetchArray();

			/* if (empty($standby_patients))
			  {
			  $standby_patients[]='999999999999';
			  } */

			foreach($standby_patients as $value)
			{
				$datails_standby[$value['ipid']]['ipid'] = $value['ipid'];
				$datails_standby[$value['ipid']]['epid'] = $value['EpidIpidMapping']['epid'];
				$datails_standby[$value['ipid']]['first_name'] = $value['first_name'];
				$datails_standby[$value['ipid']]['last_name'] = $value['last_name'];
				$datails_standby[$value['ipid']]['birthd'] = date("d.m.Y", strtotime($value['birthd']));
			}


			//Calculate days in standby
			$patientmaster = new PatientMaster();
			foreach($standby_patients as $k => $value)
			{
				$patients_standbydays[$value['ipid']]['ipid'] = $value['ipid'];
				$start_day = date("d.m.Y", strtotime($value['admission_date']));
				$curr_day = date("d.m.Y");
				$patients_standbydays[$value['ipid']]['start_day'] = $start_day;
				$standby_days = $patientmaster->getDaysDiff($start_day, $curr_day);
				$patients_standbydays[$value['ipid']]['days'] = $standby_days;
			}

			// Get patients standby with sapv
			$patSapv = Doctrine_Query::create()
				->select('ipid')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids_standby_per)
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$patients_sapv = $patSapv->fetchArray();

			if(empty($patients_sapv))
			{
				$patients_sapv[] = "99999999999";
			}
			foreach($patients_sapv as $k => $value)
			{

				$ipids_sapv[] = $value['ipid'];
			}

			//Get all patients with or not sapv

			foreach($ipids_standby_per as $val)
			{
				if(in_array($val, $ipids_sapv))
				{

					$patient_all[$val]['ipid'] = $val;
					$patients_all[$val]['sapv'] = "x";
				}
				else
				{
					$patient_all[$val]['ipid'] = $val;
					$patients_all[$val]['sapv'] = "";
				}
			}

			foreach($datails_standby as $k => $patient)
			{
				$master_data['data'][$k]['epid'] = $datails_standby[$patient['ipid']]['epid'];
				$master_data['data'][$k]['firstname'] = $datails_standby[$patient['ipid']]['first_name'];
				$master_data['data'][$k]['lastname'] = $datails_standby[$patient['ipid']]['last_name'];
				$master_data['data'][$k]['birthd'] = $datails_standby[$patient['ipid']]['birthd'];
				$master_data['data'][$k]['standby_days'] = $patients_standbydays[$patient['ipid']]['days'];
				$master_data['data'][$k]['has_sapv'] = $patients_all[$patient['ipid']]['sapv'];
			}

			return $master_data;
		}

		public function bayern_tv_ko_sapv_patients($params)
		{
			// ISPC-812
			// report_id = 126
			// report_name = Bayer TV Tage / KO Kontakte
			// filter for active patient in reported period.
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$pm = new PatientMaster();
			$bayern_doctor_visit = new BayernDoctorVisit();

			$whereepid = $this->getDocCondition();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));

				if(strtotime($period['end'][$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period['end'][$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$active_patients_ipids = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $op_details)
			{
				$active_details [$op_details['details'] ['ipid']]['epid'] = $op_details['details'] ['epid'];
				$active_details [$op_details['details'] ['ipid']]['real_active_days'] = $op_details['real_active_days'];
				$active_details [$op_details['details'] ['ipid']]['real_active_days_no'] = $op_details['real_active_days_no'];
				$active_details [$op_details['details'] ['ipid']]['hospital_days'] = $op_details['hospital']['real_days'];
				$active_details [$op_details['details'] ['ipid']]['hospital_days_cs'] = $op_details['hospital']['real_days_cs'];
				$active_details [$op_details['details'] ['ipid']]['hospiz_days'] = $op_details['hospiz']['real_days'];
				$active_details [$op_details['details'] ['ipid']]['hospiz_days_cs'] = $op_details['hospiz']['real_days_cs'];
				$active_details [$op_details['details'] ['ipid']]['hospital_days_cs_no'] = $op_details['hospital']['real_days_cs_no'];
				$active_details [$op_details['details'] ['ipid']]['active_days_no_hospital_days'] = $op_details['real_active_days_no'] - $op_details['hospital']['real_days_cs_no'];

				if(!empty($op_details['hospital']['real_days_cs']))
				{
					$active_details [$op_details['details'] ['ipid']]['active_days_except_hospital_days'] = array_diff($op_details['real_active_days'], $op_details['hospital']['real_days_cs']);
				}
				else
				{
					$active_details [$op_details['details'] ['ipid']]['active_days_except_hospital_days'] = $op_details['real_active_days'];
				}
			}
// 		print_r($active_details); exit;
// 		overall data
			$conditions_ov['periods'] = array('0' => array('start' => "2007-01-01", 'end' => date("Y-m-d")));
			$conditions_ov['client'] = $clientid;
			$conditions_ov['ipids'] = $active_patients_ipids;
			$overall_patient_details = Pms_CommonData::patients_days($conditions_ov);

			foreach($overall_patient_details as $ipid => $op_details)
			{
				$overall_details [$op_details['details'] ['ipid']]['epid'] = $op_details['details'] ['epid'];
				$overall_details [$op_details['details'] ['ipid']]['real_active_days'] = $op_details['real_active_days'];
				$overall_details [$op_details['details'] ['ipid']]['real_active_days_no'] = $op_details['real_active_days_no'];
				$overall_details [$op_details['details'] ['ipid']]['hospital_days'] = $op_details['hospital']['real_days'];
				$overall_details [$op_details['details'] ['ipid']]['hospital_days_cs'] = $op_details['hospital']['real_days_cs'];
				$overall_details [$op_details['details'] ['ipid']]['hospiz_days'] = $op_details['hospiz']['real_days'];
				$overall_details [$op_details['details'] ['ipid']]['hospiz_days_cs'] = $op_details['hospiz']['real_days_cs'];
				$overall_details [$op_details['details'] ['ipid']]['hospital_days_cs_no'] = $op_details['hospital']['real_days_cs_no'];
				$overall_details [$op_details['details'] ['ipid']]['active_days_no_hospital_days'] = $op_details['real_active_days_no'] - $op_details['hospital']['real_days_cs_no'];

				if(!empty($op_details['hospital']['real_days_cs']))
				{
					$overall_details [$op_details['details'] ['ipid']]['active_days_except_hospital_days'] = array_diff($op_details['real_active_days'], $op_details['hospital']['real_days_cs']);
				}
				else
				{
					$ov_patients_overall_data_dmy['active_days_except_hospital_days'] [$op_details['details'] ['ipid']] = $op_details['real_active_days'];
					$overall_details [$op_details['details'] ['ipid']]['active_days_except_hospital_days'] = $op_details['real_active_days'];
				}


				$ov_hospital_hospiz_days_array_dmy[$op_details['details'] ['ipid']] = array();
				if(!empty($op_details['hospital']['real_days_cs']))
				{
					$ov_hospital_hospiz_days_array_dmy[$op_details['details'] ['ipid']] = $op_details['hospital']['real_days_cs'];
				}


				if(!empty($op_details['hospiz']['real_days_cs']))
				{
					$ov_hospital_hospiz_days_array_dmy[$op_details['details'] ['ipid']] = array_merge($op_details['hospiz']['real_days_cs'], $ov_hospital_hospiz_days_array_dmy[$op_details['details'] ['ipid']]);
				}

				$ov_patients_overall_data_dmy['hospiz_hospital'][$op_details['details'] ['ipid']] = $ov_hospital_hospiz_days_array_dmy[$op_details['details'] ['ipid']];
				$ov_patients_overall_data_dmy['active_days'][$op_details['details'] ['ipid']] = $op_details['active_days'];
				$ov_patients_overall_data_dmy['real_active_days'][$op_details['details'] ['ipid']] = $op_details['real_active_days'];
			}


// 		print_r($overall_details); exit;
			/* ------------------------------- Get bayern settings - overall amount --------------------------------------- */
			$bayern_settings = new BayernInvoiceSettings();
			$bayern_settings_arr = $bayern_settings->get_invoice_settings(date('Y-m-d', strtotime($period['start'][0])), date('Y-m-d', strtotime(end($period['end']))), $clientid);
			$overall_limit_settings = $bayern_settings_arr['max_days_amount'];
// 		print_r($overall_limit_settings); exit;

			/* ------------------------------- Get sapv overall data--------------------------------------- */
			$ov_patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung')
				->whereIn('ipid', $active_patients_ipids)
				->andwhere('verordnet NOT LIKE ""')
				->andWhere('isdelete = 0');
			$ov_patientsapv_array = $ov_patientsapv->fetchArray();

			foreach($ov_patientsapv_array as $keys => $sapv)
			{
				$sapv_types_array = explode(",", $sapv['verordnet']);

				$highest_type = max($sapv_types_array);

				if($highest_type == "1")
				{
					$highest_value[$sapv['id']] = "BE";
				}
				elseif($highest_type == "2")
				{
					$highest_value[$sapv['id']] = "KO";
				}
				elseif($highest_type == "3")
				{
					$highest_value[$sapv['id']] = "TV";
				}
				elseif($highest_type == "4")
				{
					$highest_value[$sapv['id']] = "VV";
				}
				else
				{
					$highest_value[$sapv['id']] = "-";
				}
				$highest_sapv_type [$sapv ['ipid']][] = $highest_value[$sapv['id']];
				if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00' && strtotime($sapv['verorddisabledate']) <= strtotime($sapv['verordnungbis']))
				{
					$sapv ['verordnungbis'] = date('Y-m-d', strtotime($sapv['verorddisabledate']));
				}

				if(!$highest_sapv_data [$sapv ['ipid']][$highest_value[$sapv['id']]])
				{
					$highest_sapv_data [$sapv ['ipid']][$highest_value[$sapv['id']]] = array();
				}

				$highest_sapv_data [$sapv ['ipid']][$highest_value[$sapv['id']]] = array_merge($highest_sapv_data [$sapv ['ipid']][$highest_value[$sapv['id']]], $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false));
				$patientData [$sapv ['ipid']] ['sapvDaysList'][] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}
// 		print_R($highest_sapv_data); exit;


			foreach($highest_sapv_data as $ipid => $sapvdata)
			{
				foreach($sapvdata as $sapv_type => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $overall_details [$ipid]['active_days_except_hospital_days']))
						{ // ??
// 					if( in_array(date('d.m.Y',strtotime($daysapv)), $overall_details [$ipid]['real_active_days'] )){
							$patient_sapv_data_real [$ipid] [$sapv_type] [] = $daysapv;
						}
						if(in_array(date('d.m.Y', strtotime($daysapv)), $active_details [$ipid]['active_days_except_hospital_days']))
						{
// 					if( in_array(date('d.m.Y',strtotime($daysapv)), $active_details [$ipid]['real_active_days'] )){
							$patient_sapv_period_data_real [$ipid] [$sapv_type] [] = $daysapv;
						}
					}
				}
			}




// 		print_r($patient_sapv_data_real); exit;
// 		print_r($patient_sapv_period_data_real); exit;

			$debug = false;
			if($_REQUEST['dbgz'])
			{
				$debug = true;
			}

			/* ------------------------------- Construct report period days --------------------------------------- */
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr, 'Y-m-d');

			foreach($period['start'] as $keyd => $start_date)
			{
				$period_days[] = $pm->getDaysInBetween($start_date, $period['end'][$keyd], false);
			}

			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$final_period_days[] = $day;
				}
			}

			$final_period_days = array_unique($final_period_days);

			foreach($final_period_days as $k_day => $v_day)
			{
				$master_data['data'][$v_day]['datum'] = date('d.m.Y', strtotime($v_day));
				$master_data['data'][$v_day]['patients_tv'] = '0';
				$master_data['data'][$v_day]['patients_ko'] = '0';
				$master_data['data'][$v_day]['patients_noactions_ko'] = '0';
			}
			$final_period['start'] = $final_period_days[0];
			$final_period['end'] = end($final_period_days);



			/* ------------------------------- Get patients required actions --------------------------------------- */
			//get XT telefonat
			$tel = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong!=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("XT")) . '"')
				->andWhereIn('ipid', $active_patients_ipids)
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$tel_array = $tel->fetchArray();

			foreach($tel_array as $k_tel => $v_tel)
			{
				$patients_tel[$v_tel['ipid']][] = date('Y-m-d', strtotime($v_tel['done_date']));
				$patients_tel[$v_tel['ipid']] = array_unique($patients_tel[$v_tel['ipid']]);
			}

			//get Bayern Doctor Visits deleted from course and then remaining visits
			$bayern_doc_visits = $bayern_doctor_visit->get_bayern_doctor_visits_period($active_patients_ipids, $final_period, true, false);

			foreach($bayern_doc_visits as $k_visit => $v_visit)
			{
				$patients_visits[$v_visit['ipid']][] = date('Y-m-d', strtotime($v_visit['start_date']));
				$patients_visits[$v_visit['ipid']] = array_unique($patients_visits[$v_visit['ipid']]);
			}

			//get Contact froms
			$cf = new ContactForms();
			$p_contactforms = $cf->get_contactforms_multiple($active_patients_ipids, $period);
			
			foreach($p_contactforms as $k_cf => $v_cf)
			{
			    $patients_cfs[$v_cf['ipid']][] = date('Y-m-d', strtotime($v_cf['billable_date']));
			    $patients_cfs[$v_cf['ipid']] = array_unique($patients_cfs[$v_cf['ipid']]);
			}	
			
			/* ------------------------------- Construct data array--------------------------------------- */
// 		 print_r($final_period_days); exit;

			foreach($active_patients_ipids as $kp => $ipid)
			{

				asort($patient_sapv_data_real[$ipid]["TV"]);
				$sapv_limit[$ipid]["TV"] = array_slice($patient_sapv_data_real[$ipid]["TV"], 0, $overall_limit_settings);

				foreach($final_period_days as $kd => $pday)
				{

					// 	TV Tage
					// overall ammount of Teilversorgung invoiced that day, means for how many patients i will be able to write an invoice for that day. ALSO taking into consideration that there are only 30 days invoicable (price settings) for one patient.
					if(
						in_array($pday, $patient_sapv_period_data_real [$ipid] ["TV"]) &&
						in_array($pday, $sapv_limit [$ipid] ["TV"]) &&
						in_array(date('d.m.Y', strtotime($pday)), $active_details [$ipid]['real_active_days'])
					)
					{
						$v_day_ts = strtotime($pday);
						$patients_sapv_data[$v_day_ts]['patients_tv'][] = $ipid;
						$patients_sapv_data[$v_day_ts]['patients_tv'] = array_unique($patients_sapv_data[$v_day_ts]['patients_tv']);
						//debug only
						if($debug)
						{
							// 						$debug_data['patients_tv'][$pday][] = $ipid;
							$debug_data[$pday]['patients_tv'][] = $active_details [$ipid]['epid'];
							$debug_data[$pday]['patients_tv'] = array_unique($debug_data[$pday]['patients_tv']);
						}
					}

					// KO Kontakte
					//overall ammount of Koordination invoiced that day, that day, means for how many patients i will be able to write an invoice for Koordination for that day.(KO sapv with actions (xt-phone or bayern visits))
					if(
						(in_array($pday, $patients_tel[$ipid]) || in_array($pday, $patients_visits[$ipid]) || in_array($pday, $patients_cfs[$ipid]) ) &&
						in_array($pday, $patient_sapv_period_data_real [$ipid] ["KO"]) &&
						!in_array($pday, $patient_sapv_period_data_real [$ipid] ["TV"]) &&
						!in_array($pday, $patient_sapv_period_data_real [$ipid] ["VV"]) &&
						in_array(date('d.m.Y', strtotime($pday)), $active_details [$ipid]['real_active_days'])
					)
					{
						$v_day_ts = strtotime($pday);
						$patients_sapv_data[$v_day_ts]['patients_ko'][] = $ipid;
						$patients_sapv_data[$v_day_ts]['patients_ko'] = array_unique($patients_sapv_data[$v_day_ts]['patients_ko']);
						//debug only
						if($debug)
						{
							// 								$debug_data['patients_ko'][$pday][] = $v_pat_sapv['ipid'];
							$debug_data[$pday]['patients_ko'][] = $active_details [$ipid]['epid'];
							$debug_data[$pday]['patients_ko'] = array_unique($debug_data[$pday]['patients_ko']);
						}
					}

					//KO Patienten
					//overall KO patients that day , means all patients which are active THAT day and have a KO Verordnung and NO VV or TV Verordnung.
					if(
						in_array($pday, $patient_sapv_period_data_real [$ipid] ["KO"]) &&
						!in_array($pday, $patient_sapv_period_data_real [$ipid] ["TV"]) &&
						!in_array($pday, $patient_sapv_period_data_real [$ipid] ["VV"]) &&
						in_array(date('d.m.Y', strtotime($pday)), $active_details [$ipid]['real_active_days'])
					)
					{
						$v_day_ts = strtotime($pday);
						$patients_sapv_data[$v_day_ts]['patients_noactions_ko'][] = $ipid;
						$patients_sapv_data[$v_day_ts]['patients_noactions_ko'] = array_unique($patients_sapv_data[$v_day_ts]['patients_noactions_ko']);
						if($debug)
						{
							// 						$debug_data['patients_noactions_ko'][$pday][] = $ipid;
							$debug_data[$pday]['patients_noactions_ko'][] = $active_details [$ipid]['epid'];
							$debug_data[$pday]['patients_noactions_ko'] = array_unique($debug_data[$pday]['patients_noactions_ko']);
						}
					}
				}
			}

// 		print_r($sapv_limit); exit;
			ksort($patients_sapv_data);
			foreach($patients_sapv_data as $k_date_ts => $v_patients)
			{
				$k_date = date('Y-m-d', $k_date_ts);
				$master_data['data'][$k_date]['patients_tv'] = count($v_patients['patients_tv']);
				$master_data['data'][$k_date]['patients_ko'] = count($v_patients['patients_ko']);
				$master_data['data'][$k_date]['patients_noactions_ko'] = count($v_patients['patients_noactions_ko']);
			}

			if($debug)
			{
				print_r($debug_data);
				exit;
			}

			return $master_data;
		}

		public function bayern_tv_ko_sapv_patients_old($params)
		{
			// ISPC-812
			// report_id = 126
			// report_name = Bayer TV Tage / KO Kontakte
			// filter for active patient in reported period.
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$pm = new PatientMaster();
			$bayern_doctor_visit = new BayernDoctorVisit();

			$whereepid = $this->getDocCondition();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
//		@TODO: patient days here:
//		$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));

				if(strtotime($period['end'][$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period['end'][$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$active_patients_ipids = array_keys($active_patient_details); // return ipids

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr, 'Y-m-d');

			$debug = false;
			if($_REQUEST['dbgz'])
			{
				$debug = true;
			}

			/* ------------------------------- Construct report period days --------------------------------------- */

			foreach($period['start'] as $keyd => $start_date)
			{
				$period_days[] = $pm->getDaysInBetween($start_date, $period['end'][$keyd], false);
			}

			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$final_period_days[] = $day;
				}
			}

			$final_period_days = array_unique($final_period_days);

			foreach($final_period_days as $k_day => $v_day)
			{
				$master_data['data'][$v_day]['datum'] = date('d.m.Y', strtotime($v_day));
				$master_data['data'][$v_day]['patients_tv'] = '0';
				$master_data['data'][$v_day]['patients_ko'] = '0';
				$master_data['data'][$v_day]['patients_noactions_ko'] = '0';
			}
			$final_period['start'] = $final_period_days[0];
			$final_period['end'] = end($final_period_days);

			/* ------------------------------- Get patients required actions --------------------------------------- */
			//get XT telefonat
			$tel = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong!=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("XT")) . '"')
				->andWhereIn('ipid', $active_patients_ipids)
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$tel_array = $tel->fetchArray();

			foreach($tel_array as $k_tel => $v_tel)
			{
				$patients_tel[$v_tel['ipid']][] = date('Y-m-d', strtotime($v_tel['done_date']));
				$patients_tel[$v_tel['ipid']] = array_unique($patients_tel[$v_tel['ipid']]);
			}

			//get Bayern Doctor Visits deleted from course and then remaining visits
			$bayern_doc_visits = $bayern_doctor_visit->get_bayern_doctor_visits_period($active_patients_ipids, $final_period, true, false);

			foreach($bayern_doc_visits as $k_visit => $v_visit)
			{
				$patients_visits[$v_visit['ipid']][] = date('Y-m-d', strtotime($v_visit['start_date']));
				$patients_visits[$v_visit['ipid']] = array_unique($patients_visits[$v_visit['ipid']]);
			}

			/* ------------------------------- Get patients with valid SAPV--------------------------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('sv.ipid', $active_patients_ipids)
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.status != 1')
				->andWhere('sv.isdelete = 0')
				->andWhere(str_replace($s, $r, $active_cond['interval_sql']))
				->groupBy('sv.ipid');
			$valid_sapv_ipids = $patientsapv->fetchArray();

			foreach($valid_sapv_ipids as $k_pat_sapv => $v_pat_sapv)
			{
				$current_verordnet = explode(',', $v_pat_sapv['verordnet']);
				$curent_verordnet_days = $pm->getDaysInBetween(date('Y-m-d', strtotime($v_pat_sapv['verordnungam'])), date('Y-m-d', strtotime($v_pat_sapv['verordnungbis'])));

				$skipper = false;
				//TV
				if(in_array('3', $current_verordnet) && $skipper === false)
				{
					$skipper = true;
					foreach($curent_verordnet_days as $k_day => $v_day)
					{
						if(in_array($v_day, $final_period_days))
						{
							$v_day_ts = strtotime($v_day);
//						$master_data['data'][$v_day]['patients_tv'] += '1';
							$patients_sapv_data[$v_day_ts]['patients_tv'][] = $v_pat_sapv['ipid'];
							$patients_sapv_data[$v_day_ts]['patients_tv'] = array_unique($patients_sapv_data[$v_day_ts]['patients_tv']);
							//debug only
							if($debug)
							{
								$debug_data['patients_tv'][$v_day][] = $v_pat_sapv['ipid'];
								$debug_data['patients_tv'][$v_day] = array_unique($debug_data['patients_tv'][$v_day]);
							}
						}
					}
				}

				//KO sapv with actions (xt-phone or bayern visits)
				if(in_array('2', $current_verordnet) && $skipper === false)
				{
					foreach($curent_verordnet_days as $k_day => $v_day)
					{
						//check for actions
						if((in_array($v_day, $patients_tel[$v_pat_sapv['ipid']]) || in_array($v_day, $patients_visits[$v_pat_sapv['ipid']])) && in_array($v_day, $final_period_days))
						{
							$v_day_ts = strtotime($v_day);
//						$master_data['data'][$v_day]['patients_ko'] += '1';
							$patients_sapv_data[$v_day_ts]['patients_ko'][] = $v_pat_sapv['ipid'];
							$patients_sapv_data[$v_day_ts]['patients_ko'] = array_unique($patients_sapv_data[$v_day_ts]['patients_ko']);
							if($debug)
							{
								$debug_data['patients_ko'][$v_day][] = $v_pat_sapv['ipid'];
								$debug_data['patients_ko'][$v_day] = array_unique($debug_data['patients_ko'][$v_day]);
							}
						}
					}
				}

				//KO || (KO && BE) sapv days only
				if((in_array('2', $current_verordnet) || (in_array('1', $current_verordnet) && in_array('2', $current_verordnet))) && $skipper === false)
				{
					foreach($curent_verordnet_days as $k_day => $v_day)
					{
						if(in_array($v_day, $final_period_days))
						{
							$v_day_ts = strtotime($v_day);
//						$master_data['data'][$v_day]['patients_noactions_ko'] += '1';
							$patients_sapv_data[$v_day_ts]['patients_noactions_ko'][] = $v_pat_sapv['ipid'];
							$patients_sapv_data[$v_day_ts]['patients_noactions_ko'] = array_unique($patients_sapv_data[$v_day_ts]['patients_noactions_ko']);
							if($debug)
							{
								$debug_data['patients_noactions_ko'][$v_day][] = $v_pat_sapv['ipid'];
								$debug_data['patients_noactions_ko'][$v_day] = array_unique($debug_data['patients_noactions_ko'][$v_day]);
							}
						}
					}
				}
			}

			ksort($patients_sapv_data);
			foreach($patients_sapv_data as $k_date_ts => $v_patients)
			{
				$k_date = date('Y-m-d', $k_date_ts);
				$master_data['data'][$k_date]['patients_tv'] = count($v_patients['patients_tv']);
				$master_data['data'][$k_date]['patients_ko'] = count($v_patients['patients_ko']);
				$master_data['data'][$k_date]['patients_noactions_ko'] = count($v_patients['patients_noactions_ko']);
			}

			if($debug)
			{
				print_r($debug_data);
				exit;
			}

			return $master_data;
		}

		public function ptm_user_working_hours($params)
		{
			// report_id = 127
			// report_name =  Arbeitszeit
			//this report looks for working times, driving times, xt times in report period.
			//Nachname | Vorname   | Benutzer | Datum          | Besuchszeit |	XT Minuten | Fahrtzeit   | Dokumentationszeit | koordination Minuten
			// surname | firstname | USER     | Date of action | visit time  |  xt time    | driving time|  bavaria form      | koordination time
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$required_user = $this->getDocCondition(true);
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}



			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
// 		$active_patients_ipids = array_keys($active_patient_details);// return ipids
			$ipidarr = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['lastname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
			}

			/* $allpatient = Doctrine_Query::create()
			  ->select("ipid")
			  ->from('PatientMaster p')
			  ->whereIn('ipid',$active_patients_ipids)
			  ->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			  $allpatient->leftJoin("p.EpidIpidMapping e");
			  $allpatient->andWhere('p.ipid=e.ipid ');
			  $allpatient->andWhere($whereepid . ' e.clientid = ' . $logininfo->clientid);
			  $allpatient->orderBy("convert(AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			  $allarray = $allpatient->fetchArray();

			  foreach($allarray as $k=>$p_val){
			  $ipidarr[]=$p_val['ipid'];
			  } */


			if(empty($ipidarr))
			{
				$ipidarr[] = "XXXXXX";
			}


			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
				$username[$val['id']] = $val['user_title'] . ' ' . $val['last_name'] . ', ' . $val['first_name'];
			}

			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('bayern_doctorvisit')) . "'")
				->andWhereIn('ipid', $ipidarr);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['bayern_doctorvisit'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$doctor_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("BayernDoctorVisit d")
				->whereIn('d.ipid', $ipidarr)
				->andWhereNotIn('d.id', $del_visits['bayern_doctorvisit'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$doctor_visits->andWhere('create_user = "' . $required_user . '"');
			}
			$doctor_visits->orderBy('start_date ASC');
			$doctor_visits_arr = $doctor_visits->fetchArray();


			foreach($doctor_visits_arr as $doc => $value_doc)
			{

				$start_date = strtotime($value_doc['start_date']);
				$end_date = strtotime($value_doc['end_date']);
				$doc_visit_minutes = round(($end_date - $start_date) / 60);

				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['user_name'] = $username[$value_doc['create_user']];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_minutes'] = $doc_visit_minutes;
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_driving'] = $value_doc['fahrtzeit'];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_documentation'] = $value_doc['documantation_time'];

				$doctor_visits_dbg[$value_doc['ipid']][] = $value_doc;
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n doctor_visits \n");
				print_r($doctor_visits_dbg);
			}

			/* ------------------------Get all VERLAUF - "Telefonate" details from patients----------------------------------- */

			$course_xt = Doctrine_Query::create()
				->select("ipid,course_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$course_xt->andWhere('create_user = "' . $required_user . '"');
			}
			$course_xt->orderBy('course_date ASC');
			$course_xt_array = $course_xt->fetchArray();

			foreach($course_xt_array as $course_xt_key => $course_xt_val)
			{
				$valid_date_xt = date('Y-m-d', strtotime($course_xt_val['course_date']));

				if(!in_array($valid_date_xt, $finalDays[$course_xt_val['ipid']]['FinalCountDays']))
				{
					$course_xt_arr = explode("|", $course_xt_val['course_title']);
					$xt_array[$patient_array[$course_xt_val['ipid']]['epid']][] = $course_xt_val['course_title'];

					$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['action_date'] = date('d.m.Y', strtotime($course_xt_val['course_date']));
					;
					$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['user_name'] = $username[$course_xt_val['create_user']];
					if(count($course_xt_arr) == 3)
					{ //method implemented with 3 inputs
						$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['telefon_minutes'] = intval($course_xt_arr[0]);
					}
					else if(count($course_xt_arr) != 3 && count($course_xt_arr) < 3)
					{ //old method before anlage 10
						$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['telefon_minutes'] = intval($course_xt_arr[0]);
					}
				}
			}


			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n telefon \n");
				print_r($xt_array);
			}

			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */
			$course_v = Doctrine_Query::create()
				->select("ipid,course_date,create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$course_v->andWhere('create_user = "' . $required_user . '"');
			}
			$course_v->orderBy('course_date ASC');
			$course_v_array = $course_v->fetchArray();

			foreach($course_v_array as $course_v_key => $course_v_val)
			{
				$valid_date_v = date('Y-m-d', strtotime($course_v_val['course_date']));


				$course_v_arr = explode("|", $course_v_val['course_title']);
				$v_array[$patient_array[$course_v_val['ipid']]['epid']][] = $course_v_val['course_title'];

				$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['user_name'] = $username[$course_v_val['create_user']];
				$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['action_date'] = date('d.m.Y', strtotime($course_v_val['course_date']));

				if(count($course_v_arr) == 3)
				{
					$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['coordination_minutes'] = intval($course_v_arr[0]);
				}
				else if(count($course_v_arr) != 3)
				{
					$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['coordination_minutes'] = intval($course_v_arr[0]);
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordination \n");
				print_r($v_array);
			}

			/* -----------------------Get all Besuch war - from contact forms for all patients selected------------------------------ 
			$qualityarr = array('geplant', 'ungeplant', 'akut', 'SAPV-Notdienst');
			
			$besuch = Doctrine_Query::create()
			->select('*,comment as comment_block')
			->from('ContactForms')
			->whereIn('ipid', $ipidarr)
			->andWhere('quality != "0"')
			->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']))
			->orderBy('start_date ASC');
			
			
			$besucharr = $besuch->fetchArray();
			
			foreach($besucharr as $bes) {
				
				$besuch_war[$bes['ipid']][] = $bes['quality'];
			}
			
			foreach($besuch_war as $kbs=>$bs) {
				$besuchw[$kbs] = '';
				foreach($bs as $kk=>$bb) {
					if($bb != '0') {
						$besuchw[$kbs] .= $qualityarr[$bb-1]. '; ';
					}
				}
				
			}
		
			//var_dump($besuchw); exit;
			 -----------------------Get all Besuch war - from contact forms for all patients selected------------------------------ */
			

			/* ----------------------Prepare data for display ----------------------------- */
			$patient_actions_count = array();
			$visit_count = 0;

			if($_REQUEST['dbg'] == 'x')
			{
				print_r($activ_in_perioada);
				exit;
			}
			$total_visits_per_day = 0;
			$total_contacts_per_day = 0;

			foreach($minutes_array as $patient_ipid => $values)
			{
				$patient_values[] = $patient_ipid;

				$x = 0;
				foreach($values as $action_identification => $vls)
				{
					$user_documentation[$patient_ipid][$x]['user_name'] = $vls['user_name'];
					$user_documentation[$patient_ipid][$x]['date_of_action'] = $vls['action_date'];


					if($vls['visit_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['visit_time_count'] = $vls['visit_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_time_count'] = "-";
					}

					if($vls['telefon_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['xt_time_count'] = $vls['telefon_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['xt_time_count'] = "-";
					}


					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['driving_time_count'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['driving_time_count'] = "-";
					}

					if($vls['visit_documentation'])
					{
						$user_documentation[$patient_ipid][$x]['documentation_time_count'] = $vls['visit_documentation'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['documentation_time_count'] = "-";
					}



					if($vls['coordination_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_time_count'] = $vls['coordination_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_time_count'] = "-";
					}

					$x++;
				}
			}

			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;


			if(!empty($patientDetails))
			{
				foreach($patientDetails as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patientDetails[$patient['ipid']]);
					}
				}
				foreach($patientDetails as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['lastname'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['firstname'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient['dateofbirth'];
					$MasterData['data'][$patient['ipid']]['patient_actions'] = $user_documentation[$patient['ipid']];
					if($besuchw[$patient['ipid']] != '') {
						$MasterData['data'][$patient['ipid']]['besuch_war'] = $besuchw[$patient['ipid']];

					}else {
						$MasterData['data'][$patient['ipid']]['besuch_war'] = '';
					}
					$i++;
				}

				return $MasterData;
			}
		}
		
		public function user_working_hours_kntf($params)
		{
			// report_id = 137
			// report_name =  Arbeitszeit II
			//this report looks for working times, driving times, xt times in report period.
			// FROM CONTACT FORM
			//Nachname | Vorname   | Benutzer | Datum          | Besuchszeit |	XT Minuten | Fahrtzeit   | Dokumentationszeit | koordination Minuten
			// surname | firstname | USER     | Date of action | visit time  |  xt time    | driving time|  bavaria form      | koordination time
			// ISPC-2013 :: then please add in the report "Arbeitszeit II" the coloumn "Dokumentationszeit"
			// ISPC-2116 :: then please add in the report "Arbeitszeit II" add coloumn for assigned VW
				
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
				
			$block_documentation = new FormBlockDrivetimedoc();
				
				
			//$required_user = $this->getDocCondition(true);
			$required_user = $this->getDocOrGroupCondition($return_user_patients = false, $return_group_patients = false);
				
			if($required_user)
			{
				if(!is_array($required_user))
				{
					$required_user = array($required_user);
				}
			}
				
			$client_groups = Usergroup::get_clients_groups(array($clientid));
			foreach($client_groups as $kg =>$vg)
			{
				$grous_array[$vg['id']] = $vg['groupname'];
			}
				
				
			$pm = new PatientMaster ();
		
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		
			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
		
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			// 		$active_patients_ipids = array_keys($active_patient_details);// return ipids
			$ipidarr = array_keys($active_patient_details); // return ipids
			
			$MasterData = array();
			if(empty($ipidarr))
			{
				//$ipidarr[] = "XXXXXX";
				return $MasterData;
			}
		
			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['lastname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
			}
			
			/* ------------------ Get VW assigned --------------*/			
			$pws = Doctrine_Query::create()
				->select('*, last_name as last_name, first_name as first_name')
				->from('PatientVoluntaryworkers as pv')
				->leftJoin('Voluntaryworkers as v')
				->where("pv.vwid = v.id")
				->andWhereIn('pv.ipid', $ipidarr)
				->andWhere('pv.isdelete="0"')
				->orderBy('pv.ipid ASC');
			$pws_res = $pws->fetchArray();
				
			foreach($pws_res as $kpvw=>$vpvw)
			{
				if(trim($vpvw['first_name']) !='')
				{
					$patvw[$vpvw['ipid']][] = trim($vpvw['first_name']) . " " . trim($vpvw['last_name']);
				}
				else
				{
					$patvw[$vpvw['ipid']][] = trim($vpvw['last_name']);
				}
			}
			//print_r($patvw); exit;
			/* ------------------ Get VW assigned --------------*/
		
			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usrar = Doctrine_Query::create()
			->select('*')
			->from('User')
			->where('isdelete=0')
			->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();
		
			foreach($user_arrayq as $key => $val)
			{
				// 				$username[$val['id']] =  $val['user_title'] . ' ' . $val['last_name'] . ', ' . $val['first_name'].' <!--  groupid: '.$val['groupid'].' groupname '.$grous_array[$val['groupid']].'-->';
				$username[$val['id']] =  $val['user_title'] . ' ' . $val['last_name'] . ', ' . $val['first_name'];
			}
			/* ################################################################################################### */
			/* ----------------- Get Contact form types -------------------- */
		
			$types = Doctrine_Query::create()
			->select('*')
			->from('FormTypes')
			->where('clientid =?', $clientid)
			->andWhere('isdelete =?','0');
			$types_res = $types->fetchArray();
		
		
			foreach($types_res as $k_ft => $v_ft)
			{
				$form_type[$v_ft['id']] = $v_ft['name'];
			}
		
		
			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
			->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
			->from('PatientCourse')
			->where('wrong=1')
			->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
			->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
			->andWhereIn('ipid', $ipidarr);
			$deleted_visits_array = $deleted_visits->fetchArray();
		
			$del_visits['contact_form'][] = '999999999999';
		
			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}
		
			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$qualityarr = array('geplant', 'ungeplant', 'akut', 'SAPV-Notdienst');
				
			$doctor_visits = Doctrine_Query::create()
			->select("*,c.ipid,c.id")
			->from("ContactForms c")
			->whereIn('c.ipid', $ipidarr)
			->andWhereNotIn('c.id', $del_visits['contact_form'])
			->andWhere(str_replace('%date%', 'billable_date', $active_cond['date_sql']))
			->andWhere("isdelete = 0");
			if(!empty($required_user))
			{
				// 				$doctor_visits->andWhere('create_user = "' . $required_user . '"');
				$doctor_visits->andWhereIn('create_user',$required_user);
			}
			$doctor_visits->orderBy('start_date ASC');
			$doctor_visits_arr = $doctor_visits->fetchArray();
		
			$contact_forms_ids_overall = array();
				
			foreach($doctor_visits_arr as $doc => $value_doc)
			{
		
				$start_date = strtotime($value_doc['start_date']);
				$end_date = strtotime($value_doc['end_date']);
				$doc_visit_minutes = round(($end_date - $start_date) / 60);
		
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['user_name'] = $username[$value_doc['create_user']];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_time'] = date('H:i', strtotime($value_doc['start_date'])) . ' - ' . date('H:i', strtotime($value_doc['end_date']));
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_type'] = $form_type[$value_doc['form_type']];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_minutes'] = $doc_visit_minutes;
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_driving'] = $value_doc['fahrtzeit'];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_quality'] = $qualityarr[$value_doc['quality']-1];
		
				$doctor_visits_dbg[$value_doc['ipid']][] = $value_doc;
				$contact_forms_ids_overall[] = $value_doc['id'];
			}
		
			$drive_doc_data_overall = $block_documentation->get_multiple_block_drivetimedoc($ipidarr, $contact_forms_ids_overall);
		
			foreach($drive_doc_data_overall as $cf_id => $cf_data){
				if($cf_data['fahrtzeit1'] != "" || $cf_data['fahrtstreke_km1'] != "" || $cf_data['fahrt_doc1'] != ""){
					$minutes_array[$cf_data['ipid']]['visit_' . $cf_data['contact_form_id']]['visit_documentation'] = $cf_data['fahrt_doc1'];
				} else {
					$minutes_array[$cf_data['ipid']]['visit_' . $cf_data['contact_form_id']]['visit_documentation'] = '';
				}
			}
				
				
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n doctor_visits \n");
				print_r($doctor_visits_dbg);
			}
		
			/* ------------------------Get all VERLAUF - "Telefonate" details from patients----------------------------------- */
		
			$course_xt = Doctrine_Query::create()
			->select("ipid,course_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
			->from('PatientCourse')
			->whereIn('ipid', $ipidarr)
			->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
			->andWhere("wrong = 0")
			->andWhere('source_ipid = ""')
			->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				// 				$course_xt->andWhere('create_user = "' . $required_user . '"');
				$course_xt->andWhereIn('create_user',$required_user);
			}
			$course_xt->orderBy('course_date ASC');
			$course_xt_array = $course_xt->fetchArray();
		
			foreach($course_xt_array as $course_xt_key => $course_xt_val)
			{
				$valid_date_xt = date('Y-m-d', strtotime($course_xt_val['course_date']));
		
				if(!in_array($valid_date_xt, $finalDays[$course_xt_val['ipid']]['FinalCountDays']))
				{
					$course_xt_arr = explode("|", $course_xt_val['course_title']);
					$xt_array[$patient_array[$course_xt_val['ipid']]['epid']][] = $course_xt_val['course_title'];
		
					$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['action_date'] = date('d.m.Y', strtotime($course_xt_val['course_date']));
					;
					$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['action_type'] = "Telefon";
					$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['user_name'] = $username[$course_xt_val['create_user']];
					if(count($course_xt_arr) == 3)
					{ //method implemented with 3 inputs
						$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['telefon_minutes'] = intval($course_xt_arr[0]);
					}
					else if(count($course_xt_arr) != 3 && count($course_xt_arr) < 3)
					{ //old method before anlage 10
						$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['telefon_minutes'] = intval($course_xt_arr[0]);
					}
				}
			}
		
		
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n telefon \n");
				print_r($xt_array);
			}
		
			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */
			$course_v = Doctrine_Query::create()
			->select("ipid,course_date,create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
			->from('PatientCourse')
			->whereIn('ipid', $ipidarr)
			->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
			->andWhere("wrong = 0")
			->andWhere('source_ipid = ""')
			->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				// 				$course_v->andWhere('create_user = "' . $required_user . '"');
				$course_v->andWhereIn('create_user',$required_user);;
			}
			$course_v->orderBy('course_date ASC');
			$course_v_array = $course_v->fetchArray();
		
			foreach($course_v_array as $course_v_key => $course_v_val)
			{
				$valid_date_v = date('Y-m-d', strtotime($course_v_val['course_date']));
		
		
				$course_v_arr = explode("|", $course_v_val['course_title']);
				$v_array[$patient_array[$course_v_val['ipid']]['epid']][] = $course_v_val['course_title'];
		
				$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['user_name'] = $username[$course_v_val['create_user']];
				$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['action_date'] = date('d.m.Y', strtotime($course_v_val['course_date']));
				$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['action_type'] = "Koordination";
		
				if(count($course_v_arr) == 3)
				{
					$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['coordination_minutes'] = intval($course_v_arr[0]);
				}
				else if(count($course_v_arr) != 3)
				{
					$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['coordination_minutes'] = intval($course_v_arr[0]);
				}
			}
		
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordination \n");
				print_r($v_array);
			}
		
		
			/* ----------------------Prepare data for display ----------------------------- */
			$patient_actions_count = array();
			$visit_count = 0;
		
			if($_REQUEST['dbg'] == 'x')
			{
				print_r($activ_in_perioada);
				exit;
			}
			$total_visits_per_day = 0;
			$total_contacts_per_day = 0;
			foreach($minutes_array as $patient_ipid => $values)
			{
				$patient_values[] = $patient_ipid;
		
				$x = 0;
				foreach($values as $action_identification => $vls)
				{
					$user_documentation[$patient_ipid][$x]['user_name'] = $vls['user_name'];
					$user_documentation[$patient_ipid][$x]['user_action_type'] = $vls['action_type'];
					$user_documentation[$patient_ipid][$x]['date_of_action'] = $vls['action_date'];
		
		
					if($vls['action_time'])
					{
						$user_documentation[$patient_ipid][$x]['time_of_action'] = $vls['action_time'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['time_of_action'] = "-";
					}
		
					if($vls['visit_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['visit_time_duration'] = $vls['visit_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_time_duration'] = "-";
					}
		
					if($vls['telefon_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['xt_time_count'] = $vls['telefon_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['xt_time_count'] = "-";
					}
		
					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['driving_time_count'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['driving_time_count'] = "-";
					}
		
		
					if($vls['coordination_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_time_count'] = $vls['coordination_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_time_count'] = "-";
					}
		
					if($vls['visit_quality'])
					{
						$user_documentation[$patient_ipid][$x]['visit_quality'] = $vls['visit_quality'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_quality'] = "-";
					}
						
					if($vls['visit_documentation'])
					{
						$user_documentation[$patient_ipid][$x]['visit_documentation'] = $vls['visit_documentation'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_documentation'] = "-";
					}
		
					$x++;
				}
			}
		
		
			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;
		
			if(!empty($patientDetails))
			{
				foreach($patientDetails as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patientDetails[$patient['ipid']]);
					}
				}
				foreach($patientDetails as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['lastname'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['firstname'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient['dateofbirth'];
					$MasterData['data'][$patient['ipid']]['voluntaryworkers'] = implode(", ", $patvw[$patient['ipid']]);
					$MasterData['data'][$patient['ipid']]['patient_actions'] = $user_documentation[$patient['ipid']];
		
					$i++;
				}
				
				return $MasterData;
			}
		}

		public function user_working_hours_kntf_2($params)
		{
			// report_id = 182
			// report_name =  Arbeitszeit II(Niedersachen mit Koordination)
			//this report looks for working times, driving times, xt times, koordinations times in report period.
			// FROM CONTACT FORM
			//Nachname | Vorname   | Benutzer | Datum          | Besuchszeit |	XT Minuten | Fahrtzeit   | Dokumentationszeit | koordination Minuten | Koordinationsleistungen/Eingangspauschale  Minuten | Koordinationsleistungen ohne Berechnung Minuten
			// surname | firstname | USER     | Date of action | visit time  |  xt time    | driving time|  bavaria form      | koordination time	 | koordination ve time | koordination vo time
			// ISPC-2053 duplicate report Arbeitszeit II -> Arbeitszeit II (Niedersachen mit Koordination)
			
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			
			$block_documentation = new FormBlockDrivetimedoc();
			
			
            //$required_user = $this->getDocCondition(true);
			$required_user = $this->getDocOrGroupCondition($return_user_patients = false, $return_group_patients = false);
			
			if($required_user)
			{
			    if(!is_array($required_user))
			    {
			        $required_user = array($required_user);
			    }
			}
			
			$client_groups = Usergroup::get_clients_groups(array($clientid));
			foreach($client_groups as $kg =>$vg)
			{
			    $grous_array[$vg['id']] = $vg['groupname'];
			}
			
			
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
// 		$active_patients_ipids = array_keys($active_patient_details);// return ipids
			$ipidarr = array_keys($active_patient_details); // return ipids
		
			$MasterData = array();
			if(empty($ipidarr))
			{
				return $MasterData;
			}
			
			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['lastname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
			}

			/*if(empty($ipidarr))
			{
				$ipidarr[] = "XXXXXX";
			}*/

			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
// 				$username[$val['id']] =  $val['user_title'] . ' ' . $val['last_name'] . ', ' . $val['first_name'].' <!--  groupid: '.$val['groupid'].' groupname '.$grous_array[$val['groupid']].'-->';
				$username[$val['id']] =  $val['user_title'] . ' ' . $val['last_name'] . ', ' . $val['first_name'];
			}
			/* ################################################################################################### */
			/* ----------------- Get Contact form types -------------------- */

			$types = Doctrine_Query::create()
				->select('*')
				->from('FormTypes')
				->where('clientid =?', $clientid)
				->andWhere('isdelete =?','0');
			$types_res = $types->fetchArray();


			foreach($types_res as $k_ft => $v_ft)
			{
				$form_type[$v_ft['id']] = $v_ft['name'];
			}


			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("id,recordid,ipid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, 
						AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, 
						AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type=?', addslashes(Pms_CommonData::aesEncrypt("F")))
				->andWhere("tabname=?", addslashes(Pms_CommonData::aesEncrypt('contact_form')))
				->andWhereIn('ipid', $ipidarr);
			$deleted_visits_array = $deleted_visits->fetchArray();

			//$del_visits['contact_form'][] = '999999999999';
			
			$del_visits = array();
			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}
			
			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$qualityarr = array('geplant', 'ungeplant', 'akut', 'SAPV-Notdienst');
			
			$doctor_visits = Doctrine_Query::create()
				->select("*,c.ipid,c.id")
				->from("ContactForms c")
				->whereIn('c.ipid', $ipidarr)
				//->andWhereNotIn('c.id', $del_visits['contact_form'])
				->andWhere(str_replace('%date%', 'billable_date', $active_cond['date_sql']))
				->andWhere("isdelete = 0");
			if(!empty($required_user))
			{
// 				$doctor_visits->andWhere('create_user = "' . $required_user . '"');
				$doctor_visits->andWhereIn('create_user',$required_user);
			}
			if(!empty($del_visits))
			{
				$doctor_visits->andWhereNotIn('c.id', $del_visits['contact_form']);
			}
			$doctor_visits->orderBy('start_date ASC');
			$doctor_visits_arr = $doctor_visits->fetchArray();

			$contact_forms_ids_overall = array();
			
			foreach($doctor_visits_arr as $doc => $value_doc)
			{

				$start_date = strtotime($value_doc['start_date']);
				$end_date = strtotime($value_doc['end_date']);
				$doc_visit_minutes = round(($end_date - $start_date) / 60);

				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['user_name'] = $username[$value_doc['create_user']];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_time'] = date('H:i', strtotime($value_doc['start_date'])) . ' - ' . date('H:i', strtotime($value_doc['end_date']));
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_type'] = $form_type[$value_doc['form_type']];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_minutes'] = $doc_visit_minutes;
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_driving'] = $value_doc['fahrtzeit'];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_quality'] = $qualityarr[$value_doc['quality']-1];

				$doctor_visits_dbg[$value_doc['ipid']][] = $value_doc;
				$contact_forms_ids_overall[] = $value_doc['id'];
			}

			$drive_doc_data_overall = $block_documentation->get_multiple_block_drivetimedoc($ipidarr, $contact_forms_ids_overall);

			foreach($drive_doc_data_overall as $cf_id => $cf_data){
				if($cf_data['fahrtzeit1'] != "" || $cf_data['fahrtstreke_km1'] != "" || $cf_data['fahrt_doc1'] != ""){
					$minutes_array[$cf_data['ipid']]['visit_' . $cf_data['contact_form_id']]['visit_documentation'] = $cf_data['fahrt_doc1'];
				} else {
					$minutes_array[$cf_data['ipid']]['visit_' . $cf_data['contact_form_id']]['visit_documentation'] = '';
				}
			}
			
			
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n doctor_visits \n");
				print_r($doctor_visits_dbg);
			}

			/* ------------------------Get all VERLAUF - (XT, V, VE, VO) details from patients----------------------------------- */
			$shortcuts = "XT,V,VE,VO";
			$shortcuts_arr = explode(',', $shortcuts);
			
			$course_sh = Doctrine_Query::create()
				->select("ipid,course_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhereIn("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "')", $shortcuts_arr)
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
// 				$course_xt->andWhere('create_user = "' . $required_user . '"');
				$course_sh->andWhereIn('create_user',$required_user);
			}
			//$course_sh->orderBy('AES_DECRYPT(course_type,"' . Zend_Registry::get('salt') . '") ASC, course_date ASC');
			$course_sh->orderBy('course_date ASC');
			$course_sh_array = $course_sh->fetchArray();

			foreach($course_sh_array as $course_sh_key => $course_sh_val)
			{
				$valid_date_sh = date('Y-m-d', strtotime($course_sh_val['course_date']));

				if(!in_array($valid_date_sh, $finalDays[$course_sh_val['ipid']]['FinalCountDays']))
				{
					$course_sh_arr = explode("|", $course_sh_val['course_title']);
					
					$sh_array[$patient_array[$course_sh_val['ipid']]['epid']][$course_sh_val['course_type']][] = $course_sh_val['course_title'];
					
					switch($course_sh_val['course_type'])
					{
						case 'XT':							
							$minutes_array[$course_sh_val['ipid']]["sh_" . $course_sh_val['id']]['action_date'] = date('d.m.Y', strtotime($course_sh_val['course_date']));;
							$minutes_array[$course_sh_val['ipid']]["sh_" . $course_sh_val['id']]['action_type'] = "Telefon";
							$minutes_array[$course_sh_val['ipid']]["sh_" . $course_sh_val['id']]['user_name'] = $username[$course_sh_val['create_user']];
							if(count($course_sh_arr) == 3)
							{ //method implemented with 3 inputs
								$minutes_array[$course_sh_val['ipid']]["sh_" . $course_sh_val['id']]['telefon_minutes'] = intval($course_sh_arr[0]);
							}
							else if(count($course_sh_arr) != 3 && count($course_sh_arr) < 3)
							{ //old method before anlage 10
								$minutes_array[$course_sh_val['ipid']]["sh_" . $course_sh_val['id']]['telefon_minutes'] = intval($course_sh_arr[0]);
							}
						break;
						case 'V':
							$minutes_array[$course_sh_val['ipid']]["coordination_" . $course_sh_val['id']]['user_name'] = $username[$course_sh_val['create_user']];
							$minutes_array[$course_sh_val['ipid']]["coordination_" . $course_sh_val['id']]['action_date'] = date('d.m.Y', strtotime($course_sh_val['course_date']));
							$minutes_array[$course_sh_val['ipid']]["coordination_" . $course_sh_val['id']]['action_type'] = "Koordination";

							if(count($course_sh_arr) == 3)
							{
								$minutes_array[$course_sh_val['ipid']]["coordination_" . $course_sh_val['id']]['coordination_minutes'] = intval($course_sh_arr[0]);
							}
							else if(count($course_sh_arr) != 3)
							{
								$minutes_array[$course_sh_val['ipid']]["coordination_" . $course_sh_val['id']]['coordination_minutes'] = intval($course_sh_arr[0]);
							}
						break;
						case 'VE':
							$minutes_array[$course_sh_val['ipid']]["coordination_ve_" . $course_sh_val['id']]['user_name'] = $username[$course_sh_val['create_user']];
							$minutes_array[$course_sh_val['ipid']]["coordination_ve_" . $course_sh_val['id']]['action_date'] = date('d.m.Y', strtotime($course_sh_val['course_date']));
							$minutes_array[$course_sh_val['ipid']]["coordination_ve_" . $course_sh_val['id']]['action_type'] = "Koordinationsleistungen/Eingangspauschale ";
						
							if(count($course_sh_arr) == 3)
							{
								$minutes_array[$course_sh_val['ipid']]["coordination_ve_" . $course_sh_val['id']]['coordination_ve_minutes'] = intval($course_sh_arr[0]);
							}
							else if(count($course_sh_arr) != 3)
							{
								$minutes_array[$course_sh_val['ipid']]["coordination_ve_" . $course_sh_val['id']]['coordination_ve_minutes'] = intval($course_sh_arr[0]);
							}
						break;
						case 'VO':
							$minutes_array[$course_sh_val['ipid']]["coordination_vo_" . $course_sh_val['id']]['user_name'] = $username[$course_sh_val['create_user']];
							$minutes_array[$course_sh_val['ipid']]["coordination_vo_" . $course_sh_val['id']]['action_date'] = date('d.m.Y', strtotime($course_sh_val['course_date']));
							$minutes_array[$course_sh_val['ipid']]["coordination_vo_" . $course_sh_val['id']]['action_type'] = "Koordinationsleistungen ohne Berechnung ";
						
							if(count($course_sh_arr) == 3)
							{
								$minutes_array[$course_sh_val['ipid']]["coordination_vo_" . $course_sh_val['id']]['coordination_vo_minutes'] = intval($course_sh_arr[0]);
							}
							else if(count($course_sh_arr) != 3)
							{
								$minutes_array[$course_sh_val['ipid']]["coordination_vo_" . $course_sh_val['id']]['coordination_vo_minutes'] = intval($course_sh_arr[0]);
							}
						break;
					}
				}
			}
			
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n telefon \n");
				print_r($sh_array);
			}

			/* ----------------------Prepare data for display ----------------------------- */
			$patient_actions_count = array();
			$visit_count = 0;

			if($_REQUEST['dbg'] == 'x')
			{
				print_r($activ_in_perioada);
				exit;
			}
			$total_visits_per_day = 0;
			$total_contacts_per_day = 0;
			foreach($minutes_array as $patient_ipid => $values)
			{
				$patient_values[] = $patient_ipid;

				$x = 0;
				foreach($values as $action_identification => $vls)
				{
					$user_documentation[$patient_ipid][$x]['user_name'] = $vls['user_name'];
					$user_documentation[$patient_ipid][$x]['user_action_type'] = $vls['action_type'];
					$user_documentation[$patient_ipid][$x]['date_of_action'] = $vls['action_date'];


					if($vls['action_time'])
					{
						$user_documentation[$patient_ipid][$x]['time_of_action'] = $vls['action_time'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['time_of_action'] = "-";
					}

					if($vls['visit_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['visit_time_duration'] = $vls['visit_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_time_duration'] = "-";
					}

					if($vls['telefon_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['xt_time_count'] = $vls['telefon_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['xt_time_count'] = "-";
					}

					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['driving_time_count'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['driving_time_count'] = "-";
					}


					if($vls['coordination_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_time_count'] = $vls['coordination_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_time_count'] = "-";
					}
					
					if($vls['coordination_ve_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_ve_time_count'] = $vls['coordination_ve_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_ve_time_count'] = "-";
					}
					
					if($vls['coordination_vo_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_vo_time_count'] = $vls['coordination_vo_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_vo_time_count'] = "-";
					}

					if($vls['visit_quality'])
					{
						$user_documentation[$patient_ipid][$x]['visit_quality'] = $vls['visit_quality'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_quality'] = "-";
					}
					
					if($vls['visit_documentation'])
					{
						$user_documentation[$patient_ipid][$x]['visit_documentation'] = $vls['visit_documentation'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_documentation'] = "-";
					}

					$x++;
				}
			}


			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;

			if(!empty($patientDetails))
			{
				foreach($patientDetails as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patientDetails[$patient['ipid']]);
					}
				}
				foreach($patientDetails as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['lastname'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['firstname'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient['dateofbirth'];
					$MasterData['data'][$patient['ipid']]['patient_actions'] = $user_documentation[$patient['ipid']];

					$i++;
				}

				return $MasterData;
			}
		}

		public function nursing_assignment($params)
		{
			// ISPC-826
			// report_id = 129
			// report_name = Pflegedienst Zuteilung
			// show nursing services for active patients in reported period.
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
			$whereepid = $this->getDocCondition();

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));

				if(strtotime($period['end'][$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period['end'][$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$active_patients_ipids = array_keys($active_patient_details); // return ipids
			//get pflegedienste
			$nursing = new PatientPflegedienste();
			$patient_nursing_arr = $nursing->get_multiple_patient_pflegedienste($active_patients_ipids);


			foreach($active_patient_details as $k_ipid => $v_details)
			{
				$master_data['data'][$k_ipid]['epid'] = $v_details['details']['epid'];
				$master_data['data'][$k_ipid]['lastname'] = $v_details['details']['last_name'];
				$master_data['data'][$k_ipid]['firstname'] = $v_details['details']['first_name'];
				$master_data['data'][$k_ipid]['birthd'] = date("d.m.Y", strtotime($v_details['details']['birthd']));
				$master_data['data'][$k_ipid]['admissiondate'] = date("d.m.Y", strtotime($v_details['details']['admission_date']));
				$master_data['data'][$k_ipid]['dischargedate'] = date("d.m.Y", strtotime(end($v_details['details']['discharge'])));

				if($v_details['details']['isdischarged'] == '1')
				{
					$master_data['data'][$k_ipid]['dischargedate'] = end($v_details['discharge']);
				}
				else
				{
					$master_data['data'][$k_ipid]['dischargedate'] = "-";
				}

				if(count($patient_nursing_arr['results'][$k_ipid]) > '0')
				{
					foreach($patient_nursing_arr['results'][$k_ipid] as $k_nursing => $v_nursing)
					{
						if(strlen(trim(rtrim($v_nursing['nursing']))) > 0)
						{
							$master_data['data'][$k_ipid]['nurse_service_' . ($k_nursing + 1)] = $v_nursing['nursing'];
						}
					}

					//dummy control
					if(count($patient_nursing_arr['results'][$k_ipid]) != max($patient_nursing_arr['counted']))
					{
						for($ii = 1; $ii <= max($patient_nursing_arr['counted']); $ii++)
						{
							if(strlen($master_data['data'][$k_ipid]['nurse_service_' . $ii]) == 0)
							{
								$master_data['data'][$k_ipid]['nurse_service_' . $ii] = '';
							}
						}
					}
				}
				else
				{
					//dummy control
					for($i = 1; $i <= max($patient_nursing_arr['counted']); $i++)
					{
						$master_data['data'][$k_ipid]['nurse_service_' . $i] = '';
					}
				}

				$master_data['extra']['max_dynamic_col'] = max($patient_nursing_arr['counted']);
			}


			return $master_data;
		}

		public function report_team($param)
		{
			//report_id=128
			//report_name: Team

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$user_groups = Usergroup::getClientGroups($clientid);
			foreach($user_groups as $k => $gv)
			{
				$group_details[$gv['id']]['groupname'] = $gv['groupname'];
			}


			$usr = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->andWhere('isactive=0')
				->andWhere('clientid = ' . $clientid)
				->orderBy('1');
			$users_team = $usr->fetchArray();


			foreach($users_team as $k => $user_detail)
			{
				$master_data['data'][$k]['username'] = $user_detail['username'];
				$master_data['data'][$k]['user_lastname'] = $user_detail['last_name'];
				$master_data['data'][$k]['user_firstname'] = $user_detail['first_name'];
				$master_data['data'][$k]['email'] = $user_detail['emailid'];
				$master_data['data'][$k]['fax'] = $user_detail['fax'];
				$master_data['data'][$k]['street1'] = $user_detail['street1'];
				$master_data['data'][$k]['zip'] = $user_detail['zip'];
				$master_data['data'][$k]['city'] = $user_detail['city'];
				$master_data['data'][$k]['mobile'] = $user_detail['mobile'];
				$master_data['data'][$k]['phone'] = $user_detail['phone'];
				$master_data['data'][$k]['private_phone'] = $user_detail['private_phone'];
				//stop using caps in array keys
//			$master_data['data'][$k]['BSNR']=$user_detail['betriebsstattennummer'];
//			$master_data['data'][$k]['LANR']=$user_detail['LANR'];
				$master_data['data'][$k]['bsnr'] = $user_detail['betriebsstattennummer'];
				$master_data['data'][$k]['lanr'] = $user_detail['LANR'];
				$master_data['data'][$k]['shortname'] = $user_detail['shortname'];
				$master_data['data'][$k]['groupname'] = $group_details[$user_detail['groupid']]['groupname'];
				switch($user_detail['user_status'])
				{
					case 'g':
						$master_data['data'][$k]['user_status'] = $this->view->translate('green');
						break;
					case 'y':
						$master_data['data'][$k]['user_status'] = $this->view->translate('yellow');
						break;
					case 'r':
						$master_data['data'][$k]['user_status'] = $this->view->translate('red');
						break;
				}
			}
			return $master_data;
		}

		public function aktuelle_patienten_munche_west($param)
		{
			//report_id=131
			//report_name = Aktuelle Patienten Munche West

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
			$whereepid = $this->getDocCondition();

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			//get active ipids

			$activeipids = $this->getActiveIpids();

			//Get patient master data

			$all_patient_data = Doctrine_Query::create()
				->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
				->from('PatientMaster p')
				->whereIn('ipid', $activeipids)
				->andWhere('isdelete = 0');
			$all_patient_data->leftJoin("p.EpidIpidMapping e");
			$all_patient_data->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $clientid);

			$patients_data_res = $all_patient_data->fetchArray();

			//get epids

			foreach($patients_data_res as $patient)
			{
				$patient_epids[] = $patient["EpidIpidMapping"]["epid"];
			}

			foreach($patients_data_res as $value)
			{
				$patient_details[$value['ipid']]['epid'] = $value['EpidIpidMapping']['epid'];
				$patient_details[$value['ipid']]['ipid'] = $value['ipid'];
				$patient_details[$value['ipid']]['first_name'] = $value['first_name'];
				$patient_details[$value['ipid']]['last_name'] = $value['last_name'];
				$patient_details[$value['ipid']]['adress'] = $value['street1'] . ' ' . $value['zip'] . ' ' . $value['city'];
				$patient_details[$value['ipid']]['birthd'] = $value['birthd'];
			}


			//get contact person

			$contact = new ContactPersonMaster();
			$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
			foreach($contactpersons_loc_array as $k => $value)
			{

				foreach($value as $kv => $valcontact)
				{
					$patient_contactperson[$valcontact['ipid']][] = $valcontact['cnt_last_name'] . ", " . $valcontact['cnt_first_name'] . '<br />' . $valcontact['cnt_phone'];
				}
			}


			/* -------------------------Get Diagnosis HD (main)------------------------------------------ */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($clientid, $abb2);

			$typeid[] = '99999999';
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid[] = $valdia['id'];
			}
			$abbr = "'ND'";
			$ddarr_nd = $dg->getDiagnosisTypes($clientid, $abbr);

			$typeid_nd[] = '99999999';
			foreach($ddarr_nd as $nkey => $nvaldia)
			{
				$typeid_nd[] = $nvaldia['id'];
			}

			/* -------------------------Get Patients - Diagnosis data------------------------------------------ */
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->get_multiple_patients_diagnosis($activeipids, $typeid);
			$dianoarray_nd = $patdia->get_multiple_patients_diagnosis($activeipids, $typeid_nd);

			foreach($dianoarray as $diangosis)
			{
				$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
			}
			foreach($diagnosisarr as $d_key => $d_val)
			{
				$diagnosisarr[$d_key] = implode(", ", $d_val);
			}

			foreach($dianoarray_nd as $diangosis_nd)
			{
				$diagnosisarr_nd[$diangosis_nd['ipid']][] = $diangosis_nd['diagnosis'];
			}
			foreach($diagnosisarr_nd as $nd_key => $nd_val)
			{
				$diagnosisarr_nd[$nd_key] = implode(", ", $nd_val);
			}


			/* ---------------------------------------------------------------------------------------- */
			// get patient medication
			$drugs = Doctrine_Query::create()
				->select('*')
				->from('PatientDrugPlan')
				->whereIn('ipid', $activeipids)
				->andWhere("isdelete = '0'")
				->orderBy("id ASC");
			$drugsarray = $drugs->fetchArray();

			foreach($drugsarray as $key => $drugp)
			{
				$master_meds[] = $drugp['medication_master_id'];
			}
			if(empty($master_meds))
			{
				$master_meds[] = 'XXXXXX';
			}

			$medic = Doctrine_Query::create()
				->select('*')
				->from('Medication')
				->whereIn("id", $master_meds);
// 			->andWhere('isdelete = "0"');
			$master_medication = $medic->fetchArray();

			foreach($master_medication as $k_medi => $v_medi)
			{
				$medications[$v_medi['id']] = $v_medi['name'];
			}

			foreach($drugsarray as $key => $drugp)
			{
				if($drugp['isbedarfs'] == 1)
				{
					$patient_medication_bedarfs[$drugp['ipid']][] = $medications[$drugp['medication_master_id']];
				}
				else if($drugp['isschmerzpumpe'] == 1)
				{
					$patient_medication_medipumpp[$drugp['ipid']][] = $medications[$drugp['medication_master_id']];
				}
				else
					$patient_medication[$drugp['ipid']][] = $medications[$drugp['medication_master_id']] . ' | ' . $drugp['dosage'];
			}


			//get patient memo

			$memo = new PatientMemo();
			$memos = $memo->get_multiple_patient_memo($activeipids);

			//Get patient stammblat besonderer
			$patient_stamm_besondere = Doctrine_Query::create()
				->select("*")
				->from('Stammdatenerweitert')
				->whereIn('ipid', $activeipids);

			$patient_besondere = $patient_stamm_besondere->fetchArray();

			foreach($patient_besondere as $k => $val)
			{
				$patient_kunstliche[$val['ipid']] = $val['kunstlichemore'];
			}

			/* -------------------------Get  all client users  ------------------------------------------ */

			$user_q = Doctrine_Query::create()
				->select('id,last_name,first_name,user_title')
				->from('User')
				->where('clientid = "' . $logininfo->clientid . '" ')
				->andWhere('isdelete = 0')
				->andWhere('isactive = 0');
			$users_arr = $user_q->fetchArray();

			foreach($users_arr as $kus => $user_val)
			{
				$user_details[$user_val['id']] = $user_val['user_title'] . ' ' . $user_val['last_name'] . ', ' . $user_val['first_name'];
			}

			// Get treated by users

			$treatedbyQ = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->whereIn('epid', $patient_epids);
			$treatedbyarr = $treatedbyQ->fetchArray();

			foreach($treatedbyarr as $ku => $as_values)
			{
				$epids2users[$as_values['epid']][] = $user_details[$as_values['userid']];
			}

			/* ------------------------------------------------------------------------------------------- */
			//get patient health insurance
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $activeipids);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $valhealth)
			{
				$patients_health[$valhealth['ipid']] = $valhealth['company_name'];
			}

			/* print_r($patients_health);
			  exit; */
			/* ------------------------------------------------------------------------------------------- */
			//Get master data
			foreach($patient_details as $k => $val)
			{

				$master_data['data'][$k]['epid'] = $val['epid'];
				$master_data['data'][$k]['patient_lastname'] = $val['last_name'];
				$master_data['data'][$k]['patient_firstname'] = $val['first_name'];
				$master_data['data'][$k]['pat_addresse'] = $val['adress'];
				$master_data['data'][$k]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
				$master_data['data'][$k]['contactperson'] = implode(", ", $patient_contactperson[$val['ipid']]);
				$master_data['data'][$k]['diagnosis'] = $diagnosisarr[$val['ipid']] . '<br />' . $diagnosisarr_nd[$val['ipid']];
				$master_data['data'][$k]['medication'] = implode(", ", $patient_medication[$val['ipid']]);
				$master_data['data'][$k]['bedarfsmedication'] = implode(", ", $patient_medication_bedarfs[$val['ipid']]);
				$master_data['data'][$k]['schmerzpumpe'] = implode(", ", $patient_medication_medipumpp[$val['ipid']]);
				$master_data['data'][$k]['kunstlich'] = $patient_kunstliche[$val['ipid']];
				$master_data['data'][$k]['memo'] = $memos[$val['ipid']];
				$master_data['data'][$k]['treatedby'] = implode("<br /> ", $epids2users[$patient_details[$val['ipid']]['epid']]);
				$master_data['data'][$k]['health_insurance'] = $patients_health[$val['ipid']];
			}
			return $master_data;
		}

		public function nie_performance_statistics($params)
		{
			// report_id = 132
			// report_name = Leistungs-Statistik Niedersachsen
			// the report filters for the actions done.
			// it shows all invoiceable actions done by the users in the report period.

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$required_user = $this->getDocCondition(true);
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
			
			$x = 0;
			foreach($period['start'] as $s => $start_date)
			{
			    $report_dates[$x]['start'] = $start_date;
			    $x++;
			}
			
			$v = 0;
			foreach($period['end'] as $e => $end_date)
			{
			    $report_dates[$v]['end'] = $end_date;
			    $v++;
			}
			
			
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$activ_ipids = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['treatment_days'] = $p_details['treatment_days'];
			}


			$actpatients = Doctrine_Query::create()
				->select("p.ipid")
				->from('PatientMaster p')
				->whereIn('p.ipid', $activ_ipids);
			$actpatients->leftJoin("p.EpidIpidMapping e");
			$actpatients->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$actipidarray = $actpatients->fetchArray();

			foreach($actipidarray as $kj => $pj)
			{
				$ipidarr[] = $pj['ipid'];
			}




			if(empty($ipidarr))
			{
				$ipidarr[] = "XXXXXX";
			}

			/* ------------------------------- Get sapv overall data--------------------------------------- */
			$ov_patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung')
				->whereIn('ipid', $ipidarr)
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ');
			$ov_patientsapv_array = $ov_patientsapv->fetchArray();

			foreach($ov_patientsapv_array as $keys => $sapv)
			{

				if(!$sapv_data [$sapv ['ipid']])
				{
					$sapv_data [$sapv ['ipid']] = array();
				}

				$sapv_data [$sapv ['ipid']] = array_merge($sapv_data [$sapv ['ipid']], $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false));
			}

			foreach($sapv_data as $ipid => $sapv_days)
			{
				foreach($sapv_days as $ky => $daysapv)
				{
					if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days']))
					{ // ??
						$patient_sapv_data [$ipid] [] = $daysapv;
					}
				}
			}

			if($_REQUEST['show_details'] == "1")
			{
				print_r("\n sapv details \n ");
				print_r($patient_sapv_data);
			}

			/* ------------------------------- Get client users --------------------------------------- */
			$user = new User();
			$client_users = $user->getClientsUsers($clientid);
			//get all related users details
			/* print_r($client_users); exit; */
			$master_groups_first = array('4', '5');


			$usergroups = new Usergroup();
			$client_user_groups_first = $usergroups->getUserGroups($master_groups_first);
			// 		print_r($client_user_groups_first);
			foreach($client_user_groups_first as $k_group_f => $v_group_f)
			{
				$client_groups[] = $v_group_f['id'];
				$master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
			}

			$nurse_users_first = array();
			$doctor_users_first = array();
			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
				$master_user_details[$v_cuser_det['id']] = $v_cuser_det;
				if(in_array($v_cuser_det['groupid'], $master2client['5']))
				{
					$nurse_users_first[] = $v_cuser_det['id'];
				}
				else if(in_array($v_cuser_det['groupid'], $master2client['4']))
				{
					$doctor_users_first[] = $v_cuser_det['id'];
				}
			}



			/* ------------------------------- Price list in report period --------------------------------------- */
			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($period['start']['0'], end($period['end']));


			/* ------------------------------------------ Get  patient approved visits types for report period --------------------------------------------- */
			$default_pavt = Pms_CommonData::default_approved_visit_type(); // if nothing saved -> get default
			$pavt_mod = new PatientApprovedVisitTypes();
			$existing_pavt_array = $pavt_mod->patients_approved_visits_overall($ipidarr);
			$pavt_array = $pavt_mod->patients_approved_visits_in_period($ipidarr, $period['start']['0'], end($period['end']));


			foreach($ipidarr as $k => $ipid)
			{
				if(!$existing_pavt_array[$ipid])
				{
					$pavt_array[$ipid][0]['ipid'] = $ipid;
					$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
					$pavt_array[$ipid][0]['start_date'] = date('d.m.Y', strtotime($period['start']['0'])); // start period
					$pavt_array[$ipid][0]['end_date'] = date('d.m.Y', strtotime(end($period['end']))); // end period
					$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
				}
			}

			$x = 0;

			foreach($pavt_array as $p_ipid => $pavtvalue)
			{
				foreach($pavtvalue as $k => $tv)
				{
					$pavt[$tv['ipid']][$x]['visit_type'] = $tv['visit_type'];
					$pavt[$tv['ipid']][$x]['start_date'] = $tv['start_date'];

					if(empty($tv['end_date']) || $tv['end_date'] == "0000-00-00 00:00:00")
					{
						$pavt[$tv['ipid']][$x]['end_date'] = date('Y-m-d H:i:s');
					}
					else
					{
						$pavt[$tv['ipid']][$x]['end_date'] = $tv['end_date'];
					}

					$pavt_days[$tv['ipid']][$tv['visit_type']] = $pm->getDaysInBetween(date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['start_date'])), date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['end_date'])));


					if(empty($patient_vists_type_int[$tv['ipid']][$tv['visit_type']]))
					{
						$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array();
					}
					$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array_merge($patient_vists_type_int[$tv['ipid']][$tv['visit_type']], $pavt_days[$tv['ipid']][$tv['visit_type']]);

					$x++;
				}
			}


			/* ----------------------- Get doctor and nurse visits for all ipids but exclude verlauf deleted -------------------------- */

			//get verlauf deleted visits
			$visits_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'  OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form' ")
				->orderBy('course_date ASC');
			$deleted_visits_array = $visits_from_course->fetchArray();

			$del_visits['kvno_doctor_form'][] = 'XXXXXX';
			$del_visits['kvno_nurse_form'][] = 'XXXXXX';
			$del_visits['contact_form'][] = 'XXXXXX';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}


			
			
			
			
			
			
			
			$nurse_visit_shortcuts = array("P1", "P2", "P3");
			$doctor_visit_shortcuts = array("A1", "A2");


			/* ----------------------- NURSE VISITS -------------------------- */
			$knurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $ipidarr)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']))
				->andWhere('isdelete ="0"')
				->orderBy('start_date ASC');
			$kvno_nurse_visits = $knurse_visits->fetchArray();


			if($_REQUEST['show_details'] == "1")
			{
				print_r("\n nurse visits \n ");
				print_r($kvno_nurse_visits);
			}


			foreach($kvno_nurse_visits as $k_n_visit => $v_n_visit)
			{
				$vizit_duration = '0';
				$vizit_date = date('Y-m-d', strtotime($v_n_visit['start_date']));
				$vizit_date_dmY = date('d.m.Y', strtotime($v_n_visit['start_date']));
				$vizit_duration = Pms_CommonData::calculate_visit_duration(date('H', strtotime($v_n_visit['start_date'])), date('H', strtotime($v_n_visit['end_date'])), date('i', strtotime($v_n_visit['start_date'])), date('i', strtotime($v_n_visit['end_date'])), $v_n_visit['start_date']);

				$user_visits['nurse'][$v_n_visit['create_user']][$v_n_visit['id']]['ipid'] = $v_n_visit['ipid'];
				$user_visits['nurse'][$v_n_visit['create_user']][$v_n_visit['id']]['date'] = $vizit_date;
				$user_visits['nurse'][$v_n_visit['create_user']][$v_n_visit['id']]['duration'] = $vizit_duration;


				if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p3']))
				{
					foreach($nurse_visit_shortcuts as $k_shortcut_nurse => $v_shortcut_nurse)
					{
						$shortcut = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['shortcut'];

						if(
							$vizit_duration >= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_end'] && in_array($vizit_date, $patient_sapv_data[$v_n_visit['ipid']]) && in_array($vizit_date_dmY, $patientDetails [$v_n_visit['ipid']]['treatment_days']) && in_array($v_n_visit['create_user'], $nurse_users_first)
						)
						{

							$user_master_data[$v_n_visit['create_user']][$shortcut] += '1';
							$user_overall_data[$v_n_visit['create_user']] += '1';

							if(!in_array($v_n_visit['ipid'], $user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"]))
							{
								$user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"][] = $v_n_visit['ipid'];
								$user_master_data[$v_n_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_n_visit['ipid']]['epid'];
							}

							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
						}
						else
						{

							$user_master_data[$v_n_visit['create_user']][$shortcut] += '0';


							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
						}
					}
				}
				else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p2']))
				{

					if(
						(($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end']) ) && in_array($vizit_date, $patient_sapv_data[$v_n_visit['ipid']]) && in_array($vizit_date_dmY, $patientDetails [$v_n_visit['ipid']]['treatment_days']) && in_array($v_n_visit['create_user'], $nurse_users_first)
					)
					{
						$shortcut = "P2";

						$user_master_data[$v_n_visit['create_user']][$shortcut] += '1';
						$user_overall_data[$v_n_visit['create_user']] += '1';

						if(!in_array($v_n_visit['ipid'], $user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"]))
						{
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"][] = $v_n_visit['ipid'];
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_n_visit['ipid']]['epid'];
						}

						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = "P2";
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]["P2"]['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]["P2"]['price'];
					}
					else
					{
						$shortcut = "P2";

						$user_master_data[$v_n_visit['create_user']][$shortcut] += '0';
						$user_overall_data[$v_n_visit['create_user']] += '0';

						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P2';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P2']['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
					}


					if(
						$vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] && in_array($vizit_date, $patient_sapv_data[$v_n_visit['ipid']]) && in_array($vizit_date_dmY, $patientDetails [$v_n_visit['ipid']]['treatment_days']) && in_array($v_n_visit['create_user'], $nurse_users_first)
					)
					{
						$shortcut = "P1";
						$user_master_data[$v_n_visit['create_user']][$shortcut] += '1';
						$user_overall_data[$v_n_visit['create_user']] += '1';
						if(!in_array($v_n_visit['ipid'], $user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"]))
						{
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"][] = $v_n_visit['ipid'];
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_n_visit['ipid']]['epid'];
						}

						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]['P1']['price'];
					}
					else
					{
						$shortcut = "P1";

						$user_master_data[$v_n_visit['create_user']][$shortcut] += '0';
						$user_overall_data[$v_n_visit['create_user']] += '0';


						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
					}
				}
				else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p1']))
				{

					if(
						(($vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end'])) && in_array($vizit_date, $patient_sapv_data[$v_n_visit['ipid']]) && in_array($vizit_date_dmY, $patientDetails [$v_n_visit['ipid']]['treatment_days']) && in_array($v_n_visit['create_user'], $nurse_users_first)
					)
					{
						$shortcut = "P1";

						$user_master_data[$v_n_visit['create_user']][$shortcut] += '1';
						$user_overall_data[$v_n_visit['create_user']] += '1';
						if(!in_array($v_n_visit['ipid'], $user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"]))
						{
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"][] = $v_n_visit['ipid'];
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_n_visit['ipid']]['epid'];
						}
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = "P1";
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]["P1"]['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]["P1"]['price'];
					}
					else
					{
						$shortcut = "P1";

						$user_master_data[$v_n_visit['create_user']][$shortcut] += '0';
						$user_overall_data[$v_n_visit['create_user']] += '0';

						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
					}
				}
			}

			/* ----------------------- DOCTOR VISITS -------------------------- */
			$kdoctor_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->whereIn('ipid ', $ipidarr)
				->andWhereNotIn('id', $del_visits['kvno_doctor_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']))
				->andWhere('isdelete ="0"')
				->orderBy('start_date ASC');
			$kvno_doctor_visits = $kdoctor_visits->fetchArray();

			if($_REQUEST['show_details'] == "1")
			{
				print_r("\n doctor visits \n ");
				print_r($kvno_doctor_visits);
			}

			foreach($kvno_doctor_visits as $k_d_visit => $v_d_visit)
			{
				$doc_visit_duration = '0';
				$doc_visit_date = date('Y-m-d', strtotime($v_d_visit['vizit_date']));
				$doc_visit_date_dmY = date('d.m.Y', strtotime($v_d_visit['vizit_date']));
				$doc_visit_duration = Pms_CommonData::calculate_visit_duration(str_pad($v_d_visit['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_m'], 2, "0", STR_PAD_LEFT), $v_d_visit['vizit_date']);


				foreach($doctor_visit_shortcuts as $k_shortcut_doctor => $v_shortcut_doctor)
				{
					$doc_shortcut = $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['shortcut'];

					if(
						$doc_visit_duration >= $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['t_start'] && $doc_visit_duration <= $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['t_end'] && in_array($doc_visit_date, $patient_sapv_data[$v_d_visit['ipid']]) && in_array($doc_visit_date_dmY, $patientDetails [$v_d_visit['ipid']]['real_active_days']) && in_array($v_d_visit['create_user'], $doctor_users_first)
					)
					{
						$user_master_data[$v_d_visit['create_user']][$doc_shortcut] += '1';
						$user_overall_data[$v_d_visit['create_user']] += '1';

						if(!in_array($v_d_visit['ipid'], $user_master_data[$v_d_visit['create_user']][$doc_shortcut . "_ipids"]))
						{
							$user_master_data[$v_d_visit['create_user']][$shortcut . "_ipids"][] = $v_d_visit['ipid'];
							$user_master_data[$v_d_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_d_visit['ipid']]['epid'];
						}

						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['name'] = $doc_shortcut;
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['qty'] += '1';
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['price'] = $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['price'];
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['shortcut_total'] += $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['price'];
					}
					else
					{
						$user_master_data[$v_d_visit['create_user']][$doc_shortcut] += '0';
						$user_overall_data[$v_d_visit['create_user']] += '0';
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['name'] = $doc_shortcut;
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['qty'] += '0';
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['price'] = $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['price'];
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['shortcut_total'] += 0;
					}
				}
			}
			/* -----------------------Get all CONTACT FORMS  from patients :: 21.10.2016 ------------------------------ */
				
			$cf = new ContactForms();
			$contact_forms = $cf->get_multiple_contact_form_by_periods($ipidarr, $report_dates, $del_visits['contact_form'],true);

			$nurse_users = $nurse_users_first;
			$doctor_users =  $doctor_users_first;;
				
			$doctor_contact_forms = array();
			$nurse_contact_forms = array();
			
			foreach($contact_forms as $kcf => $day_cfs)
			{
			    foreach($day_cfs as $k_dcf => $v_dcf)
			    {
			        if(in_array($v_dcf['create_user'], $doctor_users) || in_array($v_dcf['change_user'], $doctor_users))
			        {
			            $doctor_contact_forms[] = $v_dcf;
			        }
			
			        if(in_array($v_dcf['create_user'], $nurse_users) || in_array($v_dcf['change_user'], $nurse_users))
			        {
			            $nurse_contact_forms[] = $v_dcf;
			        }
			    }
			}
			
			/* --------------------------------- Get nurse visits (contactform) --------------------------------------------------- */
			foreach($nurse_contact_forms as $k_ipid => $n_cf_visit)
			{
			    
    			    $nurse_visit_date_cf = date('Y-m-d', strtotime($n_cf_visit['billable_date']));
    			    $vizit_date = date('Y-m-d', strtotime($n_cf_visit['billable_date']));
    			    $vizit_date_dmY = date('d.m.Y', strtotime($n_cf_visit['billable_date']));
    			    $cf_nurse_visit = array();
    			    $visit_type = '';
    			    $vizit_duration = $n_cf_visit['visit_duration'];
    			
    			    
    			    if(in_array($vizit_date, $patient_vists_type_int[$n_cf_visit['ipid']]['p3']))
    				{
    					foreach($nurse_visit_shortcuts as $k_shortcut_nurse => $v_shortcut_nurse)
    					{
    						$shortcut = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['shortcut'];
    
    				 
    						if(
    							$vizit_duration >= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_end'] 
    						    && in_array($vizit_date, $patient_sapv_data[$n_cf_visit['ipid']]) 
    						    && in_array($vizit_date_dmY, $patientDetails [$n_cf_visit['ipid']]['treatment_days']) 
    						    && in_array($n_cf_visit['create_user'], $nurse_users_first)
    						)
    						{
    
    							$user_master_data[$n_cf_visit['create_user']][$shortcut] += '1';
    							$user_overall_data[$n_cf_visit['create_user']] += '1';
    
    							if(!in_array($n_cf_visit['ipid'], $user_master_data[$n_cf_visit['create_user']][$shortcut . "_ipids"]))
    							{
    								$user_master_data[$n_cf_visit['create_user']][$shortcut . "_ipids"][] = $n_cf_visit['ipid'];
    								$user_master_data[$n_cf_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$n_cf_visit['ipid']]['epid'];
    							}
    
    							$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
    							$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
    							$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
    							$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
    						}
    						else
    						{
    
    							$user_master_data[$n_cf_visit['create_user']][$shortcut] += '0';
    
    
    							$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
    							$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
    							$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
    							$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
    						}
    					}
    				}
    				else if(in_array($vizit_date, $patient_vists_type_int[$n_cf_visit['ipid']]['p2']))
    				{
    
    					if(
    						(($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end']) 
    						    || ($vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] 
    						&& $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end']) ) 
    					    && in_array($vizit_date, $patient_sapv_data[$n_cf_visit['ipid']]) 
    					    && in_array($vizit_date_dmY, $patientDetails [$n_cf_visit['ipid']]['treatment_days']) 
    					    && in_array($n_cf_visit['create_user'], $nurse_users_first)
    					)
    					{
    						$shortcut = "P2";
    
    						$user_master_data[$n_cf_visit['create_user']][$shortcut] += '1';
    						$user_overall_data[$n_cf_visit['create_user']] += '1';
    
    						if(!in_array($n_cf_visit['ipid'], $user_master_data[$n_cf_visit['create_user']][$shortcut . "_ipids"]))
    						{
    							$user_master_data[$n_cf_visit['create_user']][$shortcut . "_ipids"][] = $n_cf_visit['ipid'];
    							$user_master_data[$n_cf_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$n_cf_visit['ipid']]['epid'];
    						}
    
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['name'] = "P2";
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]["P2"]['price'];
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]["P2"]['price'];
    					}
    					else
    					{
    						$shortcut = "P2";
    
    						$user_master_data[$n_cf_visit['create_user']][$shortcut] += '0';
    						$user_overall_data[$n_cf_visit['create_user']] += '0';
    
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P2';
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P2']['price'];
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
    					}
    
    
    					if(
    						$vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] 
    					    && in_array($vizit_date, $patient_sapv_data[$n_cf_visit['ipid']]) 
    					    && in_array($vizit_date_dmY, $patientDetails [$n_cf_visit['ipid']]['treatment_days']) 
    					    && in_array($n_cf_visit['create_user'], $nurse_users_first)
    					)
    					{
    						$shortcut = "P1";
    						$user_master_data[$n_cf_visit['create_user']][$shortcut] += '1';
    						$user_overall_data[$n_cf_visit['create_user']] += '1';
    						if(!in_array($n_cf_visit['ipid'], $user_master_data[$n_cf_visit['create_user']][$shortcut . "_ipids"]))
    						{
    							$user_master_data[$n_cf_visit['create_user']][$shortcut . "_ipids"][] = $n_cf_visit['ipid'];
    							$user_master_data[$n_cf_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$n_cf_visit['ipid']]['epid'];
    						}
    
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]['P1']['price'];
    					}
    					else
    					{
    						$shortcut = "P1";
    
    						$user_master_data[$n_cf_visit['create_user']][$shortcut] += '0';
    						$user_overall_data[$n_cf_visit['create_user']] += '0';
    
    
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
    					}
    				}
    				else if(in_array($vizit_date, $patient_vists_type_int[$n_cf_visit['ipid']]['p1']))
    				{
    
    					if(
    						(($vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end']) || 
    						    ($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end']) || 
    						    ($vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end'])) && 
    					    in_array($vizit_date, $patient_sapv_data[$n_cf_visit['ipid']]) && in_array($vizit_date_dmY, $patientDetails [$n_cf_visit['ipid']]['treatment_days']) && 
    					    in_array($n_cf_visit['create_user'], $nurse_users_first)
    					)
    					{
    						$shortcut = "P1";
    
    						$user_master_data[$n_cf_visit['create_user']][$shortcut] += '1';
    						$user_overall_data[$n_cf_visit['create_user']] += '1';
    						if(!in_array($n_cf_visit['ipid'], $user_master_data[$n_cf_visit['create_user']][$shortcut . "_ipids"]))
    						{
    							$user_master_data[$n_cf_visit['create_user']][$shortcut . "_ipids"][] = $n_cf_visit['ipid'];
    							$user_master_data[$n_cf_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$n_cf_visit['ipid']]['epid'];
    						}
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['name'] = "P1";
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]["P1"]['price'];
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]["P1"]['price'];
    					}
    					else
    					{
    						$shortcut = "P1";
    
    						$user_master_data[$n_cf_visit['create_user']][$shortcut] += '0';
    						$user_overall_data[$n_cf_visit['create_user']] += '0';
    
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
    						$master_data[$n_cf_visit['ipid']][$n_cf_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
    					}
    				}
			    
			}
			
			foreach($doctor_contact_forms as $k_d_visit => $v_d_visit)
			{
			    $doc_visit_duration = '0';
			    $doc_visit_date = date('Y-m-d', strtotime($v_d_visit['billable_date']));
			    $doc_visit_date_dmY = date('d.m.Y', strtotime($v_d_visit['billable_date']));
			    $doc_visit_duration = $v_d_visit['visit_duration'];
			    
			
			    foreach($doctor_visit_shortcuts as $k_shortcut_doctor => $v_shortcut_doctor)
			    {
			        $doc_shortcut = $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['shortcut'];
			
			        if(
			            $doc_visit_duration >= $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['t_start'] && $doc_visit_duration <= $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['t_end'] && in_array($doc_visit_date, $patient_sapv_data[$v_d_visit['ipid']]) && in_array($doc_visit_date_dmY, $patientDetails [$v_d_visit['ipid']]['real_active_days']) && in_array($v_d_visit['create_user'], $doctor_users_first)
			        )
			        {
			            $user_master_data[$v_d_visit['create_user']][$doc_shortcut] += '1';
			            $user_overall_data[$v_d_visit['create_user']] += '1';
			
			            if(!in_array($v_d_visit['ipid'], $user_master_data[$v_d_visit['create_user']][$doc_shortcut . "_ipids"]))
			            {
			                $user_master_data[$v_d_visit['create_user']][$shortcut . "_ipids"][] = $v_d_visit['ipid'];
			                $user_master_data[$v_d_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_d_visit['ipid']]['epid'];
			            }
			
			            $master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['name'] = $doc_shortcut;
			            $master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['qty'] += '1';
			            $master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['price'] = $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['price'];
			            $master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['shortcut_total'] += $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['price'];
			        }
			        else
			        {
			            $user_master_data[$v_d_visit['create_user']][$doc_shortcut] += '0';
			            $user_overall_data[$v_d_visit['create_user']] += '0';
			            $master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['name'] = $doc_shortcut;
			            $master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['qty'] += '0';
			            $master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['price'] = $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['price'];
			            $master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['shortcut_total'] += 0;
			        }
			    }
			}
			
			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */

			$course_v = Doctrine_Query::create()
				->select("create_user,count(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "')) as V_number")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
				->groupBy("create_user");
			if(!empty($required_user))
			{
				$course_v->andWhere('create_user = "' . $required_user . '"');
			}

			$course_v_array = $course_v->fetchArray();


			if($_REQUEST['show_details'] == "1")
			{
				print_r("\n user data \n ");
				print_r($user_master_data);
				exit;
			}

			foreach($course_v_array as $k_v => $user_v)
			{
				$shortcut_V[$user_v['create_user']] = $user_v['V_number'];

				$user_overall_data[$user_v['create_user']] += '1';
			}



			foreach($client_users as $user_id => $user_details)
			{

				if($user_overall_data[$user_id] > 0)
				{

					$MasterData['data'][$user_id]['username'] = $user_details['username'];


					if($user_master_data[$user_id]["A1"])
					{
						$MasterData['data'][$user_id]['a1_visits'] = $user_master_data[$user_id]["A1"];
					}
					else
					{
						$MasterData['data'][$user_id]['a1_visits'] = 0;
					}


					if($user_master_data[$user_id]["A2"])
					{
						$MasterData['data'][$user_id]['a2_visits'] = $user_master_data[$user_id]["A2"];
					}
					else
					{
						$MasterData['data'][$user_id]['a2_visits'] = 0;
					}


					if($user_master_data[$user_id]["P1"])
					{
						$MasterData['data'][$user_id]['p1_visits'] = $user_master_data[$user_id]["P1"];
					}
					else
					{
						$MasterData['data'][$user_id]['p1_visits'] = 0;
					}


					if($user_master_data[$user_id]["P2"])
					{
						$MasterData['data'][$user_id]['p2_visits'] = $user_master_data[$user_id]["P2"];
					}
					else
					{
						$MasterData['data'][$user_id]['p2_visits'] = 0;
					}


					if($user_master_data[$user_id]["P3"])
					{
						$MasterData['data'][$user_id]['p3_visits'] = $user_master_data[$user_id]["P3"];
					}
					else
					{
						$MasterData['data'][$user_id]['p3_visits'] = 0;
					}


					if($shortcut_V[$user_id])
					{
						//stop using caps in array keys
//		 		$MasterData['data'][$user_id]['V_shortcut'] = $shortcut_V[$user_id];
						$MasterData['data'][$user_id]['v_shortcut'] = $shortcut_V[$user_id];
					}
					else
					{
						//stop using caps in array keys
//		 		$MasterData['data'][$user_id]['V_shortcut'] = 0;
						$MasterData['data'][$user_id]['v_shortcut'] = 0;
					}
				}
			}


			return $MasterData;
		}

		public function nie_performance_statistics_161021($params)
		{
			// report_id = 132
			// report_name = Leistungs-Statistik Niedersachsen
			// the report filters for the actions done.
			// it shows all invoiceable actions done by the users in the report period.

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$required_user = $this->getDocCondition(true);
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$activ_ipids = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['treatment_days'] = $p_details['treatment_days'];
			}


			$actpatients = Doctrine_Query::create()
				->select("p.ipid")
				->from('PatientMaster p')
				->whereIn('p.ipid', $activ_ipids);
			$actpatients->leftJoin("p.EpidIpidMapping e");
			$actpatients->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$actipidarray = $actpatients->fetchArray();

			foreach($actipidarray as $kj => $pj)
			{
				$ipidarr[] = $pj['ipid'];
			}




			if(empty($ipidarr))
			{
				$ipidarr[] = "XXXXXX";
			}

			/* ------------------------------- Get sapv overall data--------------------------------------- */
			$ov_patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung')
				->whereIn('ipid', $ipidarr)
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ');
			$ov_patientsapv_array = $ov_patientsapv->fetchArray();

			foreach($ov_patientsapv_array as $keys => $sapv)
			{

				if(!$sapv_data [$sapv ['ipid']])
				{
					$sapv_data [$sapv ['ipid']] = array();
				}

				$sapv_data [$sapv ['ipid']] = array_merge($sapv_data [$sapv ['ipid']], $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false));
			}

			foreach($sapv_data as $ipid => $sapv_days)
			{
				foreach($sapv_days as $ky => $daysapv)
				{
					if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days']))
					{ // ??
						$patient_sapv_data [$ipid] [] = $daysapv;
					}
				}
			}

			if($_REQUEST['show_details'] == "1")
			{
				print_r("\n sapv details \n ");
				print_r($patient_sapv_data);
			}

			/* ------------------------------- Get client users --------------------------------------- */
			$user = new User();
			$client_users = $user->getClientsUsers($clientid);
			//get all related users details
			/* print_r($client_users); exit; */
			$master_groups_first = array('4', '5');


			$usergroups = new Usergroup();
			$client_user_groups_first = $usergroups->getUserGroups($master_groups_first);
			// 		print_r($client_user_groups_first);
			foreach($client_user_groups_first as $k_group_f => $v_group_f)
			{
				$client_groups[] = $v_group_f['id'];
				$master2client[$v_group_f['groupmaster']][] = $v_group_f['id'];
			}

			$nurse_users_first = array();
			$doctor_users_first = array();
			foreach($client_users as $k_cuser_det => $v_cuser_det)
			{
				$master_user_details[$v_cuser_det['id']] = $v_cuser_det;
				if(in_array($v_cuser_det['groupid'], $master2client['5']))
				{
					$nurse_users_first[] = $v_cuser_det['id'];
				}
				else if(in_array($v_cuser_det['groupid'], $master2client['4']))
				{
					$doctor_users_first[] = $v_cuser_det['id'];
				}
			}



			/* ------------------------------- Price list in report period --------------------------------------- */
			$p_list = new PriceList();
			$master_price_list = $p_list->get_period_price_list($period['start']['0'], end($period['end']));


			/* ------------------------------------------ Get  patient approved visits types for report period --------------------------------------------- */
			$default_pavt = Pms_CommonData::default_approved_visit_type(); // if nothing saved -> get default
			$pavt_mod = new PatientApprovedVisitTypes();
			$existing_pavt_array = $pavt_mod->patients_approved_visits_overall($ipidarr);
			$pavt_array = $pavt_mod->patients_approved_visits_in_period($ipidarr, $period['start']['0'], end($period['end']));


			foreach($ipidarr as $k => $ipid)
			{
				if(!$existing_pavt_array[$ipid])
				{
					$pavt_array[$ipid][0]['ipid'] = $ipid;
					$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
					$pavt_array[$ipid][0]['start_date'] = date('d.m.Y', strtotime($period['start']['0'])); // start period
					$pavt_array[$ipid][0]['end_date'] = date('d.m.Y', strtotime(end($period['end']))); // end period
					$pavt_array[$ipid][0]['visit_type'] = $default_pavt;
				}
			}

			$x = 0;

			foreach($pavt_array as $p_ipid => $pavtvalue)
			{
				foreach($pavtvalue as $k => $tv)
				{
					$pavt[$tv['ipid']][$x]['visit_type'] = $tv['visit_type'];
					$pavt[$tv['ipid']][$x]['start_date'] = $tv['start_date'];

					if(empty($tv['end_date']) || $tv['end_date'] == "0000-00-00 00:00:00")
					{
						$pavt[$tv['ipid']][$x]['end_date'] = date('Y-m-d H:i:s');
					}
					else
					{
						$pavt[$tv['ipid']][$x]['end_date'] = $tv['end_date'];
					}

					$pavt_days[$tv['ipid']][$tv['visit_type']] = $pm->getDaysInBetween(date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['start_date'])), date('Y-m-d', strtotime($pavt[$tv['ipid']][$x]['end_date'])));


					if(empty($patient_vists_type_int[$tv['ipid']][$tv['visit_type']]))
					{
						$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array();
					}
					$patient_vists_type_int[$tv['ipid']][$tv['visit_type']] = array_merge($patient_vists_type_int[$tv['ipid']][$tv['visit_type']], $pavt_days[$tv['ipid']][$tv['visit_type']]);

					$x++;
				}
			}


			/* ----------------------- Get doctor and nurse visits for all ipids but exclude verlauf deleted -------------------------- */

			//get verlauf deleted visits
			$visits_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form'  OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form' ")
				->orderBy('course_date ASC');
			$deleted_visits_array = $visits_from_course->fetchArray();

			$del_visits['kvno_doctor_form'][] = 'XXXXXX';
			$del_visits['kvno_nurse_form'][] = 'XXXXXX';
			$del_visits['contact_form'][] = 'XXXXXX';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}


			$nurse_visit_shortcuts = array("P1", "P2", "P3");
			$doctor_visit_shortcuts = array("A1", "A2");


			/* ----------------------- NURSE VISITS -------------------------- */
			$knurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $ipidarr)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']))
				->andWhere('isdelete ="0"')
				->orderBy('start_date ASC');
			$kvno_nurse_visits = $knurse_visits->fetchArray();


			if($_REQUEST['show_details'] == "1")
			{
				print_r("\n nurse visits \n ");
				print_r($kvno_nurse_visits);
			}


			foreach($kvno_nurse_visits as $k_n_visit => $v_n_visit)
			{
				$vizit_duration = '0';
				$vizit_date = date('Y-m-d', strtotime($v_n_visit['start_date']));
				$vizit_date_dmY = date('d.m.Y', strtotime($v_n_visit['start_date']));
				$vizit_duration = Pms_CommonData::calculate_visit_duration(date('H', strtotime($v_n_visit['start_date'])), date('H', strtotime($v_n_visit['end_date'])), date('i', strtotime($v_n_visit['start_date'])), date('i', strtotime($v_n_visit['end_date'])), $v_n_visit['start_date']);

				$user_visits['nurse'][$v_n_visit['create_user']][$v_n_visit['id']]['ipid'] = $v_n_visit['ipid'];
				$user_visits['nurse'][$v_n_visit['create_user']][$v_n_visit['id']]['date'] = $vizit_date;
				$user_visits['nurse'][$v_n_visit['create_user']][$v_n_visit['id']]['duration'] = $vizit_duration;


				if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p3']))
				{
					foreach($nurse_visit_shortcuts as $k_shortcut_nurse => $v_shortcut_nurse)
					{
						$shortcut = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['shortcut'];

						if(
							$vizit_duration >= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0][$v_shortcut_nurse]['t_end'] && in_array($vizit_date, $patient_sapv_data[$v_n_visit['ipid']]) && in_array($vizit_date_dmY, $patientDetails [$v_n_visit['ipid']]['treatment_days']) && in_array($v_n_visit['create_user'], $nurse_users_first)
						)
						{

							$user_master_data[$v_n_visit['create_user']][$shortcut] += '1';
							$user_overall_data[$v_n_visit['create_user']] += '1';

							if(!in_array($v_n_visit['ipid'], $user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"]))
							{
								$user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"][] = $v_n_visit['ipid'];
								$user_master_data[$v_n_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_n_visit['ipid']]['epid'];
							}

							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
						}
						else
						{

							$user_master_data[$v_n_visit['create_user']][$shortcut] += '0';


							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = $shortcut;
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0][$v_shortcut_nurse]['price'];
							$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
						}
					}
				}
				else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p2']))
				{

					if(
						(($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end']) ) && in_array($vizit_date, $patient_sapv_data[$v_n_visit['ipid']]) && in_array($vizit_date_dmY, $patientDetails [$v_n_visit['ipid']]['treatment_days']) && in_array($v_n_visit['create_user'], $nurse_users_first)
					)
					{
						$shortcut = "P2";

						$user_master_data[$v_n_visit['create_user']][$shortcut] += '1';
						$user_overall_data[$v_n_visit['create_user']] += '1';

						if(!in_array($v_n_visit['ipid'], $user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"]))
						{
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"][] = $v_n_visit['ipid'];
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_n_visit['ipid']]['epid'];
						}

						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = "P2";
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]["P2"]['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]["P2"]['price'];
					}
					else
					{
						$shortcut = "P2";

						$user_master_data[$v_n_visit['create_user']][$shortcut] += '0';
						$user_overall_data[$v_n_visit['create_user']] += '0';

						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P2';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P2']['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
					}


					if(
						$vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end'] && in_array($vizit_date, $patient_sapv_data[$v_n_visit['ipid']]) && in_array($vizit_date_dmY, $patientDetails [$v_n_visit['ipid']]['treatment_days']) && in_array($v_n_visit['create_user'], $nurse_users_first)
					)
					{
						$shortcut = "P1";
						$user_master_data[$v_n_visit['create_user']][$shortcut] += '1';
						$user_overall_data[$v_n_visit['create_user']] += '1';
						if(!in_array($v_n_visit['ipid'], $user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"]))
						{
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"][] = $v_n_visit['ipid'];
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_n_visit['ipid']]['epid'];
						}

						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]['P1']['price'];
					}
					else
					{
						$shortcut = "P1";

						$user_master_data[$v_n_visit['create_user']][$shortcut] += '0';
						$user_overall_data[$v_n_visit['create_user']] += '0';


						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
					}
				}
				else if(in_array($vizit_date, $patient_vists_type_int[$v_n_visit['ipid']]['p1']))
				{

					if(
						(($vizit_duration >= $master_price_list[$vizit_date][0]['P1']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P1']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P2']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P2']['t_end']) || ($vizit_duration >= $master_price_list[$vizit_date][0]['P3']['t_start'] && $vizit_duration <= $master_price_list[$vizit_date][0]['P3']['t_end'])) && in_array($vizit_date, $patient_sapv_data[$v_n_visit['ipid']]) && in_array($vizit_date_dmY, $patientDetails [$v_n_visit['ipid']]['treatment_days']) && in_array($v_n_visit['create_user'], $nurse_users_first)
					)
					{
						$shortcut = "P1";

						$user_master_data[$v_n_visit['create_user']][$shortcut] += '1';
						$user_overall_data[$v_n_visit['create_user']] += '1';
						if(!in_array($v_n_visit['ipid'], $user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"]))
						{
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_ipids"][] = $v_n_visit['ipid'];
							$user_master_data[$v_n_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_n_visit['ipid']]['epid'];
						}
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = "P1";
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]["P1"]['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += $master_price_list[$vizit_date][0]["P1"]['price'];
					}
					else
					{
						$shortcut = "P1";

						$user_master_data[$v_n_visit['create_user']][$shortcut] += '0';
						$user_overall_data[$v_n_visit['create_user']] += '0';

						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['name'] = 'P1';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['qty'] += '0';
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['price'] = $master_price_list[$vizit_date][0]['P1']['price'];
						$master_data[$v_n_visit['ipid']][$v_n_visit['create_user']]['shortcuts'][$shortcut]['shortcut_total'] += 0;
					}
				}
			}

			/* ----------------------- DOCTOR VISITS -------------------------- */
			$kdoctor_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->whereIn('ipid ', $ipidarr)
				->andWhereNotIn('id', $del_visits['kvno_doctor_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']))
				->andWhere('isdelete ="0"')
				->orderBy('start_date ASC');
			$kvno_doctor_visits = $kdoctor_visits->fetchArray();

			if($_REQUEST['show_details'] == "1")
			{
				print_r("\n doctor visits \n ");
				print_r($kvno_doctor_visits);
			}

			foreach($kvno_doctor_visits as $k_d_visit => $v_d_visit)
			{
				$doc_visit_duration = '0';
				$doc_visit_date = date('Y-m-d', strtotime($v_d_visit['vizit_date']));
				$doc_visit_date_dmY = date('d.m.Y', strtotime($v_d_visit['vizit_date']));
				$doc_visit_duration = Pms_CommonData::calculate_visit_duration(str_pad($v_d_visit['kvno_begin_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_h'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_begin_date_m'], 2, "0", STR_PAD_LEFT), str_pad($v_d_visit['kvno_end_date_m'], 2, "0", STR_PAD_LEFT), $v_d_visit['vizit_date']);


				foreach($doctor_visit_shortcuts as $k_shortcut_doctor => $v_shortcut_doctor)
				{
					$doc_shortcut = $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['shortcut'];

					if(
						$doc_visit_duration >= $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['t_start'] && $doc_visit_duration <= $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['t_end'] && in_array($doc_visit_date, $patient_sapv_data[$v_d_visit['ipid']]) && in_array($doc_visit_date_dmY, $patientDetails [$v_d_visit['ipid']]['real_active_days']) && in_array($v_d_visit['create_user'], $doctor_users_first)
					)
					{
						$user_master_data[$v_d_visit['create_user']][$doc_shortcut] += '1';
						$user_overall_data[$v_d_visit['create_user']] += '1';

						if(!in_array($v_d_visit['ipid'], $user_master_data[$v_d_visit['create_user']][$doc_shortcut . "_ipids"]))
						{
							$user_master_data[$v_d_visit['create_user']][$shortcut . "_ipids"][] = $v_d_visit['ipid'];
							$user_master_data[$v_d_visit['create_user']][$shortcut . "_epids"][] = $patientDetails[$v_d_visit['ipid']]['epid'];
						}

						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['name'] = $doc_shortcut;
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['qty'] += '1';
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['price'] = $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['price'];
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['shortcut_total'] += $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['price'];
					}
					else
					{
						$user_master_data[$v_d_visit['create_user']][$doc_shortcut] += '0';
						$user_overall_data[$v_d_visit['create_user']] += '0';
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['name'] = $doc_shortcut;
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['qty'] += '0';
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['price'] = $master_price_list[$doc_visit_date][0][$v_shortcut_doctor]['price'];
						$master_data[$v_d_visit['ipid']][$v_d_visit['create_user']]['shortcuts'][$doc_shortcut]['shortcut_total'] += 0;
					}
				}
			}
			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */

			$course_v = Doctrine_Query::create()
				->select("create_user,count(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "')) as V_number")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']))
				->groupBy("create_user");
			if(!empty($required_user))
			{
				$course_v->andWhere('create_user = "' . $required_user . '"');
			}

			$course_v_array = $course_v->fetchArray();


			if($_REQUEST['show_details'] == "1")
			{
				print_r("\n user data \n ");
				print_r($user_master_data);
				exit;
			}

			foreach($course_v_array as $k_v => $user_v)
			{
				$shortcut_V[$user_v['create_user']] = $user_v['V_number'];

				$user_overall_data[$user_v['create_user']] += '1';
			}



			foreach($client_users as $user_id => $user_details)
			{

				if($user_overall_data[$user_id] > 0)
				{

					$MasterData['data'][$user_id]['username'] = $user_details['username'];


					if($user_master_data[$user_id]["A1"])
					{
						$MasterData['data'][$user_id]['a1_visits'] = $user_master_data[$user_id]["A1"];
					}
					else
					{
						$MasterData['data'][$user_id]['a1_visits'] = 0;
					}


					if($user_master_data[$user_id]["A2"])
					{
						$MasterData['data'][$user_id]['a2_visits'] = $user_master_data[$user_id]["A2"];
					}
					else
					{
						$MasterData['data'][$user_id]['a2_visits'] = 0;
					}


					if($user_master_data[$user_id]["P1"])
					{
						$MasterData['data'][$user_id]['p1_visits'] = $user_master_data[$user_id]["P1"];
					}
					else
					{
						$MasterData['data'][$user_id]['p1_visits'] = 0;
					}


					if($user_master_data[$user_id]["P2"])
					{
						$MasterData['data'][$user_id]['p2_visits'] = $user_master_data[$user_id]["P2"];
					}
					else
					{
						$MasterData['data'][$user_id]['p2_visits'] = 0;
					}


					if($user_master_data[$user_id]["P3"])
					{
						$MasterData['data'][$user_id]['p3_visits'] = $user_master_data[$user_id]["P3"];
					}
					else
					{
						$MasterData['data'][$user_id]['p3_visits'] = 0;
					}


					if($shortcut_V[$user_id])
					{
						//stop using caps in array keys
//		 		$MasterData['data'][$user_id]['V_shortcut'] = $shortcut_V[$user_id];
						$MasterData['data'][$user_id]['v_shortcut'] = $shortcut_V[$user_id];
					}
					else
					{
						//stop using caps in array keys
//		 		$MasterData['data'][$user_id]['V_shortcut'] = 0;
						$MasterData['data'][$user_id]['v_shortcut'] = 0;
					}
				}
			}


			return $MasterData;
		}

		public function vv_days_without_visits($params)
		{
			// report_id = 133
			// report_name = Vollversorgungstage ohne Besuch
			// filter for active patient in reported period.

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;

			$pm = new PatientMaster();
			$bayern_doctor_visit = new BayernDoctorVisit();

			$whereepid = $this->getDocCondition();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);

			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));

				if(strtotime($period['end'][$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period['end'][$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$active_patients_ipids = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $op_details)
			{
				$active_details [$op_details['details'] ['ipid']]['epid'] = $op_details['details'] ['epid'];
				$active_details [$op_details['details'] ['ipid']]['firstname'] = $op_details['details']['first_name'];
				$active_details [$op_details['details'] ['ipid']]['lastname'] = $op_details['details']['last_name'];
				$active_details [$op_details['details'] ['ipid']]['real_active_days'] = $op_details['real_active_days'];
				$active_details [$op_details['details'] ['ipid']]['real_active_days_no'] = $op_details['real_active_days_no'];
				$active_details [$op_details['details'] ['ipid']]['hospital_days'] = $op_details['hospital']['real_days'];
				$active_details [$op_details['details'] ['ipid']]['hospital_days_cs'] = $op_details['hospital']['real_days_cs'];
				$active_details [$op_details['details'] ['ipid']]['hospiz_days'] = $op_details['hospiz']['real_days'];
				$active_details [$op_details['details'] ['ipid']]['hospiz_days_cs'] = $op_details['hospiz']['real_days_cs'];
				$active_details [$op_details['details'] ['ipid']]['hospital_days_cs_no'] = $op_details['hospital']['real_days_cs_no'];
				$active_details [$op_details['details'] ['ipid']]['active_days_no_hospital_days'] = $op_details['real_active_days_no'] - $op_details['hospital']['real_days_cs_no'];

				if(!empty($op_details['hospital']['real_days_cs']))
				{
					$active_details [$op_details['details'] ['ipid']]['active_days_except_hospital_days'] = array_diff($op_details['real_active_days'], $op_details['hospital']['real_days_cs']);
				}
				else
				{
					$active_details [$op_details['details'] ['ipid']]['active_days_except_hospital_days'] = $op_details['real_active_days'];
				}
			}
			if(empty($active_patients_ipids))
			{
				$active_patients_ipids[] = "XXXXXX";
			}
			/* ------------------------------- Get sapv overall data--------------------------------------- */
			$ov_patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung')
				->whereIn('ipid', $active_patients_ipids)
				->andwhere('verordnet NOT LIKE ""')
				->andWhere('isdelete = 0');
			$ov_patientsapv_array = $ov_patientsapv->fetchArray();

			foreach($ov_patientsapv_array as $keys => $sapv)
			{
				$sapv_types_array = explode(",", $sapv['verordnet']);

				$highest_type = max($sapv_types_array);

				if($highest_type == "1")
				{
					$highest_value[$sapv['id']] = "BE";
				}
				elseif($highest_type == "2")
				{
					$highest_value[$sapv['id']] = "KO";
				}
				elseif($highest_type == "3")
				{
					$highest_value[$sapv['id']] = "TV";
				}
				elseif($highest_type == "4")
				{
					$highest_value[$sapv['id']] = "VV";
				}
				else
				{
					$highest_value[$sapv['id']] = "-";
				}

				$highest_sapv_type [$sapv ['ipid']][] = $highest_value[$sapv['id']];
				if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00' && strtotime($sapv['verorddisabledate']) <= strtotime($sapv['verordnungbis']))
				{
					$sapv ['verordnungbis'] = date('Y-m-d', strtotime($sapv['verorddisabledate']));
				}

				if(!$highest_sapv_data [$sapv ['ipid']][$highest_value[$sapv['id']]])
				{
					$highest_sapv_data [$sapv ['ipid']][$highest_value[$sapv['id']]] = array();
				}

				$highest_sapv_data [$sapv ['ipid']][$highest_value[$sapv['id']]] = array_merge($highest_sapv_data [$sapv ['ipid']][$highest_value[$sapv['id']]], $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false));
				$patientData [$sapv ['ipid']] ['sapvDaysList'][] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}

			foreach($highest_sapv_data as $ipid => $sapvdata)
			{
				foreach($sapvdata as $sapv_type => $spvdata)
				{
					if($sapv_type == "VV")
					{
						foreach($spvdata as $key => $daysapv)
						{
							if(in_array(date('d.m.Y', strtotime($daysapv)), $active_details [$ipid]['active_days_except_hospital_days']))
							{
								$patient_real_vv_days [$ipid] [$sapv_type] [] = $daysapv;
							}
						}
					}
				}
			}

			/* ------------------------------- Construct report period days --------------------------------------- */
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr, 'Y-m-d');

			foreach($period['start'] as $keyd => $start_date)
			{
				$period_days[] = $pm->getDaysInBetween($start_date, $period['end'][$keyd], false);
			}

			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$final_period_days[] = $day;
				}
			}
			$final_period_days = array_unique($final_period_days);

			/* ------------------------------------  Get deleted from verlauf visits------------------------------------------ */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('visit_koordination_form')) . "'" . ' OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_doctor_form")) . '" OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("kvno_nurse_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_doctor_form")) . '"  OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("wl_nurse_form")) . '"   OR tabname="' . addslashes(Pms_CommonData::aesEncrypt("contact_form")) . '"  ')
				->andWhereIn('ipid', $active_patients_ipids);

			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['kvno_doctor_form'][] = '999999999999';
			$del_visits['kvno_nurse_form'][] = '999999999999';
			$del_visits['wl_doctor_form'][] = '999999999999';
			$del_visits['wl_nurse_form'][] = '999999999999';
			$del_visits['visit_koordination_form'][] = '999999999999';
			$del_visits['contact_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ------------------------------------  Get KVNO doctor visits------------------------------------------ */

			$kvno_doctor_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoDoctor")
				->whereIn('ipid', $active_patients_ipids)
				->andWhereNotIn('id', $del_visits['kvno_doctor_form'])
				->andWhere('isdelete = 0');
			$kvno_doctor_visits_arr = $kvno_doctor_visits->fetchArray();

			foreach($kvno_doctor_visits_arr as $doc => $value_doc)
			{
				$pat_visits[$value_doc['ipid']]['doctor_visit'][] = date('Y-m-d', strtotime($value_doc['start_date']));
			}

			/* ------------------------------------  Get KVNO nurse visits------------------------------------------ */
			$kvno_nurse_visits = Doctrine_Query::create()
				->select("*")
				->from("KvnoNurse")
				->whereIn('ipid', $active_patients_ipids)
				->andWhereNotIn('id', $del_visits['kvno_nurse_form'])
				->andWhere('isdelete = 0');
			$kvno_nurse_visits_arr = $kvno_nurse_visits->fetchArray();

			foreach($kvno_nurse_visits_arr as $nurse => $value_nurse)
			{
				$pat_visits[$value_nurse['ipid']]['nurse_visit'][] = date('Y-m-d', strtotime($value_nurse['start_date']));
			}

			/* ------------------------------------  Get KVNO koordination visits------------------------------------------ */
			$kvno_koordination_visits = Doctrine_Query::create()
				->select("*")
				->from("VisitKoordination")
				->whereIn('ipid', $active_patients_ipids)
				->andWhereNotIn('id', $del_visits['visit_koordination_form']);
			$kvno_koordination_visits_arr = $kvno_koordination_visits->fetchArray();

			foreach($kvno_koordination_visits_arr as $koordination => $value_koordination)
			{
				$pat_visits[$value_koordination['ipid']]['koordination_visit'][] = date('Y-m-d', strtotime($value_koordination['start_date']));
			}
			/* ------------------------------------  Get Contact froms ------------------------------------------ */
			$contact_forms_q = Doctrine_Query::create()
				->select("*")
				->from("ContactForms")
				->whereIn('ipid', $active_patients_ipids)
				->andWhereNotIn('id', $del_visits['contact_form'])
			    ->andwhere("isdelete = 0");
			$contact_forms_arr = $contact_forms_q->fetchArray();

			foreach($contact_forms_arr  as $cf => $value_cf)
			{
				$pat_visits[$value_cf['ipid']]['contact_form'][] = date('Y-m-d', strtotime($value_cf['billable_date']));
			}

			foreach($active_patients_ipids as $kp => $ipid)
			{

				$patient_data[$ipid]['epid'] = $active_details [$ipid]['epid'];

				foreach($final_period_days as $kd => $pday)
				{
					if(in_array($pday, $patient_real_vv_days [$ipid] ["VV"]) && in_array(date('d.m.Y', strtotime($pday)), $active_details [$ipid]['active_days_except_hospital_days']))
					{

						$patient_data[$ipid]['vv_days'][] = $pday;

						if(!in_array($pday, $pat_visits[$ipid]['doctor_visit']) && !in_array($pday, $pat_visits[$ipid]['nurse_visit']) && !in_array($pday, $pat_visits[$ipid]['koordination_visit']) && !in_array($pday, $pat_visits[$ipid]['contact_form']))
						{
							$patient_data[$ipid]['vv_days_without_visits'][] = date('d.m.Y', strtotime($pday));
						}
					}
				}
			}

			if($_REQUEST['show_data'] == "1")
			{
				print_r($patient_data);
				exit;
			}
			$master_data['extra']['sum'] = 0;
			foreach($active_patients_ipids as $kp => $ipid)
			{
				if(!empty($patient_data[$ipid]['vv_days_without_visits']))
				{
					$master_data['data'][$ipid]['epid'] = $active_details [$ipid]['epid'];
					$master_data['data'][$ipid]['firstname'] = $active_details [$ipid]['firstname'];
					$master_data['data'][$ipid]['lastname'] = $active_details [$ipid]['lastname'];
					$master_data['data'][$ipid]['vv_days_no_visits'] = implode("; ", $patient_data[$ipid]['vv_days_without_visits']);
					$master_data['data'][$ipid]['vv_days_no_visits_count'] = count($patient_data[$ipid]['vv_days_without_visits']);
					$master_data['extra']['sum'] += $master_data['data'][$ipid]['vv_days_no_visits_count'];
				}
			}
			
			return $master_data;
		}

		public function aktuelle_patienten_memmingen2($params)
		{
			// report_id = 134
			// report_name = Aktuelle_Patienten_Memmingen2

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$ipids = $this->getActiveIpids();

			/* ----------------- Get Patients Details -------------------- */
			$allpatient = Doctrine_Query::create()
				->select("p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,p.birthd,convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city")
				->from('PatientMaster p')
				->whereIn('p.ipid', $ipids)
				->andWhere('p.isdelete = 0');
			$allpatient->leftJoin("p.EpidIpidMapping e");
			$allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
			$allarray = $allpatient->fetchArray();

			if(empty($allarray))
			{
				$allarray[] = '999999999';
			}
			foreach($allarray as $valpatient)
			{
				$details_patient[$valpatient['ipid']]['ipid'] = $valpatient['ipid'];
				$details_patient[$valpatient['ipid']]['epid'] = $valpatient['EpidIpidMapping']['epid'];
				$details_patient[$valpatient['ipid']]['first_name'] = $valpatient['first_name'];
				$details_patient[$valpatient['ipid']]['last_name'] = $valpatient['last_name'];
				$details_patient[$valpatient['ipid']]['birthd'] = date("d.m.Y", strtotime($valpatient['birthd']));
				$details_patient[$valpatient['ipid']]['phone'] = $valpatient['phone'];
				$details_patient[$valpatient['ipid']]['zip'] = $valpatient['zip'];
				$details_patient[$valpatient['ipid']]['street1'] = $valpatient['street1'];
				$details_patient[$valpatient['ipid']]['city'] = $valpatient['city'];
			}

			/* -------------------------Get Patients - Contact persons------------------------------------------ */
			$contact = new ContactPersonMaster();
			$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($ipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
			/* -------------------------Get Patients - Locations------------------------------------------ */
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipids)
				->andWhere('isdelete="0"')
				->andWhere("valid_till='0000-00-00 00:00:00'")
				->orderBy('id DESC');

			$patlocs = $patloc->execute();

			if($patlocs)
			{
				$patlocarray = $patlocs->toArray();
				$locinc = 1;
				foreach($patlocarray as $patloc)
				{
					$patlocarrayipid[$patloc['ipid']] = $patloc;
					if($locinc != count($patlocarray))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
					$locinc++;
				}

				$floc = Doctrine_Query::create()
					->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where("id IN (" . $patientlocationstr . ")")
					->andWhere('isdelete=0')
					->orderBy('location ASC');
				$locationdata = $floc->fetchArray();

				foreach($locationdata as $kloc => $vloc)
				{
					$locationLastData[$vloc['id']] = $vloc;
				}
				foreach($patlocarray as $k_loc => $v_loc)
				{
					$locid = substr($v_loc['location_id'], 0, 4);
					if($locid == "8888")
					{
						$patient_location_id = $v_loc['location_id'];
						$z = 1;
						$cnt_number = 1;
						foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
						{
							if($value_cnt['isdelete'] == '0')
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_phone'] = $value_cnt['cnt_phone'];
								$cnt_number++;
							}
							else
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
							}
							$z++;
						}
						$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
					}
					else
					{
						$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
						$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
						if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $details_patient[$v_loc['ipid']]['street1'];
							$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $details_patient[$v_loc['ipid']]['zip'];
							$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $details_patient[$v_loc['ipid']]['city'];
							$patlocarrayFinal[$v_loc['ipid']]['location_phone'] = $details_patient[$v_loc['ipid']]['phone'];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
							$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
							$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
							$patlocarrayFinal[$v_loc['ipid']]['location_phone'] = $locationLastData[$v_loc['location_id']]['phone'];
						}
					}
				}
			}

			$lc = new Locations();
			$location_types = $lc->getLocationTypes();

			/* -------------------------Get Diagnosis HD (main)------------------------------------------ */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($clientid, $abb2);

			$typeid[] = '99999999';
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid[] = $valdia['id'];
			}
			$abbr = "'ND'";
			$ddarr_nd = $dg->getDiagnosisTypes($clientid, $abbr);

			$typeid_nd[] = '99999999';
			foreach($ddarr_nd as $nkey => $nvaldia)
			{
				$typeid_nd[] = $nvaldia['id'];
			}

			/* -------------------------Get Patients - Diagnosis data------------------------------------------ */
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->get_multiple_patients_diagnosis($ipids, $typeid);
			$dianoarray_nd = $patdia->get_multiple_patients_diagnosis($ipids, $typeid_nd);

			foreach($dianoarray as $diangosis)
			{
				$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
			}
			foreach($diagnosisarr as $d_key => $d_val)
			{
				$diagnosisarr[$d_key] = implode(", ", $d_val);
			}

			foreach($dianoarray_nd as $diangosis_nd)
			{
				$diagnosisarr_nd[$diangosis_nd['ipid']][] = $diangosis_nd['diagnosis'];
			}
			foreach($diagnosisarr_nd as $nd_key => $nd_val)
			{
				$diagnosisarr_nd[$nd_key] = implode(", ", $nd_val);
			}



			/* -------------------------Get SAPV details------------------------------------------ */
			$dropSapv = Doctrine_Query::create()
				->select('*, GROUP_CONCAT(verordnet) as vero')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids)
				->andWhere('isdelete=0')
				->andWhere('status != 1')
				->andWhere("verordnungbis >='" . date('Y-m-d', mktime(0, 0, 0, date('m'), date('d'), date('Y'))) . " 00:00:00'")
				->groupBy('ipid');
			$droparray = $dropSapv->fetchArray();

			$sapv_arr_details = array('1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');

			foreach($droparray as $kverord => $verord)
			{
				$sapv_values[$verord['ipid']] = explode(',', $verord['vero']);
				foreach($sapv_values[$verord['ipid']] as $k_sapv => $v_sapv)
				{
					$patientsapv[$verord['ipid']][] = $sapv_arr_details[$v_sapv];
				}
			}
			foreach($patientsapv as $k => $kval)
			{
				$patient_final_sapv[$k] = implode(',', $kval);
			}


			foreach($details_patient as $kpat => $patientdetails)
			{
				$master_data['data'][$kpat]['epid'] = $patientdetails['epid'];

				$master_data['data'][$kpat]['lastname'] = $patientdetails['last_name'];
				$master_data['data'][$kpat]['firstname'] = $patientdetails['first_name'];

				$master_data['data'][$kpat]['patient_address'] = $patlocarrayFinal[$kpat]['location_name'] . '<br />' . $patlocarrayFinal[$kpat]['location_street'] . " " . $patlocarrayFinal[$kpat]['location_zip'] . '<br />' . $patlocarrayFinal[$kpat]['location_city'] . '<br />' . $patlocarrayFinal[$kpat]['location_phone'];

				$master_data['data'][$kpat]['diagnose'] = $diagnosisarr[$kpat];
				$master_data['data'][$kpat]['vo'] = $patient_final_sapv[$kpat];
				$master_data['data'][$kpat]['commentare'] = "";
			}
			return($master_data);
		}

		public function aktuellepatientmunster1($params)
		{
			// report_id = 135
			// report_name = Aktuelle Patienten Münster 1 // ISPC-891

			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$clientid = $logininfo->clientid;

			if(empty($activeipids))
			{
				$activeipids[] = "XXXXXX";
			}

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}
				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				
				//ISPC-2045 - get kontact-phone
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();

				foreach($patientexec as $patient)
				{
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}
				}

				/* -------------------------Get Patients - Contact persons------------------------------------------ */
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
				/* -------------------------Get Patients - Locations------------------------------------------ */
				$patloc = Doctrine_Query::create()
					->select('*')
					->from('PatientLocation')
					->where('ipid IN (' . $ipidsactive . ')')
					->andWhere('isdelete="0"')
					->andWhere("valid_till='0000-00-00 00:00:00'")
					->orderBy('id DESC');

				$patlocs = $patloc->execute();

				if($patlocs)
				{
					$patlocarray = $patlocs->toArray();
					$locinc = 1;
					foreach($patlocarray as $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						if($locinc != count($patlocarray))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
						$locinc++;
					}

					$floc = Doctrine_Query::create()
						->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
						->from('Locations')
						->where("id IN (" . $patientlocationstr . ")")
						->andWhere('isdelete=0')
						->orderBy('location ASC');
					$locationdata = $floc->fetchArray();

					foreach($locationdata as $kloc => $vloc)
					{
						$locationLastData[$vloc['id']] = $vloc;
					}
					foreach($patlocarray as $k_loc => $v_loc)
					{
						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $k => $value_cnt)
							{
								if($value_cnt['isdelete'] == '0')
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
									$cnt_number++;
								}
								else
								{
									$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
								}
								$z++;
							}
							$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
							$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
							if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $patientinfo[$v_loc['ipid']]['street1'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $patientinfo[$v_loc['ipid']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $patientinfo[$v_loc['ipid']]['city'];
							}
							else
							{
								$patlocarrayFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
								$patlocarrayFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
								$patlocarrayFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
							}
						}
					}
				}
				$actual_location = $locaray[0]['location'];
				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}
				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}
				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}



				/* -------------------------Get Client Pflegedienst------------------------------------------ */
				$clpfle = Doctrine_Query::create()
					->select("*")
					->from('Pflegedienstes')
					->where('clientid = ' . $clientid);
				$clpflearray = $clpfle->fetchArray();

				foreach($clpflearray as $valo)
				{
					$pflegedienste[$valo['id']]['id'] = $valo['id'];
					$pflegedienste[$valo['id']]['name'] = $valo['nursing'];
				}

				/* -------------------------Get Patient Pflegedienst------------------------------------------ */
				$patientpfle = Doctrine_Query::create()
					->select("*")
					->from('PatientPflegedienste p')
					->whereIn('p.ipid', $activeipids)
					->andwhere('p.isdelete = 0');
				$patientpflearray = $patientpfle->fetchArray();

				$ppfle = array();
				foreach($patientpflearray as $key => $pfle)
				{
					$ppfle[$pfle['ipid']]['id'][] = $pfle['pflid'];
					$ppfle[$pfle['ipid']]['name'][] = $pflegedienste[$pfle['pflid']]['name'];
				}



				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'] . ' ';
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'] . ' ';
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'] . ' ';
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient]['location_name'] . '<br />' . $patlocarrayFinal[$keypatient]['location_street'] . '<br />' . $patlocarrayFinal[$keypatient]['location_zip'] . ' ' . $patlocarrayFinal[$keypatient]['location_city'];
					$MasterData['data'][$keypatient]['contact_number'] = $patientinfo[$keypatient]['kontactnumber'] . ' ';
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'] . ' ';
					$MasterData['data'][$keypatient]['empty_fld'] = ' ';
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'] . ' ';
					$MasterData['data'][$keypatient]['familydoctorphone'] = $Familydoctor[$patient['familydoc_id']]['phone'] . ' ';
					$MasterData['data'][$keypatient]['nursing_care'] = implode("; ", $ppfle[$keypatient]['name']);
				}

				return $MasterData;
			}
		}

		public function aktuellepatientmunster2($params)
		{
			// report_id = 136
			// report_name = Aktuelle Patienten Munster 2 // ISPC-891

			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$clientid = $logininfo->clientid;

			if(empty($activeipids))
			{
				$activeipids[] = "XXXXXX";
			}

			if($activeipids)
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}
				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
					->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
					->from('PatientMaster p')
					->where('ipid IN (' . $ipidsactive . ') ');
				
				//ISPC-2045 - get kontact-phone
				$patientMasterData->leftJoin("p.PatientContactphone pcp");
				$patientMasterData->addSelect("pcp.phone, pcp.mobile");
				
				$patientexec = $patientMasterData->fetchArray();

				foreach($patientexec as $patient)
				{
					if(strlen($patient["last_name"]) > 0)
					{
						$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
					}
					if(strlen($patient['first_name']) > 0)
					{
						$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
					}
					if(strlen($patient['birthd']) > 0)
					{
						$patientinfo[$patient['ipid']]['birthd'] = date('d.m.Y', strtotime($patient['birthd']));
					}
					if(strlen($patient['kontactnumber']) > 0)
					{
						$patientinfo[$patient['ipid']]['kontactnumber'] = $patient['kontactnumber'];
					}
					
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
						$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
					}
					
					if(strlen($patient['street1']) > 0)
					{
						$patientinfo[$patient['ipid']]['street1'] = $patient['street1'];
					}
					if(strlen($patient['zip']) > 0)
					{
						$patientinfo[$patient['ipid']]['zip'] = $patient['zip'];
					}
					if(strlen($patient['city']) > 0)
					{
						$patientinfo[$patient['ipid']]['city'] = $patient['city'];
					}
					$patient_filter_details[$patient['ipid']] = $patient;


					$patientinfo[$patient['ipid']]['status'] = $this->view->translate('traffic_status_' . $patient['traffic_status']);
				}


				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}
				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
					$patient2family_docs[$patient_doctor['ipid']] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}
				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}


				/* -------------------------Get Patients - Custom icons------------------------------------------ */

				$client_icons = new IconsClient;
				$client_icons_details = $client_icons->get_client_icons($logininfo->clientid);


				/* ------------------------ ICONS ------------------------------------ */
				$sys_icons = new IconsMaster();
				$client_icons = new IconsClient();
				$patient_icons = new IconsPatient();

				$system_icons = $sys_icons->get_system_icons($clientid);

				$pat_ipidsarr = $activeipids;

				$pat_ipidsarr = array_values(array_unique($pat_ipidsarr));


				foreach($pat_ipidsarr as $kp => $vpat_ipid)
				{
					$pat_ipids_details[$vpat_ipid] = $patient_filter_details[$vpat_ipid];
					$patient_ipids_simple[] = $patient_filter_details[$vpat_ipid]['ipid'];
				}

				if(empty($pat_ipids_details))
				{
					$pat_ipids_details[] = "XXX";
				}

				if(empty($patient_ipids_simple))
				{
					$patient_ipids_simple[] = "XXX";
				}

				$modules = new Modules();
				if($modules->checkModulePrivileges("67", $clientid))
				{
					$sgbvperms = true;
				}
				else
				{
					$sgbvperms = false;
				}

				$all_system_icons = $sys_icons->get_system_icons($clientid);
				foreach($all_system_icons as $k_all_sys_icons => $v_all_sys_icons)
				{
					if($k_all_sys_icons == '26' && $sgbvperms)
					{
						$system_icons_perms[$k_all_sys_icons] = $v_all_sys_icons;
					}
					else if($k_all_sys_icons != '26')
					{
						$system_icons_perms[$k_all_sys_icons] = $v_all_sys_icons;
					}
				}

				$this->view->sys_icons = $system_icons_perms;
				$this->view->client_icons = $client_icons->get_client_icons($clientid);

				//get system icon column data!
				$icons_data = array();
				foreach($all_system_icons as $ks_sys_icon => $vs_sys_icon)
				{
					if($vs_sys_icon['function'] != 'go_to_visitform') //exclude visitform icon from filtering
					{
						if($vs_sys_icon['function'] == "get_patients_status")
						{
							$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipids_details, false, false, $details_included = true);
						}
						elseif($vs_sys_icon['function'] == "get_patient_medication")
						{
							$icon_result = $patient_icons->{$vs_sys_icon['function']}($patient_ipids_simple, true);
						}
						elseif($vs_sys_icon['function'] == "get_patient_diagnosis")
						{
							$icon_result = $patient_icons->{$vs_sys_icon['function']}($patient_ipids_simple, true);
						}
						else
						{
							$icon_result = $patient_icons->{$vs_sys_icon['function']}($pat_ipidsarr);
						}

						if($icon_result)
						{
							$icons_data = array_merge_recursive($icons_data, $icon_result);

							$patients_icons_details[$ks_sys_icon] = $icons_data['ipids'];
							$patients_icons_details[$ks_sys_icon] = array_values(array_unique($icon_result['ipids']));
						}
					}
				}


				//reverse previous arr $patients_icons_details and construct mapped array
				foreach($patients_icons_details as $id_sys_icon => $icon_ipids)
				{
					if(is_numeric($id_sys_icon)) //make sure this key is always numeric... no need for others
					{
						foreach($icon_ipids as $k_icon_ipid => $v_icon_ipid)
						{
							if($v_icon_ipid != '999999999')
							{
								if($id_sys_icon != "6" && $id_sys_icon != "28")
								{ // status and memo
									$patient_icons_data[$v_icon_ipid]['icons_system'][] = $this->view->translate($system_icons[$id_sys_icon]['name']) . ';';
								}
							}
						}
					}
				}

				//get custom icons for all patients
				$c_custom_icons = $patient_icons->get_patient_icons($activeipids);

				foreach($c_custom_icons as $k_col_cust_icons => $v_col_cust_icons)
				{
					$patient_icons_data[$v_col_cust_icons['ipid']]['icons_custom'][] = $client_icons_details[$v_col_cust_icons['icon_id']]['name'] . ';';
				}



				foreach($patientMasterDetails as $keypatient => $patient)
				{

					$MasterData['data'][$keypatient]['epid'] = $epidarray[$keypatient]['epid'] . ' ';
					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'] . ' ';
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'] . ' ';
					$MasterData['data'][$keypatient]['birthd'] = $patientinfo[$keypatient]['birthd'] . ' ';
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['empty_fld'] = ' ';
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'] . ' ';
					$MasterData['data'][$keypatient]['report_patient_status'] = $patientinfo[$keypatient]['status'] . ' ';

					$MasterData['data'][$keypatient]['reports_patient_icons'] = implode('<br />', $patient_icons_data[$keypatient]['icons_system']) . '<br /> ' . implode('<br />', $patient_icons_data[$keypatient]['icons_custom']);
				}

				return $MasterData;
			}
		}

		private function sapv_status_report($params)
		{
			// report_id = 139
			// report_name = Erstverordnungen / Folgeverordnungen

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			/* -------------------- Get active patients in report period patients ---------------------------- */

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);


			$ipidarr = array_keys($active_patient_details); // return ipids


			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			$ipid_str = '"XXXXXX",';
			foreach($active_patient_details as $ipid => $p_details)
			{
				$ipid_str .= '"' . $p_details['details'] ['ipid'] . '",';
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
				}

				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}
			$ipid_str = substr($ipid_str, 0, -1);

			/* -------------------- Get patients FIRST sapv details ---------------------------- */
			$conn = Doctrine_Manager::getInstance()->getCurrentConnection('IDAT');
			$q = 'SELECT *,pv.id as sapv_id FROM `patient_sapvverordnung` pv
	  	WHERE pv.id = (
	  	SELECT pv2.id
	  	FROM `patient_sapvverordnung` pv2
	  	WHERE pv.ipid = pv2.ipid
	  	AND pv2.isdelete = 0
	  	ORDER BY pv2.`verordnungam` ASC
	  	LIMIT 1 )
	  	AND pv.ipid IN (' . $ipid_str . ')
	  	AND pv.verordnungam != "1970-01-01 00:00:00"
	  	AND pv.verordnungbis != "1970-01-01 00:00:00"
	  	AND pv.verordnungbis != "000-00-00 00:00:00"
	  	AND pv.verordnungam <= pv.verordnungbis
	  	AND pv.verordnet != ""
	  	AND pv.isdelete = 0
	  	ORDER BY pv.verordnungbis ASC';
			$r = $conn->execute($q)->fetchAll();

			foreach($r as $k => $sp)
			{
				$first_sapv_ever[$sp['ipid']] = $sp['sapv_id'];
			}

			/* -------------------- Get patients sapv in period  details ---------------------------- */
			$sapv_statuses = SapvVerordnung::getSapvRadios();
			$sapv_verordnets = Pms_CommonData::getSapvCheckBox();
			$sapv_verordnets[0] = '';

			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');


			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipidarr)
				->andWhere('isdelete=0')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('' . str_replace('%date%', 'verordnungam', $active_cond['date_sql']) . '')
				->orderBy("verordnungam ASC");
			$sapvarr = $sapv->fetchArray();


			foreach($sapvarr as $ks => $svalue)
			{
				if(in_array(date('d.m.Y', strtotime($svalue['verordnungam'])), $patientDetails [$svalue ['ipid']]['real_active_days']))
				{
					$available_patients[] = $svalue['ipid'];

					$sapv_details[$svalue['ipid']][$svalue['id']]['first'] = "";
					$sapv_details[$svalue['ipid']][$svalue['id']]['additional'] = "";

					$sapv_details[$svalue['ipid']][$svalue['id']]['verordnet'] = str_replace(array_keys($sapv_verordnets), $sapv_verordnets, $svalue['verordnet']);
					$sapv_details[$svalue['ipid']][$svalue['id']]['sapv_date'] = date('d.m.Y', strtotime($svalue['verordnungam']));

					if($svalue['id'] == $first_sapv_ever[$svalue['ipid']])
					{
						$sapv_details[$svalue['ipid']][$svalue['id']]['first'] = "X";
					}
					else
					{
						$sapv_details[$svalue['ipid']][$svalue['id']]['additional'] = "X";
					}
				}
			}

			if(empty($available_patients))
			{
				$available_patients[] = "XXXXXX";
			}
			$available_patients = array_unique($available_patients);

			/* -------------------- Display data ---------------------------- */


			foreach($available_patients as $kh => $pipid)
			{
				$patient_details[$pipid]['epid'] = $patientDetails [$pipid] ['epid'];
				$patient_details[$pipid]['lastname'] = $patientDetails [$pipid] ['surname'];
				$patient_details[$pipid]['firstname'] = $patientDetails [$pipid] ['firstname'];
				$patient_details[$pipid]['birthd'] = $patientDetails [$pipid] ['dateofbirth'];

				$sk = 0;
				foreach($sapv_details[$pipid] as $sapv_key => $sapv_detail)
				{
					$patient_details[$pipid]['sapv'][$sk]['first'] = $sapv_detail['first'];
					$patient_details[$pipid]['sapv'][$sk]['additional'] = $sapv_detail['additional'];
					$patient_details[$pipid]['sapv'][$sk]['verordnet'] = $sapv_detail['verordnet'];
					$patient_details[$pipid]['sapv'][$sk]['sapv_date'] = $sapv_detail['sapv_date'];
					$sk++;
				}
			}


			$sortarr = 'epid';
			$data = $this->array_sort($patient_details, $sortarr, SORT_ASC);

			$alldata['data'] = $data;

			return $alldata;
		}

		private function hessen_patient_course_ecog($params)
		{
			// report_id = 142
			// report_name = Hessen ecog

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			/* -------------------- Get active patients in report period patients ---------------------------- */

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);


			$ipidarr = array_keys($active_patient_details); // return ipids


			if(count($ipidarr) == 0)
			{
				$ipidarr[] = "0";
			}

			$ipid_str = '"XXXXXX",';
			foreach($active_patient_details as $ipid => $p_details)
			{
				$ipid_str .= '"' . $p_details['details'] ['ipid'] . '",';
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
				}

				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}
			$ipid_str = substr($ipid_str, 0, -1);


			$koord = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->where('wrong!=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("XE")) . '"')
				->andWhereIn('ipid', $ipidarr)
				->andWhere(str_replace('%date%', 'create_date', $active_cond['date_sql']))
				->andWhere('source_ipid = ""')
				->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
			$koord_array = $koord->fetchArray();

			foreach($koord_array as $k_koord => $v_koord)
			{
				$available_patients[] = $v_koord['ipid'];
				$available_users[] = $v_koord['create_user'];
				$global_koord[$v_koord['create_user']][] = $v_koord;
			}



			/* -------------------- Display data ---------------------------- */


			foreach($koord_array as $kh => $ecog_data)
			{
				$patient_details[$ecog_data['ipid']]['epid'] = $patientDetails [$ecog_data['ipid']] ['epid'];
				$patient_details[$ecog_data['ipid']]['firstname'] = $patientDetails [$ecog_data['ipid']] ['firstname'];
				$patient_details[$ecog_data['ipid']]['lastname'] = $patientDetails [$ecog_data['ipid']] ['surname'];
				$patient_details[$ecog_data['ipid']]['ecog'] = $ecog_data['course_title'];
			}


			$sortarr = 'epid';
			$data = $this->array_sort($patient_details, $sortarr, SORT_ASC);

			$alldata['data'] = $data;

			return $alldata;
		}

		public function treatmentavgdays_v2($params)
		{
			// report_id = 143
			// report_name = Durchschnittliche Behandlungsdauer Kassenpatient
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$daysinperiod = $params['custom']['daysinperiod'];
			$onlyactive = $params['onlyactive'];


			$active = array();
			$dead = array();
			if($onlyactive != 1)
			{
				$active = $this->getActivePatients($quarterarr, $yeararr, $montharr);

				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if(!is_array($active))
				{
					$active = array();
				}
				if(!is_array($dead))
				{
					$dead = array();
				}
				$ipidarr = array_merge($active, $dead);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}

			//get ipids for privatepatients
			$Health = Doctrine_Query::create()
				->select("ipid")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $ipidarr)
				->andWhere('privatepatient =1 ');
			$pv_ipidsarr = $Health->fetchArray();

			foreach($pv_ipidsarr as $valp)
			{
				$private_ipids[] = $valp['ipid'];
			}

			if(empty($private_ipids))
			{
				$private_ipids[] = '999999999';
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r($private_ipids);
				exit;
			}

			$ipidarr = array_values(array_diff($ipidarr, $private_ipids));



			$comma = ",";
			$ipidval = "'0'";
			foreach($ipidarr as $key => $val)
			{
				$ipidval .= $comma . "'" . $val . "'";
				$comma = ",";
			}
			if(count($ipidarr) == 0)
			{
				$ipidarr[] = '9999999999';
			}

			$Q = Doctrine_Query::create()
				->select("*, year(CURRENT_DATE())-year(`birthd`) AS age,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip")
				->from('PatientMaster')
				->where("ipid in (" . $ipidval . ") ")
				->orderBy('admission_date DESC');
			$patients = $Q->fetchArray();

			$comma = ",";
			$doctorstr = "'0'";
			foreach($patients as $patient)
			{
				$ipidPatients[$patient['ipid']] = $patient;
				$doctorstr .= $comma . "'" . $patient['familydoc_id'] . "'";
				$comma = ",";

				$ipidPatientsArr[] = $patient['ipid'];
			}
			if(empty($ipidPatientsArr))
			{
				$ipidPatientsArr[] = '999999999';
			}
			$ipidarr = array_unique($ipidarr);
			/* 	print_r($ipidPatientsArr); exit; */

			/* ============================================================================ */
			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '') AND id IN(" . $doctorstr . ")");
			$docarray = $drop->fetchArray();

			foreach($docarray as $doctor)
			{
				$doctorarry[$doctor['id']] = $doctor;
			}

			$pm = new PatientMaster();
			if(count($ipidarr) > 0)
			{
				$patTreatedDays = $pm->getTreatedDaysRealMultiple($ipidarr, false);
			}

			if($daysinperiod == "1")
			{
				$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

				foreach($period ['start'] as $keyd => $startDate)
				{
					$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
				}
				foreach($periodDays as $keyp => $daysp)
				{
					foreach($daysp as $day)
					{
						$finalPeriodDays [] = $day;
					}
				}
				$finalPeriodDays = array_unique($finalPeriodDays);

				foreach($patTreatedDays as $patientTreatmentIpid => $patientTreatmentData)
				{
					if(count($patientTreatmentData ['dischargeDates']) > 0 && count($patientTreatmentData ['dischargeDates']) > count($patientTreatmentData ['admissionDates']))
					{
						foreach($patientTreatmentData ['dischargeDates'] as $keydischarge => $dischargevalues)
						{
							if(count($patientTreatmentData ['admissionDates']) == 0)
							{
								$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
							}
							else
							{
								$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarge] ['date']));
							}
							$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
							$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
						}
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) > 0)
					{

						if(count($patientTreatmentData ['dischargeDates']) == 0 && empty($patientTreatmentData ['discharge_date']))
						{
							$dischargeDate = date("Y-m-d", strtotime(end($finalPeriodDays)));
						}
						else if(count($patientTreatmentData ['dischargeDates']) == 0 && !empty($patientTreatmentData ['discharge_date']))
						{
							$dischargeDate = $patientTreatmentData ['discharge_date'];
						}

						if(strtotime(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']))) == strtotime(date("Y-m-d", strtotime($patientTreatmentData ['admission_date']))))
						{
							$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
							$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
						}
						else
						{
							$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [0] ['date']));
							$patientDateRange[$patientTreatmentIpid]['range']['end'][] = $dischargeDate;
						}
					}
					else if(count($patientTreatmentData ['dischargeDates']) == 0 && count($patientTreatmentData ['admissionDates']) == 0)
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['admission_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					}
					else if(count($patientTreatmentData ['admissionDates']) > count($patientTreatmentData ['dischargeDates']))
					{
						foreach($patientTreatmentData ['admissionDates'] as $keyadmission => $admissionvalues)
						{
							if(empty($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']))
							{
								$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
								$discharge = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
							}
							else
							{
								$admission = date("Y-m-d", strtotime($admissionvalues ['date']));
								$discharge = date("Y-m-d", strtotime($patientTreatmentData ['dischargeDates'] [$keyadmission] ['date']));
							}
							$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($admission));
							$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($discharge));
						}
					}
					else if(count($patientTreatmentData ['admissionDates']) == count($patientTreatmentData ['dischargeDates']) && count($patientTreatmentData ['admissionDates']) != 0)
					{
						foreach($patientTreatmentData ['dischargeDates'] as $keydischarged => $dischargevalues)
						{
							$admissionDate = date("Y-m-d", strtotime($patientTreatmentData ['admissionDates'] [$keydischarged] ['date']));

							$patientDateRange[$patientTreatmentIpid]['range']['start'][] = $admissionDate;
							$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($dischargevalues ['date']));
						}
					}

					if(date("Y-m-d", strtotime($patientTreatmentData ['discharge_date'])) == date("Y-m-d", strtotime($patientTreatmentData ['admission_date'])))
					{
						$patientDateRange[$patientTreatmentIpid]['range']['start'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
						$patientDateRange[$patientTreatmentIpid]['range']['end'][] = date("Y-m-d", strtotime($patientTreatmentData ['discharge_date']));
					}
				}

				foreach($patientDateRange as $treatmentIpid => $range)
				{

					foreach($range as $ktreat => $treatmentarr)
					{

						foreach($treatmentarr['start'] as $keytreatval => $treatmentval)
						{
							$startDate = date("Y-m-d", strtotime($treatmentval));
							$endDate = date("Y-m-d", strtotime($treatmentarr['end'][$keytreatval]));

							$treatmentDaysArray [$treatmentIpid] [] = $pm->getDaysInBetween($treatmentval, $treatmentarr['end'][$keytreatval]);
						}
					}
				}
				//filter period days and treatment days
				foreach($treatmentDaysArray as $patientIpid => $patientDates)
				{
					$finalPatientArr = array();
					if(count($patientDates) > 1)
					{
						foreach($patientDates as $kp => $patientDatesArr)
						{
							foreach($patientDatesArr as $patientValues)
							{
								$finalPatientArr[] = $patientValues;
							}
						}

						$finalDays [$patientIpid] ['FinalCountDays'] = array_intersect($finalPeriodDays, $finalPatientArr);
					}
					else
					{
						$finalDays [$patientIpid] ['FinalCountDays'] = array_intersect($finalPeriodDays, $patientDates[0]);
					}
				}
			}

			$epidspat = Doctrine_Query::create()
				->select("*")
				->from("EpidIpidMapping")
				->whereIn('ipid', $ipidPatientsArr);
			$epidspatarr = $epidspat->fetchArray();

			foreach($epidspatarr as $epidpatient)
			{
				$epidsPatients[$epidpatient['ipid']] = $epidpatient['epid'];
			}

			//	highest verordung not denied in reported period
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$dropSapv = Doctrine_Query::create()
				->select('*, GROUP_CONCAT(verordnet) as vero')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipidPatientsArr)
				->andWhere(str_replace($s, $r, $active_cond['interval_sql']))
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->groupBy('ipid');
			$droparray = $dropSapv->fetchArray();

			foreach($droparray as $verord)
			{
				$sapv = explode(',', $verord['vero']);
				$s = max($sapv);
				if($s == "1")
				{
					$sapv_value[$verord['ipid']] = "BE";
				}
				elseif($s == "2")
				{
					$sapv_value[$verord['ipid']] = "KO";
				}
				elseif($s == "3")
				{
					$sapv_value[$verord['ipid']] = "TV";
				}
				elseif($s == "4")
				{
					$sapv_value[$verord['ipid']] = "VV";
				}
				else
				{
					$sapv_value[$verord['ipid']] = "-";
				}
			}
			//highest verordung not denied in reported period end!
			// get discharge method for patients dead
			$dm_dead = Doctrine_Query::create()
				->select("*")
				->from('DischargeMethod')
				->where("clientid = " . $logininfo->clientid)
				->andwhere("abbr='TOD' OR abbr='tod' OR abbr='Verstorben' OR abbr='verstorben'  OR abbr='VERSTORBEN' OR abbr='Tod' OR abbr='TODNA'")
				->andwhere('isdelete = 0');
			$dm_deadarray = $dm_dead->fetchArray();

			$dm_deadfinal[] = '999999999';
			foreach($dm_deadarray as $key => $val)
			{
				$dm_deadfinal[] = $val['id'];
			}

			$todpatients = Doctrine_Query::create()
				->select('*')
				->from('PatientDischarge ')
				->whereIn('ipid', $ipidPatientsArr)
				->andWhereIn('discharge_method', $dm_deadfinal)
				->andWhere('isdelete = 0');
			$todpatientarray = $todpatients->fetchArray();

			$patients_tod_date = array();
			if($todpatientarray)
			{
				foreach($todpatientarray as $key => $todpatient)
				{
					$patients_tod_date[$todpatient['ipid']] = date("Y-m-d", strtotime($todpatient['discharge_date']));
				}
			}
			$i = 0;
			foreach($ipidPatients as $k_ipid => $v_patient)
			{
				$end_date_patient = '';
				if(array_key_exists($k_ipid, $patients_tod_date))
				{
					$end_date_patient = $patients_tod_date[$k_ipid];
				}
				else
				{
					$end_date_patient = date("Y-m-d", time());
				}
				$age = $pm->GetAge($v_patient['birthd'], $end_date_patient, true);

				$MasterData['data'][$k_ipid]['epid'] = $epidsPatients[$v_patient['ipid']];
				$MasterData['data'][$k_ipid]['lastname'] = $v_patient['last_name'];
				$MasterData['data'][$k_ipid]['firstname'] = $v_patient['first_name'];
				/* $age = "";
				  $age = $pm->GetTreatedDays(date("Y-m-d", strtotime($v_patient['birthd'])),date("Y-m-d"),true);

				  $agecnt += $age['years']; */

				$MasterData['data'][$k_ipid]['birthd'] = date("d.m.Y", strtotime($v_patient['birthd']));
				$MasterData['data'][$k_ipid]['age'] = $age;
				$MasterData['data'][$k_ipid]['zip'] = $v_patient['zip'];
				$MasterData['data'][$k_ipid]['admissiondate'] = date("d.m.Y", strtotime($v_patient['admission_date']));
				if($doctorarry[$v_patient['familydoc_id']])
				{
					$MasterData['data'][$k_ipid]['familydoctor'] = $doctorarry[$v_patient['familydoc_id']]['last_name'] . ", " . $doctorarry[$v_patient['familydoc_id']]['first_name'];
				}
				else 
				{
					$MasterData['data'][$k_ipid]['familydoctor'] = "";
				}
				$MasterData['data'][$k_ipid]['familydoctorphone'] = $doctorarry[$v_patient['familydoc_id']]['phone_practice'] . ' ';

				if($daysinperiod == "1")
				{
					$treatedcnt += count($finalDays[$k_ipid]['FinalCountDays']);
					$MasterData['data'][$k_ipid]['treateddays'] = count($finalDays[$k_ipid]['FinalCountDays']);
				}
				else
				{
					$treatedcnt += $patTreatedDays[$k_ipid]['realActiveDays'];
					$MasterData['data'][$k_ipid]['treateddays'] = $patTreatedDays[$k_ipid]['realActiveDays'];
				}
				//high sapv show "-" if empty
				if(strlen($sapv_value[$k_ipid]) > 0)
				{
					$MasterData['data'][$k_ipid]['sapv'] = $sapv_value[$k_ipid];
				}
				else
				{
					$MasterData['data'][$k_ipid]['sapv'] = "-";
				}

				$i++;
			}
			$MasterData['extra']['avg_treatment'] = round($treatedcnt / $i, 2);
			return $MasterData;
		}

		public function ptm_users_involved_working_hours($params)
		{
			// report_id = 144
			// report_name =  Arbeitszeit mit beteiligten Mitarbeitern
			//this report looks for working times, driving times, xt times in report period.
			//Nachname | Vorname   | Benutzer | Datum          | Besuchszeit |	XT Minuten | Fahrtzeit   | Dokumentationszeit | koordination Minuten
			// surname | firstname | USER     | Date of action | visit time  |  xt time    | driving time|  bavaria form      | koordination time
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$required_user = $this->getDocCondition(true);
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}



			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			// 		$active_patients_ipids = array_keys($active_patient_details);// return ipids
			$ipidarr = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['lastname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
			}


			if(empty($ipidarr))
			{
				$ipidarr[] = "XXXXXX";
			}
			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
				$username[$val['id']] = $val['user_title'] . ' ' . $val['last_name'] . ', ' . $val['first_name'];
			}

			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('bayern_doctorvisit')) . "'")
				->andWhereIn('ipid', $ipidarr);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['bayern_doctorvisit'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$doctor_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("BayernDoctorVisit d")
				->whereIn('d.ipid', $ipidarr)
				->andWhereNotIn('d.id', $del_visits['bayern_doctorvisit'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$doctor_visits->andWhere('create_user = "' . $required_user . '"');
			}
			$doctor_visits->orderBy('start_date ASC');
			$doctor_visits_arr = $doctor_visits->fetchArray();

			foreach($doctor_visits_arr as $doc => $value_doc)
			{

				$start_date = strtotime($value_doc['start_date']);
				$end_date = strtotime($value_doc['end_date']);
				$doc_visit_minutes = round(($end_date - $start_date) / 60);

				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
// 				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['user_name'] = 'CREATOR '.$username[$value_doc['create_user']].' '.$value_doc['id'];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['user_name'] =  $username[$value_doc['create_user']];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_minutes'] = $doc_visit_minutes;
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_driving'] = $value_doc['fahrtzeit'];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_documentation'] = $value_doc['documantation_time'];

				if(strlen($value_doc['related_users']) > 0)
				{
					$users_name[$value_doc['id']] = explode(',', $value_doc['related_users']);
					foreach($users_name[$value_doc['id']] as $k => $user)
					{
					    if($user != $value_doc['create_user'] )
					    {
    						$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id'] . '-' . $user]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
//     						$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id'] . '-' . $user]['user_name'] = "RELATED ".$username[$user].' '.$value_doc['id'];;
    						$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id'] . '-' . $user]['user_name'] = $username[$user];
    						$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id'] . '-' . $user]['visit_minutes'] = $doc_visit_minutes;
    						$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id'] . '-' . $user]['visit_driving'] = $value_doc['fahrtzeit'];
    						$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id'] . '-' . $user]['visit_documentation'] = $value_doc['documantation_time'];
					    }
					}
				}

				$doctor_visits_dbg[$value_doc['ipid']][] = $value_doc;
			}

			/* print_r($minutes_array);
			  exit;
			 */

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n doctor_visits \n");
				print_r($doctor_visits_dbg);
			}


			/* ------------------------Get all VERLAUF - "Telefonate" details from patients----------------------------------- */

			$course_xt = Doctrine_Query::create()
				->select("ipid,course_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$course_xt->andWhere('create_user = "' . $required_user . '"');
			}
			$course_xt->orderBy('course_date ASC');
			$course_xt_array = $course_xt->fetchArray();

			foreach($course_xt_array as $course_xt_key => $course_xt_val)
			{
				$valid_date_xt = date('Y-m-d', strtotime($course_xt_val['course_date']));

				if(!in_array($valid_date_xt, $finalDays[$course_xt_val['ipid']]['FinalCountDays']))
				{
					$course_xt_arr = explode("|", $course_xt_val['course_title']);
					$xt_array[$patient_array[$course_xt_val['ipid']]['epid']][] = $course_xt_val['course_title'];

					$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['action_date'] = date('d.m.Y', strtotime($course_xt_val['course_date']));
					;
					$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['user_name'] = $username[$course_xt_val['create_user']];
					if(count($course_xt_arr) == 3)
					{ //method implemented with 3 inputs
						$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['telefon_minutes'] = intval($course_xt_arr[0]);
					}
					else if(count($course_xt_arr) != 3 && count($course_xt_arr) < 3)
					{ //old method before anlage 10
						$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['telefon_minutes'] = intval($course_xt_arr[0]);
					}
				}
			}


			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n telefon \n");
				print_r($xt_array);
			}

			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */
			$course_v = Doctrine_Query::create()
				->select("ipid,course_date,create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$course_v->andWhere('create_user = "' . $required_user . '"');
			}
			$course_v->orderBy('course_date ASC');
			$course_v_array = $course_v->fetchArray();

			foreach($course_v_array as $course_v_key => $course_v_val)
			{
				$valid_date_v = date('Y-m-d', strtotime($course_v_val['course_date']));


				$course_v_arr = explode("|", $course_v_val['course_title']);
				$v_array[$patient_array[$course_v_val['ipid']]['epid']][] = $course_v_val['course_title'];

				$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['user_name'] = $username[$course_v_val['create_user']];
				$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['action_date'] = date('d.m.Y', strtotime($course_v_val['course_date']));

				if(count($course_v_arr) == 3)
				{
					$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['coordination_minutes'] = intval($course_v_arr[0]);
				}
				else if(count($course_v_arr) != 3)
				{
					$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['coordination_minutes'] = intval($course_v_arr[0]);
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordination \n");
				print_r($v_array);
			}


			/* ----------------------Prepare data for display ----------------------------- */
			$patient_actions_count = array();
			$visit_count = 0;

			if($_REQUEST['dbg'] == 'x')
			{
				print_r($activ_in_perioada);
				exit;
			}
			$total_visits_per_day = 0;
			$total_contacts_per_day = 0;

			foreach($minutes_array as $patient_ipid => $values)
			{
				$patient_values[] = $patient_ipid;

				$x = 0;
				foreach($values as $action_identification => $vls)
				{
					$user_documentation[$patient_ipid][$x]['user_name'] = $vls['user_name'];
					$user_documentation[$patient_ipid][$x]['date_of_action'] = $vls['action_date'];


					if($vls['visit_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['visit_time_count'] = $vls['visit_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_time_count'] = "-";
					}

					if($vls['telefon_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['xt_time_count'] = $vls['telefon_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['xt_time_count'] = "-";
					}


					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['driving_time_count'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['driving_time_count'] = "-";
					}

					if($vls['visit_documentation'])
					{
						$user_documentation[$patient_ipid][$x]['documentation_time_count'] = $vls['visit_documentation'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['documentation_time_count'] = "-";
					}



					if($vls['coordination_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_time_count'] = $vls['coordination_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_time_count'] = "-";
					}

					$x++;
				}
			}

			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;


			if(!empty($patientDetails))
			{
				foreach($patientDetails as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patientDetails[$patient['ipid']]);
					}
				}
				foreach($patientDetails as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['lastname'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['firstname'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient['dateofbirth'];
					$MasterData['data'][$patient['ipid']]['patient_actions'] = $user_documentation[$patient['ipid']];

					$i++;
				}

				return $MasterData;
			}
		}

		public function bayern_sapv_days($params)
		{
			//report_id=145
			//report_name = SAPV Tage Bayern
			//EPID | Vorname | Nachname | KO Tage | Ko Kontakt Tage | TV Tage

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$required_user = $this->getDocCondition(true);
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);


			$whereepid = $this->getDocCondition();

			foreach($period['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));

				if(strtotime($period['end'][$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period['end'][$keyd]));
				}
			}
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$ipidarr = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
			}
			$active_days_period = array();
			foreach($active_patient_details as $ka => $day_active)
			{
				$active_days_period[$ka] = array_values($day_active['real_active_days']);
				array_walk($active_days_period[$ka], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
			}

			//print_r($active_days_period);exit;
			// Get KO sapv days - from max sapv = KO
			//============================================
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('ipid', $ipidarr)
				->andWhere(str_replace($s, $r, $active_cond['interval_sql']))
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.isdelete = 0');
			$patientsapvarr_res = $patientsapv->fetchArray();

			foreach($patientsapvarr_res as $keys => $sapv)
			{
				$sapv_types_array = explode(",", $sapv['verordnet']);

				$highest_type = max($sapv_types_array);
				if($highest_type == "2")
				{
					$highest_value[$sapv['id']] = "KO";


					$curent_array = array();
					$curent_array['days'] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv['verordnungam'])), date("Y-m-d", strtotime($sapv['verordnungbis'])));
					$curent_array['id'] = $sapv['id'];
					$curent_array['start_date'] = $sapv['verordnungam'];
					$curent_array['end_date'] = $sapv['verordnungbis'];
					$patientData[$sapv['ipid']][] = $curent_array;

					if(empty($kodays_array[$sapv['ipid']]))
					{
						$kodays_array[$sapv['ipid']] = array();
					}
					$kodays_array[$sapv['ipid']] = array_merge($kodays_array[$sapv['ipid']], $curent_array['days']);
					$kodays_array[$sapv['ipid']] = array_values(array_unique($kodays_array[$sapv['ipid']]));
				}
			}

			if($_REQUEST['ko_days'] == "1")
			{
				print_r("\n ko_days \n ");
				print_r($kodays_array);
			}
			//print_r($kodays_array);exit;
			/* ------------get days and total number of KO days in report period per pacient------------------------------------------- */

			foreach($kodays_array as $k_ko => $v_ko)
			{
				$patient_ko_final[$k_ko] = array_intersect($v_ko, $active_days_period[$k_ko]);
			}
			foreach($patient_ko_final as $k_day => $v_day)
			{
				$patient_ko_nr[$k_day] = count($v_day);
			}

			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('bayern_doctorvisit')) . "'")
				->andWhereIn('ipid', $ipidarr);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['bayern_doctorvisit'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}
			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */

			$doctor_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("BayernDoctorVisit d")
				->whereIn('d.ipid', $ipidarr)
				->andWhereNotIn('d.id', $del_visits['bayern_doctorvisit'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$doctor_visits->andWhere('create_user = "' . $required_user . '"');
			}
			$doctor_visits->orderBy('start_date ASC');
			$doctor_visits_arr = $doctor_visits->fetchArray();
			foreach($doctor_visits_arr as $k => $val)
			{
				$bay_doctor_visits[$val['ipid']][] = date("Y-m-d", strtotime($val['start_date']));
			}

			foreach($bay_doctor_visits as $k_dv => $v_dv)
			{
				$doctors_v = array_intersect($v_dv, $patient_ko_final[$k_dv]);
				if(!empty($doctors_v))
				{
					$docvisits_ko[$k_dv] = array_intersect($v_dv, $patient_ko_final[$k_dv]);
				}
			}

			if($_REQUEST['show_details'] == "1")
			{
				print_r("\n doctor visits \n ");
				print_r($docvisits_ko);
			}

			/* ----------------------Get all VERLAUF - "Telefonate" details from patients------------------------------------- */

			$course_xt = Doctrine_Query::create()
				->select("ipid,course_date,done_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'done_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$course_xt->andWhere('create_user = "' . $required_user . '"');
			}
			$course_xt->orderBy('course_date ASC');
			$course_xt_array = $course_xt->fetchArray();

			foreach($course_xt_array as $k_xt => $val_xt)
			{
				$bay_xt[$val_xt['ipid']][] = date("Y-m-d", strtotime($val_xt['done_date']));
			}
			foreach($bay_xt as $k_xt => $v_xt)
			{
				$xt = array_intersect($v_xt, $patient_ko_final[$k_xt]);
				if(!empty($xt))
				{
					$xt_ko[$k_xt] = array_intersect($v_xt, $patient_ko_final[$k_xt]);
				}
			}


			if($_REQUEST['xt_det'] == "1")
			{
				print_r("\n telefone XT \n ");
				print_r($xt_ko);
			}
			/* ----------------------Calculate total visit and XT days for patients------------------------------------- */

			$bay_ko_days = array_merge_recursive($docvisits_ko, $xt_ko);

			foreach($bay_ko_days as $k_days => $v_days)
			{
				$final_ko_days[$k_days] = array_values(array_unique($v_days));
			}

			foreach($final_ko_days as $k => $val)
			{
				$kontakt_ko_days[$k] = count($val);
			}


			// Get TV sapv days in report period for active days
			//============================================
			$patientsapv = Doctrine_Query::create()
				->select("*")
				->from('SapvVerordnung sv')
				->whereIn('ipid', $ipidarr)
				->andWhere(str_replace($s, $r, $active_cond['interval_sql']))
				->andwhere('sv.verordnet NOT LIKE ""')
				->andWhere('sv.isdelete = 0');
			$patientsapvarr_res = $patientsapv->fetchArray();
			//print_r($patientsapvarr_res);
			foreach($patientsapvarr_res as $keys => $sapv)
			{
				$sapv_types_array = explode(",", $sapv['verordnet']);

				$highest_type = max($sapv_types_array);
				if($highest_type == "3")
				{
					$highest_value[$sapv['id']] = "TV";


					$tv_array = array();
					$tv_array['days'] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv['verordnungam'])), date("Y-m-d", strtotime($sapv['verordnungbis'])));
					$tv_array['id'] = $sapv['id'];
					$tv_array['start_date'] = $sapv['verordnungam'];
					$tv_array['end_date'] = $sapv['verordnungbis'];

					if(empty($patient_tvdays[$sapv['ipid']]))
					{
						$patient_tvdays[$sapv['ipid']] = array();
					}
					$patient_tvdays[$sapv['ipid']] = array_merge($patient_tvdays[$sapv['ipid']], $tv_array['days']);
					$patient_tvdays[$sapv['ipid']] = array_values(array_unique($patient_tvdays[$sapv['ipid']]));
				}
			}
			//print_r($patient_tvdays);exit;
			foreach($patient_tvdays as $k_tv => $val_tv)
			{
				$patient_final_tv[$k_tv] = array_intersect($val_tv, $active_days_period[$k_tv]);
			}
			foreach($patient_final_tv as $k_day => $v_day)
			{
				$patient_tv_nr[$k_day] = count($v_day);
			}
			//print_r($patient_tv_nr);exit;
			//====================================Display all data=============================================================================//
			foreach($patientDetails as $k_det => $v_det)
			{
				$MasterData['data'][$k_det]['epid'] = $v_det['epid'];
				$MasterData['data'][$k_det]['firstname'] = $v_det['firstname'];
				$MasterData['data'][$k_det]['lastname'] = $v_det['surname'];
				if(empty($patient_ko_nr[$k_det]))
				{
					$MasterData['data'][$k_det]['ko_days'] = 0;
				}
				else
				{
					$MasterData['data'][$k_det]['ko_days'] = $patient_ko_nr[$k_det];
				}
				if(empty($kontakt_ko_days[$k_det]))
				{
					$MasterData['data'][$k_det]['ko_visit_days'] = 0;
				}
				else
				{
					$MasterData['data'][$k_det]['ko_visit_days'] = $kontakt_ko_days[$k_det];
				}
				if(empty($patient_tv_nr[$k_det]))
				{
					$MasterData['data'][$k_det]['tv_days'] = 0;
				}
				else
				{
					$MasterData['data'][$k_det]['tv_days'] = $patient_tv_nr[$k_det];
				}
			}

			return $MasterData;
		}

		public function ptm_user_working_nordrhein($params)
		{

			//report_id=146
			//report_name = "Arbeitszeit Nordrhein"
			//this report looks for working times, driving times, xt times in report period for Nordhrein
			//Nachname | Vorname   | Benutzer | Datum          | Besuchszeit |	XT Minuten | Fahrtzeit   | koordination Minuten
			// surname | firstname | USER     | Date of action | visit time  |  xt time    | driving time| koordination time

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$required_user = $this->getDocCondition(true);
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}


			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			// 		$active_patients_ipids = array_keys($active_patient_details);// return ipids
			$ipidarr = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['lastname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
			}

			if(empty($ipidarr))
			{
				$ipidarr[] = "XXXXXX";
			}


			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usrar = Doctrine_Query::create()
				->select('*')
				->from('User')
				->where('isdelete=0')
				->orderBy('last_name ASC');
			$user_arrayq = $usrar->fetchArray();

			foreach($user_arrayq as $key => $val)
			{
				$username[$val['id']] = $val['user_title'] . ' ' . $val['last_name'] . ', ' . $val['first_name'];
			}

			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_nurse_form' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'kvno_doctor_form' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') ='lvn_nurse_form' OR AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') ='visit_koordination_form'")
				->andWhereIn('ipid', $ipidarr);
			$deleted_visits_array = $deleted_visits->fetchArray();
			$deleted_visits_array['kvno_doctor_form'][] = '99999999999';
			$deleted_visits_array['kvno_nurse_form'][] = '99999999999';
			$deleted_visits_array['lvn_nurse_form'][] = '99999999999';
			$deleted_visits_array['contact_form'][] = '99999999999';
			$deleted_visits_array['visit_koordination_form'][] = '99999999999';

			foreach($deleted_visits_array as $k_form => $v_form)
			{
				$deleted_visits_array[$v_form['tabname']][] = $v_form['recordid'];
			}
			$deleted_visits_nurse_array = array_merge($deleted_visits_array['kvno_nurse_form'], $deleted_visits_array['lvn_nurse_form']);
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n deleted visits \n");
				print_r($deleted_visits_array);
			}

			/* ----------------------Get all "doctor and nurse visits" details from patients------------------------------------- */
			// Visits kvnodoctorform
			$doctor_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("KvnoDoctor d")
				->whereIn('d.ipid', $ipidarr)
				->andWhereNotIn('d.id', $deleted_visits_array['kvno_doctor_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$doctor_visits->andWhere('create_user = "' . $required_user . '"');
			}
			$doctor_visits->orderBy('start_date ASC');

			$doctor_visits_arr = $doctor_visits->fetchArray();

			foreach($doctor_visits_arr as $doc => $value_doc)
			{
				$start_date = strtotime($value_doc['start_date']);
				$end_date = strtotime($value_doc['end_date']);
				$doc_visit_minutes = round(($end_date - $start_date) / 60);

				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['user_name'] = $username[$value_doc['create_user']];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_minutes'] = $doc_visit_minutes;
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_driving'] = $value_doc['fahrtzeit'];
			}

			// Visits kvnonurseform and leverkusennurseform
			$nurse_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("KvnoNurse d")
				->whereIn('d.ipid', $ipidarr)
				->andWhereNotIn('d.id', $deleted_visits_nurse_array)
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$nurse_visits->andWhere('create_user = "' . $required_user . '"');
			}
			$nurse_visits->orderBy('start_date ASC');

			$nurse_visits_arr = $nurse_visits->fetchArray();
			//print_r($nurse_visits_arr);exit;
			foreach($nurse_visits_arr as $doc => $value_doc)
			{

				$start_date = strtotime($value_doc['start_date']);
				$end_date = strtotime($value_doc['end_date']);
				$doc_visit_minutes = round(($end_date - $start_date) / 60);

				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['user_name'] = $username[$value_doc['create_user']];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_minutes'] = $doc_visit_minutes;
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_driving'] = $value_doc['fahrtzeit'];
			}


			//Visits visitkoordinationform
			$ko_visits = Doctrine_Query::create()
				->select("*,d.ipid,d.id")
				->from("VisitKoordination d")
				->whereIn('d.ipid', $ipidarr)
				->andWhereNotIn('d.id', $deleted_visits_array['visit_koordination_form'])
				->andWhere(str_replace('%date%', 'start_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$ko_visits->andWhere('create_user = "' . $required_user . '"');
			}
			$ko_visits->orderBy('start_date ASC');
			$ko_visits_arr = $ko_visits->fetchArray();

			foreach($ko_visits_arr as $doc => $value_doc)
			{
				$start_date = strtotime($value_doc['start_date']);
				$end_date = strtotime($value_doc['end_date']);
				$doc_visit_minutes = round(($end_date - $start_date) / 60);

				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['user_name'] = $username[$value_doc['create_user']];
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_minutes'] = $doc_visit_minutes;
				$minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_driving'] = $value_doc['fahrtzeit'];
			}
			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n visits \n");
				print_r($minutes_array);
			}
			
			
			$cf_visits = Doctrine_Query::create()
			->select("*,c.ipid,c.id")
			->from("ContactForms c")
			->whereIn('c.ipid', $ipidarr)
			->andWhereNotIn('c.id', $deleted_visits_array['contact_form'])
			->andWhere(str_replace('%date%', 'billable_date', $active_cond['date_sql']))
			->andWhere("isdelete = 0");
			if(!empty($required_user))
			{
			    $cf_visits->andWhere('create_user = "' . $required_user . '"');
			}
			$cf_visits->orderBy('start_date ASC');
			$conatact_froms_arr = $cf_visits->fetchArray();			
			
			foreach($conatact_froms_arr as $cf_key => $value_doc)
			{
			    $start_date = strtotime($value_doc['start_date']);
			    $end_date = strtotime($value_doc['end_date']);
			    $doc_visit_minutes = round(($end_date - $start_date) / 60);
			
			    $minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
			    $minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['user_name'] = $username[$value_doc['create_user']];
			    $minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_minutes'] = $doc_visit_minutes;
			    $minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_driving'] = $value_doc['fahrtzeit'];
			}
			
			
			/* ------------------------Get all VERLAUF - "Telefonate" details from patients----------------------------------- */

			$course_xt = Doctrine_Query::create()
				->select("ipid,course_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$course_xt->andWhere('create_user = "' . $required_user . '"');
			}
			$course_xt->orderBy('course_date ASC');
			$course_xt_array = $course_xt->fetchArray();

			foreach($course_xt_array as $course_xt_key => $course_xt_val)
			{
				$valid_date_xt = date('Y-m-d', strtotime($course_xt_val['course_date']));

				if(!in_array($valid_date_xt, $finalDays[$course_xt_val['ipid']]['FinalCountDays']))
				{
					$course_xt_arr = explode("|", $course_xt_val['course_title']);
					$xt_array[$patient_array[$course_xt_val['ipid']]['epid']][] = $course_xt_val['course_title'];

					$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['action_date'] = date('d.m.Y', strtotime($course_xt_val['course_date']));
					;
					$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['user_name'] = $username[$course_xt_val['create_user']];
					if(count($course_xt_arr) == 3)
					{ //method implemented with 3 inputs
						$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['telefon_minutes'] = intval($course_xt_arr[0]);
					}
					else if(count($course_xt_arr) != 3 && count($course_xt_arr) < 3)
					{ //old method before anlage 10
						$minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['telefon_minutes'] = intval($course_xt_arr[0]);
					}
				}
			}


			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n telefon \n");
				print_r($xt_array);
			}
			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */
			$course_v = Doctrine_Query::create()
				->select("ipid,course_date,create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $ipidarr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
			if(!empty($required_user))
			{
				$course_v->andWhere('create_user = "' . $required_user . '"');
			}
			$course_v->orderBy('course_date ASC');
			$course_v_array = $course_v->fetchArray();

			foreach($course_v_array as $course_v_key => $course_v_val)
			{
				$valid_date_v = date('Y-m-d', strtotime($course_v_val['course_date']));


				$course_v_arr = explode("|", $course_v_val['course_title']);
				$v_array[$patient_array[$course_v_val['ipid']]['epid']][] = $course_v_val['course_title'];

				$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['user_name'] = $username[$course_v_val['create_user']];
				$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['action_date'] = date('d.m.Y', strtotime($course_v_val['course_date']));

				if(count($course_v_arr) == 3)
				{
					$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['coordination_minutes'] = intval($course_v_arr[0]);
				}
				else if(count($course_v_arr) != 3)
				{
					$minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['coordination_minutes'] = intval($course_v_arr[0]);
				}
			}

			if($_REQUEST['dbg'] == '1')
			{
				print_r("\n koordination \n");
				print_r($v_array);
			}


			/* ----------------------Prepare data for display ----------------------------- */
			$patient_actions_count = array();
			$visit_count = 0;

			if($_REQUEST['dbg'] == 'x')
			{
				print_r($activ_in_perioada);
				exit;
			}
			$total_visits_per_day = 0;
			$total_contacts_per_day = 0;

			foreach($minutes_array as $patient_ipid => $values)
			{
				$patient_values[] = $patient_ipid;

				$x = 0;
				foreach($values as $action_identification => $vls)
				{
					$user_documentation[$patient_ipid][$x]['user_name'] = $vls['user_name'];
					$user_documentation[$patient_ipid][$x]['date_of_action'] = $vls['action_date'];


					if($vls['visit_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['visit_time_count'] = $vls['visit_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['visit_time_count'] = "-";
					}

					if($vls['telefon_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['xt_time_count'] = $vls['telefon_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['xt_time_count'] = "-";
					}


					if($vls['visit_driving'])
					{
						$user_documentation[$patient_ipid][$x]['driving_time_count'] = $vls['visit_driving'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['driving_time_count'] = "-";
					}


					if($vls['coordination_minutes'])
					{
						$user_documentation[$patient_ipid][$x]['coordination_time_count'] = $vls['coordination_minutes'];
					}
					else
					{
						$user_documentation[$patient_ipid][$x]['coordination_time_count'] = "-";
					}

					$x++;
				}
			}

			/* ------------------------------------Display all results ------------------------------------------ */
			$i = 0;


			if(!empty($patientDetails))
			{
				foreach($patientDetails as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patientDetails[$patient['ipid']]);
					}
				}
				foreach($patientDetails as $keypatient => $patient)
				{
					$MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['lastname'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['firstname'];
					$MasterData['data'][$patient['ipid']]['birthd'] = $patient['dateofbirth'];
					$MasterData['data'][$patient['ipid']]['patient_actions'] = $user_documentation[$patient['ipid']];

					$i++;
				}

				return $MasterData;
			}
		}

		public function quality_visits($params)
		{
			// report_id = "147
			//new report "Qualitat des Besuchs"      - ISPC-1060
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];


			$required_user = $this->getDocCondition(true);
			$pm = new PatientMaster ();

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}


			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$ipidarr = array_keys($active_patient_details); // return ipids

			foreach($active_patient_details as $ipid => $p_details)
			{

				$patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patientDetails [$p_details['details'] ['ipid']] ['lastname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
			}
			if(empty($ipidarr))
			{
				$ipidarr[] = "XXXXXX";
			}
			//print_r($patientDetails);exit;
			/* ----------------------Get all "deleted visits"  from patients------------------------------------- */
			$deleted_visits = Doctrine_Query::create()
				->select("id,ipid,recordid,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
				->andWhereIn('ipid', $ipidarr);
			$deleted_visits_array = $deleted_visits->fetchArray();

			$del_visits['contact_form'][] = '999999999999';

			foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
			{
				$del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
			}

			/* ----------------------Get all "doctor visits" details from patients------------------------------------- */
			$doctor_visits = Doctrine_Query::create()
				->select("*,c.ipid,c.id")
				->from("ContactForms c")
				->whereIn('c.ipid', $ipidarr)
				->andWhereNotIn('c.id', $del_visits['contact_form'])
				->andWhere(str_replace('%date%', 'billable_date', $active_cond['date_sql']))
				->andWhere("isdelete = 0");
			if(!empty($required_user))
			{
				$doctor_visits->andWhere('create_user = "' . $required_user . '"');
			}
			$doctor_visits->orderBy('start_date ASC');
			$doctor_visits_arr = $doctor_visits->fetchArray();
			//print_r($doctor_visits_arr);exit;

			foreach($doctor_visits_arr as $doc => $value_doc)
			{

				$start_date = strtotime($value_doc['start_date']);
				$end_date = strtotime($value_doc['end_date']);

				$visits_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
				$visits_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_time'] = date('H:i', strtotime($value_doc['start_date'])) . ' - ' . date('H:i', strtotime($value_doc['end_date']));
				$visits_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['quality'] = $value_doc['quality'];

				$doctor_visits_dbg[$value_doc['ipid']][] = $value_doc;
			}
			foreach($visits_array as $patient_ipid => $values)
			{
				$patient_values[] = $patient_ipid;
				$x = 0;
				foreach($values as $action_identification => $vls)
				{
					$visit_documentation[$patient_ipid][$x]['visit_date'] = $vls['action_date'];

					if($vls['action_time'])
					{
						$visit_documentation[$patient_ipid][$x]['time_of_action'] = $vls['action_time'];
					}
					else
					{
						$visit_documentation[$patient_ipid][$x]['time_of_action'] = "-";
					}
					if($vls['quality'] == '0')
					{
						$visit_documentation[$patient_ipid][$x]['quality'] = '';
					}
					elseif($vls['quality'] == '1')
					{
						$visit_documentation[$patient_ipid][$x]['quality'] = 'geplant';
					}
					elseif($vls['quality'] == '2')
					{
						$visit_documentation[$patient_ipid][$x]['quality'] = 'ungeplant';
					}
					elseif($vls['quality'] == '3')
					{
						$visit_documentation[$patient_ipid][$x]['quality'] = 'akut';
					}
					$x++;
				}
			}
			//print_r($visit_documentation);exit;
			//-------------------Display results--------------------------------
			if(!empty($patientDetails))
			{
				foreach($patientDetails as $keypatient => $patient)
				{
					if(!in_array($patient['ipid'], $patient_values))
					{
						unset($patientDetails[$patient['ipid']]);
					}
				}
				foreach($patientDetails as $keypatient => $patient)
				{

					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['lastname'];
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['firstname'];
					$MasterData['data'][$patient['ipid']]['patient_actions'] = $visit_documentation[$patient['ipid']];

					$i++;
				}

				return $MasterData;
			}
		}

		public function shsapvtageAction()
		{
			// report_id = XX
			// report_name = SAPV Tage Custom
			// 
			// ISPC-1012 - comment #13657
			// average treated patients per day
			// overall SAPV days (means sum all SAPV patients per day for all days)

			$quarterarr = array();
			$yeararr = array('0' => '2014');
			$montharr = array();
			$includearr = array();
			$onlyactive = array();

			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$pm = new PatientMaster();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$period_days = $pm->getDaysInBetween($period['start']['0'], $period['end'][0]);

			$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);

			if(count($ipidarr) == 0)
			{
				$ipidarr [] = "0";
			}

			$ipidsarr[] = '99999999999';
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->andWhere('isdelete=0 and ((' . str_replace($s, $r, $active_cond ['interval_sql']) . '))')
				->andWhereIn('ipid', $ipidarr)
				->andWhere('status != "1"')
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();

			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{
				if(empty($pat_sapv_days[$sapv['ipid']]))
				{
					$pat_sapv_days[$sapv['ipid']] = array();
				}
				$pat_sapv_days[$sapv['ipid']] = array_merge($pat_sapv_days[$sapv['ipid']], $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv['verordnungam'])), date("Y-m-d", strtotime($sapv['verordnungbis'])), false));
				$pat_sapv_days[$sapv['ipid']] = array_values(array_unique($pat_sapv_days[$sapv['ipid']]));
			}

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';

			$conditions['periods'][0]['start'] = '2009-01-01';
			$conditions['periods'][0]['end'] = date('Y-m-d');
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipidarr;
			$patient_days = Pms_CommonData::patients_days($conditions, $sql);

//			print_r($patient_days);
//			
//			print_r("ipidarr 1 \n");
//			print_r($pat_sapv_days);

			foreach($ipidarr as $k_pat => $v_ipid)
			{

				$hosp_days = $patient_days[$v_ipid]['hospital']['real_days_cs'];
				$hospiz_days = $patient_days[$v_ipid]['hospiz']['real_days_cs'];
				$treatment_days = $patient_days[$v_ipid]['treatment_days'];

				array_walk($hosp_days, function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});

				array_walk($hospiz_days, function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});

				array_walk($treatment_days, function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});

				$treatment_days_cut[$v_ipid] = array_intersect($treatment_days, $period_days);
				$treatment_days_cut[$v_ipid] = array_values(array_unique($treatment_days_cut[$v_ipid]));


				$pat_sapv_days[$v_ipid] = array_intersect($pat_sapv_days[$v_ipid], $period_days);
				$pat_sapv_days[$v_ipid] = array_intersect($pat_sapv_days[$v_ipid], $treatment_days);
				if($patient_days[$v_ipid]['hospital']['real_days_cs_no'] > '0' && !empty($hosp_days))
				{
					$pat_sapv_days[$v_ipid] = array_diff($pat_sapv_days[$v_ipid], $hosp_days);
				}

				if($patient_days[$v_ipid]['hospiz']['real_days_cs_no'] > '0' && !empty($hospiz_days))
				{
					$pat_sapv_days[$v_ipid] = array_diff($pat_sapv_days[$v_ipid], $hospiz_days);
				}

				$pat_sapv_days[$v_ipid] = array_values(array_unique($pat_sapv_days[$v_ipid]));

				$hosp_days = array();
				$hospiz_days = array();
				$treatment_days = array();
			}

//			print_r("ipidarr 2 \n");
//			print_r($ipidarr);
//			print_r($pat_sapv_days);



			foreach($patient_days as $ipid => $patient_days)
			{
				$MasterData['data'][$ipid]['epid'] = $patient_days['details']['epid'];
				$MasterData['data'][$ipid]['lastname'] = $patient_days['details']['last_name'];
				$MasterData['data'][$ipid]['firstname'] = $patient_days['details']['first_name'];
				$MasterData['data'][$ipid]['dateofbirth'] = date("d.m.Y", strtotime($patient_days['details']['birthd']));
				$MasterData['data'][$ipid]['admissiondate'] = date("d.m.Y", strtotime($patient_days['details']['admission_date']));
				$MasterData['data'][$ipid]['activedays'] = count($treatment_days_cut[$ipid]);

				if(empty($pat_sapv_days[$ipid]))
				{
					$sapvtage = "0";
				}
				else
				{
					$sapvtage = count($pat_sapv_days[$ipid]);
				}

				$MasterData['data'][$ipid]['sapvtage'] = $sapvtage;

				$MasterData['extra']['total_sapv_days'] += $sapvtage;
				$MasterData['extra']['total_active_days'] += count($treatment_days_cut[$ipid]);
			}
			$MasterData['extra']['average_sapv'] = $MasterData['extra']['total_sapv_days'] / 365;

			$this->view->master_data = $MasterData;
//		print_r("Master data \n");
//		print_r($MasterData);
//		exit;
		}

		public function aktuellepatientv3($params)
		{
			//report_id = 148
			//report_name = Aktuelle Patienten Version 3
			$activeipids = $this->getActiveIpids();
			$logininfo = new Zend_Session_Namespace('Login_Info');

			if($activeipids) 
			{
				$i = 1;
				foreach($activeipids as $ipid)
				{
					if($i != count($activeipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}
	
			// Get Patients - Contact persons
			$contact = new ContactPersonMaster();
			$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($activeipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
			//Get Patient Master Data
			$patientMasterData = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
				->from('PatientMaster p')
				->where('ipid IN (' . $ipidsactive . ') ');
			
			//ISPC-2045 - get kontact-phone
			$patientMasterData->leftJoin("p.PatientContactphone pcp");
			$patientMasterData->addSelect("pcp.phone, pcp.mobile");

			$patientexec = $patientMasterData->fetchArray();

			foreach($patientexec as $patient)
			{
				if(strlen($patient["last_name"]) > 0)
				{
					$patientinfo[$patient['ipid']]['lastname'] = $patient["last_name"];
				}
				if(strlen($patient['first_name']) > 0)
				{
					$patientinfo[$patient['ipid']]['firstname'] = $patient['first_name'];
				}
				if(strlen($patient["kontactnumber"]) > 0)
				{
					$patientinfo[$patient['ipid']]['kontactnumber'] = $patient["kontactnumber"];
				}
				
				//ISPC-2045
				if ( ! empty($patient['PatientContactphone']) ) {
				
					$PatientContactphone = array_column($patient['PatientContactphone'], 'phone_number');
					$patientinfo[$patient['ipid']]['kontactnumber'] = implode("; ", $PatientContactphone);
				}
				
				if(strlen($patient["street1"]) > 0)
				{
					$patientinfo[$patient['ipid']]['street1'] = $patient["street1"];
				}
				if(strlen($patient["zip"]) > 0)
				{
					$patientinfo[$patient['ipid']]['zip'] = $patient["zip"];
				}
				if(strlen($patient["city"]) > 0)
				{
					$patientinfo[$patient['ipid']]['city'] = $patient["city"];
				}
			}
			//		Get locations
			$patloc = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->where('ipid IN (' . $ipidsactive . ')')
				->andWhere('isdelete="0"')
				->andWhere("valid_till='0000-00-00 00:00:00'")
				->orderBy('id DESC');
			$patlocs = $patloc->execute();

			if($patlocs)
			{
				$patlocarray = $patlocs->toArray();
				$locinc = 1;
				foreach($patlocarray as $patloc)
				{
					$patlocarrayipid[$patloc['ipid']] = $patloc;
					if($locinc != count($patlocarray))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}

					$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
					$locinc++;
				}

				$floc = Doctrine_Query::create()
					->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
					->from('Locations')
					->where("id IN (" . $patientlocationstr . ")")
					->andWhere('isdelete=0')
					->orderBy('location ASC');
				$locationdata = $floc->fetchArray();

				foreach($locationdata as $kloc => $vloc)
				{
					$locationLastData[$vloc['id']] = $vloc;
				}

				foreach($patlocarray as $k_loc => $v_loc)
				{
					$locid = substr($v_loc['location_id'], 0, 4);
					if($locid == "8888")
					{
						$patient_location_id = $v_loc['location_id'];

						$z = 1;
						$cnt_number = 1;
						foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
						{
							if($value_cnt['isdelete'] == '0')
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')' . '<br/>' . $value_cnt['cnt_street1'] . '<br/>' . $value_cnt['cnt_zip'] . '<br/>' . $value_cnt['cnt_city'];
								$cnt_number++;
							}
							else
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ';
							}
							$z++;
						}
						$patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
					}
					else
					{
						$patlocarrayFinal[$v_loc['ipid']] = $locationLastData[$v_loc['location_id']]['location'];
						$patlocarrayFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
						if($patlocarrayFinal[$v_loc['ipid']]['location_type'] == "5")
						{
							$patlocarrayFinal[$v_loc['ipid']] = $locationLastData[$v_loc['location_id']]['location'] . '<br />' . $patientinfo[$v_loc['ipid']]['street1'] . '<br/>' . $patientinfo[$v_loc['ipid']]['zip'] . ' ' . $patientinfo[$v_loc['ipid']]['city'];
						}
						else
						{
							$patlocarrayFinal[$v_loc['ipid']] = $locationLastData[$v_loc['location_id']]['location'] . '<br />' . $locationLastData[$v_loc['location_id']]['street'] . '<br />' . $locationLastData[$v_loc['location_id']]['zip'] . ' ' . $locationLastData[$v_loc['location_id']]['city'];
						}
					}
				}

				$actual_location = $locaray[0]['location'];
				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
					$typeid .=$comma . "'" . $valdia['id'] . "'";
					$comma = ", ";
				}


				//extract doctors ids
				$idoc = 1;
				foreach($patientexec as $patient_doctor)
				{
					$doctorids[] = $patient_doctor['familydoc_id'];
				}
				foreach($patientexec as $patient)
				{
					$patientMasterDetails[$patient['ipid']] = $patient;
				}

				//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						/* if(strlen($doc['title'])>0)
						  {
						  $Familydoctor[$doc['id']] = $doc['title'].", ";
						  } */
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['last_name'] . ", " . $doc['first_name'] . "<br /> ";
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']] .= $doc['phone_practice'];
						}
					}
				}

				$dropSapv = Doctrine_Query::create()
					->select('*, GROUP_CONCAT(verordnet) as vero')
					->from('SapvVerordnung')
					->where('ipid IN (' . $ipidsactive . ') and isdelete=0 and status != 1 ')
					->andWhere("verordnungbis >='" . date('Y-m-d', mktime(0, 0, 0, date('m'), date('d'), date('Y'))) . " 00:00:00'")
					->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();

				foreach($droparray as $verord)
				{
					$sapv = explode(',', $verord['vero']);
					$s = max($sapv);
					if($s == "1")
					{
						$sapv_value[$verord['ipid']] = "BE";
					}
					elseif($s == "2")
					{
						$sapv_value[$verord['ipid']] = "KO";
					}
					elseif($s == "3")
					{
						$sapv_value[$verord['ipid']] = "TV";
					}
					elseif($s == "4")
					{
						$sapv_value[$verord['ipid']] = "VO";
					}
					else
					{
						$sapv_value[$verord['ipid']] = "-";
					}
				}

				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);

				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				$epidipid = Doctrine_Query::create()
					->select('*')
					->from('EpidIpidMapping')
					->where('ipid IN (' . $ipidsactive . ')');
				$epidarr = $epidipid->fetchArray();

				$x = 1;
				foreach($epidarr as $epids)
				{
					$epid[$epids['ipid']] = $epids['epid'];

					if($x != count($epidarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$epidstr .= "'" . $epids['epid'] . "'" . $end;
					$x++;

					$epidarray[$epids['ipid']] = $epids;
				}


				$treatedbyQ = Doctrine_Query::create()
					->select('*')
					->from('PatientQpaMapping')
					->where('epid IN (' . $epidstr . ')');


				$treatedbyarr = $treatedbyQ->fetchArray();

				$xx = 1;
				if($treatedbyarr)
				{
					foreach($treatedbyarr as $treatedby)
					{
						if($xx != count($treatedbyarr))
						{
							$end = ",";
						}
						else
						{
							$end = "";
						}

						$treatedbystr .= "'" . $treatedby['userid'] . "'" . $end;
						$treatedbyarray[] = $treatedby;
						$xx++;
					}
				}
				else
				{
					$treatedbystr = '"xxx"';
				}
				$treatedbyUsersQ = Doctrine_Query::create()
					->select('*')
					->from('User')
					->where('id IN (' . $treatedbystr . ')');
				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();

				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['last_name'] . " " . $usertreated['first_name'];
				}


				foreach($patientMasterDetails as $keypatient => $patient)
				{


					$MasterData['data'][$keypatient]['lastname'] = $patientinfo[$keypatient]['lastname'];
					$MasterData['data'][$keypatient]['firstname'] = $patientinfo[$keypatient]['firstname'];
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']];
					$MasterData['data'][$keypatient]['contact_number'] = $patientinfo[$keypatient]['kontactnumber'];
					$MasterData['data'][$keypatient]['main_diagnosis'] = $diagnosisarr[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['location'] = $patlocarrayFinal[$keypatient] . ' ';
				}
				return $MasterData;
				
			}
				}
				else
				{
					return false;
				}
		}

		public function shinternal($params)
		{
			// report_id = 149
			// report_name =  Sh Report // 

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];


			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();

			$patientmaster = new PatientMaster();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$x = 0;
			foreach($period['start'] as $s => $start_date)
			{
				$report_dates[$x]['start'] = $start_date;
				$x++;
			}

			$v = 0;
			foreach($period['end'] as $e => $end_date)
			{
				$report_dates[$v]['end'] = $end_date;
				$v++;
			}


			$ipids = array();
			$standby = array();
			$active_patients = array();

			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */

			foreach($period ['start'] as $keyd => $startDate)
			{
				$selected_moths[] = date("m.Y", strtotime($startDate));
				$period_days [] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			$required_month = $selected_moths[0];

			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);
			$number_of_month_days =count($finalPeriodDays) ;
			/* ################################################################################################### */


			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= 'convert(AES_DECRYPT(p.sex,"' . Zend_Registry::get('salt') . '") using latin1) as sex,';

			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);

			$ipids = array_keys($active_patient_details); // return ipids

			
			$hospital_hospiz_days_array_dmy = array();
			$admission_dates = array();
			foreach($active_patient_details as $ipid => $p_details)
			{
				foreach($p_details['active_periods'] as $pid => $aperiod)
				{
					$admission_dates[$p_details['details'] ['ipid']][] = date('Y-m-d', strtotime($aperiod['start']));
				}

				$patient_array [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$epids [] = $p_details['details'] ['epid'];
				$epid2ipid[$p_details['details'] ['epid']] = $p_details['details'] ['ipid'];

				$allfinal[] = $p_details['details'] ['ipid'];

				$patient_array [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patient_array [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patient_array [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patient_array [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patient_array [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patient_array [$p_details['details'] ['ipid']] ['discharge_date'] = end($p_details['discharge']);
					$patient_array [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patient_array [$p_details['details'] ['ipid']] ['discharge_date'] = "-";
				}

				$patientDetails [$p_details['details'] ['ipid']]['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['treatment_days'] = $p_details['treatment_days'];


				$active_days_in_period_dmy [$p_details['details'] ['ipid']] = $p_details['real_active_days'];

				$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = array();
				if(!empty($p_details['hospital']['real_days_cs']))
				{
					$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = $p_details['hospital']['real_days_cs'];
				}
				if(!empty($p_details['hospiz']['real_days_cs']))
				{
					$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = array_merge($p_details['hospiz']['real_days_cs'], $hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']]);
				}

				$hospital_hospiz_days_dmy[$p_details['details'] ['ipid']] = $hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']];

				$hospiz_days_dmy[$p_details['details'] ['ipid']] = $p_details['hospiz']['real_days_cs'];
			}


			if($_REQUEST['dbg'] == "patients"){
				print_r(" used patients in report \n ");
				print_r($epid2ipid);
			}
			// get overall data - for koordination first day of treatment
			$conditions_ov['periods'] = array('0' => array('start' => "2007-01-01", 'end' => date("Y-m-d")));
			$conditions_ov['client'] = $clientid;
			$conditions_ov['ipids'] = $ipids;
			
			$overall_patients_data = Pms_CommonData::patients_days($conditions_ov, $sql);
			
			foreach($overall_patients_data as $ipid => $op_details)
			{
				$overall_patient_details [$op_details['details'] ['ipid']]['treatment_days'] = $op_details['treatment_days'];
				
				$overall_patient_details [$op_details['details'] ['ipid']]['real_active_days'] = $op_details['real_active_days'];
				$overall_patient_details [$op_details['details'] ['ipid']]['real_active_days_no'] = $op_details['real_active_days_no'];
				$overall_patient_details [$op_details['details'] ['ipid']]['hospital_days_cs'] = $op_details['hospital']['real_days_cs'];
				$overall_patient_details [$op_details['details'] ['ipid']]['hospital_days_cs_no'] = $op_details['hospital']['real_days_cs_no'];
				$overall_patient_details [$op_details['details'] ['ipid']]['active_days_no_hospital_days'] = $op_details['real_active_days_no'] - $op_details['hospital']['real_days_cs_no'];
			
				$overall_patient_details [$op_details['details'] ['ipid']]['hospiz_days_cs'] = $op_details['hospiz']['real_days_cs'];
				$overall_patient_details [$op_details['details'] ['ipid']]['hospiz_days_cs_no'] = $op_details['hospiz']['real_days_cs_no'];
			
				$overall_patient_details [$op_details['details'] ['ipid']]['treatment_days'] = $op_details['treatment_days'];
			}
			
			if($_REQUEST['dbg'] == "overall"){
					
				print_r(" \n patients overall data \n ");
				print_r($overall_patient_details);
			}
			
			if(count($epids) == 0)
			{
				$epids[] = "999999999999999";
			}

			if(count($ipids) == 0)
			{
				$ipids[] = "999999999999999";
			}
			$hospital_hospiz_days = array();
			$active_days = array();
			$active_days_in_period = array();
			$active_days = array();

			foreach($active_days_in_period_dmy as $pipid => $days_array)
			{
				foreach($days_array as $Kd => $dday)
				{
					$active_days_in_period[$pipid][] = date('Y-m-d', strtotime($dday));
					$active_days[$pipid][] = date('Y-m-d', strtotime($dday));
				}
			}

			foreach($hospital_hospiz_days_dmy as $pipid => $days_array)
			{
				foreach($days_array as $Kd => $dday)
				{
					$hospital_hospiz_days[$pipid][] = date('Y-m-d', strtotime($dday));
				}
			}

			foreach($hospiz_days_dmy as $pipid => $days_array)
			{
				foreach($days_array as $Kd => $dday)
				{
					$hospiz_days[$pipid][] = date('Y-m-d', strtotime($dday));
				}
			}
			/* ################################################################################################### */
			/* ----------------- Get User - Group  Details -------------------- */
			$usergroup = new Usergroup();
			$MasterGroups = array("4", "5");
			$master_group_ids = $usergroup->getUserGroups($MasterGroups);
			
			foreach($master_group_ids as $key => $value)
			{
				$groups_id[$value['groupmaster']] = $value['id'];
				$group_info[$value['id']]['master'] = $value['groupmaster'];
			}
			/* ################################################################################################### */
			/* ----------------- Get User Details -------------------- */
			$usermod = new User();
			$groups_users_array = $usermod->getuserbyGroupId($groups_id, $clientid, true);
			
			
			foreach($groups_users_array as $key => $val)
			{
				if($group_info[$val['groupid']]['master'] == '4')
				{
					$users ['doctor'][] = $val ['id'];
				}
			
				if($group_info[$val['groupid']]['master'] == '5')
				{
					$users ['nurse'][] = $val ['id'];
				}
			
				if($group_info[$val['groupid']]['master'] == '4' || $group_info[$val['groupid']]['master'] == '5')
				{
					$users ['doctor_nurse'][] = $val ['id'];
				}
			}
			if(empty($users['doctor']) || count($users['doctor']) == 0)
			{
				$users['doctor']['9999'] = "999999999999";
			}
			if(empty($users['nurse']) || count($users['nurse']) == 0)
			{
				$users['nurse']['9999'] = "999999999999";
			}
			if(empty($users['doctor_nurse']) || count($users['doctor_nurse']) == 0)
			{
				$users['doctor_nurse']['9999'] = "999999999999";
			}
				
			/* ################################################################################################### */
			/* ----------------- Get Patients Assigned doctors  -------------------- */
			$treatedbyQ = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->whereIn('epid ', $epids);
			$treatedbyarr = $treatedbyQ->fetchArray();

			foreach($treatedbyarr as $k => $qvalues)
			{
				$epids2assigned_user[$qvalues['userid']][] = $qvalues['epid'];
				$ipids2assigned_user[$qvalues['userid']][] = $epid2ipid[$qvalues['epid']];
				$assigned_user2ipid[$epid2ipid[$qvalues['epid']]][] = $qvalues['userid'];
				$assigned_user2epid[$qvalues['epid']][] = $qvalues['userid'];
				
				if(in_array($qvalues['userid'],$users['nurse'])  && !in_array($epid2ipid[$qvalues['epid']],$patients2nurses[$qvalues['userid']])){
					$patients2nurses[$qvalues['userid']][] = $epid2ipid[$qvalues['epid']]; 
				} elseif(in_array($qvalues['userid'],$users['doctor'])  && !in_array($epid2ipid[$qvalues['epid']],$patients2doctors[$qvalues['userid']]) ){
					$patients2doctors[$qvalues['userid']][] = $epid2ipid[$qvalues['epid']]; 
				}
			}

			if($_REQUEST['dbg'] == "doctor"){
				
				print_r(" \n patients assigned to doctors \n ");
				print_r($patients2doctors);
			}

			if($_REQUEST['dbg'] == "nurse"){
				
				print_r(" \n patients assigned to nurse \n ");
				print_r($patients2nurses);
			}

			/* ################################################################################################### */
			/* ----------------- Get Patients SAPV details OVERALL  -------------------- */
			
			$osapv = Doctrine_Query::create()
			->select('*')
			->from('SapvVerordnung')
			->where('isdelete=0')
			->andWhereIn('ipid', $ipids)
			->orderBy("ipid");
			$o_sapvarr = $osapv->fetchArray();
			//SAPV patient data + list days sapv
			foreach($o_sapvarr as $keys => $ssapv)
			{
			
				if($ssapv['status'] == '1' && $ssapv['verorddisabledate'] != '0000-00-00 00:00:00' && $ssapv['verorddisabledate'] != '1970-01-01 00:00:00')
				{
					$sverordisablenext = strtotime('+1 day', strtotime($ssapv['verorddisabledate']));
					$ssapv ['verordnungbis'] = date('Y-m-d', $sverordisablenext);
				}
				$overall_patient_data [$ssapv ['ipid']] ['overall_sapv_days'] [] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($ssapv ['verordnungam'])), date("Y-m-d", strtotime($ssapv ['verordnungbis'])), false);
			}
		
			foreach($overall_patient_data as $ipid => $asapvdata)
			{
				foreach($asapvdata ['overall_sapv_days'] as $group => $aspvdata)
				{
					foreach($aspvdata as $key => $odaysapv)
					{
						if(in_array(date('d.m.Y', strtotime($odaysapv)), $overall_patient_details [$ipid]['treatment_days'])  // active day
								&& !in_array(date('d.m.Y',strtotime($odaysapv)),$overall_patient_details [$ipid]['hospital_days_cs']) // not in hospital days
								&& !in_array(date('d.m.Y',strtotime($odaysapv)),$overall_patient_details [$ipid]['hospiz_days_cs']) // not in hospiz days
								&& !in_array(date('Y-m-d', strtotime($odaysapv)), $overall_patient_details [$ipid] ['sapv_active_days']) // does not exist already in array
						)
						{
							$overall_patient_details [$ipid] ['sapv_active_days'] [] = $odaysapv;
							asort($overall_patient_details [$ipid] ['sapv_active_days']);
							$overall_patient_sapv_details [$ipid] [] = $odaysapv;
							asort($overall_patient_sapv_details [$ipid]);
						}
					}
				}
				
				$overall_patient_details [$ipid] ['sapv_active_days'] = array_values($overall_patient_details [$ipid] ['sapv_active_days']); 
				$overall_patient_sapv_details [$ipid] = array_values($overall_patient_sapv_details [$ipid]); 
			}
			
			if($_REQUEST['dbg'] == "patients"){
				print_r(" \n patients overall sapv days \n ");
				print_r($overall_patient_sapv_details);
			}
			
			/* ################################################################################################### */
			/* ----------------- Get Patients SAPV details in report period  -------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('isdelete=0 and ((' . str_replace($s, $r, $active_cond ['interval_sql']) . '))')
				->andWhereIn('ipid', $ipids)
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();
			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{

				if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00')
				{
					$verordisablenext = strtotime('+1 day', strtotime($sapv['verorddisabledate']));
					$sapv ['verordnungbis'] = date('Y-m-d', $verordisablenext);
				}
				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}

			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days'])  // active day
								&& !in_array(date('d.m.Y',strtotime($daysapv)),$patientDetails [$ipid]['hospital_days_cs']) // not in hospital days
								&& !in_array(date('d.m.Y',strtotime($daysapv)),$patientDetails [$ipid]['hospiz_days_cs']) // not in hospiz days
							&& !in_array(date('Y-m-d', strtotime($daysapv)), $patientDetails [$ipid] ['sapv_active_days']) // does not exist already in array
						)
						{
							$patientDetails [$ipid] ['sapv_active_days'] [] = $daysapv;
							$patient_sapv_details [$ipid] [] = $daysapv;
						}
					}
				}
			}

			if($_REQUEST['dbg'] == "patients"){
			
				print_r(" \n patients sapv days \n ");
				print_r($patient_sapv_details);
			}
			foreach($finalPeriodDays as $kPd => $period_day)
			{
				foreach($patient_sapv_details as $ipid => $sapv_days)
				{
					if(in_array($period_day, $sapv_days))
					{
						$patients2day[$period_day][] = $ipid;
						$patients2day_dbg[$period_day][] = $patientDetails [$ipid] ['epid'];
					}
				}
			}
 
			/* ################################################################################################### */
			/* ----------------- get client users -------------------- */
			$user = new User();
			$c_users = $user->getUserByClientid($clientid, 0, true);

			foreach($c_users as $k_c_users => $v_c_users)
			{
				$client_users[$v_c_users['id']] = $v_c_users;
			}
			/* ################################################################################################### */
			/* ----------------- get pricelist	START -------------------- */
			$p_list = new PriceList();
			$master_price_list = $p_list->get_report_period_price_list($report_dates, $finalPeriodDays); //get bra sapv pricelist and then shortcuts
			$shortcuts = Pms_CommonData::get_prices_shortcuts();

			/* ################################################################################################### */
			/* ----------------- get Anlage14 saved data  -------------------- */

			$anlage14 = new Anlage14();
			$saved_anlage14 = $anlage14->get_period_anlage14_report($ipids, $report_dates);
			$anlage14ctrl = new Anlage14Control();
			$anlage14_res = $anlage14ctrl->get_period_anlage14_report_controlsheet($ipids, $report_dates);

			

			foreach($anlage14_res as $ipida14=>$sh_dates){
				foreach($sh_dates as $sh_saved_shortcuts => $sh_values){
					if($sh_saved_shortcuts  == "sh_flatrate" ){
						foreach($sh_values as $date=>$checked){
							if($checked == "1"){
								$saved_flatrate_days[$ipida14][] = date("Y-m-d",strtotime($date));  
							}
						}
					}
					if($sh_saved_shortcuts  == "sh_beko" ){
						foreach($sh_values as $date=>$checked){
							if($checked == "1"){
// 								$saved_koordination[$ipida14][] = date("Y-m-d",strtotime($date));  
								$saved_koordination[$ipida14][date('m.Y', strtotime($date))] += 1;  
							}
						}
					}
					
					if($sh_saved_shortcuts  == "sh_telefonat" ){
						foreach($sh_values as $date=>$qty){
							if($qty > 2){
								$value[$date] = 2; 
							} else{
								$value[$date] = $qty; 
							}
							$saved_phones[$ipida14][date('m.Y', strtotime($date))]  += $value[$date]; 
						}
					}
				}
			}

			foreach($saved_anlage14 as $ipid14 => $sv_data)
			{
				foreach($sv_data as $saved_date => $values)
				{
					$overall_saved_data_phones[$ipid14][date('m.Y', strtotime($saved_date))] = $values['overall_phones'];
					$overall_saved_data_koordination[$ipid14][date('m.Y', strtotime($saved_date))] = $values['overall_beko'];
				}
			}

			foreach($ipids as $k => $pipid)
			{
// 				$all_phones_data[$pipid] = $overall_saved_data_phones[$pipid];
				$all_phones_data[$pipid] = $saved_phones[$pipid];
// 				$all_koordination_data[$pipid] = $overall_saved_data_koordination[$pipid];
				$all_koordination_data[$pipid] = $saved_koordination[$pipid];
			}
			
			/* ################################################################################################### */
			/* ------------------------Get patients flatrate - and saved flatrate ----------------------------------- */
			//c18b8f680c3f88a35ec2da035b81e3417cc6ddca
					
				
			foreach($ipids as $pat_ipid)
			{
				if(!empty($saved_flatrate_days[$pat_ipid])){
					$flatrate_days[$pat_ipid] = $saved_flatrate_days[$pat_ipid];
				} else{ 
					$flatrate_treatment_days[$pat_ipid] = $overall_patient_sapv_details [$pat_ipid] ;
				
					$flatrate_start[$pat_ipid] = $flatrate_treatment_days[$pat_ipid] [0];
				
					if(count($flatrate_treatment_days[$pat_ipid]) > 0)
					{
						$flatrate_days[$pat_ipid] = array();
						while(count($flatrate_days[$pat_ipid]) < '7')
						{
								if( in_array($flatrate_start[$pat_ipid], $flatrate_treatment_days[$pat_ipid]) && !in_array($flatrate_start[$pat_ipid], $flatrate_days[$pat_ipid]) && in_array($flatrate_start[$pat_ipid], $finalPeriodDays))
								{
									$flatrate_days[$pat_ipid] [] = $flatrate_start[$pat_ipid];
								}
								else
								{
									$flatrate_days[$pat_ipid] [] = $flatrate_treatment_days[$pat_ipid] [0];
								}
				
							
							asort($flatrate_days[$pat_ipid]);
							$flatrate_start[$pat_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($flatrate_start[$pat_ipid])));
						}
					}
					$flatrate_days[$pat_ipid] = array_unique($flatrate_days[$pat_ipid]);
				}
			}			
			if($_REQUEST['dbg']=="special"){
				print_r("  \n  overall sapv \n "); 
				print_r($overall_patient_sapv_details['c18b8f680c3f88a35ec2da035b81e3417cc6ddca']);
				print_r("  \n  flat rate  \n ");
				print_r($flatrate_days['c18b8f680c3f88a35ec2da035b81e3417cc6ddca']);
				exit;
			}
			
			
			foreach($flatrate_days as $f_ipid =>$f_days ){
				foreach($f_days as $k_day=>$v_day){
					if(!in_array($v_day, $finalPeriodDays)){
						unset($flatrate_days[$f_ipid][$k_day]);
					}
				}
	 
				if(empty($flatrate_days[$f_ipid])){
					$flatrate_days[$f_ipid] = '';
				}
				
				$flatrate_days[$f_ipid] = array_values($flatrate_days[$f_ipid]);
			}
			
			if($_REQUEST['dbg'] == "patients"){
			
				print_r(" \n ##################### Flatrate ######################### \n ");
				
				print_r(" \n saved flatrate days \n ");
				print_r($saved_flatrate_days);
				
				print_r(" \n Final flatrate days \n ");
				print_r($flatrate_days);
			}
			
			/* ################################################################################################### */
			/* ------------------------Get all VERLAUF - "Telefonate" details from patients----------------------------------- */
			$course_xt = Doctrine_Query::create()
				->select("ipid,course_date, create_user,done_date, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $ipids)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']) . ' OR ' . str_replace('%date%', 'done_date', $active_cond['date_sql']));
			$course_xt->orderBy('course_date ASC');
			$course_xt_array = $course_xt->fetchArray();

			$phone = array();
			foreach($course_xt_array as $course_xt_key => $course_xt_val)
			{
				$course_xt_arr = explode("|", $course_xt_val['course_title']);

				if($course_xt_val['done_date'] != "0000-00-00 00:00:00")
				{
					$valid_date_xt = date('Y-m-d', strtotime($course_xt_val['done_date']));
				}
				elseif($course_xt_arr[2])
				{ //method implemented with 3 inputs
					$valid_date_xt = date('Y-m-d', strtotime($course_xt_arr[2]));
				}
				else
				{
					$valid_date_xt = date('Y-m-d', strtotime($course_xt_val['course_date']));
				}

				if(in_array($valid_date_xt, $patientDetails[$course_xt_val['ipid']]['sapv_active_days']))
				{
					if(count($phone[$course_xt_val['ipid']][$valid_date_xt]) < 2)
					{//  limit per patient by 2 / day
						$overall_xt_entires[$course_xt_val['ipid']][date('m.Y', strtotime($valid_date_xt))][] = $course_xt_val; // b) sum up all billable phone calls for all patients for that month and multiply with 10
						$patient_xt_entries[$course_xt_val['ipid']][$valid_date_xt] += 1;
						$phone[$course_xt_val['ipid']][$valid_date_xt][] = $course_xt_val;
					}
				}
			}

			foreach($ipids as $k => $pipid)
			{
				if($overall_xt_entires[$pipid])
				{
					foreach($overall_xt_entires[$pipid] as $m_date => $phones)
					{
						if(strlen($all_phones_data[$pipid][$m_date]) > 0   )
						{
							$month_overall_data_phone[$pipid][$m_date] = $all_phones_data[$pipid][$m_date];
						}
						else
						{
							$month_overall_data_phone[$pipid][$m_date] = count($phones);
						}
					}
				}
				else
				{
					if(strlen($all_phones_data[$pipid][$required_month])>0 )
					{
						$month_overall_data_phone[$pipid][$required_month] = $all_phones_data[$pipid][$required_month];
					}
					else
					{
						$month_overall_data_phone[$pipid][$required_month] = 0;
					}
				}
				$overall_phones += $month_overall_data_phone[$pipid][$required_month];
			}

			$master_data[$required_month]['phones'] = $overall_phones * 10;  //b) sum up all billable phone calls for all patients for that month and multiply with 10

			
			if($_REQUEST['dbg'] == "data"){
				print_r(" \n ############## Phones #######################\n");
				print_r(" \n saved phones \n");
				print_r($saved_phones);
				
				print_r(" \n patients phones  \n ");
				print_r($overall_xt_entires);

				
				print_r("\n overall phones count after anlage 14\n");
				print_r($month_overall_data_phone);
				print_r("\n ");
				print_r("\n final telefon count \n");
				print_r($overall_phones);
			}
			
			
			/* -----------------------Get all - "Koordination" available in  anlage 14  (not saved)------------------------------ */
			
			foreach($ipids as $pat_ipid)
			{
				$first_treatment_day[$pat_ipid] = $overall_patient_sapv_details [$pat_ipid][0] ;
				
					if(in_array($first_treatment_day[$pat_ipid], $finalPeriodDays)){
						$first_koordination_day[$pat_ipid][$required_month] = $first_treatment_day[$pat_ipid];
					}
			}

			/* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */
			$course_v = Doctrine_Query::create()
				->select("ipid,course_date,create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
				->from('PatientCourse')
				->whereIn('ipid', $ipids)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
				->andWhere("wrong = 0")
				->andWhere('source_ipid = ""')
				->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']) . ' OR ' . str_replace('%date%', 'done_date', $active_cond['date_sql']));
			$course_v->orderBy('course_date ASC');
			$course_v_array = $course_v->fetchArray();

			$coord = array();
			foreach($course_v_array as $course_v_key => $course_v_val)
			{
				$valid_date_v = date('Y-m-d', strtotime($course_v_val['course_date']));

				if(in_array($valid_date_v, $patientDetails[$course_v_val['ipid']]['sapv_active_days']))
				{
					$overall_v_entires[$course_v_val['ipid']][date('m.Y', strtotime($valid_date_v))][] = $course_v_val;
					$coord[$course_v_val['ipid']][$valid_date_v][] = $course_v_val;
					$patient_v_entries[$course_v_val['ipid']][$valid_date_v] +=1;
				}
			}
			
			foreach($ipids as $k => $pipid)
			{
				if($overall_v_entires[$pipid] && $first_koordination_day[$pat_ipid][$required_month] ){
					array_push($overall_v_entires[$pipid],$first_koordination_day[$pat_ipid][$required_month] );
				}
			}
	
	
			foreach($ipids as $k => $pipid)
			{
				if($overall_v_entires[$pipid] || $first_koordination_day[$pipid][$required_month])
				{
					if(!empty($overall_v_entires[$pipid])){
						foreach($overall_v_entires[$pipid] as $m_date => $koordination)
						{
							if(strlen($all_koordination_data[$pipid][$m_date])>0)
							{
								$month_overall_data_koord[$pipid][$m_date] = $all_koordination_data[$pipid][$m_date];
							}
							else
							{
								if(!empty($first_koordination_day[$pipid][$required_month])){
									$month_overall_data_koord[$pipid][$m_date] = count($koordination)+1;
								} else{
									$month_overall_data_koord[$pipid][$m_date] = count($koordination);
								}
							}
						}
					} 
					elseif(!empty($first_koordination_day[$pipid][$required_month])){
						if(strlen($all_koordination_data[$pipid][$required_month])>0)
						{
							$month_overall_data_koord[$pipid][$required_month] = $all_koordination_data[$pipid][$required_month];
						} else{
							$month_overall_data_koord[$pipid][$required_month] = 1;
						}
					}
				}
				else
				{
					if(strlen($all_koordination_data[$pipid][$required_month])>0)
					{
						$month_overall_data_koord[$pipid][$required_month] = $all_koordination_data[$pipid][$required_month];
					}
					else
					{
						$month_overall_data_koord[$pipid][$required_month] = 0;
					}
				}
				$overall_koordination += $month_overall_data_koord[$pipid][$required_month];
			}


			$master_data[$required_month]['koordination'] = $overall_koordination * 100; //c) sum up all "Koordination" for all patients for the selected month and multiply by 100
			$master_data[$required_month]['koordination_count'] = $overall_koordination;

			if($_REQUEST['dbg'] == 'data')
			{
				print_r(" \n ############## koordination #######################\n");
				
				print_r(" \n saved koordination \n");
				print_r($saved_koordination);
				print_r("\n koordination count  \n");
				print_r($overall_koordination);
				
				print_r("\n overall koordination  count after anlage 14\n");
				print_r($month_overall_data_koord);
				print_r("\n ");
				
				print_r("\n overall koordination verlauf entries \n");
				print_r($overall_v_entires);
				
			}

			//get contact forms START
			/* ################################################################################################### */
			/* ----------------- get deleted contact forms from patient course -------------------- */
			$deleted_cf = Doctrine_Query::create()
				->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->where('wrong=1')
				->andWhereIn("ipid", $ipids)
				->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
				->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'");
				
			$deleted_cf_array = $deleted_cf->fetchArray();

			$excluded_cf_ids[] = '99999999999';
			foreach($deleted_cf_array as $k_dcf => $v_dcf)
			{
				$excluded_cf_ids[] = $v_dcf['recordid'];
			}

			/* ################################################################################################### */
			/* ----------------- gget cf in period - deleted cf -------------------- */
			$cf = new ContactForms();
			$p_contactforms = $cf->get_multiple_contact_form_by_periods($ipids, $report_dates, $excluded_cf_ids);


			if($_REQUEST['dbg'] == "data"){
				print_r(" \n all contact forms in report period \n ");
				print_r($p_contactforms);
				exit;
			}
				
			
			$contact_forms_ids[] = '9999999999999';
			foreach($p_contactforms as $kk_cf => $vv_cf)
			{
				foreach($vv_cf as $k_cfs => $v_cfs)
				{
					$contact_forms_ids[] = $v_cfs['id'];
					$contact_forms_ungrouped[] = $v_cfs;
				}
			}

			$cnt = array();
			foreach($contact_forms_ungrouped as $k_cf => $v_cf)
			{
				$visit_date = date('Y-m-d', strtotime($v_cf['billable_date']));

				if(in_array($visit_date, $patientDetails[$v_cf['ipid']]['sapv_active_days']))
				{

					$contact_form_data[$v_cf['create_user']][$visit_date][$v_cf['ipid']][$v_cf['id']] = $v_cf;
					$contact_form2patient[$v_cf['ipid']][$v_cf['create_user']][] = $v_cf;						

					if(in_array($v_cf['create_user'], $users['doctor']))
					{
						$contact_form2doctors[$v_cf['create_user']][] = $v_cf;
						$contact_form2doctors_date[$v_cf['create_user']][] = date('Y-m-d', strtotime($v_cf['billable_date']));
						$contact_form2doctors_price[$v_cf['create_user']][] = $master_price_list[date('Y-m-d', strtotime($v_cf['billable_date']))][0]['sh_visit_actions']['doctor'];
						$contact_form2doctors_count[$v_cf['create_user']] += 1;
						$overall_doctor_contact_forms[] = $v_cf; // every billed doctor visit. (cell B6)
						
						$doctors_contact_form[$v_cf['ipid']][$v_cf['create_user']][] = $v_cf;
						
					}


					if(in_array($v_cf['create_user'], $users['nurse']))
					{
						$contact_form2nurses[$v_cf['create_user']][] = $v_cf;
						$contact_form2nurses_date[$v_cf['create_user']][] = date('Y-m-d', strtotime($v_cf['billable_date']));
						$contact_form2nurses_price[$v_cf['create_user']][] = $master_price_list[date('Y-m-d', strtotime($v_cf['billable_date']))][0]['sh_visit_actions']['nurse'];
						$contact_form2nurses_count[$v_cf['create_user']] += 1;
						$overall_nurse_contact_forms[] = $v_cf;
						
						
						$nurses_contact_form[$v_cf['ipid']][$v_cf['create_user']][] = $v_cf;
					}
				}
			}
			
			/* ################# Nurse assigned days,visits and fatrate ############################################ */
			if($_REQUEST['dbg'] == "nurse"){
				print_r(" \n contact_forms 2 nurses \n ");
				print_r($nurses_contact_form);
			}
				
			// get nurse billable days
			foreach($assigned_user2ipid as $nur_pipid =>$n_ass_user_array){
			
				foreach($n_ass_user_array as $dk=>$nur_as_user){
					if(in_array($nur_as_user,$users['nurse'])){
			
			
						if($nurses_contact_form[$nur_pipid][$nur_as_user] &&  in_array($nur_pipid,$patients2nurses[$nur_as_user]) ) {
								
							$nur_first_date[$nur_as_user][$nur_pipid] = date("Y-m-d" , strtotime($nurses_contact_form[$nur_pipid][$nur_as_user][0]['billable_date']));
								
							if(in_array($nur_first_date[$nur_as_user][$nur_pipid],$patientDetails[$nur_pipid]['sapv_active_days'])){
								foreach($patientDetails[$nur_pipid]['sapv_active_days'] as  $nur_sapv_day ){
									if(strtotime($nur_first_date[$nur_as_user][$nur_pipid]) <= strtotime($nur_sapv_day)   && !in_array($nur_sapv_day,$nur_available_days[$nur_as_user][$nur_pipid])){
										$nur_available_days[$nur_as_user][$nur_pipid][] = $nur_sapv_day;
									}
								}
							}
						}
					}
				}
			}
 
			if($_REQUEST['dbg'] == "nurse"){
				print_r("\n nurse available days -  valid days and visits \n ");
				print_r($nur_available_days);
			}
			
			// add flatrate to nurse billable days
			foreach($ipids as $k => $pipid)
			{
				foreach ($patients2nurses as $key_nur=>$asgn_patients){
					foreach($asgn_patients as $kp=>$pipida){
						if(!empty($flatrate_days[$pipida]) ){
							if(!empty($nur_available_days[$key_nur][$pipida])  ){
								$nurse_patient_billable_days[$key_nur][$pipida] = array_merge($nur_available_days[$key_nur][$pipida],$flatrate_days[$pipida]);
							} else{
								$nurse_patient_billable_days[$key_nur][$pipida] = $flatrate_days[$pipida];
							}
						} else {
							$nurse_patient_billable_days[$key_nur][$pipida] = $nur_available_days[$key_nur][$pipida];
						}
					}
				}
				asort($nurse_patient_billable_days[$key_nur][$pipida]);
				$nurse_patient_billable_days[$key_nur][$pipida] = array_values(array_unique($nurse_patient_billable_days[$key_nur][$pipida]));
			}

			
			if($_REQUEST['dbg'] == "nurse"){
				print_r("\n nurse billable days \n ");
				print_r($nurse_patient_billable_days);
			}
			
			// add price to nurse billable days
			foreach($nurse_patient_billable_days as $nur_key=>$npatients_dates){
				foreach($npatients_dates as $nav_ipid=>$nur_av_dates){
					if(!empty($nur_av_dates)){
						foreach($nur_av_dates as $k=>$nav_date){
							$nur_available_days2price[$nur_key][$nav_ipid][$nav_date] = $master_price_list[date('Y-m-d', strtotime($nav_date))][0]['sh_assigned_user_actions']['nurse'];
							$patients_nurse2price[$nur_key][$nav_ipid] += $master_price_list[date('Y-m-d', strtotime($nav_date))][0]['sh_assigned_user_actions']['nurse'];
						}
					}
				}
			}
			
			if($_REQUEST['dbg'] == "nurse"){
				print_r("\n nurse price days \n ");
				print_r($nur_available_days2price);
			
				print_r("\n days per patients \n ");
				print_r($patients_nurse2price);
			}
			
			// calculate overall nurse billable days
			$overall_billable_nurse_days = 0;
			foreach($patients2nurses as $k_nurse=>$ass_patients){
			
				$nurse_billable_days[$k_nurse] = 0;
			
				foreach($ass_patients as $k=>$nasipid ){
					if($patients_nurse2price[$k_nurse][$nasipid]){
						$nurse_days[$k_nurse][$nasipid] = $nur_available_days2price[$k_nurse][$nasipid];
						$nurse_billable_days[$k_nurse] += $patients_nurse2price[$k_nurse][$nasipid];
					}
				}
				$overall_billable_nurse_days += $nurse_billable_days[$k_nurse];
			}
				
			if($_REQUEST['dbg'] == "nurse"){
				print_r("\n nurse overall billable days PER NURSE \n ");
				print_r($nurse_billable_days);
			
				print_r("\n nurse overall billable days \n ");
				print_r($overall_billable_nurse_days);
				exit;
			}
			$master_data[$required_month]['nurse_assigned_actions'] = $overall_billable_nurse_days;
			
			/* ################# Doctor assigned days,visits and fatrate ############################################ */ 
			if($_REQUEST['dbg'] == "doctor"){
				print_r(" \n contact_forms 2 doctors \n ");
				print_r($doctors_contact_form);
			}
			
			// get doctors billable days
			foreach($assigned_user2ipid as $doc_pipid =>$d_ass_user_array){
				
				foreach($d_ass_user_array as $dk=>$doc_as_user){
					if(in_array($doc_as_user,$users['doctor'])){
						
 
						if($doctors_contact_form[$doc_pipid][$doc_as_user] &&  in_array($doc_pipid,$patients2doctors[$doc_as_user]) ) {
							
							$doc_first_date[$doc_as_user][$doc_pipid] = date("Y-m-d" , strtotime($doctors_contact_form[$doc_pipid][$doc_as_user][0]['billable_date']));
							
							if(in_array($doc_first_date[$doc_as_user][$doc_pipid],$patientDetails[$doc_pipid]['sapv_active_days'])){
								foreach($patientDetails[$doc_pipid]['sapv_active_days'] as  $doc_sapv_day ){
									if(strtotime($doc_first_date[$doc_as_user][$doc_pipid]) <= strtotime($doc_sapv_day)   && !in_array($doc_sapv_day,$doc_available_days[$doc_as_user][$doc_pipid])){
										$doc_available_days[$doc_as_user][$doc_pipid][] = $doc_sapv_day; 
									}
								}
							}
						}
					}
				}
			}
			
	 
			if($_REQUEST['dbg'] == "doctor"){
				print_r("\n doctor available days -  valid days and visits \n ");
				print_r($doc_available_days);
			}
		
			// add flatrate to doctor billable days
			foreach($ipids as $k => $pipid)
			{
				foreach ($patients2doctors as $key_doc=>$asgn_patients){
					foreach($asgn_patients as $kp=>$pipida){
						
						if(!empty($flatrate_days[$pipida]) ){
							if(!empty($doc_available_days[$key_doc][$pipida])  ){
								$doctor_patient_billable_days[$key_doc][$pipida] = array_merge($doc_available_days[$key_doc][$pipida],$flatrate_days[$pipida]);
							} else{
								$doctor_patient_billable_days[$key_doc][$pipida] = $flatrate_days[$pipida];
							}
						} else {
							$doctor_patient_billable_days[$key_doc][$pipida] = $doc_available_days[$key_doc][$pipida];
						}		
					}
				}
				asort($doctor_patient_billable_days[$key_doc][$pipida]);
				$doctor_patient_billable_days[$key_doc][$pipida] = array_values(array_unique($doctor_patient_billable_days[$key_doc][$pipida]));
			}

			if($_REQUEST['dbg'] == "doctor"){
				print_r("\n doctor billable days \n ");
				print_r($doctor_patient_billable_days);
			}
 
			// add price to doctor billable days
			foreach($doctor_patient_billable_days as $doc_key=>$patients_dates){
				foreach($patients_dates as $av_ipid=>$doc_av_dates){
					if(!empty($doc_av_dates)){
						
						foreach($doc_av_dates as $k=>$av_date){
							$doc_available_days2price[$doc_key][$av_ipid][$av_date] = $master_price_list[date('Y-m-d', strtotime($av_date))][0]['sh_assigned_user_actions']['doctor'];
							$patients_doctor2price[$doc_key][$av_ipid] += $master_price_list[date('Y-m-d', strtotime($av_date))][0]['sh_assigned_user_actions']['doctor'];
						}
					}
				}	
			}
 
			if($_REQUEST['dbg'] == "doctor"){
				print_r("\n doctor price days \n ");
				print_r($doc_available_days2price);
				
				print_r("\n days per patients \n ");
				print_r($patients_doctor2price);
			}
				
			// calculate overall doctor billable days
			$overall_billable_doctors_days = 0;
			foreach($patients2doctors as $k_doctor=>$ass_patients){
				
				$doctor_billable_days[$k_doctor] = 0;
				
				foreach($ass_patients as $k=>$asipid ){
					if($patients_doctor2price[$k_doctor][$asipid]){
						$doctor_days[$k_doctor][$asipid] = $doc_available_days2price[$k_doctor][$asipid];
						$doctor_billable_days[$k_doctor] += $patients_doctor2price[$k_doctor][$asipid];
					}
				}
				$overall_billable_doctors_days += $doctor_billable_days[$k_doctor];
			}
			
			if($_REQUEST['dbg'] == "doctor"){
				print_r("\n doctor overall billable days PER DOCTOR \n ");
				print_r($doctor_billable_days);
				
				print_r("\n doctor overall billable days \n ");
				print_r($overall_billable_doctors_days);
			}
			$master_data[$required_month]['doctor_assigned_actions'] = $overall_billable_doctors_days;
			
			// #############################################################
			$visits_actions_price['doctors'] = 0;
			$visits_actions_count['doctors'] = 0;
			foreach($users['doctor'] as $ku => $user_id)
			{
				$visits_actions_dates['doctors'] [$user_id] = $contact_form2doctors_date[$user_id];
				foreach($contact_form2doctors_price[$user_id] as $k => $price)
				{
					$visits_actions_price['doctors'] += $price;
					$visits_actions_count['doctors'] += 1;
				}
			}
			$master_data[$required_month]['doctor_visits'] = $visits_actions_price['doctors'];
			$master_data[$required_month]['doctor_visits_count'] = $visits_actions_count['doctors'];


			if($_REQUEST['dbg'] == "doctor"){
				print_r("\n doctor visits \n ");
				print_r($contact_form2doctors_date);
				exit;
			}
			
			$visits_actions_price['nurses'] = 0;
			$visits_actions_count['nurses'] = 0;
			foreach($users['nurse'] as $ku => $nuser_id)
			{
				$visits_actions_dates['nurses'] [$nuser_id] = $contact_form2nurses_date[$nuser_id];
				foreach($contact_form2nurses_price[$nuser_id] as $nk => $nprice)
				{
					$visits_actions_price['nurses'] += $nprice;
					$visits_actions_count['nurses'] += 1;
				}
			}
			if($_REQUEST['dbg'] == "nurse"){
				print_r("\n nurse visits \n ");
				print_r($contact_form2nurses_date);
				exit;
			}
				
			$master_data[$required_month]['nurse_visits'] = $visits_actions_price['nurses'];
			$master_data[$required_month]['nurse_visits_count'] = $visits_actions_count['nurses'];


			/* ################################################################################################### */
			/* ----------------- get Client team meetings  -------------------- */
			$team_meeting_m = new TeamMeeting();
			$client_team_meetings = $team_meeting_m->get_client_team_meetings_report_period($clientid, $report_dates);


			foreach($client_team_meetings as $meeting_id => $meeting_data)
			{
				$meetingids[] = $meeting_data['id'];
				$meeting_details [$meeting_data['id']] = $meeting_data;
			}
			//get meeting attending_users
			$meeting_attending_users_array = TeamMeetingAttendingUsers::get_team_multiple_meetings_attending_users($meetingids, $clientid);
			foreach($meeting_attending_users_array as $k_mau => $v_mau)
			{
				$meeting_attending_users[$v_mau['meeting']][] = $v_mau['user'];
				$all_attending_users[$v_mau['user']][] = date("Y-m-d", strtotime($meeting_details [$v_mau['meeting']]['date']));

				if(in_array($v_mau['user'], $users['doctor']))
				{
					$all_attending_users_price[$v_mau['user']][] = $master_price_list[date("Y-m-d", strtotime($meeting_details [$v_mau['meeting']]['date']))][0]['sh_meeting_participation']['doctor'];
				}
				else if(in_array($v_mau['user'], $users['nurse']))
				{
					$all_attending_users_price[$v_mau['user']][] = $master_price_list[date("Y-m-d", strtotime($meeting_details [$v_mau['meeting']]['date']))][0]['sh_meeting_participation']['nurse'];
				}
			}


			if($_REQUEST['dbg'] == "meetings"){
				print_r("\n all attending users \n ");
				print_r($all_attending_users);
				print_r("\n all attending users PRICE by users \n ");
				print_r($all_attending_users_price);
				exit;
			}
				
			
			$attending_users_price['doctors'] = 0 ;
			$attending_users_count['doctors'] = 0;
			foreach($users['doctor'] as $ku => $user_id)
			{
				$attending_users2date['doctors'] [$user_id] = $all_attending_users[$user_id];

				$attending_users['doctors'] [$user_id] = $all_attending_users_price[$user_id];
				foreach($all_attending_users_price[$user_id] as $k => $price)
				{
					$attending_users_price['doctors'] += $price;
					$attending_users_count['doctors'] += 1;
				}
			}
			
			$attending_users_price['nurses'] = 0 ;
			$attending_users_count['nurses'] = 0;
			foreach($users['nurse'] as $ku => $nuser_id)
			{
				$attending_users2date['nurses'] [$nuser_id] = $all_attending_users[$nuser_id];


				$attending_users['nurses'] [$nuser_id] = $all_attending_users_price[$nuser_id];
				foreach($all_attending_users_price[$nuser_id] as $k => $price)
				{
					$attending_users_price['nurses'] += $price;
					$attending_users_count['nurses'] += 1;
				}
			}

			$master_data[$required_month]['doctor_team_meeting_participation'] = $attending_users_price['doctors'];
			$master_data[$required_month]['doctor_team_meeting_participation_count'] = $attending_users_count['doctors'];
			$master_data[$required_month]['nurse_team_meeting_participation'] = $attending_users_price['nurses'];
			$master_data[$required_month]['nurse_team_meeting_participation_count'] = $attending_users_count['nurses'];


			if($_REQUEST['dbg'] == "master"){
				print_r("\n MASTER \n ");
				print_r($master_data);
				exit;
			}
			
			/* ################################################################################################### */
 
			/* ################################################################################################### */
			/* ------------------------------------Display all results ------------------------------------------ */
		 
			$user_asign_data = 0;
			$total_sum = 0;
			$koordination_sum = 0;
			$koordination_count = 0;
			$team_meeting_participation_sum = 0;
			$team_meeting_participation_count = 0;
			$doctor_visits_sum = 0;
			$doctor_visits_count = 0;

			$result_devided_by_days = 0;
			$days_result_devided_by_hours = 0;
			$percentage = 0;
			
			if(!empty($master_data)){
				
				$user_asign_data = $master_data[$required_month]['nurse_assigned_actions'] + $master_data[$required_month]['doctor_assigned_actions'];
				
				$total_sum = $user_asign_data + $master_data[$required_month]['phones']+$master_data[$required_month]['koordination'];
				$koordination_sum = $master_data[$required_month]['koordination'];
				$koordination_count = $master_data[$required_month]['koordination_count'];
				$team_meeting_participation_sum = $master_data[$required_month]['doctor_team_meeting_participation'] +  $master_data[$required_month]['nurse_team_meeting_participation'];
				$team_meeting_participation_count = $master_data[$required_month]['doctor_team_meeting_participation_count'] +  $master_data[$required_month]['nurse_team_meeting_participation_count'];
				$doctor_visits_sum = $master_data[$required_month]['doctor_visits'];
				$doctor_visits_count = $master_data[$required_month]['doctor_visits_count'];
				
				
					//$data['data']['sh_total_sum_b3'] = number_format($total_sum, 2, '.', '') ;
					$data['data']['sh_total_sum_b3'] =  number_format(floor($total_sum*100)/100, 2,'.','');
					//$data['data']['sh_total_koordination_b4'] = number_format($koordination_sum, 2, '.', '');
					$data['data']['sh_total_koordination_b4'] =  number_format(floor($koordination_sum*100)/100, 2,'.','');
					$data['data']['sh_total_koordination_count'] = $koordination_count;
					//$data['data']['sh_total_team_meeting_b5'] = number_format($team_meeting_participation_sum, 2, '.', '');
					$data['data']['sh_total_team_meeting_b5'] =  number_format(floor($team_meeting_participation_sum*100)/100, 2,'.','');
					$data['data']['sh_total_team_meeting_count'] = $team_meeting_participation_count ;
					//$data['data']['sh_total_doctor_visits_b6'] = number_format($doctor_visits_sum, 2, '.', '') ;
					$data['data']['sh_total_doctor_visits_b6'] =  number_format(floor($doctor_visits_sum*100)/100, 2,'.','');
					$data['data']['sh_total_doctor_visits_count'] = $doctor_visits_count;
					
					
					if($total_sum != 0){
						$result_b7 = $total_sum - ($koordination_sum + $team_meeting_participation_sum + $doctor_visits_sum);
						//$data['data']['sh_total_result_b7'] = number_format($result_b7, 2, '.', '');
						$data['data']['sh_total_result_b7'] =  number_format(floor($result_b7*100)/100, 2,'.','');
							
						$result_devided_by_days = $result_b7 / $number_of_month_days;
						//$data['data']['sh_result_dividedby_nrodays'] = number_format($result_devided_by_days, 2, '.', '');
						$data['data']['sh_result_dividedby_nrodays'] =  number_format(floor($result_devided_by_days*100)/100, 2,'.','');
						
						$days_result_devided_by_hours = $result_devided_by_days / 24;
						//$data['data']['sh_days_result_divided_by_hours'] = number_format($days_result_devided_by_hours, 2, '.','');
						$data['data']['sh_days_result_divided_by_hours'] =  number_format(floor($days_result_devided_by_hours*100)/100, 2,'.','');
							
						$percentage =   $days_result_devided_by_hours - ($days_result_devided_by_hours * (10/100));
						//$data['data']['sh_days_result_hours_percentage'] = number_format($percentage, 2, '.', '');
						$data['data']['sh_days_result_hours_percentage'] = number_format(floor($percentage*100)/100, 2,'.','');
							
					} else{
						$data['data']['sh_total_result_b7'] = "0.00";
						$data['data']['sh_result_dividedby_nrodays'] = "0.00";
						$data['data']['sh_days_result_divided_by_hours'] = "0.00";
						$data['data']['sh_days_result_hours_percentage'] = "0.00";
					}
			 
				return $data;
				
			}
		}

		public function deadstats_bw($params)
		{
			// report_id = 150
			// report_name = Verstorben II
			$logininfo = new Zend_Session_Namespace('Login_Info');

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);


			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$clientIpids = $this->getAllClientPatients($logininfo->clientid, $whereepid);

			$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);

			$ipidsval = "'X'";
			$comma = ",";
			foreach($ipidsarr as $ipid)
			{
				$ipidsval .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}
			foreach($clientIpids as $patient)
			{
				$clientPatientsIpids[] = $patient['ipid'];
			}

			$ipidsArray = $ipidsarr;

			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}


			/* ----------------- Report period days  -------------------- */
			$patientmaster = new PatientMaster();

			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);

			/* ################################################################################################### */
			$sql = 'e.epid, p.ipid, e.ipid,p.familydoc_id,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= 'convert(AES_DECRYPT(p.sex,"' . Zend_Registry::get('salt') . '") using latin1) as sex,';

			$conditions_ov['periods'] = array('0' => array('start' => "2007-01-01", 'end' => date("Y-m-d")));
			$conditions_ov['client'] = $clientid;
			$conditions_ov['ipids'] = $ipidsArray;

			$dead_patient_details = Pms_CommonData::patients_days($conditions_ov, $sql);

			$ipids = array_keys($dead_patient_details); // return ipids

			$hospital_hospiz_days_array_dmy = array();
			$admission_dates = array();
			foreach($dead_patient_details as $ipid => $p_details)
			{
				foreach($p_details['active_periods'] as $pid => $aperiod)
				{
					$admission_dates[$p_details['details'] ['ipid']][] = date('Y-m-d', strtotime($aperiod['start']));
				}

				$patient_array [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$epids [] = $p_details['details'] ['epid'];
				$epid2ipid[$p_details['details'] ['epid']] = $p_details['details'] ['ipid'];

				$allfinal[] = $p_details['details'] ['ipid'];
				$family_docs_ids[] = $p_details['details'] ['familydoc_id'];

				$patient_array [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patient_array [$p_details['details'] ['ipid']] ['last_name'] = $p_details['details'] ['last_name'];
				$patient_array [$p_details['details'] ['ipid']] ['first_name'] = $p_details['details'] ['first_name'];
				$patient_array [$p_details['details'] ['ipid']] ['birthd'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patient_array [$p_details['details'] ['ipid']] ['street'] = $p_details['details'] ['street1'];
				$patient_array [$p_details['details'] ['ipid']] ['zip'] = $p_details['details'] ['zip'];
				$patient_array [$p_details['details'] ['ipid']] ['city'] = $p_details['details'] ['city'];
				$patient_array [$p_details['details'] ['ipid']] ['familydoc_id'] = $p_details['details'] ['familydoc_id'];
				$patient_array [$p_details['details'] ['ipid']] ['admission_date'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patient_array [$p_details['details'] ['ipid']] ['discharge_date'] = end($p_details['discharge']);
					$patient_array [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patient_array [$p_details['details'] ['ipid']] ['discharge_date'] = "-";
				}

				$patientDetails [$p_details['details'] ['ipid']]['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];

				$patientDetails [$p_details['details'] ['ipid']]['treatment_days'] = $p_details['treatment_days'];
				$active_days_in_period_dmy [$p_details['details'] ['ipid']] = $p_details['real_active_days'];

				$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = array();
				if(!empty($p_details['hospital']['real_days_cs']))
				{
					$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = $p_details['hospital']['real_days_cs'];
				}
				if(!empty($p_details['hospiz']['real_days_cs']))
				{
					$hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']] = array_merge($p_details['hospiz']['real_days_cs'], $hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']]);
				}

				$hospital_hospiz_days_dmy[$p_details['details'] ['ipid']] = $hospital_hospiz_days_array_dmy[$p_details['details'] ['ipid']];

				$hospiz_days_dmy[$p_details['details'] ['ipid']] = $p_details['hospiz']['real_days_cs'];
			}

			if(count($epids) == 0)
			{
				$epids[] = "999999999999999";
			}

			if(count($ipids) == 0)
			{
				$ipids[] = "999999999999999";
			}

			if(count($family_docs_ids) == 0)
			{
				$family_docs_ids[] = "999999999999999";
			}


			$hospital_hospiz_days = array();
			$active_days = array();
			$active_days_in_period = array();
			$active_days = array();


			/* ----------------- Get Patients SAPV details - overall ------------------------------------ */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');

			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('isdelete=0')
				->andWhereIn('ipid', $ipids)
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();
			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{

				if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00')
				{
					$verordisablenext = strtotime('+1 day', strtotime($sapv['verorddisabledate']));
					$sapv ['verordnungbis'] = date('Y-m-d', $verordisablenext);
				}
				$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}

			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days'])  // active day
							&& !in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['hospital_days_cs']) // not in hospital days
							&& !in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['hospiz_days_cs']) // not in hospiz days
							&& !in_array(date('Y-m-d', strtotime($daysapv)), $patientDetails [$ipid] ['sapv_active_days']) // does not exist already in array
						)
						{
							$patientDetails[$ipid]['sapv_active_days'][] = $daysapv;
							$patient_sapv_details[$ipid][] = $daysapv;
							$patient_details_dbg [$ipid] ['sapv_active_days'] [] = $daysapv;
						}
					}
				}
			}

			/* -------------------------------- Family doctor data --------------------- */
			$drop = Doctrine_Query::create()
				->select('*')
				->from('FamilyDoctor')
				->where("clientid='" . $logininfo->clientid . "' AND (first_name != '' or last_name != '') ")
				->andWhereIn('id', $family_docs_ids);
			$docarray = $drop->fetchArray();


			foreach($docarray as $doctor)
			{
				$doctorarry[$doctor['id']] = $doctor;

				if(!empty($doctor['last_name']) && !empty($doctor['first_name']))
				{
					$family_doctor[$doctor['id']] = $doctor['last_name'] . ", " . $doctor['first_name'];
				}
				else if(!empty($doctor['first_name']))
				{
					$family_doctor[$doctor['id']] = $doctor['first_name'];
				}
				else if(!empty($doctor['last_name']))
				{
					$family_doctor[$doctor['id']] = $doctor['last_name'];
				}
				else
				{
					$family_doctor[$doctor['id']] = '';
				}
			}

			/* -------------------------------- OLD - patients treatment days  --------------------- */
			$pm = new PatientMaster();
			if(count($ipids) > 0)
			{
				$treatedarr = $pm->getTreatedDaysRealMultiple($ipids, true);
			}

			/* -------------------------------- Discharge details  -------------------------------- */
			$dispatloc = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge as p")
				->whereIn('p.ipid', $ipids);
			$dispatlocarr = $dispatloc->fetchArray();

			$locstr = "'X'";
			$comma = ",";
			foreach($dispatlocarr as $dischargedpat)
			{
				$dischargeLocationsArray[$dischargedpat['ipid']] = $dischargedpat;
				$locstr .= $comma . "'" . $dischargedpat['discharge_location'] . "'";
				$comma = ",";
			}

			/* -------------------------------- Discharge locations  -------------------------------- */
			$loc = Doctrine_Query::create()
				->select("*, AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as dislocation")
				->from("DischargeLocation")
				->where('id in (' . $locstr . ')');
			$locarr = $loc->fetchArray();

			foreach($locarr as $loc)
			{
				$Locations[$loc['id']] = $loc;
			}
			$dispatlocarr = $dispatloc->fetchArray();



			/* -------------------------------- Get health Insurance -------------------------------- */
			$patientinsurance = new PatientHealthInsurance();
			$healthinsu_array = $patientinsurance->get_patients_healthinsurance($ipids);

			foreach($healthinsu_array as $k_healthinsu => $v_healthinsu)
			{
				$patients_healthinsu[$v_healthinsu['ipid']] = $v_healthinsu;
			}

			/* -------------------------------- Display data -------------------------------- */
			$i = 0;
			foreach($ipids as $kp => $k_dipid)
			{

				if($k_dipid != "999999999999999")
				{
					$MasterData['data'][$k_dipid]['epid'] = $patientDetails[$k_dipid]['epid'];
					$MasterData['data'][$k_dipid]['lastname'] = $patient_array[$k_dipid]['last_name'];
					$MasterData['data'][$k_dipid]['firstname'] = $patient_array[$k_dipid]['first_name'];
					$MasterData['data'][$k_dipid]['street'] = $patient_array[$k_dipid]['street'];
					$MasterData['data'][$k_dipid]['zip'] = trim($patient_array[$k_dipid]['zip']);
					$MasterData['data'][$k_dipid]['city'] = $patient_array[$k_dipid]['city'];

					$diedage = $pm->GetTreatedDays(date("Y-m-d", strtotime($patient_array[$k_dipid]['birthd'])), date("Y-m-d", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date'])), true);
					$diedcnt += $diedage['years'];

					$MasterData['data'][$k_dipid]['birthd'] = date("d.m.Y", strtotime($patient_array[$k_dipid]['birthd'])) . "(" . $diedage['years'] . ")";
					$MasterData['data'][$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($patient_array[$k_dipid]['admission_date']));
					//print_r($dischargeLocationsArray);
					$MasterData['data'][$k_dipid]['diedon'] = date("d.m.Y", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date']));
					$MasterData['data'][$k_dipid]['familydoctor'] = $family_doctor[$patient_array[$k_dipid]['familydoc_id']];
					$MasterData['data'][$k_dipid]['healthinsurance'] = $patients_healthinsu[$k_dipid]['company_name'];
					$MasterData['data'][$k_dipid]['dielocation'] = $Locations[$dischargeLocationsArray[$k_dipid]['discharge_location']]['dislocation'];
					$MasterData['data'][$k_dipid]['treateddays'] = $treatedarr[$k_dipid]['realActiveDays'];
					$MasterData['data'][$k_dipid]['sapvtage'] = count($patientDetails[$k_dipid]['sapv_active_days']);
					$treatedcnt += $treatedarr[$k_dipid]['realActiveDays'];
				}
				$i++;
			}

			$MasterData['extra']['avg_die'] = round($diedcnt / $i, 2);
			$MasterData['extra']['avg_treatment'] = round($treatedcnt / $i, 2);
			
			
			if($_REQUEST['dbg']=="1")
			{
 
				print_r("SAPV Active days");
				print_r($patient_details_dbg);
				print_r("MasterData\n");
				print_r($MasterData);
				exit;
			}
			
			return $MasterData;
		}

		public function lag_bw($params)
		{
			//master function for LAG Reports
			// report_id = 151
			// CONTAINS FOLLOWING SHEETS:
			//	report_name = {lag2014_Verstorbene Pat. - sheet name (sheet1)}
			//	report_details = This report is looking for dead patients in reported period
			//	report_call = self::lag_dead_bw($params)
			//	
			//	report_name = {lag2014_Verstorbene Pat. - sheet name (sheet2)}
			//	report_details = This report is looking for discharged patients in reported period
			//	report_call = self::lag_discharged_bw($params)
			//	
			//	report_name = {lag2014_Verstorbene Pat. - sheet name (sheet3)}
			//	report_details = This report is looking for {to be completed}
			//	report_call = self::lag_dead_bw_aok($params)
			// 
			//	report_name = {lag2014_Verstorbene Pat. - sheet name (sheet4)}
			//	report_details = This report is looking for {to be completed}
			//	report_call = self::lag_discharged_bw_aok($params)
			
//			if($_SERVER['REMOTE_ADDR'] == "10.0.0.12")
//			{
//				//loading sheets
////				$sheet_1 = self::lag_dead_bw($params);
//				$sheet_2 = self::lag_discharged_bw($params);
////				$sheet_3 = self::lag_dead_bw_aok($params);
////				$sheet_4 = self::lag_discharged_bw_aok($params);
//			}
//			else
//			{
				$sheet_1 = self::lag_dead_bw($params);
				$sheet_2 = self::lag_discharged_bw($params);
				$sheet_3 = self::lag_dead_bw_aok($params);
				$sheet_4 = self::lag_discharged_bw_aok($params);
//			}

			$MasterData['data'][] = $sheet_1['data'];
			$MasterData['data'][] = $sheet_2['data'];
			$MasterData['data'][] = $sheet_3['data'];
			$MasterData['data'][] = $sheet_4['data'];

			$MasterData['extra'][] = $sheet_1['extra'];
			$MasterData['extra'][] = $sheet_2['extra'];
			$MasterData['extra'][] = $sheet_3['extra'];
			$MasterData['extra'][] = $sheet_4['extra'];

			return $MasterData;
		}

		private function lag_dead_bw($params)
		{
			// report_id = 151
			// report_name = {lag2014_Verstorbene Pat. - sheet name (sheet1)}
			// report_details = This report is looking for dead patients in reported period

			$form_types = new FormTypes();
			$p_list = new PriceList();
			$block_classification = new FormBlockClassification();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();

			$days_range = range(1, 176);
			$weeks_range = range(1, 26);

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);

			if(empty($ipidsarr)){
				$ipidsarr[] = "XXXXXXX";
			}
			
			$sql = 'p.*, e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone';

			$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipidsarr;
			$patient_details = Pms_CommonData::patients_days($conditions, $sql);

			foreach($patient_details as $ipid => $p_details)
			{
				$patient_details [$p_details['details'] ['ipid']]['real_active_days'] =  $p_details['real_active_days'];
				$patient_details [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patient_details [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patient_details [$p_details['details'] ['ipid']]['treatment_days'] = $p_details['treatment_days'];
			}
			
			

			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('isdelete=0')
				->andWhereIn('ipid', $ipidsarr)
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();

			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{
				if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00')
				{
					$verordisablenext = strtotime('+1 day', strtotime($sapv['verorddisabledate']));
					$sapv['verordnungbis'] = date('Y-m-d', $verordisablenext);
				}

				if(empty($pat_sapv_data[$sapv['ipid']]))
				{
					$pat_sapv_data[$sapv['ipid']] = array();
				}

				$temp_sapv_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($sapv['verordnungam'])), date("Y-m-d", strtotime($sapv['verordnungbis'])), false);

				$pat_sapv_data[$sapv['ipid']] = array_merge($pat_sapv_data[$sapv['ipid']], $temp_sapv_days);

				//apply array walk here...otherwise we flood the river with date+strtotime shit
				array_walk($pat_sapv_data[$sapv['ipid']], function(&$value) {
					$value = date('d.m.Y', strtotime($value));
				});
			}

			foreach($pat_sapv_data as $ipid => $sapvdata)
			{
				foreach($sapvdata as $k_sapv_day => $sapv_day)
				{
					if(in_array($sapv_day, $patient_details[$ipid]['real_active_days'])  // active day 
						&& !in_array($sapv_day, $patient_details[$ipid]['hospital_days_cs']) // does not exist already in array
						&& !in_array($sapv_day, $patient_details[$ipid]['hospiz_days_cs']) // does not exist already in array
						&& !in_array($sapv_day, $patient_details[$ipid]['sapv_active_days']) // does not exist already in array
					)
					{
						$patient_details[$ipid]['sapv_active_days'][] = $sapv_day;
						$patient_details_dbg[$ipid]['sapv_active_days'][] = $sapv_day;
					}
				}
			}

			foreach($patient_details as $k_ipid => $pat_details)
			{
				//add ipid to each counted sapvs days grouped
				$counted_days = count($pat_details['sapv_active_days']);
				$counted_weeks = ceil($counted_days / 7);

				if($counted_days > '0' && $counted_days <= '175')
				{
					$sapvs_days_gr[$counted_days][] = $k_ipid;
				}
				else if($counted_days > '0')
				{
					//more than 175 days enters in key 176
					$sapvs_days_gr['176'][] = $k_ipid;
				}
				$counted_days = '';


				if($counted_weeks > '0' && $counted_weeks <= '25')
				{
					$sapvs_weeks_gr[$counted_weeks][] = $k_ipid;
				}
				else if($counted_weeks > '0')
				{
					//more than 25 weeks enters in key 26
					$sapvs_weeks_gr['26'][] = $k_ipid;
				}
			}

			ksort($sapvs_days_gr, SORT_NUMERIC);
			ksort($sapvs_weeks_gr, SORT_NUMERIC);



			//CALCULUS REQUIRED DATA START
			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			//get active days array
			$active_days = array();
			foreach($patient_details as $k_ipid => $pat_details)
			{
				//active days "Y-m-d"
				$active_days[$k_ipid] = $pat_details['active_days'];

				array_walk($active_days[$k_ipid], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});


				//hospital days cs
				if(!empty($pat_details['hospital']['real_days_cs']))
				{
					$hospital_days_cs[$k_ipid] = $pat_details['hospital']['real_days_cs'];
					array_walk($hospital_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//hospiz days cs
				if(!empty($pat_details['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs[$k_ipid] = $pat_details['hospiz']['real_days_cs'];
					array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				if(empty($hospital_days_cs[$k_ipid]))
				{
					$hospital_days_cs[$k_ipid] = array();
				}

				if(empty($hospiz_days_cs[$k_ipid]))
				{
					$hospiz_days_cs[$k_ipid] = array();
				}

				//joined hospital hospiz days cs
				$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);


				//used in flatrate
				if(empty($patients_periods[$k_ipid]))
				{
					$patients_periods[$k_ipid] = array();
				}

				array_walk_recursive($pat_details['active_periods'], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$patients_periods[$k_ipid] = array_merge($patients_periods[$k_ipid], $pat_details['active_periods']);
			}

			foreach($patients_periods as $k_ipid => $v_periods)
			{
				foreach($v_periods as $k_period => $v_period)
				{
					if(empty($patients_periods_days[$k_ipid]))
					{
						$patients_periods_days[$k_ipid] = array();
					}

					$period_days = $patientmaster->getDaysInBetween($v_period['start'], $v_period['end']);
					$patients_periods_days[$k_ipid] = array_merge($patients_periods_days[$k_ipid], $period_days);
					$period_days = array();
				}
			}


			//flatrate required data start
			//verify this
			$current_period['start'] = date('Y-m-d', time());
			$current_period['end'] = date('Y-m-d', time());

			//get sapv days cs
			$sapv_days_cs = $this->get_period_sapvs($ipidsarr, $active_days, $hospital_hospiz_days_cs);

			//get no sapv days
			$days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);
			//flatrate required data end


			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			//get patients courses
			//add $patients_discharge_date to limit the verlauf to last discharge date
			$course_days = $this->get_patients_period_course($ipidsarr);

			//get contact forms
			$contact_forms_overall_days = $this->get_patients_period_cf($ipidsarr);


			foreach($ipidsarr as $k_ipid => $v_ipid)
			{
				//last discharge date
				$patients_discharge_date[$v_ipid] = end($patient_details[$v_ipid]['discharge']);

				foreach($contact_forms_overall_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cfo => $v_cfo)
					{

						if(is_numeric($k_cfo))
						{
							if(strtotime(date('Y-m-d', strtotime($v_cfo['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge_overall[] = $v_cfo['id'];
							}
							$contact_forms_ids_overall[] = $v_cfo['id'];
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);
			}

			$classification_data_overall = $block_classification->get_multiple_block_classification($ipidsarr, $contact_forms_ids_overall);
			//CALCULUS REQUIRED DATA END
			//CALCULUS START
			//calculate flatrate for all provided patients
			$flatrate = $this->multi_patients_flatrate_days($ipidsarr, $clientid, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details);

			//calculate overall shortcuts for all provided patients
			$overall_patients_shortcuts_nofl = $this->patients_performance_overall($clientid, $ipidsarr, $active_days, $set_ids, $flatrate, false, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall);
			$flatrate_continued = $this->multi_patients_flatrate_days_continued($clientid, $ipidsarr, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details, $overall_patients_shortcuts_nofl);
			$overall_patients_shortcuts = $this->patients_performance_overall($clientid, $ipidsarr, $active_days, $set_ids, $flatrate,$flatrate_continued, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall);

			foreach($overall_patients_shortcuts as $k_patient_ipid => $v_patient_shortcuts_data)
			{
				$patients_totals[$k_patient_ipid] = $v_patient_shortcuts_data['all_visit_types_totals'];
			}


//			print_r("patient_details\n");
//			print_r($patient_details);
//			print_r("patients_periods\n");
//			print_r($patients_periods);
//			print_r("patients_periods_days\n");
//			print_r($patients_periods_days);
//			print_r("ipidsarr\n");
//			print_r($ipidsarr);
//			print_r("\n\n");
//			print_r("ipids string\n");
//			print_r(implode(',', $ipidsarr));
//			print_r("\nfirst flatrate\n");
//			print_r($flatrate);
//			exit;
			//CALCULUS END
			//make totals per day for both days and weekends
			foreach($days_range as $k_day_range => $v_day_range)
			{
				$day_patients_value = count($sapvs_days_gr[$v_day_range]);
				$MasterData['data']['days_values'][$v_day_range]['patients'] = $day_patients_value;

				//calculate days total patients
				$days_patients_total += $day_patients_value;
			}

			foreach($weeks_range as $k_week_range => $v_week_range)
			{
				$week_patients_value = count($sapvs_weeks_gr[$v_week_range]);
				$MasterData['data']['weeks_values'][$v_week_range]['patients'] = $week_patients_value;

				if($sapvs_weeks_gr[$v_week_range])
				{
					foreach($sapvs_weeks_gr[$v_week_range] as $k_week_pat => $v_week_ipid)
					{
						$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'] += $patients_totals[$v_week_ipid]['home_visit_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'] += $patients_totals[$v_week_ipid]['home_visit_total']['noncalculated'];

						$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'] += $patients_totals[$v_week_ipid]['beratung_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'] += $patients_totals[$v_week_ipid]['beratung_total']['noncalculated'];

						$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'] += $patients_totals[$v_week_ipid]['koordination_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'] += $patients_totals[$v_week_ipid]['koordination_total']['noncalculated'];

//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['home_visit_total'][] = $patients_totals[$v_week_ipid]['home_visit_total'];
//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['beratung_total'][] = $patients_totals[$v_week_ipid]['beratung_total'];
//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['koordination_total'][] = $patients_totals[$v_week_ipid]['koordination_total'];
					}
				}
				else
				{
					//provide some dummy data in order to ave values in columns
					$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'] = '0';

					$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'] = '0';

					$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'] = '0';
				}
				//calculate weeks total patients
				$weeks_patients_total += $week_patients_value;

				$MasterData['extra']['home_visit_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'];
				$MasterData['extra']['home_visit_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'];

				$MasterData['extra']['beratung_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'];
				$MasterData['extra']['beratung_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'];

				$MasterData['extra']['koordination_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'];
				$MasterData['extra']['koordination_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'];
			}

			$MasterData['extra']['total_days_patients'] = round($days_patients_total, 2);
			$MasterData['extra']['total_weeks_patients'] = round($weeks_patients_total, 2);

			if($_REQUEST['dbg']=="1")
			{
				print_r("overall_patients_shortcuts\n");
				print_r($overall_patients_shortcuts);		
				print_r("contact_forms_overall_days\n");
				print_r($contact_forms_overall_days);
				print_r("sapvs_days_gr\n");
				print_r($sapvs_days_gr);
				print_r("sapvs_weeks_gr\n");
				print_r($sapvs_weeks_gr);
				print_r(" \n ALL SAPV days \n ");
				print_r($pat_sapv_data);
				print_r(" \n SAPV Active days \n ");
				print_r($patient_details_dbg);
				print_r("MasterData\n");
				print_r($MasterData);
				exit;
			}

			return $MasterData;
		}

		private function lag_discharged_bw($params)
		{
			// report_id = 151
			// report_name = {lag2014_Abgeschl. Versorgungen - sheet name (sheet2)}
			// report_details = This report is looking for discharged patients in reported period

			$form_types = new FormTypes();
			$p_list = new PriceList();
			$block_classification = new FormBlockClassification();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();

			$days_range = range(1, 176);
			$weeks_range = range(1, 26);

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidsarr = $this->getPatientsByDischarge($quarterarr, $yeararr, $montharr);


			if(empty($ipidsarr)){
				$ipidsarr[] = "XXXXXXX";
			}
				
			$sql = 'p.*, e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone';

			$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipidsarr;
			$patient_details = Pms_CommonData::patients_days($conditions, $sql);

			foreach($patient_details as $ipid => $p_details)
			{
				$patient_details [$p_details['details'] ['ipid']]['real_active_days'] =  $p_details['real_active_days'];
				$patient_details [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patient_details [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patient_details [$p_details['details'] ['ipid']]['treatment_days'] = $p_details['treatment_days'];
			}
			
			

			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('isdelete=0')
				->andWhereIn('ipid', $ipidsarr)
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();

			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{
				if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00')
				{
					$verordisablenext = strtotime('+1 day', strtotime($sapv['verorddisabledate']));
					$sapv['verordnungbis'] = date('Y-m-d', $verordisablenext);
				}

				if(empty($pat_sapv_data[$sapv['ipid']]))
				{
					$pat_sapv_data[$sapv['ipid']] = array();
				}

				$temp_sapv_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($sapv['verordnungam'])), date("Y-m-d", strtotime($sapv['verordnungbis'])), false);

				$pat_sapv_data[$sapv['ipid']] = array_merge($pat_sapv_data[$sapv['ipid']], $temp_sapv_days);

				//apply array walk here...otherwise we flood the river with date+strtotime shit
				array_walk($pat_sapv_data[$sapv['ipid']], function(&$value) {
					$value = date('d.m.Y', strtotime($value));
				});
			}

			foreach($pat_sapv_data as $ipid => $sapvdata)
			{
				foreach($sapvdata as $k_sapv_day => $sapv_day)
				{
					if(in_array($sapv_day, $patient_details[$ipid]['real_active_days'])  // active day 
						&& !in_array($sapv_day, $patient_details[$ipid]['hospital_days_cs']) // does not exist already in array
						&& !in_array($sapv_day, $patient_details[$ipid]['hospiz_days_cs']) // does not exist already in array
						&& !in_array($sapv_day, $patient_details[$ipid]['sapv_active_days']) // does not exist already in array
					)
					{
						$patient_details[$ipid]['sapv_active_days'][] = $sapv_day;
					}
				}
			}

			foreach($patient_details as $k_ipid => $pat_details)
			{
				//add ipid to each counted sapvs days grouped
				$counted_days = count($pat_details['sapv_active_days']);
				$counted_weeks = ceil($counted_days / 7);

				if($counted_days > '0' && $counted_days <= '175')
				{
					$sapvs_days_gr[$counted_days][] = $k_ipid;
				}
				else if($counted_days > '0')
				{
					//more than 175 days enters in key 176
					$sapvs_days_gr['176'][] = $k_ipid;
				}
				$counted_days = '';


				if($counted_weeks > '0' && $counted_weeks <= '25')
				{
					$sapvs_weeks_gr[$counted_weeks][] = $k_ipid;
				}
				else if($counted_weeks > '0')
				{
					//more than 25 weeks enters in key 26
					$sapvs_weeks_gr['26'][] = $k_ipid;
				}
			}

			ksort($sapvs_days_gr, SORT_NUMERIC);
			ksort($sapvs_weeks_gr, SORT_NUMERIC);



			//CALCULUS REQUIRED DATA START
			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			//get active days array
			$active_days = array();
			foreach($patient_details as $k_ipid => $pat_details)
			{
				//active days "Y-m-d"
				$active_days[$k_ipid] = $pat_details['active_days'];

				array_walk($active_days[$k_ipid], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});


				//hospital days cs
				if(!empty($pat_details['hospital']['real_days_cs']))
				{
					$hospital_days_cs[$k_ipid] = $pat_details['hospital']['real_days_cs'];
					array_walk($hospital_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//hospiz days cs
				if(!empty($pat_details['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs[$k_ipid] = $pat_details['hospiz']['real_days_cs'];
					array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				if(empty($hospital_days_cs[$k_ipid]))
				{
					$hospital_days_cs[$k_ipid] = array();
				}

				if(empty($hospiz_days_cs[$k_ipid]))
				{
					$hospiz_days_cs[$k_ipid] = array();
				}

				//joined hospital hospiz days cs
				$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);


				//used in flatrate
				if(empty($patients_periods[$k_ipid]))
				{
					$patients_periods[$k_ipid] = array();
				}

				array_walk_recursive($pat_details['active_periods'], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$patients_periods[$k_ipid] = array_merge($patients_periods[$k_ipid], $pat_details['active_periods']);
			}

			foreach($patients_periods as $k_ipid => $v_periods)
			{
				foreach($v_periods as $k_period => $v_period)
				{
					if(empty($patients_periods_days[$k_ipid]))
					{
						$patients_periods_days[$k_ipid] = array();
					}

					$period_days = $patientmaster->getDaysInBetween($v_period['start'], $v_period['end']);
					$patients_periods_days[$k_ipid] = array_merge($patients_periods_days[$k_ipid], $period_days);
					$period_days = array();
				}
			}


			//flatrate required data start
			//verify this
			$current_period['start'] = date('Y-m-d', time());
			$current_period['end'] = date('Y-m-d', time());

			//get sapv days cs
			$sapv_days_cs = $this->get_period_sapvs($ipidsarr, $active_days, $hospital_hospiz_days_cs);

			//get no sapv days
			$days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);
			//flatrate required data end


			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			//get patients courses
			//add $patients_discharge_date to limit the verlauf to last discharge date
			$course_days = $this->get_patients_period_course($ipidsarr);

			//get contact forms
			$contact_forms_overall_days = $this->get_patients_period_cf($ipidsarr);


			foreach($ipidsarr as $k_ipid => $v_ipid)
			{
				//last discharge date
				$patients_discharge_date[$v_ipid] = end($patient_details[$v_ipid]['discharge']);

				foreach($contact_forms_overall_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cfo => $v_cfo)
					{

						if(is_numeric($k_cfo))
						{
							if(strtotime(date('Y-m-d', strtotime($v_cfo['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge_overall[] = $v_cfo['id'];
							}
							$contact_forms_ids_overall[] = $v_cfo['id'];
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);
			}

			$classification_data_overall = $block_classification->get_multiple_block_classification($ipidsarr, $contact_forms_ids_overall);
			//CALCULUS REQUIRED DATA END
			//CALCULUS START
			//calculate flatrate for all provided patients
			$flatrate = $this->multi_patients_flatrate_days($ipidsarr, $clientid, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details);
			
			//calculate flatrate for all provided patients
			$overall_patients_shortcuts_nofl = $this->patients_performance_overall($clientid, $ipidsarr, $active_days, $set_ids, $flatrate, false, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall);
			$flatrate_continued = $this->multi_patients_flatrate_days_continued($clientid, $ipidsarr, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details, $overall_patients_shortcuts_nofl);
			$overall_patients_shortcuts = $this->patients_performance_overall($clientid, $ipidsarr, $active_days, $set_ids, $flatrate,$flatrate_continued, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall);
			
			foreach($overall_patients_shortcuts as $k_patient_ipid => $v_patient_shortcuts_data)
			{
				$patients_totals[$k_patient_ipid] = $v_patient_shortcuts_data['all_visit_types_totals'];
			}

//			if($_SERVER['REMOTE_ADDR'] == "10.0.0.12")
//			{
//				print_r("$overall_patients_shortcuts_nofl\n");
//				print_r($overall_patients_shortcuts_nofl);
//				
//				print_r("flatrate continued\n");
//				print_r($flatrate_continued);
//				
//				
//				print_r("overall_patients_shortcuts\n");
//				print_r($overall_patients_shortcuts);
//				exit;
//			}
//			print_r("contact_forms_overall_days\n");
//			print_r($contact_forms_overall_days);
//			print_r("patient_details\n");
//			print_r($patient_details);
//			print_r("patients_periods\n");
//			print_r($patients_periods);
//			print_r("patients_periods_days\n");
//			print_r($patients_periods_days);
//			print_r("ipidsarr\n");
//			print_r($ipidsarr);
//			print_r("\n\n");
//			print_r("ipids string\n");
//			print_r(implode(',', $ipidsarr));
//			print_r("\nfirst flatrate\n");
//			print_r($flatrate);
//			exit;
			//CALCULUS END
			//make totals per day for both days and weekends
			foreach($days_range as $k_day_range => $v_day_range)
			{
				$day_patients_value = count($sapvs_days_gr[$v_day_range]);
				$MasterData['data']['days_values'][$v_day_range]['patients'] = $day_patients_value;

				//calculate days total patients
				$days_patients_total += $day_patients_value;
			}

			foreach($weeks_range as $k_week_range => $v_week_range)
			{
				$week_patients_value = count($sapvs_weeks_gr[$v_week_range]);
				$MasterData['data']['weeks_values'][$v_week_range]['patients'] = $week_patients_value;

				if($sapvs_weeks_gr[$v_week_range])
				{
					foreach($sapvs_weeks_gr[$v_week_range] as $k_week_pat => $v_week_ipid)
					{
						$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'] += $patients_totals[$v_week_ipid]['home_visit_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'] += $patients_totals[$v_week_ipid]['home_visit_total']['noncalculated'];

						$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'] += $patients_totals[$v_week_ipid]['beratung_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'] += $patients_totals[$v_week_ipid]['beratung_total']['noncalculated'];

						$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'] += $patients_totals[$v_week_ipid]['koordination_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'] += $patients_totals[$v_week_ipid]['koordination_total']['noncalculated'];

//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['home_visit_total'][] = $patients_totals[$v_week_ipid]['home_visit_total'];
//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['beratung_total'][] = $patients_totals[$v_week_ipid]['beratung_total'];
//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['koordination_total'][] = $patients_totals[$v_week_ipid]['koordination_total'];
					}
				}
				else
				{
					//provide some dummy data in order to ave values in columns
					$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'] = '0';

					$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'] = '0';

					$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'] = '0';
				}
				//calculate weeks total patients
				$weeks_patients_total += $week_patients_value;

				$MasterData['extra']['home_visit_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'];
				$MasterData['extra']['home_visit_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'];

				$MasterData['extra']['beratung_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'];
				$MasterData['extra']['beratung_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'];

				$MasterData['extra']['koordination_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'];
				$MasterData['extra']['koordination_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'];
			}

			$MasterData['extra']['total_days_patients'] = round($days_patients_total, 2);
			$MasterData['extra']['total_weeks_patients'] = round($weeks_patients_total, 2);

			//debug data
			if($_REQUEST['dbg']=="2")
			{
				print_r("overall_patients_shortcuts\n");
				print_r($overall_patients_shortcuts);		
				print_r("contact_forms_overall_days\n");
				print_r($contact_forms_overall_days);
				print_r("sapvs_days_gr\n");
				print_r($sapvs_days_gr);
				print_r("sapvs_weeks_gr\n");
				print_r($sapvs_weeks_gr);
				print_r(" \n ALL SAPV days \n ");
				print_r($pat_sapv_data);
				print_r(" \n SAPV Active days \n ");
				print_r($patient_details_dbg);
				print_r("MasterData\n");
				print_r($MasterData);
				exit;
			}	

			return $MasterData;
		}

		
		private function lag_dead_bw_aok($params)
		{
			// report_id = 151
			// report_name = {lag2014_Verstorb.Pat.AOK - sheet name (sheet3)}
			// report_details = This report is looking for dead patients in reported period which have AOK Health Insurance

			$form_types = new FormTypes();
			$p_list = new PriceList();
			$block_classification = new FormBlockClassification();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();

			$days_range = range(1, 176);
			$weeks_range = range(1, 26);

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);
			if(empty($ipidsarr))
			{
				$ipidsarr[] = '999999999999999999';
			}
			
			//get all aok master health insurances
			$health_insurances = Doctrine_Query::create()
				->select("*")
				->from('HealthInsurance')
				->where('LOWER(`name`) LIKE "%aok%"')
				->andWhere('clientid = "'.$clientid.'"');
			$health_insurances_res = $health_insurances->fetchArray();
			
			$hi_ids[] = '9999999999999999';
			foreach($health_insurances_res as $k_hi => $v_hi)
			{
				$hi_ids[] = $v_hi['id'];
			}
			
			//get all patient health insurances which have aok in company_name
			$pathealth = Doctrine_Query::create()
				->select("*, AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->where('AES_DECRYPT(company_name,"' . Zend_Registry::get('salt') . '") LIKE "%aok%"')
				->orWhereIn('companyid', $hi_ids)
				->whereIn('ipid', $ipidsarr);
			$pathealtharray = $pathealth->fetchArray();
			
			$hi_ipidsarr[] = '999999999999999999';
			foreach($pathealtharray as $k_patient_health => $v_patient_health)
			{
				$hi_ipidsarr[] = $v_patient_health["ipid"];
			}

			//rewrite ipids arr with result of both health insurance sources
			$ipidsarr = array_values(array_unique(array_intersect($ipidsarr, $hi_ipidsarr)));
			
			$sql = 'p.*, e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone';

			$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipidsarr;
			$patient_details = Pms_CommonData::patients_days($conditions, $sql);

			foreach($patient_details as $ipid => $p_details)
			{
				$patient_details [$p_details['details'] ['ipid']]['real_active_days'] =  $p_details['real_active_days'];
				$patient_details [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patient_details [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patient_details [$p_details['details'] ['ipid']]['treatment_days'] = $p_details['treatment_days'];
			}
			
			
			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('isdelete=0')
				->andWhereIn('ipid', $ipidsarr)
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();

			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{
				if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00')
				{
					$verordisablenext = strtotime('+1 day', strtotime($sapv['verorddisabledate']));
					$sapv['verordnungbis'] = date('Y-m-d', $verordisablenext);
				}

				if(empty($pat_sapv_data[$sapv['ipid']]))
				{
					$pat_sapv_data[$sapv['ipid']] = array();
				}

				$temp_sapv_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($sapv['verordnungam'])), date("Y-m-d", strtotime($sapv['verordnungbis'])), false);

				$pat_sapv_data[$sapv['ipid']] = array_merge($pat_sapv_data[$sapv['ipid']], $temp_sapv_days);

				//apply array walk here...otherwise we flood the river with date+strtotime shit
				array_walk($pat_sapv_data[$sapv['ipid']], function(&$value) {
					$value = date('d.m.Y', strtotime($value));
				});
			}

			foreach($pat_sapv_data as $ipid => $sapvdata)
			{
				foreach($sapvdata as $k_sapv_day => $sapv_day)
				{
					if(in_array($sapv_day, $patient_details[$ipid]['real_active_days'])  // active day 
						&& !in_array($sapv_day, $patient_details[$ipid]['hospital_days_cs']) // does not exist already in array
						&& !in_array($sapv_day, $patient_details[$ipid]['hospiz_days_cs']) // does not exist already in array
						&& !in_array($sapv_day, $patient_details[$ipid]['sapv_active_days']) // does not exist already in array
					)
					{
						$patient_details[$ipid]['sapv_active_days'][] = $sapv_day;
						$patient_details_dbg[$ipid]['sapv_active_days'][] = $sapv_day;
					}
				}
			}

			foreach($patient_details as $k_ipid => $pat_details)
			{
				//add ipid to each counted sapvs days grouped
				$counted_days = count($pat_details['sapv_active_days']);
				$counted_weeks = ceil($counted_days / 7);

				if($counted_days > '0' && $counted_days <= '175')
				{
					$sapvs_days_gr[$counted_days][] = $k_ipid;
				}
				else if($counted_days > '0')
				{
					//more than 175 days enters in key 176
					$sapvs_days_gr['176'][] = $k_ipid;
				}
				$counted_days = '';


				if($counted_weeks > '0' && $counted_weeks <= '25')
				{
					$sapvs_weeks_gr[$counted_weeks][] = $k_ipid;
				}
				else if($counted_weeks > '0')
				{
					//more than 25 weeks enters in key 26
					$sapvs_weeks_gr['26'][] = $k_ipid;
				}
			}

			ksort($sapvs_days_gr, SORT_NUMERIC);
			ksort($sapvs_weeks_gr, SORT_NUMERIC);



			//CALCULUS REQUIRED DATA START
			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			//get active days array
			$active_days = array();
			foreach($patient_details as $k_ipid => $pat_details)
			{
				//active days "Y-m-d"
				$active_days[$k_ipid] = $pat_details['active_days'];

				array_walk($active_days[$k_ipid], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});


				//hospital days cs
				if(!empty($pat_details['hospital']['real_days_cs']))
				{
					$hospital_days_cs[$k_ipid] = $pat_details['hospital']['real_days_cs'];
					array_walk($hospital_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//hospiz days cs
				if(!empty($pat_details['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs[$k_ipid] = $pat_details['hospiz']['real_days_cs'];
					array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				if(empty($hospital_days_cs[$k_ipid]))
				{
					$hospital_days_cs[$k_ipid] = array();
				}

				if(empty($hospiz_days_cs[$k_ipid]))
				{
					$hospiz_days_cs[$k_ipid] = array();
				}

				//joined hospital hospiz days cs
				$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);


				//used in flatrate
				if(empty($patients_periods[$k_ipid]))
				{
					$patients_periods[$k_ipid] = array();
				}

				array_walk_recursive($pat_details['active_periods'], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$patients_periods[$k_ipid] = array_merge($patients_periods[$k_ipid], $pat_details['active_periods']);
			}

			foreach($patients_periods as $k_ipid => $v_periods)
			{
				foreach($v_periods as $k_period => $v_period)
				{
					if(empty($patients_periods_days[$k_ipid]))
					{
						$patients_periods_days[$k_ipid] = array();
					}

					$period_days = $patientmaster->getDaysInBetween($v_period['start'], $v_period['end']);
					$patients_periods_days[$k_ipid] = array_merge($patients_periods_days[$k_ipid], $period_days);
					$period_days = array();
				}
			}


			//flatrate required data start
			//verify this
			$current_period['start'] = date('Y-m-d', time());
			$current_period['end'] = date('Y-m-d', time());

			//get sapv days cs
			$sapv_days_cs = $this->get_period_sapvs($ipidsarr, $active_days, $hospital_hospiz_days_cs);

			//get no sapv days
			$days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);
			//flatrate required data end


			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			//get patients courses
			//add $patients_discharge_date to limit the verlauf to last discharge date
			$course_days = $this->get_patients_period_course($ipidsarr);

			//get contact forms
			$contact_forms_overall_days = $this->get_patients_period_cf($ipidsarr);


			foreach($ipidsarr as $k_ipid => $v_ipid)
			{
				//last discharge date
				$patients_discharge_date[$v_ipid] = end($patient_details[$v_ipid]['discharge']);

				foreach($contact_forms_overall_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cfo => $v_cfo)
					{

						if(is_numeric($k_cfo))
						{
							if(strtotime(date('Y-m-d', strtotime($v_cfo['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge_overall[] = $v_cfo['id'];
							}
							$contact_forms_ids_overall[] = $v_cfo['id'];
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);
			}

			$classification_data_overall = $block_classification->get_multiple_block_classification($ipidsarr, $contact_forms_ids_overall);
			//CALCULUS REQUIRED DATA END
			//CALCULUS START
			//calculate flatrate for all provided patients
			$flatrate = $this->multi_patients_flatrate_days($ipidsarr, $clientid, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details);
			
			//calculate flatrate for all provided patients
			$overall_patients_shortcuts_nofl = $this->patients_performance_overall($clientid, $ipidsarr, $active_days, $set_ids, $flatrate, false, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall);
			$flatrate_continued = $this->multi_patients_flatrate_days_continued($clientid, $ipidsarr, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details, $overall_patients_shortcuts_nofl);
			$overall_patients_shortcuts = $this->patients_performance_overall($clientid, $ipidsarr, $active_days, $set_ids, $flatrate,$flatrate_continued, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall);
			
			foreach($overall_patients_shortcuts as $k_patient_ipid => $v_patient_shortcuts_data)
			{
				$patients_totals[$k_patient_ipid] = $v_patient_shortcuts_data['all_visit_types_totals'];
			}

//			print_r("overall_patients_shortcuts\n");
//			print_r($overall_patients_shortcuts);		
//			print_r("contact_forms_overall_days\n");
//			print_r($contact_forms_overall_days);
//			print_r("patient_details\n");
//			print_r($patient_details);
//			print_r("patients_periods\n");
//			print_r($patients_periods);
//			print_r("patients_periods_days\n");
//			print_r($patients_periods_days);
//			print_r("ipidsarr\n");
//			print_r($ipidsarr);
//			print_r("\n\n");
//			print_r("ipids string\n");
//			print_r(implode(',', $ipidsarr));
//			print_r("\nfirst flatrate\n");
//			print_r($flatrate);
//			exit;
			//CALCULUS END
			//make totals per day for both days and weekends
			foreach($days_range as $k_day_range => $v_day_range)
			{
				$day_patients_value = count($sapvs_days_gr[$v_day_range]);
				$MasterData['data']['days_values'][$v_day_range]['patients'] = $day_patients_value;

				//calculate days total patients
				$days_patients_total += $day_patients_value;
			}

			foreach($weeks_range as $k_week_range => $v_week_range)
			{
				$week_patients_value = count($sapvs_weeks_gr[$v_week_range]);
				$MasterData['data']['weeks_values'][$v_week_range]['patients'] = $week_patients_value;

				if($sapvs_weeks_gr[$v_week_range])
				{
					foreach($sapvs_weeks_gr[$v_week_range] as $k_week_pat => $v_week_ipid)
					{
						$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'] += $patients_totals[$v_week_ipid]['home_visit_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'] += $patients_totals[$v_week_ipid]['home_visit_total']['noncalculated'];

						$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'] += $patients_totals[$v_week_ipid]['beratung_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'] += $patients_totals[$v_week_ipid]['beratung_total']['noncalculated'];

						$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'] += $patients_totals[$v_week_ipid]['koordination_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'] += $patients_totals[$v_week_ipid]['koordination_total']['noncalculated'];

//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['home_visit_total'][] = $patients_totals[$v_week_ipid]['home_visit_total'];
//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['beratung_total'][] = $patients_totals[$v_week_ipid]['beratung_total'];
//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['koordination_total'][] = $patients_totals[$v_week_ipid]['koordination_total'];
					}
				}
				else
				{
					//provide some dummy data in order to ave values in columns
					$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'] = '0';

					$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'] = '0';

					$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'] = '0';
				}
				//calculate weeks total patients
				$weeks_patients_total += $week_patients_value;

				$MasterData['extra']['home_visit_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'];
				$MasterData['extra']['home_visit_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'];

				$MasterData['extra']['beratung_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'];
				$MasterData['extra']['beratung_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'];

				$MasterData['extra']['koordination_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'];
				$MasterData['extra']['koordination_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'];
			}

			$MasterData['extra']['total_days_patients'] = round($days_patients_total, 2);
			$MasterData['extra']['total_weeks_patients'] = round($weeks_patients_total, 2);

			//debug data
			if($_REQUEST['dbg']=="3")
			{
				print_r("overall_patients_shortcuts\n");
				print_r($overall_patients_shortcuts);		
				print_r("contact_forms_overall_days\n");
				print_r($contact_forms_overall_days);
				print_r("sapvs_days_gr\n");
				print_r($sapvs_days_gr);
				print_r("sapvs_weeks_gr\n");
				print_r($sapvs_weeks_gr);
				print_r(" \n ALL SAPV days \n ");
				print_r($pat_sapv_data);
				print_r(" \n SAPV Active days \n ");
				print_r($patient_details_dbg);
				print_r("MasterData\n");
				print_r($MasterData);
				exit;
			}

			return $MasterData;
		}
		
		private function lag_discharged_bw_aok($params)
		{
			// report_id = 151
			// report_name = {lag2014_Abgeschl.Versorg.AOK - sheet name (sheet4)}
			// report_details = This report is looking for discharged patients in reported period which have AOK Health Insurance

			$form_types = new FormTypes();
			$p_list = new PriceList();
			$block_classification = new FormBlockClassification();
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$patientmaster = new PatientMaster();

			$days_range = range(1, 176);
			$weeks_range = range(1, 26);

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$ipidsarr = $this->getPatientsByDischarge($quarterarr, $yeararr, $montharr);
			if(empty($ipidsarr))
			{
				$ipidsarr[] = '999999999999999999';
			}
			
			//get all aok master health insurances
			$health_insurances = Doctrine_Query::create()
				->select("*")
				->from('HealthInsurance')
				->where('LOWER(`name`) LIKE "%aok%"')
				->andWhere('clientid = "'.$clientid.'"');
			$health_insurances_res = $health_insurances->fetchArray();
			
			$hi_ids[] = '9999999999999999';
			foreach($health_insurances_res as $k_hi => $v_hi)
			{
				$hi_ids[] = $v_hi['id'];
			}
			
			//get all patient health insurances which have aok in company_name
			$pathealth = Doctrine_Query::create()
				->select("*, AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->where('AES_DECRYPT(company_name,"' . Zend_Registry::get('salt') . '") LIKE "%aok%"')
				->orWhereIn('companyid', $hi_ids)
				->whereIn('ipid', $ipidsarr);
			$pathealtharray = $pathealth->fetchArray();
			
			$hi_ipidsarr[] = '999999999999999999';
			foreach($pathealtharray as $k_patient_health => $v_patient_health)
			{
				$hi_ipidsarr[] = $v_patient_health["ipid"];
			}

			//rewrite ipids arr with result of both health insurance sources
			$ipidsarr = array_values(array_unique(array_intersect($ipidsarr, $hi_ipidsarr)));
			
			$sql = 'p.*, e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone';

			$conditions['periods'] = array('0' => array('start' => "2008-01-01", 'end' => date("Y-m-d")));
			$conditions['client'] = $clientid;
			$conditions['ipids'] = $ipidsarr;
			$patient_details = Pms_CommonData::patients_days($conditions, $sql);

			foreach($patient_details as $ipid => $p_details)
			{
				$patient_details [$p_details['details'] ['ipid']]['real_active_days'] =  $p_details['real_active_days'];
				$patient_details [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patient_details [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patient_details [$p_details['details'] ['ipid']]['treatment_days'] = $p_details['treatment_days'];
			}
			
			
			$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->where('isdelete=0')
				->andWhereIn('ipid', $ipidsarr)
				->orderBy("ipid");
			$sapvarr = $sapv->fetchArray();

			//SAPV patient data + list days sapv
			foreach($sapvarr as $keys => $sapv)
			{
				if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00')
				{
					$verordisablenext = strtotime('+1 day', strtotime($sapv['verorddisabledate']));
					$sapv['verordnungbis'] = date('Y-m-d', $verordisablenext);
				}

				if(empty($pat_sapv_data[$sapv['ipid']]))
				{
					$pat_sapv_data[$sapv['ipid']] = array();
				}

				$temp_sapv_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($sapv['verordnungam'])), date("Y-m-d", strtotime($sapv['verordnungbis'])), false);

				$pat_sapv_data[$sapv['ipid']] = array_merge($pat_sapv_data[$sapv['ipid']], $temp_sapv_days);

				//apply array walk here...otherwise we flood the river with date+strtotime shit
				array_walk($pat_sapv_data[$sapv['ipid']], function(&$value) {
					$value = date('d.m.Y', strtotime($value));
				});
			}

			foreach($pat_sapv_data as $ipid => $sapvdata)
			{
				foreach($sapvdata as $k_sapv_day => $sapv_day)
				{
					if(in_array($sapv_day, $patient_details[$ipid]['real_active_days'])  // active day 
						&& !in_array($sapv_day, $patient_details[$ipid]['hospital_days_cs']) // does not exist already in array
						&& !in_array($sapv_day, $patient_details[$ipid]['hospiz_days_cs']) // does not exist already in array
						&& !in_array($sapv_day, $patient_details[$ipid]['sapv_active_days']) // does not exist already in array
					)
					{
						$patient_details[$ipid]['sapv_active_days'][] = $sapv_day;
						$patient_details_dbg[$ipid]['sapv_active_days'][] = $sapv_day;
					}
				}
			}

			foreach($patient_details as $k_ipid => $pat_details)
			{
				//add ipid to each counted sapvs days grouped
				$counted_days = count($pat_details['sapv_active_days']);
				$counted_weeks = ceil($counted_days / 7);

				if($counted_days > '0' && $counted_days <= '175')
				{
					$sapvs_days_gr[$counted_days][] = $k_ipid;
				}
				else if($counted_days > '0')
				{
					//more than 175 days enters in key 176
					$sapvs_days_gr['176'][] = $k_ipid;
				}
				$counted_days = '';


				if($counted_weeks > '0' && $counted_weeks <= '25')
				{
					$sapvs_weeks_gr[$counted_weeks][] = $k_ipid;
				}
				else if($counted_weeks > '0')
				{
					//more than 25 weeks enters in key 26
					$sapvs_weeks_gr['26'][] = $k_ipid;
				}
			}

			ksort($sapvs_days_gr, SORT_NUMERIC);
			ksort($sapvs_weeks_gr, SORT_NUMERIC);



			//CALCULUS REQUIRED DATA START
			//get all sets form types
			$set_one = $form_types->get_form_types($clientid, '1');
			foreach($set_one as $k_set_one => $v_set_one)
			{
				$set_one_ids[] = $v_set_one['id'];
			}

			$set_two = $form_types->get_form_types($clientid, '2');
			foreach($set_two as $k_set_two => $v_set_two)
			{
				$set_two_ids[] = $v_set_two['id'];
			}

			$set_three = $form_types->get_form_types($clientid, '3');
			foreach($set_three as $k_set_three => $v_set_three)
			{
				$set_three_ids[] = $v_set_three['id'];
			}


			$set_fourth = $form_types->get_form_types($clientid, '4');
			foreach($set_fourth as $k_set_fourth => $v_set_fourth)
			{
				$set_fourth_ids[] = $v_set_fourth['id'];
			}

			$set_ids['one'] = $set_one_ids;
			$set_ids['two'] = $set_two_ids;
			$set_ids['three'] = $set_three_ids;
			$set_ids['fourth'] = $set_fourth_ids;

			//get active days array
			$active_days = array();
			foreach($patient_details as $k_ipid => $pat_details)
			{
				//active days "Y-m-d"
				$active_days[$k_ipid] = $pat_details['active_days'];

				array_walk($active_days[$k_ipid], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});


				//hospital days cs
				if(!empty($pat_details['hospital']['real_days_cs']))
				{
					$hospital_days_cs[$k_ipid] = $pat_details['hospital']['real_days_cs'];
					array_walk($hospital_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				//hospiz days cs
				if(!empty($pat_details['hospiz']['real_days_cs']))
				{
					$hospiz_days_cs[$k_ipid] = $pat_details['hospiz']['real_days_cs'];
					array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
						$value = date("Y-m-d", strtotime($value));
					});
				}

				if(empty($hospital_days_cs[$k_ipid]))
				{
					$hospital_days_cs[$k_ipid] = array();
				}

				if(empty($hospiz_days_cs[$k_ipid]))
				{
					$hospiz_days_cs[$k_ipid] = array();
				}

				//joined hospital hospiz days cs
				$hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);


				//used in flatrate
				if(empty($patients_periods[$k_ipid]))
				{
					$patients_periods[$k_ipid] = array();
				}

				array_walk_recursive($pat_details['active_periods'], function(&$value) {
					$value = date("Y-m-d", strtotime($value));
				});
				$patients_periods[$k_ipid] = array_merge($patients_periods[$k_ipid], $pat_details['active_periods']);
			}

			foreach($patients_periods as $k_ipid => $v_periods)
			{
				foreach($v_periods as $k_period => $v_period)
				{
					if(empty($patients_periods_days[$k_ipid]))
					{
						$patients_periods_days[$k_ipid] = array();
					}

					$period_days = $patientmaster->getDaysInBetween($v_period['start'], $v_period['end']);
					$patients_periods_days[$k_ipid] = array_merge($patients_periods_days[$k_ipid], $period_days);
					$period_days = array();
				}
			}


			//flatrate required data start
			//verify this
			$current_period['start'] = date('Y-m-d', time());
			$current_period['end'] = date('Y-m-d', time());

			//get sapv days cs
			$sapv_days_cs = $this->get_period_sapvs($ipidsarr, $active_days, $hospital_hospiz_days_cs);

			//get no sapv days
			$days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);
			//flatrate required data end


			$master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);

			//get patients courses
			//add $patients_discharge_date to limit the verlauf to last discharge date
			$course_days = $this->get_patients_period_course($ipidsarr);

			//get contact forms
			$contact_forms_overall_days = $this->get_patients_period_cf($ipidsarr);


			foreach($ipidsarr as $k_ipid => $v_ipid)
			{
				//last discharge date
				$patients_discharge_date[$v_ipid] = end($patient_details[$v_ipid]['discharge']);

				foreach($contact_forms_overall_days[$v_ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cfo => $v_cfo)
					{

						if(is_numeric($k_cfo))
						{
							if(strtotime(date('Y-m-d', strtotime($v_cfo['start_date']))) > strtotime($patients_discharge_date[$v_ipid]) && $patient_days[$v_ipid]['details']['isdischarged'] == '1')
							{
								//excluded cf after last discharge
								$exclude_after_discharge_overall[] = $v_cfo['id'];
							}
							$contact_forms_ids_overall[] = $v_cfo['id'];
						}
					}
				}
				ksort($contact_forms_days[$v_ipid]);
			}

			$classification_data_overall = $block_classification->get_multiple_block_classification($ipidsarr, $contact_forms_ids_overall);
			//CALCULUS REQUIRED DATA END
			//CALCULUS START
			//calculate flatrate for all provided patients
			$flatrate = $this->multi_patients_flatrate_days($ipidsarr, $clientid, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details);
			
			//calculate flatrate for all provided patients
			$overall_patients_shortcuts_nofl = $this->patients_performance_overall($clientid, $ipidsarr, $active_days, $set_ids, $flatrate, false, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall);
			$flatrate_continued = $this->multi_patients_flatrate_days_continued($clientid, $ipidsarr, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details, $overall_patients_shortcuts_nofl);
			$overall_patients_shortcuts = $this->patients_performance_overall($clientid, $ipidsarr, $active_days, $set_ids, $flatrate,$flatrate_continued, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall);
			
			foreach($overall_patients_shortcuts as $k_patient_ipid => $v_patient_shortcuts_data)
			{
				$patients_totals[$k_patient_ipid] = $v_patient_shortcuts_data['all_visit_types_totals'];
			}

//			print_r("overall_patients_shortcuts\n");
//			print_r($overall_patients_shortcuts);		
//			print_r("contact_forms_overall_days\n");
//			print_r($contact_forms_overall_days);
//			print_r("patient_details\n");
//			print_r($patient_details);
//			print_r("patients_periods\n");
//			print_r($patients_periods);
//			print_r("patients_periods_days\n");
//			print_r($patients_periods_days);
//			print_r("ipidsarr\n");
//			print_r($ipidsarr);
//			print_r("\n\n");
//			print_r("ipids string\n");
//			print_r(implode(',', $ipidsarr));
//			print_r("\nfirst flatrate\n");
//			print_r($flatrate);
//			exit;
			//CALCULUS END
			//make totals per day for both days and weekends
			foreach($days_range as $k_day_range => $v_day_range)
			{
				$day_patients_value = count($sapvs_days_gr[$v_day_range]);
				$MasterData['data']['days_values'][$v_day_range]['patients'] = $day_patients_value;

				//calculate days total patients
				$days_patients_total += $day_patients_value;
			}

			foreach($weeks_range as $k_week_range => $v_week_range)
			{
				$week_patients_value = count($sapvs_weeks_gr[$v_week_range]);
				$MasterData['data']['weeks_values'][$v_week_range]['patients'] = $week_patients_value;

				if($sapvs_weeks_gr[$v_week_range])
				{
					foreach($sapvs_weeks_gr[$v_week_range] as $k_week_pat => $v_week_ipid)
					{
						$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'] += $patients_totals[$v_week_ipid]['home_visit_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'] += $patients_totals[$v_week_ipid]['home_visit_total']['noncalculated'];

						$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'] += $patients_totals[$v_week_ipid]['beratung_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'] += $patients_totals[$v_week_ipid]['beratung_total']['noncalculated'];

						$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'] += $patients_totals[$v_week_ipid]['koordination_total']['calculated'];
						$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'] += $patients_totals[$v_week_ipid]['koordination_total']['noncalculated'];

//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['home_visit_total'][] = $patients_totals[$v_week_ipid]['home_visit_total'];
//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['beratung_total'][] = $patients_totals[$v_week_ipid]['beratung_total'];
//						$MasterData['data']['weeks_values'][$v_week_range]['debug']['koordination_total'][] = $patients_totals[$v_week_ipid]['koordination_total'];
					}
				}
				else
				{
					//provide some dummy data in order to ave values in columns
					$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'] = '0';

					$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'] = '0';

					$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'] = '0';
					$MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'] = '0';
				}
				//calculate weeks total patients
				$weeks_patients_total += $week_patients_value;

				$MasterData['extra']['home_visit_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_calculated'];
				$MasterData['extra']['home_visit_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['home_visit_total_noncalculated'];

				$MasterData['extra']['beratung_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['beratung_total_calculated'];
				$MasterData['extra']['beratung_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['beratung_total_noncalculated'];

				$MasterData['extra']['koordination_grandtotal_calculated'] += $MasterData['data']['weeks_values'][$v_week_range]['koordination_total_calculated'];
				$MasterData['extra']['koordination_grandtotal_noncalculated'] += $MasterData['data']['weeks_values'][$v_week_range]['koordination_total_noncalculated'];
			}

			$MasterData['extra']['total_days_patients'] = round($days_patients_total, 2);
			$MasterData['extra']['total_weeks_patients'] = round($weeks_patients_total, 2);

			if($_REQUEST['dbgd']=="1")
			{
				//debug data
			if($_REQUEST['dbg']=="4")
			{
				print_r("overall_patients_shortcuts\n");
				print_r($overall_patients_shortcuts);		
				print_r("contact_forms_overall_days\n");
				print_r($contact_forms_overall_days);
				print_r("sapvs_days_gr\n");
				print_r($sapvs_days_gr);
				print_r("sapvs_weeks_gr\n");
				print_r($sapvs_weeks_gr);
				print_r(" \n ALL SAPV days \n ");
				print_r($pat_sapv_data);
				print_r(" \n SAPV Active days \n ");
				print_r($patient_details_dbg);
				print_r("MasterData\n");
				print_r($MasterData);
				exit;
			}
				exit;
			}

			return $MasterData;
		}
		
		private function generateXLSv2($report, $reportdata)
		{
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			
			$cl = new Client();
			$client_data = $cl->getClientDataByid($clientid);
			$client_data_arr['team_name'] = $client_data[0]['team_name'];
			$client_data_arr['street'] = $client_data[0]['street1'];
			$client_data_arr['zip'] = $client_data[0]['zip'];
			$client_data_arr['city'] = $client_data[0]['city'];
			$client_data_arr['contact_name'] = $client_data[0]['last_name'].' '.$client_data[0]['first_name'];
			$client_data_arr['phone'] = $client_data[0]['phone'];
			
			// Create new PHPExcel object
			$excel = new PHPExcel();

			$aditional_data = false;
			if($reportdata['header_data'])
			{
				$aditional_data = $reportdata['header_data'];
			}
			
			
			foreach($reportdata['data'] as $k_sheet => $v_sheet_data)
			{
				if($k_sheet != "0")
				{
					//sheets from 1 and above must be created, first shit is autocreated
					$excel->createSheet();
				}

				// Create a first sheet
				$excel->setActiveSheetIndex($k_sheet);

				// Rename sheet
				$aditional_data['client_string'] = implode(', ', $client_data_arr);
				$excel->getActiveSheet()->setTitle($this->view->translate('ministry_report_sheet_' . ($k_sheet + 1) . '_name'));
				$this->ministryTemplate($excel, ($excel->getActiveSheetIndex() + 1), $aditional_data);
				$this->loadsheetdata($excel, $v_sheet_data, $reportdata['extra'][$k_sheet]);
			}

			// Redirect output to a client’s web browser (Excel5)
			header('Content-Type: application/vnd.ms-excel');
			header('Content-Disposition: attachment;filename="LAG.xls"');
			header('Cache-Control: max-age=0');
			$objWriter = PHPExcel_IOFactory::createWriter($excel, 'Excel5');
			$objWriter->save('php://output');
		}

		private function generatePHPExcel($report, $reportdata)
		{
		    
		    $Tr = new Zend_View_Helper_Translate();
		    
			// Create new PHPExcel object
			$excel = new PHPExcel();
			
			$excel->getDefaultStyle()->getFont()
			->setSize(10);
			/* ->setName('Verdana') */
			/* ->setBold(true) */
			
			$xls = $excel->getActiveSheet();

			$columns = $this->getreportscolumns_PHPExcel($report);
			$namereport = $this->fetchReportDetailsAction($report);
            $columns_nr = count($columns); 
            $report_name = $namereport[0]['report'];		
          
			switch($report)
			{
			    case '67':
			        $line= 1;
			        $xls->setCellValue("A".$line, 'Name des Berichts: ' . utf8_decode($this->view->translate($report_name)))->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
    			    $line++;
    			    
    			    if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
    			    {
    			        $xls->setCellValue("A".$line, $this->view->translate('reportperiods'));
    			        $xls->setCellValue("B".$line, $this->view->translate('rfrom'));
    			        $xls->setCellValue("C".$line, $this->view->translate('rtill'));
    			        $line++; //next line
    			
    			        foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
    			        {
    			            $cp = 1;
    			            $xls->setCellValue("B" . $line, $p_value_start);
    			            $xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
    			            $line++;
    			        }
    			        $line++; //leave one line between periods and table
    			    }
    			    
    			    $xls->setCellValue("A" . $line, $this->view->translate('no'));

    			    foreach($columns as $k=>$column)
        			{
        			    $xls->setCellValue($k. $line, utf8_decode($this->view->translate($column['column_name'])));
        			}
      			    $line++;

      			    $numeric_fields = array("nrpatientenvv2", "nrpatientenbe", "nrpatiententv", "nrpatientenbetv"); // Please check the old version to see what are this for
      			    	
      			    $row_nr = "1";
      			    foreach($reportdata['data'] as $key_date => $row)
      			    {
      			        $char_it = 65;
      			        
                        $xls->setCellValue(chr($char_it).$line, $row_nr);
      			        foreach($row as $col=>$vl){
      			            $xls->setCellValue(chr($char_it+1). $line,$vl);
          			        $char_it++;
      			        }
          			    $line++;
                        $row_nr++;
      			    }
      			    
      			    $xls->setCellValue("A".$line, $this->view->translate('Average'));
      			    $xls->setCellValue("D".$line, $reportdata['extra']['sum_master_be']);
      			    $xls->setCellValue("E".$line, $reportdata['extra']['sum_master_tv']);
      			    $xls->setCellValue("F".$line, $reportdata['extra']['sum_master_betv']);
      			    $xls->setCellValue("G".$line, $reportdata['extra']['sum_master_vv']);
      			    $line++;
      			    
      			    foreach($reportdata['unique_patients'] as $k_sapv => $v_pat_numbrer)
     			    {
     			        $xls->setCellValue("A".$line, $this->view->translate($k_sapv));
     			        $xls->setCellValue("C".$line, $v_pat_numbrer['epids']);
     			        $xls->setCellValue("G".$line, $v_pat_numbrer['count']);
        			    $line++;
     			    }
      			    
			    break;			        
			
			    case '97':
			        $line= 1;
			        
			        $translated_report_name = $this->view->translate($report_name);
// 			        $xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($this->view->translate($report_name)).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			        $xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
    			    $line++;
    			    
    			    if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
    			    {
    			        $xls->setCellValue("A".$line, $this->view->translate('reportperiods'));
    			        $xls->setCellValue("B".$line, $this->view->translate('rfrom'));
    			        $xls->setCellValue("C".$line, $this->view->translate('rtill'));
    			        $line++; //next line
    			
    			        foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
    			        {
    			            $cp = 1;
    			            $xls->setCellValue("B" . $line, $p_value_start);
    			            $xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
    			            $line++;
    			        }
    			        $line++; //leave one line between periods and table
    			    }
    			    
    			    $xls->setCellValue("A". $line, $this->view->translate('no'));
       			    $xls->setCellValue("B". $line, utf8_decode($this->view->translate("username")));
       			    $xls->setCellValue("C". $line, utf8_decode($this->view->translate("visit_date")));
       			    $xls->setCellValue("D". $line, utf8_decode($this->view->translate("EPID")));
       			    $xls->setCellValue("E". $line, utf8_decode($this->view->translate("lastname")));
       			    $xls->setCellValue("F". $line, utf8_decode($this->view->translate("firstname")));
       			    
      			    $line++;


      			    $display_columns['username'] = "B";
      			    $display_columns['visit_date'] = "C";
      			    $display_columns['epid'] = "D";
      			    $display_columns['patient_lastname'] = "E";
      			    $display_columns['patient_firstname'] = "F";

      			    $row_nr = "1";
      			    foreach($reportdata['data'] as $key_date => $row)
      			    {
      			        $xls->setCellValue("A".$line, $row_nr);
      			    
      			        foreach($row as $col=>$value)
      			        {
      			            if(is_array($value) && sizeof($value) > 0)
      			            {
      			                if($col == "visit" ){
          			                $multi[$col] = $line;
          			                
          			                foreach($value as $k_val => $v_val)
          			                {
          			                    foreach($v_val as $v_col=>$v_data){
          			                    $v_data = str_replace("<br />", "\n", $v_data);
          			                    $xls->setCellValue($display_columns[$v_col].$multi[$col], $v_data);
          			                    $all[$key_date][] = $multi[$col];
          			                    }
          			                    $multi[$col]++;
          			                }
      			                }
      			            }
      			            else
      			            {
      			                $value = str_replace("<br />", "\n", $value);
      			                $xls->setCellValue($display_columns[$col].$line, $value);
      			            }
      			        }
      			        if($all[$key_date]){
      			            $line = max( $all[$key_date]);
      			        }
      			        $line++;
      			        $row_nr++;
      			    }
      			    
			    break;			        
			    case '87':
			    	
			    	$line= 1;
			    	$translated_report_name = $this->view->translate($report_name);
			    	//$xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($this->view->translate($report_name)).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    	//$xls->setCellValue("A".$line, 'Name des Berichts: ' . utf8_decode($this->view->translate($report_name)))->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    	$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    	 
			    	$line++;
			    		
			    	if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    	{
			    		$xls->setCellValue("A".$line, $this->view->translate('reportperiods'));
			    		$xls->setCellValue("B".$line, $this->view->translate('rfrom'));
			    		$xls->setCellValue("C".$line, $this->view->translate('rtill'));
			    		$line++; //next line
			    		 
			    		foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    		{
			    			$cp = 1;
			    			$xls->setCellValue("B" . $line, $p_value_start);
			    			$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    			$line++;
			    		}
			    		$line++; //leave one line between periods and table
			    	}
			    		
			    	$xls->setCellValue("A" . $line, $this->view->translate('no'));
			    	
			    	foreach($columns as $k=>$column)
			    	{
			    		//$xls->setCellValue($k. $line, utf8_decode($this->view->translate($column['column_name'])));
			    		$xls->setCellValue($k. $line, ($this->view->translate($column['column_name'])));
			    	}
			    	$line++;
			    	
			    	$row_nr = "1";
			    		
			    	$quality_map = array('0' => 'Normal', '1' => 'Dringend', '2' => 'Normal', '3' => 'Notfall');
			    	
			    	foreach($reportdata['data'] as $key_date => $row)
			    	{
			    		$char_it = 65;			    		 
			    					    		
			    		foreach($row as $col=>$value)
			    		{
			    						    		
			    			if($col == "rows")
			    			{
			    				$cntSapv = count($value);
			    	
			    				for($s = 0; $s <= $cntSapv; $s++)
			    				{
			    	
			    					$countedSapvCells = count($value[$s]);
			    					foreach($value[$s] as $keyCell => $valCell)
			    					{
			    						if($keyCell == 'action')
			    						{			    							
			    							$xls->setCellValue(chr($char_it+1). $line,$this->view->translate($valCell));
			    						}
			    						if($keyCell == 'epid')
			    						{
			    							$string_row = $valCell . ' - ' . $value[$s]['row_date'];			    							
			    							$xls->setCellValue(chr($char_it+2). $line, $string_row);
			    				
			    						}
			    						if($keyCell == 'quality')
			    						{
			    							if(empty($valCell) || $valCell == '0')
			    							{
			    								$quality = $quality_map[0];
			    							}
			    							else
			    							{
			    								$quality = $quality_map[$valCell];
			    							}			    							
			    							$xls->setCellValue(chr($char_it+3). $line, $quality);
			    						}
			    					}
			    					$line++;
			    				}
			    			}
			    			else
			    			{		    				
			    				$xls->setCellValue(chr($char_it).$line, $row_nr);
			    				$char_it++;
			    				$xls->setCellValue(chr($char_it). $line,$value);
			    			}
			    		}
			    	
			    		$line++;
			    		$row_nr++;
			    	}
			    	
			    	$char_it = 65;			    	
			    	foreach($reportdata['extra'] as $user => $details)
			    	{
			    		$xls->setCellValue(chr($char_it). $line,$user);
			    		$xls->setCellValue(chr($char_it+1). $line,$this->view->translate('ammount_visits_dringend'));
			    		$xls->setCellValue(chr($char_it+2). $line,$details['visit'][1]);
			    		$char_it = 65;
			    		$line++;
			    		$xls->setCellValue(chr($char_it+1). $line,$this->view->translate('ammount_visits_normal'));
			    		$xls->setCellValue(chr($char_it+2). $line,$details['visit'][2]);
			    		$char_it = 65;
			    		$line++;
			    		$xls->setCellValue(chr($char_it+1). $line,$this->view->translate('ammount_visits_duty'));
			    		$xls->setCellValue(chr($char_it+2). $line,$details['visit'][3]);
			    		$char_it = 65;
			    		$line++;
			    		$xls->setCellValue(chr($char_it+1). $line,$this->view->translate('ammount_beratung'));
			    		$xls->setCellValue(chr($char_it+2). $line,$details['beratung']);
			    		$char_it = 65;
			    		$line++;
			    		$xls->setCellValue(chr($char_it+1). $line,$this->view->translate('ammount_koordination'));
			    		$xls->setCellValue(chr($char_it+2). $line,$details['koord']);
			    		$char_it = 65;
			    		$line++;
			    		$xls->setCellValue(chr($char_it+1). $line,$this->view->translate('ammount_tel'));
			    		$xls->setCellValue(chr($char_it+2). $line,$details['tel']);
			    		$line++;
			    		$line++;
			    	}
			    	break;
			    	
			    case '16':
			    	$line= 1;
			    	$translated_report_name = $this->view->translate($report_name);
			    	//$xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($this->view->translate($report_name)).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    	//$xls->setCellValue("A".$line, 'Name des Berichts: ' . utf8_decode($this->view->translate($report_name)))->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    	$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    	 
			    	$line++;
			    		
			    	if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    	{
			    		$xls->setCellValue("A".$line, $this->view->translate('reportperiods'));
			    		$xls->setCellValue("B".$line, $this->view->translate('rfrom'));
			    		$xls->setCellValue("C".$line, $this->view->translate('rtill'));
			    		$line++; //next line
			    		 
			    		foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    		{
			    			$cp = 1;
			    			$xls->setCellValue("B" . $line, $p_value_start);
			    			$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    			$line++;
			    		}
			    		$line++; //leave one line between periods and table
			    	}
			    		
			    	$xls->setCellValue("A" . $line, $this->view->translate('no'));
			    	
			    	foreach($columns as $k=>$column)
			    	{
			    		//$xls->setCellValue($k. $line, utf8_decode($this->view->translate($column['column_name'])));
			    		$xls->setCellValue($k. $line, ($this->view->translate($column['column_name'])));
			    	}
			    	$line++;
			    	
			    	
			    	$row_nr = "1";
			    		
			    	foreach($reportdata['data'] as $key_date => $row)
			    	{
			    		$char_it = 65;
			    			
			    		$xls->setCellValue(chr($char_it).$line, $row_nr);
			    	
			    		foreach($row as $col=>$value){
			    			if($col == 'alter')
			    			{
			    				$value .= " Jahre";
			    			}
			    			 
			    			if( $col=="description" && (is_array($value) && sizeof($value) > 0))
			    			{
			    				$value = implode(", ",$value);
			    			}
			    			
			    			if($col == "visits")
			    			{
			    				$cntMultiData = count($value);
			    				$countedMultiCells = count($value);
			    				$sc = 1;
			    				foreach($value as $keyCell => $valCell)
			    				{
			    					$array_names = array(
			    							"1" => "Hausbesuch in Privatwohnung",
			    							"2" => "Besuch im Krankenhaus / Palliativstation",
			    							"3" => "Besuch in stationärer Pflegeeinrichtung / Hospiz",
			    							"4" => "Besuch in Arztpraxis"
			    					);
			    					$char_it = 69; //where to start inserting multi patient data(rows)
			    					$xls->setCellValue(chr($char_it).$line, $array_names[$keyCell]);			    					
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it).$line, $valCell);			    					
			    			
			    			
			    					if($sc != $cntMultiData)
			    					{
			    						$line++;
			    					}
			    					$sc++;
			    					$char_it++;
			    				}
			    			}
			    			
			    			 
			    			$value = str_replace("<br />", "\n", $value);
			    			$value = str_replace("<hr/>", "\n", $value);
			    			$xls->setCellValue(chr($char_it+1). $line,$value);
			    			$char_it++;
			    		}
			    		$line++;
			    		$row_nr++;
			    	}
			    	
			    	$char_it = 65;
					if($reportdata['extra'])
					{
						$xls->setCellValue(chr($char_it). $line,$this->view->translate('Average'));
						$xls->setCellValue(chr($char_it+7). $line, $reportdata['extra']['averege']);
					}
			    	 
			    	break;
			
			    case "137":
			    	
			    	$line= 1;			    	
			    	$report_language = $this->view->translate($report_name.'_lang');
			    	 
			    	$translated_report_name = $report_language[$report_name];
			    	$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    	$line++;
			    		
			    	if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    	{
			    		$xls->setCellValue("A".$line, $report_language['reportperiods']);
			    		$xls->setCellValue("B".$line, $report_language['rfrom']);
			    		$xls->setCellValue("C".$line, $report_language['rtill']);
			    		$line++; //next line
			    	
			    		foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    		{
			    			$cp = 1;
			    			$xls->setCellValue("B" . $line, $p_value_start);
			    			$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    			$line++;
			    		}
			    		$line++; //leave one line between periods and table
			    	}
			    		$char_it = 65;
			    		
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['no']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['Epid']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['lastname']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['firstname']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['birthd']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['voluntaryworkers']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['users_working_hours_kntf']);
			    		
			    		$line++;
			    		
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['user_action']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['user_action_type']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['date_of_action']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['time_of_action']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['visit_time_duration']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['xt_time_count']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['driving_time_count']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['coordination_time_count']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['block_visitplan_cntf']);
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $report_language['documentation_time_count']);
			    		
			    		$line++;
			    		
			    		$row_nr = "1";
			    		//var_dump($reportdata['data']); exit;
			    		
			    		foreach($reportdata['data'] as $key_date => $row)
			    	{
			    		$char_it = 65;
			    			
			    		$xls->setCellValue(chr($char_it).$line, $row_nr);
			    		$char_it++;
			    	
			    		foreach($row as $col=>$value){
			    			
			    				if($col == "patient_actions")
			    				{
			    					$cntSapv = count($value);
			    	
			    					for($s = 0; $s <= $cntSapv; $s++)
			    					{
			    						$char_it = 71;
			    						$countedSapvCells = count($value[$s]);
			    						$sc = 1;
			    						foreach($value[$s] as $keyCell => $valCell)
			    						{
			    							$xls->setCellValue(chr($char_it) . $line, $valCell);
			    	
			    							if($sc == $countedSapvCells && $s != ($cntSapv - 1))
			    							{
			    								$line++;
			    							}
			    							$sc++;
			    							$char_it++;
			    						}
			    					}
			    				}
			    				else
			    				{
			    					$xls->setCellValue(chr($char_it) . $line, $value);			    					
			    					$char_it++;
			    				}
			    			}
			    	
			    			$line++;
			    			$row_nr++;
			    		}
			    		break;
			    		
			    		case "182":
			    		
			    			$line= 1;
			    			$report_language = $this->view->translate($report_name.'_lang');

			    			$translated_report_name = $report_language[$report_name];
			    			$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    		
			    			$line++;
			    		
			    			if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    			{
			    				$xls->setCellValue("A".$line, $report_language['reportperiods']);
			    				$xls->setCellValue("B".$line, $report_language['rfrom']);
			    				$xls->setCellValue("C".$line, $report_language['rtill']);
			    				$line++; //next line
			    		
			    				foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    				{
			    					$cp = 1;
			    					$xls->setCellValue("B" . $line, $p_value_start);
			    					$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    					$line++;
			    				}
			    				$line++; //leave one line between periods and table
			    			}
			    			$char_it = 65;
			    			 
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['no']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['epid']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['surname']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['firstname']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['birthd']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['users_working_hours_kntf']);
			    			 
			    			$line++;
			    			 
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['user_action']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['user_action_type']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['date_of_action']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['time_of_action']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['visit_time_duration']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['xt_time_count']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['driving_time_count']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['coordination_time_count']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['coordination_ve_time_count']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['coordination_vo_time_count']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['block_visitplan_cntf']);
			    			$char_it++;
			    			$xls->setCellValue(chr($char_it) . $line, $report_language['documentation_time_count']);
			    			 
			    			$line++;
			    			 
			    			$row_nr = "1";
			    			//var_dump($reportdata['data']); exit;
			    			 
			    			foreach($reportdata['data'] as $key_date => $row)
			    			{
			    				$char_it = 65;
			    		
			    				$xls->setCellValue(chr($char_it).$line, $row_nr);
			    				$char_it++;
			    		
			    				foreach($row as $col=>$value){
			    		
			    					if($col == "patient_actions")
			    					{
			    						$cntSapv = count($value);
			    		
			    						for($s = 0; $s <= $cntSapv; $s++)
			    						{
			    							$char_it = 70;
			    							$countedSapvCells = count($value[$s]);
			    							$sc = 1;
			    							foreach($value[$s] as $keyCell => $valCell)
			    							{
			    								$xls->setCellValue(chr($char_it) . $line, $valCell);
			    		
			    								if($sc == $countedSapvCells && $s != ($cntSapv - 1))
			    								{
			    									$line++;
			    								}
			    								$sc++;
			    								$char_it++;
			    							}
			    						}
			    					}
			    					else
			    					{
			    						$xls->setCellValue(chr($char_it) . $line, $value);
			    						$char_it++;
			    					}
			    				}
			    		
			    				$line++;
			    				$row_nr++;
			    			}
			    			break;
			
			    	case '164':
			    	$line= 1;
			    	$translated_report_name = $this->view->translate($report_name);
			    	$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    	
			    	$line++;
			    	
			    	
					if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    	{
			    		$xls->setCellValue("A".$line, $this->view->translate('reportperiods'));
			    		$xls->setCellValue("B".$line, $this->view->translate('rfrom'));
			    		$xls->setCellValue("C".$line, $this->view->translate('rtill'));
			    		$line++; //next line
			    		 
			    		foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    		{
			    			$cp = 1;
			    			$xls->setCellValue("B" . $line, $p_value_start);
			    			$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    			$line++;
			    		}
			    		$line++; //leave one line between periods and table
			    	}
			    		$char_it = 65;
			    		
			    		$xls->setCellValue(chr($char_it) . $line, $this->view->translate('no'));
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $this->view->translate('lastname'));
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $this->view->translate('firstname'));
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $this->view->translate('activities_and_training'));
			    					    		
			    		$line++;
			    		
			    		$xls->setCellValue(chr($char_it) . $line, $this->view->translate('date'));
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $this->view->translate('vw_activity_duration'));
			    		$char_it++;
			    		$xls->setCellValue(chr($char_it) . $line, $this->view->translate('name'));
			    					    		 
			    		$line++;
			    		 
			    		$row_nr = "1";

			    		foreach ($reportdata['data'] as $key => $row) {
			    			$char_it = 65;
			    			
			    			$xls->setCellValue(chr($char_it).$line, $row_nr);
			    			$char_it++;
			    		
			    			foreach ($row as $field => $value) {
			    				if ($field == "activities") {
			    					$cntSapv = count($value);
			    		
			    					for ($s = 0; $s <= $cntSapv; $s ++) {
			    							$char_it = 68;
			    							$countedSapvCells = count($value[$s]);
			    							$sc = 1;
			    							foreach ($value[$s] as $keyCell => $valCell) {
			    								$xls->setCellValue(chr($char_it) . $line, $valCell);
			    								
			    								if($sc == $countedSapvCells && $s != ($cntSapv - 1))
			    								{
			    									$line++;
			    								}
			    								$sc++;
			    								$char_it++;
			    							}
			    						}
			    					} else {
			    						$xls->setCellValue(chr($char_it) . $line, $value);			    					
			    						$char_it++;
			    					}
			    				}
			    		
			    				$line++;
			    				$row_nr++;
			    			}
			    		
			    			break;

			    			case '180':
			    				$line= 1;
			    				$report_language = $this->view->translate($report_name.'_lang');
			    				
			    				$translated_report_name = $report_language[$report_name];
			    				// 			        $xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($this->view->translate($report_name)).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    				$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    				$line++;
			    			
			    				if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    				{
			    					$xls->setCellValue("A".$line, $report_language['reportperiods']);
			    					$xls->setCellValue("B".$line, $report_language['rfrom']);
			    					$xls->setCellValue("C".$line, $report_language['rtill']);
			    					$line++; //next line
			    					 
			    					foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    					{
			    						$cp = 1;
			    						$xls->setCellValue("B" . $line, $p_value_start);
			    						$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    						$line++;
			    					}
			    					$line++; //leave one line between periods and table
			    				}
			    				 
			    				$char_it = 65;
			    				 
			    				$xls->setCellValue(chr($char_it). $line, $report_language['no']);
			    				$char_it++;
			    				$xls->setCellValue(chr($char_it). $line, $report_language['vw_lastname']);
			    				$char_it++;
			    				$xls->setCellValue(chr($char_it). $line, $report_language['vw_firstname']);
			    				$char_it++;
			    				$xls->setCellValue(chr($char_it). $line, $report_language["Epid"]);
			    				$char_it++;
			    				$xls->setCellValue(chr($char_it). $line, $report_language["lastname"]);
			    				$char_it++;
			    				$xls->setCellValue(chr($char_it). $line, $report_language["firstname"]);
			    				$char_it++;
			    				$xls->setCellValue(chr($char_it). $line, $report_language['visiting_day']);
			    				$char_it++;
			    				$xls->setCellValue(chr($char_it). $line, $report_language['duration']);
			    				$char_it++;
			    				$xls->setCellValue(chr($char_it). $line, $report_language['visit_reason']);
			    				$char_it++;
			    				$xls->setCellValue(chr($char_it). $line, $report_language['driving_time_count']);
			    				 
			    				$line++;
			    				 
			    				$total_visits = 0;
			    				$total_visit_time = 0;
			    				$total_driving_time = 0;
			    				 
			    				$row_nr = 1;
			    				foreach($reportdata['data'] as $key_datevw => $rowvw)
			    				{
			    					//print_r($reportdata['data']); exit;
			    			
			    			
			    					 
			    					foreach($rowvw['visits'] as $col=>$value)
			    					{
			    						if(isset($value['summ']))
			    						{
			    							/*
			    							 $char_it = 65;
			    							 $excel->getActiveSheet()
			    							 ->getStyle('A'.$line.':J'.$line)
			    							 ->applyFromArray(
			    							 array(
			    							 'fill' => array(
			    							 'type' => PHPExcel_Style_Fill::FILL_SOLID,
			    							 'color' => array('rgb' => 'CCCCCC')
			    							 )
			    							 )
			    							 );
			    							 $xls->setCellValue(chr($char_it).$line, 'SUMME Besuche: '.$value['summ']['number_of_visits']);
			    							 $char_it = 72;
			    							 $xls->setCellValue(chr($char_it).$line, 'SUMME: '.$value['summ']['visit_time_sum']);
			    							 $char_it = 74;
			    							 $xls->setCellValue(chr($char_it).$line, 'SUMME: '.$value['summ']['driving_time_sum']);
			    							 $row_nr = 1;
			    							 $line++;
			    							 */
			    						}
			    						else
			    						{
			    							$char_it = 65;
			    							$xls->setCellValue(chr($char_it).$line, $row_nr);
			    							$char_it++;
			    							$xls->setCellValue(chr($char_it).$line, $rowvw['vw_lastname']);
			    							$char_it++;
			    							$xls->setCellValue(chr($char_it).$line, $rowvw['vw_firstname']);
			    							$char_it++;
			    							$xls->setCellValue(chr($char_it).$line, $value['epid']);
			    							$char_it++;
			    							$xls->setCellValue(chr($char_it).$line, $value['pat_lastname']);
			    							$char_it++;
			    							$xls->setCellValue(chr($char_it).$line, $value['pat_firstname']);
			    							$char_it++;
			    							$xls->setCellValue(chr($char_it).$line, date('d.m.Y', strtotime($value['visit_date'])));
			    							$char_it++;
			    							$xls->setCellValue(chr($char_it).$line, ($value['visit_time_count'] != 0 ? $value['visit_time_count'] : 0));
			    							$char_it++;
			    							$xls->setCellValue(chr($char_it).$line, $value['visit_reason']);
			    							$char_it++;
			    							$xls->setCellValue(chr($char_it).$line, ($value['driving_time_count'] != 0 ? $value['driving_time_count'] : 0));
			    							$row_nr++;
			    							$line++;
			    						}
			    					}
			    					$char_it = 65;
			    					$excel->getActiveSheet()
			    					->getStyle('A'.$line.':J'.$line)
			    					->applyFromArray(
			    							array(
			    									'fill' => array(
			    											'type' => PHPExcel_Style_Fill::FILL_SOLID,
			    											'color' => array('rgb' => 'EEEEEE')
			    									)
			    							)
			    							);
			    					$xls->setCellValue(chr($char_it).$line, $report_language['sum'].' Besuche: '.$rowvw['summ']['number_of_visits']);
			    					$char_it = 72;
			    					$xls->setCellValue(chr($char_it).$line, $report_language['sum'].': '.$rowvw['summ']['visit_time_sum']);
			    					$char_it = 74;
			    					$xls->setCellValue(chr($char_it).$line, $report_language['sum'].': '.$rowvw['summ']['driving_time_sum']);
			    					 
			    					$total_visits += $rowvw['summ']['number_of_visits'];
			    					$total_visit_time += $rowvw['summ']['visit_time_sum'];
			    					$total_driving_time += $rowvw['summ']['driving_time_sum'];
			    			
			    					$char_it = 65;
			    					$line++;
			    					$row_nr = 1;
			    				}
			    			
			    				$xls->setCellValue(chr($char_it).$line, $report_language['total_visits'].': '.$total_visits);
			    				$char_it = 72;
			    				$xls->setCellValue(chr($char_it).$line, $report_language['sum'].': '.$total_visit_time);
			    				$char_it = 74;
			    				$xls->setCellValue(chr($char_it).$line, $report_language['sum'].': '.$total_driving_time);
			    				 
			    			
			    				break;
			    				
			    				case "35":
			    					 
			    					$line= 1;
			    					$report_language = $this->view->translate($report_name.'_lang');
			    				
			    					$translated_report_name = $report_language[$report_name];
			    					// 			        $xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($report_language[$report_name]).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    					$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    					$line++;
			    				
			    					if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    					{
			    						$xls->setCellValue("A".$line, $report_language['reportperiods']);
			    						$xls->setCellValue("B".$line, $report_language['rfrom']);
			    						$xls->setCellValue("C".$line, $report_language['rtill']);
			    						$line++; //next line
			    						 
			    						foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    						{
			    							$cp = 1;
			    							$xls->setCellValue("B" . $line, $p_value_start);
			    							$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    							$line++;
			    						}
			    						$line++; //leave one line between periods and table
			    					}
			    				
			    					$char_it = 65;
			    					 
			    					$xls->setCellValue(chr($char_it). $line, $report_language['no']);
			    					 
			    					foreach($columns as $column)
			    					{
			    						$char_it++;
			    						$xls->setCellValue(chr($char_it). $line, $report_language[$column['column_name']]);
			    					}
			    					 
			    					$line++;
			    					 
			    					$char_it = 71;
			    					$xls->setCellValue(chr($char_it). $line, $report_language['voluntaryworker']);
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it). $line, $report_language['beginvisit']);
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it). $line, $report_language['endvisit']);
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it). $line, $report_language['duration']);
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it). $line,  $report_language['distance']);
			    					 
			    					$char_it = 65;
			    					$line++;
			    					 
			    					$i = 0;
			    					foreach($reportdata['data'] as $key => $row)
			    					{
			    						$i++;
			    						$xls->setCellValue(chr($char_it). $line, $i);
			    						$char_it++;
			    				
			    						foreach($row as $field => $value)
			    						{
			    							if($field == "visits")
			    							{
			    								$cntSapv = count($value);
			    								 
			    								for($s = 0; $s <= $cntSapv; $s++)
			    								{
			    									$char_it = 71;
			    									$countedSapvCells = count($value[$s]);
			    									$sc = 1;
			    									foreach($value[$s] as $keyCell => $valCell)
			    									{
			    										$xls->setCellValue(chr($char_it). $line, $valCell);
			    											
			    										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
			    										{
			    											$line++;
			    										}
			    										$sc++;
			    										$char_it++;
			    									}
			    								}
			    							}
			    							else
			    							{
			    								$xls->setCellValue(chr($char_it). $line, $value);
			    								$char_it++;
			    							}
			    						}
			    						$char_it = 65;
			    						$line++;
			    					}
			    					break;
			    				
			    				case "183":
			    				
			    					$line= 1;
			    					$report_language = $this->view->translate($report_name.'_lang');
			    				 
			    					$translated_report_name = $report_language[$report_name];
			    					// 			        $xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($report_language[$report_name]).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    					$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    					$line++;
			    			
			    					if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    					{
			    						$xls->setCellValue("A".$line, $report_language['reportperiods']);
			    						$xls->setCellValue("B".$line, $report_language['rfrom']);
			    						$xls->setCellValue("C".$line, $report_language['rtill']);
			    						$line++; //next line
			    					 
			    						foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    						{
			    							$cp = 1;
			    							$xls->setCellValue("B" . $line, $p_value_start);
			    							$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    							$line++;
			    						}
			    						$line++; //leave one line between periods and table
			    					}
			    				 
			    					$char_it = 65;
			    				
			    					$xls->setCellValue(chr($char_it). $line, $report_language['no']);
			    				
			    					foreach($columns as $column)
			    					{
			    						$char_it++;
			    						$xls->setCellValue(chr($char_it). $line, $report_language[$column['column_name']]);
			    					}
			    				
			    					$line++;
			    				
			    					$char_it = 71;
			    					$xls->setCellValue(chr($char_it). $line, $report_language['voluntaryworker']);
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it). $line, $report_language['beginvisit']);
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it). $line, $report_language['endvisit']);
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it). $line, $report_language['duration']);
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it). $line,  $report_language['distance']);
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it). $line,  $report_language['driving_time_count']);
			    					$char_it++;
			    					$xls->setCellValue(chr($char_it). $line,  $report_language['visit_reason']);
			    				
			    					$char_it = 65;
			    					$line++;
			    				
			    					$i = 0;
			    					foreach($reportdata['data'] as $key => $row)
			    					{
			    						$i++;
			    						$xls->setCellValue(chr($char_it). $line, $i);
			    						$char_it++;
			    					
			    						foreach($row as $field => $value)
			    						{
			    							if($field == "visits")
			    							{
			    								$cntSapv = count($value);
			    				
			    								for($s = 0; $s <= $cntSapv; $s++)			    							
			    								{
			    									$char_it = 71;
			    									$countedSapvCells = count($value[$s]);
			    									$sc = 1;
			    									foreach($value[$s] as $keyCell => $valCell)
			    									{
			    										$xls->setCellValue(chr($char_it). $line, $valCell);
			    												    				
			    										if($sc == $countedSapvCells && $s != ($cntSapv - 1))
			    										{
			    											$line++;
			    										}
			    										$sc++;
			    										$char_it++;
			    									}
			    								}
			    							}
			    							else
			    							{
			    								$xls->setCellValue(chr($char_it). $line, $value);
			    								$char_it++;
			    							}
			    						}
			    						$char_it = 65;
			    						$line++;
			    					}
			    					$char_it = 65;
			    					$xls->setCellValue(chr($char_it). $line, $this->view->translate('average_travel_time'));
			    					$char_it = 76;
			    					$xls->setCellValue(chr($char_it). $line, $reportdata['average_driving_time']);			    					
			    					break;
			    								    			
			    					case "184":
			    						 
			    						$line= 1;
			    						$report_language = $this->view->translate($report_name.'_lang');
			    					
			    						$translated_report_name = $report_language[$report_name];
			    						// 			        $xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($report_language[$report_name]).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    						$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    						$line++;
			    						
			    						if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    						{
			    							$xls->setCellValue("A".$line, $report_language['reportperiods']);
			    							$xls->setCellValue("B".$line, $report_language['rfrom']);
			    							$xls->setCellValue("C".$line, $report_language['rtill']);
			    							$line++; //next line
			    							 
			    							foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    							{
			    								$cp = 1;
			    								$xls->setCellValue("B" . $line, $p_value_start);
			    								$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    								$line++;
			    							}
			    							$line++; //leave one line between periods and table
			    						}
			    							
			    						$xls->setCellValue("A" . $line, $report_language['no']);
			    						
			    						foreach($columns as $k=>$column)
			    						{
			    							//$xls->setCellValue($k. $line, utf8_decode($this->view->translate($column['column_name'])));
			    							$xls->setCellValue($k. $line, $report_language[$column['column_name']]);
			    						}
			    						$line++;
			    						
			    						
			    						$row_nr = "1";
			    							
			    						foreach($reportdata['data'] as $key_date => $row)
			    						{
			    							$char_it = 65;
			    								
			    							$xls->setCellValue(chr($char_it).$line, $row_nr);
			    							$xls->getStyle(chr($char_it).$line)->getAlignment()->setWrapText(true);
			    						
			    							foreach($row as $col=>$value){
			    								if($col == 'alter')
			    								{
			    									$value .= " Jahre";
			    								}
			    								 
			    								if( $col=="description" && (is_array($value) && sizeof($value) > 0))
			    								{
			    									$value = implode(", ",$value);
			    								}
			    								 
			    								//       			            $value = str_replace("<br />", "\n", $value);
			    								$value = preg_replace('/<\s*br\s*\/\s*>/i', "\n", $value);
			    								$value = str_replace("<hr/>", "\n", $value);
			    									
			    								//							$value = html_entity_encode($value, ENT_NOQUOTES);
			    									
			    								$value = trim($value);
			    								 
			    								if(strpos($value,"=") === 0){
			    									$value = "'".$value ;
			    								}
			    								 
			    								$xls->setCellValue(chr($char_it+1). $line, $value);
			    								$char_it++;
			    							}
			    							$line++;
			    							$row_nr++;
			    						}
			    						 
			    						break;
			    						
			    						case "190":
			    						
			    							$line= 1;
			    							$report_language = $this->view->translate($report_name.'_lang');
			    						
			    							$translated_report_name = $report_language[$report_name];
			    							// 			        $xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($report_language[$report_name]).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    							$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    							$line++;
			    							 
			    							if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    							{
			    								$xls->setCellValue("A".$line, $report_language['reportperiods']);
			    								$xls->setCellValue("B".$line, $report_language['rfrom']);
			    								$xls->setCellValue("C".$line, $report_language['rtill']);
			    								$line++; //next line
			    									
			    								foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    								{
			    									$cp = 1;
			    									$xls->setCellValue("B" . $line, $p_value_start);
			    									$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    									$line++;
			    								}
			    								$line++; //leave one line between periods and table
			    							}
			    						
			    							$xls->setCellValue("A" . $line, $report_language['no']);
			    							 
			    							foreach($columns as $k=>$column)
			    							{
			    								//$xls->setCellValue($k. $line, utf8_decode($this->view->translate($column['column_name'])));
			    								$xls->setCellValue($k. $line, $report_language[$column['column_name']]);
			    							}
			    							$line++;
			    							 
			    							 
			    							$row_nr = "1";
			    						
			    							foreach($reportdata['data'] as $key_date => $row)
			    							{
			    								$char_it = 65;
			    									
			    								$xls->setCellValue(chr($char_it).$line, $row_nr);
			    								$xls->getStyle(chr($char_it).$line)->getAlignment()->setWrapText(true);
			    								 
			    								foreach($row as $col=>$value){
			    									if($col == 'alter')
			    									{
			    										$value .= " Jahre";
			    									}
			    						
			    									if( $col=="description" && (is_array($value) && sizeof($value) > 0))
			    									{
			    										$value = implode(", ",$value);
			    									}
			    						
			    									//       			            $value = str_replace("<br />", "\n", $value);
			    									$value = preg_replace('/<\s*br\s*\/\s*>/i', "\n", $value);
			    									$value = str_replace("<hr/>", "\n", $value);
			    						
			    									//							$value = html_entity_encode($value, ENT_NOQUOTES);
			    						
			    									$value = trim($value);
			    						
			    									if(strpos($value,"=") === 0){
			    										$value = "'".$value ;
			    									}
			    						
			    									$xls->setCellValue(chr($char_it+1). $line, $value);
			    									$char_it++;
			    								}
			    								$line++;
			    								$row_nr++;
			    							}
			    						
			    							break;
			    							
			    							case "191":
			    								 
			    								$line= 1;
			    								$report_language = $this->view->translate($report_name.'_lang');
			    								 
			    								$translated_report_name = $report_language[$report_name];
			    								// 			        $xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($report_language[$report_name]).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    								$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    								$line++;
			    								 
			    								if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    								{
			    									$xls->setCellValue("A".$line, $report_language['reportperiods']);
			    									$xls->setCellValue("B".$line, $report_language['rfrom']);
			    									$xls->setCellValue("C".$line, $report_language['rtill']);
			    									$line++; //next line
			    							
			    									foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    									{
			    										$cp = 1;
			    										$xls->setCellValue("B" . $line, $p_value_start);
			    										$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    										$line++;
			    									}
			    									$line++; //leave one line between periods and table
			    								}
			    								 
			    								$char_it = 65;
			    								 
			    								$xls->setCellValue(chr($char_it). $line, $report_language['no']);
			    								 
			    								foreach($columns as $column)
			    								{
			    									$char_it++;
			    									$xls->setCellValue(chr($char_it). $line, $report_language[$column['column_name']]);
			    								}
			    								 
			    								$line++;
			    								 
			    								$char_it = 67;
			    								$xls->setCellValue(chr($char_it). $line, $report_language['beginvisit']);
			    								$char_it++;
			    								$xls->setCellValue(chr($char_it). $line, $report_language['endvisit']);
			    								$char_it++;
			    								$xls->setCellValue(chr($char_it). $line, $report_language['duration']);
			    								$char_it++;
			    								$xls->setCellValue(chr($char_it). $line, $report_language['duration_nightshift']);
			    								$char_it++;
			    								$xls->setCellValue(chr($char_it). $line,  $report_language['distance']);
			    								$char_it++;
			    								$xls->setCellValue(chr($char_it). $line,  $report_language['visit_reason']);
			    								 
			    								$char_it = 65;
			    								$line++;
			    								 
			    								$i = 0;
			    								foreach($reportdata['data'] as $key => $row)
			    								{
			    									$i++;
			    									$xls->setCellValue(chr($char_it). $line, $i);
			    									$char_it++;
			    									 
			    									foreach($row as $field => $value)
			    									{
			    										if($field == "visits")
			    										{
			    											$cntSapv = count($value);
			    							
			    											for($s = 0; $s <= $cntSapv; $s++)
			    											{
			    												$char_it = 67;
			    												$countedSapvCells = count($value[$s]);
			    												$sc = 1;
			    												foreach($value[$s] as $keyCell => $valCell)
			    												{
			    													$xls->setCellValue(chr($char_it). $line, $valCell);
			    							
			    													if($sc == $countedSapvCells && $s != ($cntSapv - 1))
			    													{
			    														$line++;
			    													}
			    													$sc++;
			    													$char_it++;
			    												}
			    											}
			    										}
			    										else
			    										{
			    											$xls->setCellValue(chr($char_it). $line, $value);
			    											$char_it++;
			    										}
			    									}
			    									$char_it = 65;
			    									$line++;
			    								}
			    								break;
			    								
			    								case "3":
			    									 
			    									$line= 1;
			    									$report_language = $this->view->translate($report_name.'_lang');
			    									 
			    									$translated_report_name = $report_language[$report_name];
			    									// 			        $xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($report_language[$report_name]).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    									$xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    									$line++;
			    										
			    									if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
			    									{
			    										$xls->setCellValue("A".$line, $this->view->translate('reportperiods'));
			    										$xls->setCellValue("B".$line, $this->view->translate('rfrom'));
			    										$xls->setCellValue("C".$line, $this->view->translate('rtill'));
			    										$line++; //next line
			    								
			    										foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
			    										{
			    											$cp = 1;
			    											$xls->setCellValue("B" . $line, $p_value_start);
			    											$xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
			    											$line++;
			    										}
			    										$line++; //leave one line between periods and table
			    									}
			    									 
			    									$xls->setCellValue("A" . $line, $report_language['no']);
			    										
			    									foreach($columns as $k=>$column)
			    									{
			    										//$xls->setCellValue($k. $line, utf8_decode($this->view->translate($column['column_name'])));
			    										$xls->setCellValue($k. $line, $report_language[$column['column_name']]);
			    									}
			    									$line++;
			    										
			    										
			    									$row_nr = "1";
			    									 
			    									foreach($reportdata['data'] as $key_date => $row)
			    									{
			    										$char_it = 65;
			    								
			    										$xls->setCellValue(chr($char_it).$line, $row_nr);
			    										$xls->getStyle(chr($char_it).$line)->getAlignment()->setWrapText(true);
			    								
			    										foreach($row as $col=>$value){
			    											if($col == 'alter')
			    											{
			    												$value .= " Jahre";
			    											}
			    											 
			    											if( $col=="description" && (is_array($value) && sizeof($value) > 0))
			    											{
			    												$value = implode(", ",$value);
			    											}
			    											 
			    											//       			            $value = str_replace("<br />", "\n", $value);
			    											$value = preg_replace('/<\s*br\s*\/\s*>/i', "\n", $value);
			    											$value = str_replace("<hr/>", "\n", $value);
			    											 
			    											//							$value = html_entity_encode($value, ENT_NOQUOTES);
			    											 
			    											$value = trim($value);
			    											 
			    											if(strpos($value,"=") === 0){
			    												$value = "'".$value ;
			    											}
			    											 
			    											$xls->setCellValue(chr($char_it+1). $line, $value);
			    											$char_it++;
			    										}
			    										$line++;
			    										$row_nr++;
			    									}
			    									 
			    									break;
			
			default:
			    
			        $line= 1;
                    $translated_report_name = $this->view->translate($report_name);
			        //$xls->setCellValue("A".$line, 'Name des Berichts: '.utf8_decode($this->view->translate($report_name)).' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
                    //$xls->setCellValue("A".$line, 'Name des Berichts: ' . utf8_decode($this->view->translate($report_name)))->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			         $xls->setCellValue("A".$line, 'Name des Berichts: '.$translated_report_name.' ' )->mergeCells('A'.$line.':'.chr($columns_nr+65).$line.'');
			    
    			    $line++;
    			    
    			    if($reportdata['header_data']['onlyactive'] == '0' && !empty($reportdata['header_data']['year']))
    			    {
    			        $xls->setCellValue("A".$line, $this->view->translate('reportperiods'));
    			        $xls->setCellValue("B".$line, $this->view->translate('rfrom'));
    			        $xls->setCellValue("C".$line, $this->view->translate('rtill'));
    			        $line++; //next line
    			
    			        foreach($reportdata['header_data']['start'] as $p_key => $p_value_start)
    			        {
    			            $cp = 1;
    			            $xls->setCellValue("B" . $line, $p_value_start);
    			            $xls->setCellValue("C" . $line, $reportdata['header_data']['end'][$p_key]);
    			            $line++;
    			        }
    			        $line++; //leave one line between periods and table
    			    }
    			    
    			    $xls->setCellValue("A" . $line, $this->view->translate('no'));

    			    foreach($columns as $k=>$column)
        			{
        			    //$xls->setCellValue($k. $line, utf8_decode($this->view->translate($column['column_name'])));
        			    $xls->setCellValue($k. $line, ($this->view->translate($column['column_name'])));
        			}
      			    $line++;

      			    	
      			    $row_nr = "1";
      			    
      			    foreach($reportdata['data'] as $key_date => $row)
      			    {
      			        $char_it = 65;
      			        
                        $xls->setCellValue(chr($char_it).$line, $row_nr);
                        $xls->getStyle(chr($char_it).$line)->getAlignment()->setWrapText(true);

      			        foreach($row as $col=>$value){
      			        	if($col == 'alter')
      			        	{
      			        		$value .= " Jahre";
      			        	}
      			            
      			            if( $col=="description" && (is_array($value) && sizeof($value) > 0))
      			            {
      			                $value = implode(", ",$value);
      			            }
      			            
//       			            $value = str_replace("<br />", "\n", $value);
      			            $value = preg_replace('/<\s*br\s*\/\s*>/i', "\n", $value);
							$value = str_replace("<hr/>", "\n", $value);
							
//							$value = html_entity_encode($value, ENT_NOQUOTES);
							
      			            $value = trim($value);
      			            
      			            if(strpos($value,"=") === 0){
								$value = "'".$value ;
      			            }
      			            
      			            $xls->setCellValue(chr($char_it+1). $line, $value);
          			        $char_it++;
      			        }
          			    $line++;
                        $row_nr++;
      			    }
			    
			    break;
			}
	
			$char_it = 66;
			switch($report) 
			{
				case '112':					
					$xls->setCellValue(chr($char_it). $line,$this->view->translate('Nr_dead_patients'));
					$xls->setCellValue(chr($char_it+1). $line,$reportdata['extra']['sum']);
				break;
			
				case '178':
					$xls->setCellValue(chr($char_it). $line,$this->view->translate('Nr_discharged_patients'));
					$xls->setCellValue(chr($char_it+1). $line,$reportdata['extra']['sum']);
				break;
					
				case '163':					
					$xls->setCellValue(chr($char_it). $line,$this->view->translate('Sum'));
					$xls->setCellValue(chr($char_it+2). $line,$reportdata['extra']['sum']);
					$xls->setCellValue(chr($char_it+3). $line,$reportdata['extra']['sum_driving']);
				break;
				case '22':
				case '23':					
					$xls->setCellValue(chr($char_it). $line,$this->view->translate('sum'));
					$xls->setCellValue(chr($char_it+1). $line,$reportdata['extra']['sum']);
				break;
			}
			
			$file = str_replace(" ", "_", $this->view->translate($report_name));
			$fileName = Pms_CommonData::normalizeString($file) . ".xls";
			
			// Redirect output to a client’s web browser (Excel5)
			header('Content-Type: application/vnd.ms-excel');
			header('Content-Disposition: attachment;filename='.$fileName);
			header('Cache-Control: max-age=0');
			$objWriter = PHPExcel_IOFactory::createWriter($excel, 'Excel5');
			$objWriter->save('php://output');
		}

		
		private function ministryTemplate($excel = false, $sheet = "1", $aditional_data = false)
		{
			if($excel)
			{
				$xls = $excel->getActiveSheet();

				//header
				//header-settings (cols and row height and settings)
				$col_range = range('A', 'T');
				$default_col_size = '18';
				$expected_data_days_rows = range('1', '177'); //last 2 rows have diferent behavior
				$expected_data_weeks_rows = range('1', '27'); //last 2 rows have diferent behavior

				foreach($col_range as $k_range => $v_range)
				{
					if($v_range == "E" || $v_range == "H")
					{
						$cut_size_by = "9";
					}
					else
					{
						$cut_size_by = "0";
					}

					$xls->getColumnDimension($v_range)->setWidth($default_col_size - $cut_size_by);
				}


				//autoheight for all rows -- not working..--need to investigate
//				foreach($xls->getRowDimensions() as $row)
//				{
//					$row->setRowHeight(-1);
//				}
				
				//manually set header rows height
				$xls->getRowDimension("1")->setRowHeight(25);
				$xls->getRowDimension("2")->setRowHeight(95);
				$xls->getRowDimension("3")->setRowHeight(25);
				$xls->getRowDimension("4")->setRowHeight(95);
				$xls->getRowDimension("5")->setRowHeight(35);
				$xls->getRowDimension("6")->setRowHeight(25);
				$xls->getRowDimension("7")->setRowHeight(85);

				//start adding header details
				$xls->setCellValue("A1", "PCT:");
				$xls->getStyle("A1")->getFont()->setBold(true)->setItalic(true)->setSize(18);
				$xls->getStyle("A1")->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				//$xls->getStyle("A1")->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)->setVertical(PHPExcel_Style_Alignment::VERTICAL_TOP);


				$xls->setCellValue("A3", "Kollektiv:"); //make it red!
				$xls->getStyle("A3")->getFont()->setBold(true)->setItalic(true)->setSize(14)->getColor()->setRGB("FF0000");
				$xls->getStyle("A3")->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);

				$xls->setCellValue("A4", "Erläuterung :"); //make it red!
				$xls->getStyle("A4")->getFont()->setBold(true)->setItalic(true)->setSize(12)->getColor()->setRGB("FF0000");
				$xls->getStyle("A4")->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT)->setVertical(PHPExcel_Style_Alignment::VERTICAL_TOP);

				$xls->setCellValue("A5", "Dok.system:\n bitte angeben");
				$xls->getStyle("A5")->getFont()->setBold(true)->setItalic(true)->setSize(14);

				$xls->setCellValue("B1", $aditional_data['client_string'])->getStyle("B1")->getFont()->setSize(14);

				//report sheet title
				if($aditional_data)
				{
					$tokens = array('%start_day%', '%end_day%');
					$start = end($aditional_data['start']);
					$end = end($aditional_data['end']);
					$values = array(date('d.m.', strtotime($start)), date('d.m.Y', strtotime($end)));
					$title = str_replace($tokens, $values, $this->view->translate("ministry_report_sheet_" . $sheet . "_title"));
				}
				else
				{
					//fallback mode
					$tokens = array('%start_day%', '%end_day%');
					$values = array("", "");
					$title = str_replace($tokens, $values, $this->view->translate("ministry_report_sheet_" . $sheet . "_title"));
				}
				
				$xls->setCellValue("B3", $title);
				$xls->getStyle("B3")->getFont()->setBold(true)->setSize(14);
				//report sheet description
				$xls->mergeCells("B4:J4");
				$xls->setCellValue("B4", $this->view->translate('ministry_report_sheet_' . $sheet . '_description'));

				$xls->getStyle("B4")->getFont()->setBold(true)->setItalic(false)->setSize(12);
				$xls->getStyle("B4")->getAlignment()->setWrapText(true);

				$xls->mergeCells("B6:D6");
				$xls->setCellValue("B6", "Keine Mehrfachnennung von Patienten in Spalten B, C und D !");
				$xls->getStyle("B6")->getFont()->setBold(true)->setItalic(false)->setSize(12);

				if($aditional_data)
				{
					$year = end($aditional_data['year']);
				}
				else
				{
					//fallback mode
					$year = date('Y', time());
				}
				
				$xls->setCellValue("K2", "Erlöse ".$year.":");
				$xls->getStyle("K1")->getFont()->setBold(true)->setItalic(false)->setSize(18);

				$xls->setCellValue("K3", "ausschließlich Erlöse, der in die Auswertung eingeschlossenen Patienten!");
				$xls->getStyle("K3")->getFont()->setBold(true)->setItalic(false)->setSize(12);

				$xls->mergeCells("K6:T6");
				$xls->setCellValue("K6", 'Felder K-T: "Hausbesuche", Koordination", " Beratungen" => auf "Summe Woche/PZ Gesamt" (Spalte J) bezogen');

				$xls->setCellValue("M2", "Euro");

				$xls->setCellValue("S2", "Erstberatungen:");

				//report columns
				foreach($col_range as $k_range => $v_range)
				{
					$xls->setCellValue($v_range . "7", $this->view->translate("ministry_report_column_" . $v_range));
					$xls->getStyle($v_range . "7")->getAlignment()->setWrapText(true);
				}


				$data_start_row = "8";
				//report default columns data
				foreach($expected_data_days_rows as $k_data => $v_data)
				{
					if($v_data < '176')
					{
						$xls->setCellValue("A" . ($data_start_row + $k_data), $v_data);
					}
					else if($v_data == "176")
					{
						$xls->setCellValue("A" . ($data_start_row + $k_data), "> " . ($v_data - 1));
					}
					else if($v_data == "177")
					{
						$xls->setCellValue("A" . ($data_start_row + $k_data), "GESAMT");
					}
					$xls->getRowDimension(($data_start_row + $k_data))->setRowHeight(25);
					$xls->getStyle("A" . ($data_start_row + $k_data))->getFont()->setBold(true)->setItalic(false)->setSize(14);
					$xls->getStyle("A" . ($data_start_row + $k_data))->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				}

				foreach($expected_data_weeks_rows as $k_data_week => $v_data_week)
				{
					if($v_data_week < "26")
					{
						$xls->setCellValue("F" . ($data_start_row + $k_data_week), $v_data_week . ". Wo");
					}
					else if($v_data_week == "26")
					{
						$xls->setCellValue("F" . ($data_start_row + $k_data_week), "> " . ($v_data_week - 1) . ". Wo");
					}
					else if($v_data_week == "27")
					{
						$xls->setCellValue("F" . ($data_start_row + $k_data_week), "GESAMT");
					}
					$xls->getStyle("F" . ($data_start_row + $k_data_week))->getFont()->setBold(true)->setItalic(false)->setSize(14);
					$xls->getStyle("F" . ($data_start_row + $k_data_week))->getAlignment()->setHorizontal(PHPExcel_Style_Alignment::HORIZONTAL_RIGHT);
				}
			} //end of $excel
		}//end of ministryTemplate

		private function loadsheetdata($excel, $data = false, $extra = false)
		{
//			print_r("data\n");
//			print_r($data);
//			print_r("extra\n");
//			print_r($extra);
//			exit;
			//data generation starts from row:8 (arrays with data($data, $extra) have no 0 key!)
			$data_start_row = "7";

			if($excel && $data)
			{
				$xls = $excel->getActiveSheet();

				foreach($data['days_values'] as $k_data => $v_data)
				{
					$day_row = ($data_start_row + $k_data);
					$xls->setCellValue("B" . $day_row, $v_data['patients']);
				}

				foreach($data['weeks_values'] as $k_data_w => $v_data_w)
				{
					$week_row = ($data_start_row + $k_data_w);
					$xls->setCellValue("G" . $week_row, $v_data_w['patients']);

					$xls->setCellValue("K" . $week_row, $v_data_w['home_visit_total_calculated']); //Hausbesuche - calculated
					$xls->setCellValue("N" . $week_row, $v_data_w['home_visit_total_noncalculated']); //Hausbesuche - non-calculated

					$xls->setCellValue("Q" . $week_row, $v_data_w['koordination_total_calculated']); //FolgeKOORDINATION - calculated
					$xls->setCellValue("R" . $week_row, $v_data_w['koordination_total_noncalculated']); //FolgeKOORDINATION - non-calculated

					$xls->setCellValue("S" . $week_row, $v_data_w['beratung_total_calculated']); //FolgeBERATUNGEN - calculated
					$xls->setCellValue("T" . $week_row, $v_data_w['beratung_total_noncalculated']); //FolgeBERATUNGEN - non-calculated
				}

				if($extra)
				{
					$day_row++;
					$xls->setCellValue("B" . $day_row, $extra['total_days_patients']); //total patients for days

					$week_row++;
					$xls->setCellValue("G" . $week_row, $extra['total_weeks_patients']);

					$xls->setCellValue("K" . $week_row, $extra['home_visit_grandtotal_calculated']); //Hausbesuche - calculated
					$xls->setCellValue("N" . $week_row, $extra['home_visit_grandtotal_noncalculated']); //Hausbesuche - non-calculated

					$xls->setCellValue("Q" . $week_row, $extra['koordination_grandtotal_calculated']); //FolgeKOORDINATION - calculated
					$xls->setCellValue("R" . $week_row, $extra['koordination_grandtotal_noncalculated']); //FolgeKOORDINATION - non-calculated

					$xls->setCellValue("S" . $week_row, $extra['beratung_grandtotal_calculated']); //FolgeBERATUNGEN - calculated
					$xls->setCellValue("T" . $week_row, $extra['beratung_grandtotal_noncalculated']); //FolgeBERATUNGEN - non-calculated
				}
			}
		}

		//copy of second_patients_performance_overall
		private function patients_performance_overall($clientid, $ipids, $active_days, $set_ids, $flatrate, $flatrate_continued = false, $master_price_list, $patients_periods_days, $hospital_days = false, $sapv_days = false, $course_days = false, $contact_forms_days = false, $classification_data = false)
		{
			foreach($ipids as $k_ipid => $ipid)
			{
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $patients_periods_days[$ipid]))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}

					//initialize clasifizierung array -- check if curent day empty so we wont rewrite
					if(empty($clasifizierung[$ipid][$v_active_day]['home_visit']))
					{
						$clasifizierung[$ipid][$v_active_day]['home_visit'] = '0';
					}

					if(empty($clasifizierung[$ipid][$v_active_day]['beratung']))
					{
						$clasifizierung[$ipid][$v_active_day]['beratung'] = '0';
					}

					if(empty($clasifizierung[$ipid][$v_active_day]['koordination']))
					{
						$clasifizierung[$ipid][$v_active_day]['koordination'] = '0';
					}
				}

				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
					if(!in_array($k_course_date, $hospital_days[$ipid]))
					{
						foreach($v_course_details as $k_couse => $v_course)
						{
							if($v_course == 'U' && array_key_exists($k_course_date, $sapv_days[$ipid]) && in_array('1', $sapv_days[$ipid][$k_course_date]))
							{
								$clasifizierung[$ipid][$k_course_date]['beratung'] += 1;
							}
							else if($v_course == 'V' && array_key_exists($k_course_date, $sapv_days[$ipid]) && in_array('2', $sapv_days[$ipid][$k_course_date]))
							{
								$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
							}
						}
					}
				}

				$contact_forms_ids[$ipid][] = '999999999';
				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							$contact_forms_ids[$ipid][] = $v_cf['id'];
						}
					}
				}
				ksort($contact_forms_days[$ipid]);

				$set_one_ids = $set_ids['one'];
				$set_two_ids = $set_ids['two'];
				$set_three_ids = $set_ids['three'];
				$set_fourth_ids = $set_ids['fourth'];
				
				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data) && in_array($k_cf_day, $active_days_in_period[$ipid]))
						{
							if((in_array($v_cf['form_type'], $set_ids['fourth']) && $classification_data[$v_cf['id']]['intern'] == '0') || !in_array($v_cf['form_type'], $set_ids['fourth']))
							{
								$contact_forms_days_ids[$ipid][$k_cf_day][] = $v_cf['id'];
								$contact_forms2form_types[$ipid][$v_cf['id']][] = $v_cf['form_type'];
							}
						}
					}
				}
				
				if(empty($hospital_days[$ipid]))
				{
					$hospital_days[$ipid][] = "999999999999999999999999";
				}
				$patients_periods_days_no_h[$ipid] = array_diff($patients_periods_days[$ipid], $hospital_days[$ipid]);
				$patients_periods_days_no_h[$ipid] = array_values(array_unique($patients_periods_days_no_h[$ipid]));

				foreach($patients_periods_days_no_h[$ipid] as $k_period_day => $v_period_day)
				{
					$day_shortcuts[$ipid] = array();
					if(count($month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					$master_data[$ipid][$v_period_day] = array();

					//calculate set one form_type visits
					//first get flatrate exception and set shortcut

					$shortcut = '';
					$fl_continued = false;//curent day NOT in flatrate continued
					if($flatrate_continued && in_array($v_period_day, $flatrate_continued[$ipid]))
					{
						$fl_continued = true; //curent day is in flatrate continued
					}
					
					if((in_array($v_period_day, $flatrate[$ipid]) || $fl_continued === true) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut = '37b1';
						$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = $shortcut;
					}
					else if((!in_array($v_period_day, $flatrate[$ipid]) && $fl_continued === false) && array_key_exists($v_period_day, $contact_forms_days[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid])) //normal set conditions
					{

//					we have visits=> check if there are required visits for this action set
						$set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(count($set_one_result[$ipid]) != 0 && (in_array('3', $sapv_days[$ipid][$v_period_day]) || in_array('4', $sapv_days[$ipid][$v_period_day])))
						{
							$shortcut = '37b2';
						}
					}

					if(!empty($shortcut))
					{
						$day_shortcuts[$ipid][] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['shortcut'] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
						$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
						$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
					}

					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day

					if((!in_array($v_period_day, $flatrate[$ipid]) && $fl_continued === false) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 && in_array('1', $sapv_days[$ipid][$v_period_day]) )
						)
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf))
								{
									$shortcut = '';
									if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && empty($flatrate[$ipid]['pay_days']) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && (!in_array($v_period_day, $flatrate[$ipid]['pay_days']) && $fl_continued == false))
									{
										$shortcut = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_two_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										}
										else if($shortcut == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';

								if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && (!in_array($v_period_day, $flatrate[$ipid]['pay_days'])  && $fl_continued == false))
								{
									$shortcut = '37b5';
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && $v_day_course == 'U')
								{
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}
					}

					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day

					if((!in_array($v_period_day, $flatrate[$ipid]) && $fl_continued == false) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
						$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(
							(count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day]) || (count($set_ones_result[$ipid]) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day])
						)
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform))
								{
									$shortcut = '';

									if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && (!in_array($v_period_day, $flatrate[$ipid]['pay_days']) && $fl_continued == false))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids[$ipid]))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

								if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]))
								{
									if(in_array('4', $sapv_days[$ipid][$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate[$ipid]['pay_days']))
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number[$ipid] = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b7')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b7' || $shortcut == '37b8') && $v_day_course == 'V')
								{
									if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[$ipid][] = $week_number[$ipid];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
									else if($shortcut == '37b7')
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}


					//calculate set 4 (ISPC-241)
					$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if(count($set_fourth_result[$ipid]) != 0 && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] != '1')
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//U & V at the top
						//beratung
						if((!in_array($v_period_day, $flatrate[$ipid]) && $fl_continued == false) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								//check if there are 2 beratung change sapv in koord
								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && count($set_fourth_result[$ipid]) != 0 && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
								}

								if(is_numeric($k_cf) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1')
								{
									$shortcut = '';
									if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && empty($flatrate[$ipid]['pay_days']) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && (!in_array($v_period_day, $flatrate[$ipid]['pay_days']) && $fl_continued == false))
									{
										$shortcut = '37b5';
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5') //only b5 or b6
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b6' && $master_data[$v_period_day]['37b6']['qty'] < '2' && in_array($v_cf['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										}
										else if($shortcut == '37b5')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
								}
							}
						}

						//koordination
						$last_koord_days[$ipid] = end($last_koord_dates[$ipid]);
						if((!in_array($v_period_day, $flatrate[$ipid]) && $fl_continued == false) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2')
								{
									$shortcut = '';

									if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}
									
									
									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
										}
										$day_shortcuts[$ipid][] = $shortcut;
									}

									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;

										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_fourth_ids))
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7')
										{
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}

					if(array_key_exists($v_period_day, $sapv_days[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids))
							{
								if(in_array('4', $sapv_days[$ipid][$v_period_day]) || in_array('3', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								}
							}
							else
							{
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$ipid][$v_period_day]) &&
									(($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0' && $classification_data[$v_cf_day]['koordination'] == '0') && in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids))
								{
									if(in_array('1', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									}
									else if(in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									}
								}
							}
						}
					}
				}

				foreach($master_data[$ipid] as $k_day => $v_day_values)
				{
					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
					{
						$overall_shortcuts[$ipid][] = $k_shortcut;
						if($v_shortcut_values['qty'] > '0' && !empty($v_shortcut_values['qty']))
						{
							$overall_shortcuts_dates[$ipid][$k_day][] = $k_shortcut;
						}
					}

					if(count($v_day_values) > '0')
					{
						$days_products[$ipid][] = $k_day;
					}
				}

				//get days in which sapv is 3 or 4
				foreach($sapv_days[$ipid] as $ksapv_days => $vsapv_days)
				{
					if(in_array('3', $vsapv_days) || in_array('4', $vsapv_days))
					{
						$flatrate_sapv_days[$ipid][] = $ksapv_days;
					}
				}

				//return only the products which have more than 28 days from last billable product
				$pm = new PatientMaster();
								
				foreach($days_products[$ipid] as $key_day => $v_day)
				{
					if($key_day > '0')
					{
						$prod_gap[$ipid][$v_day] = $pm->getDaysInBetween($days_products[$ipid][($key_day - 1)], $v_day);
//						$prod_gap[$ipid][$v_day] = array_intersect($prod_gap[$ipid][$v_day], $active_days[$ipid], $flatrate_sapv_days[$ipid]);
//						$prod_gap[$ipid][$v_day] = array_intersect($prod_gap[$ipid][$v_day], $active_days[$ipid]);

						$prod_gap[$ipid][$v_day] = array_values(array_unique($prod_gap[$ipid][$v_day]));

						if(count($prod_gap[$ipid][$v_day]) >= '30')
						{
							$last_product_gap_days[$ipid][] = $v_day;
							$master_overall_data[$ipid]['shortcuts'][$v_day] = '37b1';
						}
					}
				}

//				if($_SERVER['REMOTE_ADDR'] = "10.0.0.12" && $flatrate_continued)
//				{
//					print_r("days_products\n");
//					print_r($days_products);
//
//					print_r("prod_gap\n");
//					print_r($prod_gap);
//					
//					print_r("last_product_gap_days\n");
//					print_r($last_product_gap_days);
//					
//					print_r("flatrate_continued\n");
//					print_r($flatrate_continued);
//					exit;
//				}
				
				//calculate ministry calculated/non-calculated visits
				foreach($clasifizierung[$ipid] as $k_s_day => $v_type_visits)
				{
					foreach($v_type_visits as $k_visit_type => $v_visit_ammount)
					{
						if($v_visit_ammount > '0')
						{
							if(in_array('37b1', $overall_shortcuts_dates[$ipid][$k_s_day]))
							{
								$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "0";
								$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = $v_visit_ammount;

								$all_visits_status[$ipid][$k_visit_type . "_total"]['calculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'];
								$all_visits_status[$ipid][$k_visit_type . "_total"]['noncalculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'];
							}

							if($k_visit_type == "home_visit")
							{
								//one per day only (calculated can be max 1 visit)
								if(in_array('37b2', $overall_shortcuts_dates[$ipid][$k_s_day]))
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "1";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = ($v_visit_ammount - 1);
								}
								else
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "0";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = $v_visit_ammount;
								}

								$all_visits_status[$ipid][$k_visit_type . "_total"]['calculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'];
								$all_visits_status[$ipid][$k_visit_type . "_total"]['noncalculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'];
							}

							if($k_visit_type == "beratung")
							{
								//one per day and one time only
								if(in_array('37b5', $overall_shortcuts_dates[$ipid][$k_s_day]))
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "1";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = ($v_visit_ammount - 1);
								}
								//can be max 2 per day
								else if(in_array('37b6', $overall_shortcuts_dates[$ipid][$k_s_day]))
								{
									if($v_visit_ammount >= '2')
									{
										$v_visit_ammount_limit = "2";
									}
									else
									{
										$v_visit_ammount_limit = "1";
									}

									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = $v_visit_ammount_limit;
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = ($v_visit_ammount - $v_visit_ammount_limit);
								}
								else
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "0";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = $v_visit_ammount;
								}

								$all_visits_status[$ipid][$k_visit_type . "_total"]['calculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'];
								$all_visits_status[$ipid][$k_visit_type . "_total"]['noncalculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'];
							}

							if($k_visit_type == "koordination")
							{
								//b7 one per day and one time only
								//b8 one per day and one per week
								if(in_array('37b7', $overall_shortcuts_dates[$ipid][$k_s_day]) || in_array('37b8', $overall_shortcuts_dates[$ipid][$k_s_day]))
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "1";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = ($v_visit_ammount - 1);
								}
								else
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "0";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = $v_visit_ammount;
								}

								$all_visits_status[$ipid][$k_visit_type . "_total"]['calculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'];
								$all_visits_status[$ipid][$k_visit_type . "_total"]['noncalculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'];
							}
						}
						else
						{
							$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "0";
							$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = "0";

							$all_visits_status[$ipid][$k_visit_type . "_total"]['calculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'];
							$all_visits_status[$ipid][$k_visit_type . "_total"]['noncalculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'];
						}
					}
				}

				//sum all totals arrays
				foreach($all_visits_status[$ipid] as $total_visit_type => $v_totals)
				{
					$all_calculated_visits[$ipid][$total_visit_type]['calculated'] = array_sum($v_totals['calculated']);
					$all_calculated_visits[$ipid][$total_visit_type]['noncalculated'] = array_sum($v_totals['noncalculated']);
				}

				$master_overall_data[$ipid]['shortcuts'] = array_values(array_unique($overall_shortcuts[$ipid]));
				$master_overall_data[$ipid]['shortcuts_dates'] = $overall_shortcuts_dates[$ipid];
				$master_overall_data[$ipid]['last_koord_dates'] = array_values(array_unique($last_koord_dates[$ipid]));
				$master_overall_data[$ipid]['days_products'] = array_values(array_unique($last_product_gap_days[$ipid]));
				$master_overall_data[$ipid]['clasifizierung'] = $clasifizierung[$ipid];
//				$master_overall_data[$ipid]['visit_status'] = $visits_status[$ipid];
//				$master_overall_data[$ipid]['all_visit_status'] = $all_visits_status[$ipid];
				$master_overall_data[$ipid]['all_visit_types_totals'] = $all_calculated_visits[$ipid];
			}

			if($_REQUEST['dbg_vis'] == "y" && $flatrate_continued)
			{
				print_r($master_data);
				exit;
			}
			if($_REQUEST['dbg_vis'] == "x" && $flatrate_continued)
			{
				print_r($overall_shortcuts_dates);
				exit;
			}
				
			if($_REQUEST['dbg_vis'] == "3" && $flatrate_continued)
			{
				print_r($all_visits_status);
				exit;
			}
			if($_REQUEST['dbg_vis'] == "2" && $flatrate_continued)
			{
				print_r($clasifizierung);
				exit;
			}
			if($_REQUEST['dbg_vis'] == "1" && $flatrate_continued)
			{
				var_dump($visits_status);
				exit;
			}
//			print_r($master_overall_data);
//			exit;
			return $master_overall_data;
		}
		
		//copy of second_patients_performance_overall
		private function patients_performance_overall_lag_bw_sapv($clientid, $ipids, $active_days, $set_ids, $flatrate, $flatrate_continued = false, $master_price_list, $patients_periods_days, $hospital_days = false, $sapv_days = false, $course_days = false, $contact_forms_days = false, $classification_data = false,$patient_discharge_dates = false,$exclude_after_discharge_overall=false)
		{
		    
			foreach($ipids as $k_ipid => $ipid)
			{
			    $lag_clasifizierung[$ipid] = array();
			    
				foreach($sapv_days[$ipid] as $k_s_day => $v_s_day)
				{
				    if(in_array($k_s_day, $patients_periods_days[$ipid]))
				    {
				        $sapv_days_in_period[$ipid][] = $k_s_day;
				    }
				}
			    
				foreach($active_days[$ipid] as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $patients_periods_days[$ipid]))
					{
						$active_days_in_period[$ipid][] = $v_active_day;
					}

					//initialize clasifizierung array -- check if curent day empty so we wont rewrite
					if(empty($clasifizierung[$ipid][$v_active_day]['home_visit']))
					{
						$clasifizierung[$ipid][$v_active_day]['home_visit'] = '0';
					}

					if(empty($clasifizierung[$ipid][$v_active_day]['beratung']))
					{
						$clasifizierung[$ipid][$v_active_day]['beratung'] = '0';
					}

					if(empty($clasifizierung[$ipid][$v_active_day]['koordination']))
					{
						$clasifizierung[$ipid][$v_active_day]['koordination'] = '0';
					}
				}
				
				foreach($course_days[$ipid] as $k_course_date => $v_course_details)
				{
					if(!in_array($k_course_date, $hospital_days[$ipid]))
					{
						foreach($v_course_details as $k_couse => $v_course)
						{
							if($v_course == 'U' && array_key_exists($k_course_date, $sapv_days[$ipid]) && in_array('1', $sapv_days[$ipid][$k_course_date]))
							{
								$clasifizierung[$ipid][$k_course_date]['beratung'] += 1;
								$lag_clasifizierung[$ipid]['all']['beratung'][] = $k_course_date;
							}
							else if($v_course == 'V' && array_key_exists($k_course_date, $sapv_days[$ipid]) && in_array('2', $sapv_days[$ipid][$k_course_date]))
							{
								$clasifizierung[$ipid][$k_course_date]['koordination'] += 1;
								$lag_clasifizierung[$ipid]['all']['koordination'][] = $k_course_date;
							}
						}
					}
				}
				$contact_forms_ids[$ipid][] = '999999999';
				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf))
						{
							$contact_forms_ids[$ipid][] = $v_cf['id'];
						}
					}
				}
				ksort($contact_forms_days[$ipid]);

				$set_one_ids = $set_ids['one'];
				$set_two_ids = $set_ids['two'];
				$set_three_ids = $set_ids['three'];
				$set_fourth_ids = $set_ids['fourth'];

				foreach($contact_forms_days[$ipid] as $k_cf_day => $v_cf_data)
				{
					foreach($v_cf_data as $k_cf => $v_cf)
					{
						if(is_numeric($k_cf) && array_key_exists($v_cf['id'], $classification_data) && in_array($k_cf_day, $active_days_in_period[$ipid])
						    
						    )
						{
							if((in_array($v_cf['form_type'], $set_ids['fourth']) && $classification_data[$v_cf['id']]['intern'] == '0') || !in_array($v_cf['form_type'], $set_ids['fourth']))
							{
								$contact_forms_days_ids[$ipid][$k_cf_day][] = $v_cf['id'];
								$contact_forms2form_types[$ipid][$v_cf['id']][] = $v_cf['form_type'];
							}
						}
					}
				}
				
				if(empty($hospital_days[$ipid]))
				{
					$hospital_days[$ipid][] = "999999999999999999999999";
				}
				$patients_periods_days_no_h[$ipid] = array_diff($patients_periods_days[$ipid], $hospital_days[$ipid]);
				$patients_periods_days_no_h[$ipid] = array_values(array_unique($patients_periods_days_no_h[$ipid]));

				
				$used_cnt_forms[$ipid] = array();
				$used_pc_data[$ipid] = array();
				$pseudo_overall_shortcuts[$ipid] = array();
				
				foreach($patients_periods_days_no_h[$ipid] as $k_period_day => $v_period_day)
				{
					$day_shortcuts[$ipid] = array();
					if(count($month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) == 0)
					{
						$month_shortcuts[$ipid] = array();
					}

					
					//$hospital_days_cs format is d.m.Y
					$v_period_day_alt = date('d.m.Y', strtotime($v_period_day));
					
					$master_data[$ipid][$v_period_day] = array();
					//calculate set one form_type visits
					//first get flatrate exception and set shortcut

					$shortcut = '';
					$fl_continued = false;//curent day NOT in flatrate continued
					if($flatrate_continued && in_array($v_period_day, $flatrate_continued[$ipid]))
					{
						$fl_continued = true; //curent day is in flatrate continued
					}
					
					if((in_array($v_period_day, $flatrate[$ipid]) || $fl_continued === true) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						$shortcut = '37b1';
						$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = $shortcut;
						$pseudo_overall_shortcuts[$ipid][] = $shortcut;
						
					} 

					foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf_one)
					{
					    if(!in_array($v_cf_one['id'], $exclude_after_discharge_overall) && in_array($v_cf_one['form_type'], $set_one_ids))
					    {
					        if(
					            (!in_array($v_period_day, $flatrate[$ipid]) && $fl_continued === false)
					            && array_key_exists($v_period_day, $contact_forms_days[$ipid])
					            && in_array($v_period_day, $active_days_in_period[$ipid])
					            && !in_array($v_period_day, $hospital_days[$ipid]))
					        {
					            //						we have visits=> check if there are required visits for this action set
					            if((in_array('4', $sapv_days[$ipid][$v_period_day]) || in_array('3', $sapv_days[$ipid][$v_period_day]) ) && !in_array($v_cf_one['id'],$used_cnt_forms[$ipid])  )
					            {
					                $shortcut = '37b2';
					                $used_cnt_forms[$ipid][] = $v_cf_one['id'];
					                $set_one_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
					            }
					        }
					    }
					}
					
					
					if(!empty($shortcut))
					{
						$lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;

							
						$day_shortcuts[$ipid][] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['shortcut'] = $shortcut;
						$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
						$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
						$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
					}

					//sapv overwrite if formtype is set 4
					//calculate set two form_type visits
					//exclude calculation if following shortcuts are calculated on current day

					if( (!in_array($v_period_day, $flatrate[$ipid]) && $fl_continued === false) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
					    //	 we have visits=> check if there are required visits for this action set
					    $set_onez_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_two_result[$ipid] = array_intersect($set_two_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
 
						if(((count($set_two_result[$ipid]) != 0 || in_array('U', $course_days[$ipid][$v_period_day])) && in_array('1', $sapv_days[$ipid][$v_period_day])) || (count($set_onez_result[$ipid]) != 0 && in_array('1', $sapv_days[$ipid][$v_period_day]) ))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
								if(is_numeric($k_cf) &&  !in_array($v_cf['id'],$exclude_after_discharge_overall))
								{
								    
									$shortcut = '';
									if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
// 									    && empty($flatrate[$ipid]['pay_days']) 
// 									    && empty($flatrate[$ipid]['pay_days']) 
									    && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
									    && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
									    && !in_array('37b5', $pseudo_overall_shortcuts[$ipid]) 
									    && (!in_array($v_period_day, $flatrate[$ipid]['pay_days']) && $fl_continued == false))
									{
									    if(empty($flatrate[$ipid]['pay_days']) || (!empty($flatrate[$ipid]['pay_days']) && strtotime($v_period_day) < strtotime($flatrate[$ipid][0])) ) {
									        $shortcut = '37b5';
									    } 
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
									{
										$shortcut = '37b6';
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b5')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
											$pseudo_overall_shortcuts[$ipid][] = $shortcut;
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
									    
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;

										if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_two_ids) || in_array($v_cf['form_type'], $set_one_ids) ) && !in_array($v_cf['id'],$used_cnt_forms[$ipid]))
// 										if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_two_ids)  ) && !in_array($v_cf['id'],$used_cnt_forms[$ipid]))
										{
										    $used_cnt_forms[$ipid][] = $v_cf['id'];
    									    $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										}
										else if($shortcut == '37b5' && !in_array($v_cf['id'],$used_cnt_forms[$ipid]))
										{
										    $used_cnt_forms[$ipid][] = $v_cf['id'];
	       								    $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';

								if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
// 								    && empty($flatrate[$ipid]['pay_days']) 
// 								    && empty($flatrate[$ipid]['pay_days']) 
								    && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
								    && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
								    && !in_array('37b5', $pseudo_overall_shortcuts[$ipid])
								    && (!in_array($v_period_day, $flatrate[$ipid]['pay_days'])  && $fl_continued == false))
								{
								    if(empty($flatrate[$ipid]['pay_days']) || (!empty($flatrate[$ipid]['pay_days']) && strtotime($v_period_day) < strtotime($flatrate[$ipid][0])) ) {
								        $shortcut = '37b5';
								    }
								    
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5')
								{
									$shortcut = '37b6';
								}

								if(!empty($shortcut))
								{
									if($shortcut == '37b5')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
										$pseudo_overall_shortcuts[$ipid][] = $shortcut;
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								
								if(($shortcut == '37b6' || $shortcut == '37b5') && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && $v_day_course == 'U' && !in_array($k_day_course,$used_pc_data[$ipid]))
								{
								    $used_pc_data[$ipid][] = $k_day_course;
								    $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
									$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
									$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
									$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
									$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
								}
							}
						}
					}

					
					//calculate set three form_type visits
					//exclude calculation if following shortcuts are calculated on current day

					if((!in_array($v_period_day, $flatrate[$ipid]) && $fl_continued == false) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]) )
					{
					    
						$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);
						$set_three_result[$ipid] = array_intersect($set_three_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);
						$set_ones_result[$ipid] = array_intersect($set_one_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

						if(((count($set_three_result[$ipid]) != 0 || in_array('V', $course_days[$ipid][$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day])) || (count($set_ones_result[$ipid]) != 0 || in_array('V', $course_days[$v_period_day])) && in_array('2', $sapv_days[$ipid][$v_period_day]))
						{

							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) &&  !in_array($v_cform['id'],$exclude_after_discharge_overall) )
								{
									$shortcut = '';

									if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
									    && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
									    && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
									    && !in_array('37b7', $pseudo_overall_shortcuts[$ipid])
									    && (!in_array($v_period_day, $flatrate[$ipid]['pay_days']) && $fl_continued == false))
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}

									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = $shortcut;
										}

										$day_shortcuts[$ipid][] = $shortcut;
									}


									if(!empty($shortcut))
									{
									    
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_three_ids[$ipid])  && !in_array($v_cform['id'],$used_cnt_forms[$ipid]))
										{
										    $used_cnt_forms[$ipid][] = $v_cform['id'];
   									        $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7'  && !in_array($v_cform['id'],$used_cnt_forms[$ipid]))
										{
										    $used_cnt_forms[$ipid][] = $v_cform['id'];
   									        $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}

										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}

							foreach($course_days[$ipid][$v_period_day] as $k_day_course => $v_day_course)
							{
								$shortcut = '';
								$last_koord_day[$ipid] = end($last_koord_dates[$ipid]);

								if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
								    && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
								    && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))])
								    && !in_array('37b7', $pseudo_overall_shortcuts[$ipid])
								    )
								{
									if(in_array('4', $sapv_days[$ipid][$v_period_day]))
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}
									else if(empty($flatrate[$ipid]['pay_days']))
									{
										$shortcut = '37b7';
									}
								}

								if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
								{
									$shortcut = '37b8';
									$week_number[$ipid] = date('W', strtotime($v_period_day));
								}

								if(!empty($shortcut))
								{
								    
								    
									if($shortcut == '37b7')
									{
										$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
										$pseudo_overall_shortcuts[$ipid][] = $shortcut;
									}

									$day_shortcuts[$ipid][] = $shortcut;
								}

								if(($shortcut == '37b7' || $shortcut == '37b8') && $v_day_course == 'V'  && !in_array($k_day_course,$used_pc_data[$ipid]))
								{
									if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]))
									{
									    $used_pc_data[$ipid][] = $k_day_course;
								        $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$week_numbers_arr[$ipid][] = $week_number[$ipid];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
									else if($shortcut == '37b7')
									{
									    $used_pc_data[$ipid][] = $k_day_course;
								        $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
										$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
									
									
								}
							}
						}
					}


					//calculate set 4 (ISPC-241)
					$set_fourth_result[$ipid] = array_intersect($set_fourth_ids, $contact_forms_days[$ipid][$v_period_day]['form_types']);

					if(count($set_fourth_result[$ipid]) != 0 && in_array($v_period_day, $active_days_in_period[$ipid]) && !in_array($v_period_day, $hospital_days[$ipid]))
					{
						//setup each form sapv based on classification block selection
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
							if($classification_data[$v_cf_day]['intern'] != '1' &&  !in_array($v_cf_day['id'],$exclude_after_discharge_overall))
							{
								if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									//switch between BE-KO if VV is not BE
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]))
									{
										$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '1';
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1')
								{
									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf_day]['contact_form_id']] = '2';
								}
							}
						}

						//U & V at the top
						//beratung
						if((!in_array($v_period_day, $flatrate[$ipid]) && $fl_continued == false) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('1', $sapv_days[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cf => $v_cf)
							{
							    if( is_numeric($k_cf) && !in_array($v_cf['id'],$exclude_after_discharge_overall))
							    { 
    								//check if there are 2 beratung change sapv in koord
    								if($master_data[$ipid][$v_period_day]['37b6']['qty'] == '2' && count($set_fourth_result[$ipid]) != 0 && $classification_data[$v_cf['id']]['beratung'] == '1' && $classification_data[$v_cf['id']]['koordination'] == '1')
    								{
    									$sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] = '2';
    								}
     
                                    if( $sapv_status[$ipid][$v_period_day][$classification_data[$v_cf['id']]['contact_form_id']] == '1' 
//                                         && ( ($classification_data[$v_cf['id']]['beratung'] == '1' || $classification_data[$v_cf['id']]['koordination'] == '1') && (in_array($v_cf['form_type'], $set_fourth_ids)) || in_array($v_cf['form_type'], $set_one_ids) )   
                                        )
    								{
    									$shortcut = '';
    									if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
    									    && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
    									    && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
    									    && !in_array('37b5', $pseudo_overall_shortcuts[$ipid])
    									    && (!in_array($v_period_day, $flatrate[$ipid]['pay_days']) && $fl_continued == false)
    									    )
    									{
    									    if(empty($flatrate[$ipid]['pay_days']) || (!empty($flatrate[$ipid]['pay_days']) && strtotime($v_period_day) < strtotime($flatrate[$ipid][0])) ) {
    									        $shortcut = '37b5';
    									    }
    									}
    
    									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b5', $day_shortcuts[$ipid]) && $shortcut != '37b5') //only b5 or b6
    									{
    										$shortcut = '37b6';
    									}
    
    									if(!empty($shortcut))
    									{
    										if($shortcut == '37b5')
    										{
    											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b5';
    											$pseudo_overall_shortcuts[$ipid][] = $shortcut;
    										}
    
    										$day_shortcuts[$ipid][] = $shortcut;
    									}
    
    
    									if(!empty($shortcut))
    									{
    										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;
    										if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_fourth_ids) || in_array($v_cf['form_type'], $set_one_ids) ) && !in_array($v_cf['id'],$used_cnt_forms[$ipid]) ) 
//     										if($shortcut == '37b6' && $master_data[$ipid][$v_period_day]['37b6']['qty'] < '2' && (in_array($v_cf['form_type'], $set_fourth_ids))  && !in_array($v_cf['id'],$used_cnt_forms[$ipid]) ) 
    										{
    										    $used_cnt_forms[$ipid][] = $v_cf['id'];
    								            $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
    											$master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
    											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
    										}
    										else if($shortcut == '37b5' && !in_array($v_cf['id'],$used_cnt_forms[$ipid]))
    										{
    										    $used_cnt_forms[$ipid][] = $v_cf['id'];
    								            $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
    											$master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
    											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
    										}
    										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
    										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
    									}
    								}
							    }
							}
						}

						
						//koordination
						$last_koord_days[$ipid] = end($last_koord_dates[$ipid]);
						if((!in_array($v_period_day, $flatrate[$ipid]) && $fl_continued == false) && !in_array('37b2', $day_shortcuts[$ipid]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
						{
							foreach($contact_forms_days[$ipid][$v_period_day] as $k_cform => $v_cform)
							{
								if(is_numeric($k_cform) && $sapv_status[$ipid][$v_period_day][$classification_data[$v_cform['id']]['contact_form_id']] == '2' && !in_array($v_cform['id'],$exclude_after_discharge_overall))
								{
									$shortcut = '';

									if(!in_array('37b1', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
									  && !in_array('37b5', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))]) 
									  && !in_array('37b7', $month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))])
									  && !in_array('37b7', $pseudo_overall_shortcuts[$ipid])
									    )
									  
									{
										if(in_array('4', $sapv_days[$ipid][$v_period_day]))
										{
											$shortcut = '37b8';
											$week_number[$ipid] = date('W', strtotime($v_period_day));
										}
										else if(empty($flatrate[$ipid]['pay_days']))
										{
											$shortcut = '37b7';
										}
									}
									
									
									if(!in_array('37b2', $day_shortcuts[$ipid]) && !in_array('37b7', $day_shortcuts[$ipid]) && $shortcut != '37b7')
									{
										$shortcut = '37b8';
										$week_number[$ipid] = date('W', strtotime($v_period_day));
									}

									if(!empty($shortcut))
									{
										if($shortcut == '37b7')
										{
											$month_shortcuts[$ipid][date('Ym', strtotime($v_period_day))][] = '37b7';
											$pseudo_overall_shortcuts[$ipid][] = $shortcut;
										}
										$day_shortcuts[$ipid][] = $shortcut;
									}

									if(!empty($shortcut))
									{
										$master_data[$ipid][$v_period_day][$shortcut]['shortcut'][] = $shortcut;

										if($shortcut == '37b8' && !in_array($week_number[$ipid], $week_numbers_arr[$ipid]) && in_array($v_cform['form_type'], $set_fourth_ids)  && !in_array($v_cform['id'],$used_cnt_forms[$ipid]) )
										{
										    $used_cnt_forms[$ipid][] = $v_cform['id'];
								            $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
								            $master_data[$ipid][$v_period_day][$shortcut]['qty'] += '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] += $master_price_list[$v_period_day][0][$shortcut]['price'];
											$week_numbers_arr[$ipid][] = $week_number[$ipid];
										}
										else if($shortcut == '37b7' && !in_array($v_cform['id'],$used_cnt_forms[$ipid]))
										{
										    $used_cnt_forms[$ipid][] = $v_cform['id'];
								            $lag_clasifizierung[$ipid]['billable'][$shortcut][] = $v_period_day;
								            $master_data[$ipid][$v_period_day][$shortcut]['qty'] = '1';
											$master_data[$ipid][$v_period_day][$shortcut]['shortcut_total'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										}
								        
										$master_data[$ipid][$v_period_day][$shortcut]['price'] = $master_price_list[$v_period_day][0][$shortcut]['price'];
										$totals[$ipid][$shortcut] += $master_price_list[$v_period_day][0][$shortcut]['price'];
										$last_koord_dates[$ipid][] = $v_period_day;
									}
								}
							}
						}
					}

					
					
 					if(array_key_exists($v_period_day, $sapv_days[$ipid]))
					{
						foreach($contact_forms_days_ids[$ipid][$v_period_day] as $k_cf_day => $v_cf_day)
						{
// 						    if($v_period_day == "2015-07-28"){
//     						    print_r("PARASUTA: ");
//     						    print_r($contact_forms2form_types[$ipid][$v_cf_day][0]);
						        
//     						    var_dump($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$ipid][$v_period_day]) && (($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')));
// 						    }
							//check if contactform type for each days
							if(in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids) && (in_array('4', $sapv_days[$ipid][$v_period_day]) || in_array('3', $sapv_days[$ipid][$v_period_day])) )
							{
								$clasifizierung[$ipid][$v_period_day]['home_visit'] += 1;
								$lag_clasifizierung[$ipid]['all']['home_visit'][] = $v_period_day;
							}
							else
							{
								//sum classifizierung data if form is not housebesuche type(1)
								if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && in_array('1', $sapv_days[$ipid][$v_period_day]) && (($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0') || ($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1')))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									$lag_clasifizierung[$ipid]['all']['beratung'][] = $v_period_day;
									
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] >= '2'  && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										$lag_clasifizierung[$ipid]['all']['koordination'][] = $v_period_day;
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										$lag_clasifizierung[$ipid]['all']['beratung'][] = $v_period_day;
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										$lag_clasifizierung[$ipid]['all']['koordination'][] = $v_period_day;
									}
								}
								else if($clasifizierung[$ipid][$v_period_day]['beratung'] < '2' && $classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '1' && (in_array('1', $sapv_days[$ipid][$v_period_day]) || in_array('2', $sapv_days[$ipid][$v_period_day])))
								{
									if(!in_array('1', $sapv_days[$ipid][$v_period_day]) && in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										$lag_clasifizierung[$ipid]['all']['koordination'][] = $v_period_day;
									}
									else if(in_array('1', $sapv_days[$ipid][$v_period_day]) && !in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										$lag_clasifizierung[$ipid]['all']['beratung'][] = $v_period_day;
									}
									else
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										$lag_clasifizierung[$ipid]['all']['beratung'][] = $v_period_day;
									}
								}
								else if($classification_data[$v_cf_day]['beratung'] == '1' && $classification_data[$v_cf_day]['koordination'] == '0' && in_array('1', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
									$lag_clasifizierung[$ipid]['all']['beratung'][] = $v_period_day;
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0' && $classification_data[$v_cf_day]['koordination'] == '1') && in_array('2', $sapv_days[$ipid][$v_period_day]))
								{
									$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
									$lag_clasifizierung[$ipid]['all']['koordination'][] = $v_period_day;
								}
								else if(($classification_data[$v_cf_day]['beratung'] == '0'  && $classification_data[$v_cf_day]['koordination'] == '0') && in_array($contact_forms2form_types[$ipid][$v_cf_day][0], $set_one_ids))
								{
									if(in_array('1', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['beratung'] += '1';
										$lag_clasifizierung[$ipid]['all']['beratung'][] = $v_period_day;
									}
									else if(in_array('2', $sapv_days[$ipid][$v_period_day]))
									{
										$clasifizierung[$ipid][$v_period_day]['koordination'] += '1';
										$lag_clasifizierung[$ipid]['all']['koordination'][] = $v_period_day;
									}
								}
							}
						}
					}
					
				}
				
// 				print_r($pseudo_overall_shortcuts);exit;
// 				print_r($classification_data);exit;
// 				print_r($master_data);exit;
				
				foreach($master_data[$ipid] as $k_day => $v_day_values)
				{
					foreach($v_day_values as $k_shortcut => $v_shortcut_values)
					{
						$overall_shortcuts[$ipid][] = $k_shortcut;
						if($v_shortcut_values['qty'] > '0' && !empty($v_shortcut_values['qty']))
						{
							$overall_shortcuts_dates[$ipid][$k_day][] = $k_shortcut;
						}
					}

					if(count($v_day_values) > '0')
					{
						$days_products[$ipid][] = $k_day;
					}
				}

				//get days in which sapv is 3 or 4
				foreach($sapv_days[$ipid] as $ksapv_days => $vsapv_days)
				{
					if(in_array('3', $vsapv_days) || in_array('4', $vsapv_days))
					{
						$flatrate_sapv_days[$ipid][] = $ksapv_days;
					}
				}

				//return only the products which have more than 28 days from last billable product
				$pm = new PatientMaster();
								
				foreach($days_products[$ipid] as $key_day => $v_day)
				{
					if($key_day > '0')
					{
						$prod_gap[$ipid][$v_day] = $pm->getDaysInBetween($days_products[$ipid][($key_day - 1)], $v_day);
//						$prod_gap[$ipid][$v_day] = array_intersect($prod_gap[$ipid][$v_day], $active_days[$ipid], $flatrate_sapv_days[$ipid]);
//						$prod_gap[$ipid][$v_day] = array_intersect($prod_gap[$ipid][$v_day], $active_days[$ipid]);

						$prod_gap[$ipid][$v_day] = array_values(array_unique($prod_gap[$ipid][$v_day]));

						if(count($prod_gap[$ipid][$v_day]) >= '30')
						{
							$last_product_gap_days[$ipid][] = $v_day;
							$master_overall_data[$ipid]['shortcuts'][$v_day] = '37b1';
						}
					}
				}

//				if($_SERVER['REMOTE_ADDR'] = "10.0.0.12" && $flatrate_continued)
//				{
//					print_r("days_products\n");
//					print_r($days_products);
//
//					print_r("prod_gap\n");
//					print_r($prod_gap);
//					
//					print_r("last_product_gap_days\n");
//					print_r($last_product_gap_days);
//					
//					print_r("flatrate_continued\n");
//					print_r($flatrate_continued);
//					exit;
//				}
// 				print_r($master_data);  
// 				print_r($clasifizierung); exit;
				//calculate ministry calculated/non-calculated visits
				foreach($clasifizierung[$ipid] as $k_s_day => $v_type_visits)
				{
					foreach($v_type_visits as $k_visit_type => $v_visit_ammount)
					{
						if($v_visit_ammount > '0')
						{
							if(in_array('37b1', $overall_shortcuts_dates[$ipid][$k_s_day]))
							{
								$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "0";
								$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = $v_visit_ammount;

								
								$all_visits_status[$ipid][$k_visit_type . "_total"]['calculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'];
								$all_visits_status[$ipid][$k_visit_type . "_total"]['noncalculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'];
							}

							if($k_visit_type == "home_visit")
							{
								//one per day only (calculated can be max 1 visit)
								if(in_array('37b2', $overall_shortcuts_dates[$ipid][$k_s_day]))
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "1";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = ($v_visit_ammount - 1);
								}
								else
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "0";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = $v_visit_ammount;
								}

								$all_visits_status[$ipid][$k_visit_type . "_total"]['calculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'];
								$all_visits_status[$ipid][$k_visit_type . "_total"]['noncalculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'];
							}

							if($k_visit_type == "beratung")
							{
								//one per day and one time only
								if(in_array('37b5', $overall_shortcuts_dates[$ipid][$k_s_day]))
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "1";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = ($v_visit_ammount - 1);
								}
								//can be max 2 per day
								else if(in_array('37b6', $overall_shortcuts_dates[$ipid][$k_s_day]))
								{
									if($v_visit_ammount >= '2')
									{
										$v_visit_ammount_limit = "2";
									}
									else
									{
										$v_visit_ammount_limit = "1";
									}

									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = $v_visit_ammount_limit;
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = ($v_visit_ammount - $v_visit_ammount_limit);
								}
								else
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "0";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = $v_visit_ammount;
								}

								$all_visits_status[$ipid][$k_visit_type . "_total"]['calculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'];
								$all_visits_status[$ipid][$k_visit_type . "_total"]['noncalculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'];
							}

							if($k_visit_type == "koordination")
							{
								//b7 one per day and one time only
								//b8 one per day and one per week
								if(in_array('37b7', $overall_shortcuts_dates[$ipid][$k_s_day]) || in_array('37b8', $overall_shortcuts_dates[$ipid][$k_s_day]))
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "1";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = ($v_visit_ammount - 1);
								}
								else
								{
									$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "0";
									$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = $v_visit_ammount;
								}

								$all_visits_status[$ipid][$k_visit_type . "_total"]['calculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'];
								$all_visits_status[$ipid][$k_visit_type . "_total"]['noncalculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'];
							}
						}
						else
						{
							$visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'] = "0";
							$visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'] = "0";

							$all_visits_status[$ipid][$k_visit_type . "_total"]['calculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['calculated'];
							$all_visits_status[$ipid][$k_visit_type . "_total"]['noncalculated'][$k_s_day] = $visits_status[$ipid][$k_s_day][$k_visit_type]['noncalculated'];
						}
					}
				}

				//sum all totals arrays
				foreach($all_visits_status[$ipid] as $total_visit_type => $v_totals)
				{
					$all_calculated_visits[$ipid][$total_visit_type]['calculated'] = array_sum($v_totals['calculated']);
					$all_calculated_visits[$ipid][$total_visit_type]['noncalculated'] = array_sum($v_totals['noncalculated']);
				}

				
				$master_overall_data[$ipid]['shortcuts'] = array_values(array_unique($overall_shortcuts[$ipid]));
				$master_overall_data[$ipid]['shortcuts_dates'] = $overall_shortcuts_dates[$ipid];
				$master_overall_data[$ipid]['last_koord_dates'] = array_values(array_unique($last_koord_dates[$ipid]));
				$master_overall_data[$ipid]['days_products'] = array_values(array_unique($last_product_gap_days[$ipid]));
				$master_overall_data[$ipid]['clasifizierung'] = $clasifizierung[$ipid];
//				$master_overall_data[$ipid]['visit_status'] = $visits_status[$ipid];
//				$master_overall_data[$ipid]['all_visit_status'] = $all_visits_status[$ipid];
				$master_overall_data[$ipid]['all_visit_types_totals'] = $all_calculated_visits[$ipid];
				$master_overall_data[$ipid]['lag_details'] = $visits_status[$ipid];
				$master_overall_data[$ipid]['lag_data'] = $lag_clasifizierung[$ipid];
			}

			if($_REQUEST['dbg_vis'] == "y" && $flatrate_continued)
			{
				print_r($master_data);
				exit;
			}
			if($_REQUEST['dbg_vis'] == "x" && $flatrate_continued)
			{
				print_r($overall_shortcuts_dates);
				exit;
			}
				
			if($_REQUEST['dbg_vis'] == "3" && $flatrate_continued)
			{
				print_r($all_visits_status);
				exit;
			}
			if($_REQUEST['dbg_vis'] == "2" && $flatrate_continued)
			{
				print_r($clasifizierung);
				exit;
			}
			if($_REQUEST['dbg_vis'] == "1" && $flatrate_continued)
			{
				var_dump($visits_status);
				exit;
			}
//			print_r($master_overall_data);
//			exit;
			return $master_overall_data;
		}

		private function multi_patients_flatrate_days($ipids, $clientid, $current_period, $active_days_overall, $days_nosapv_overall, $hospital_hospiz_days_cs, $patients_details)
		{
			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn("ipid", $ipids)
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			//get patients discharges
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids);

			//get client discharge methods
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid, 0);

			//get only dead methods
			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			//get discharged dead date
			foreach($patients_discharge as $k_pat_dis => $v_pat_dis)
			{
				if(in_array($v_pat_dis['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$v_pat_dis['ipid']] = date('Y-m-d', strtotime($v_pat_dis['discharge_date']));
				}
			}


			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
//				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days[$v_sapv['ipid']]))
				{
					$sapv_days[$v_sapv['ipid']] = array();
				}

				$sapv_days[$v_sapv['ipid']] = array_merge_recursive($s_days, $sapv_days[$v_sapv['ipid']]);
			}
			$sapv_days[$v_sapv['ipid']] = array_values(array_unique($sapv_days[$v_sapv['ipid']]));

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$active_days_overall[$v_ipid] = array_diff($active_days_overall[$v_ipid], $hospital_hospiz_days_cs[$v_ipid]);
				foreach($sapv_days[$v_ipid] as $k_sapv_day => $v_sapv_day)
				{
					$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
					$curent_start_month = date('Ym', strtotime($current_period['start']));

					//calculate overall
					if(count($flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall[$v_ipid]))
					{
						$flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
					}
				}

				$sapv_days_active[$v_ipid] = array_intersect($active_days_overall[$v_ipid], $sapv_days[$v_ipid]);
				$sapv_days_active[$v_ipid] = array_values(array_unique($sapv_days_active[$v_ipid]));
				asort($sapv_days[$v_ipid]);

				$sapv_days[$v_ipid] = array_values($sapv_days[$v_ipid]);

				$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
				$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

				if(count($sapv_days_active[$v_ipid]) > '0')
				{
					$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
					$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

					$currtime[$v_ipid] = $last_sapv_day_ts[$v_ipid];
					$discharge_date = end(end($patients_details[$v_ipid]['active_periods']));

					$end_time[$v_ipid] = strtotime(date('Y-m-d', strtotime($discharge_date)));


					$i = '0';
					$first_flatrate[$v_ipid] = true;

					//while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
					while($currtime[$v_ipid] <= $end_time[$v_ipid])
					{
						$cur_time_formated[$v_ipid] = date('Y-m-d', $currtime[$v_ipid]);

						if(!in_array($cur_time_formated[$v_ipid], $days_nosapv_overall[$v_ipid]) && $first_flatrate[$v_ipid] && in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($cur_time_formated[$v_ipid], $hospital_hospiz_days_cs[$v_ipid]))
						{
							$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

							$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
							$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];

							$first_flatrate[$v_ipid] = false;
							$i++;
						}

						$currtime[$v_ipid] = strtotime('+1 day', $currtime[$v_ipid]);
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $kk_flatrate => $vv_flatrate)
				{
					$start_fl_period_day[$v_ipid] = $vv_flatrate;
					$i = 0;

					while(count($flatrate_structured[$v_ipid][$kk_flatrate]) < '7')
					{
						if(!in_array($start_fl_period_day[$v_ipid], $hospital_hospiz_days_cs[$v_ipid]) && in_array($start_fl_period_day[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($start_fl_period_day[$v_ipid], $flatrate_structured[$v_ipid][$kk_flatrate]))
						{
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $start_fl_period_day[$v_ipid];
						}
						else
						{
							//make sure we reach 7 elements
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $vv_flatrate;
						}
						asort($flatrate_structured[$v_ipid][$kk_flatrate]);
						$start_fl_period_day[$v_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day[$v_ipid])));
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $k_flatrate => $v_flatrate)
				{
					$max_flatrate_day[$v_ipid][$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

					$flatrate_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;
					$flatrate_structured_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;

					foreach($flatrate_structured[$v_ipid][$k_flatrate] as $k_day_key => $v_day_value)
					{
						if(strtotime($v_day_value) <= $max_flatrate_day[$v_ipid][$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod[$v_ipid]) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
						{
							$flatrate_inperiod[$v_ipid][] = $v_day_value;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_day_value;
						}
						else
						{
							$flatrate_inperiod[$v_ipid][] = $v_flatrate;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_flatrate;
						}
					}
				}

				foreach($flatrate_structured_inperiod[$v_ipid]['pay_days'] as $k_fl_per => $v_fl_per)
				{
					$flatrate_inperiod_temp[$v_ipid] = $flatrate_structured_inperiod[$v_ipid][$k_fl_per];
					$flatrate_inperiod_temp[$v_ipid] = array_values(array_unique($flatrate_inperiod_temp[$v_ipid]));


					$last_day_flatrate[$v_ipid] = end($flatrate_inperiod_temp[$v_ipid]);
					$ts_last_day_flatrate[$v_ipid] = strtotime($last_day_flatrate[$v_ipid]);
					$next_flatrate_day[$v_ipid] = '';
					while(count($flatrate_inperiod_temp[$v_ipid]) < '7')
					{

						if(strlen($next_flatrate_day[$v_ipid]) == '0')
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $ts_last_day_flatrate[$v_ipid]);
						}
						else
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $next_flatrate_day[$v_ipid]);
						}

						//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
						if($next_flatrate_day[$v_ipid] <= strtotime($current_period['end']))
						{
							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days_overall[$v_ipid]))
//							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days[$v_ipid]))
							{
								$flatrate_inperiod_temp[$v_ipid][] = date('Y-m-d', $next_flatrate_day[$v_ipid]);
							}
						}
						else
						{
							$flatrate_inperiod_temp[$v_ipid][] = $last_day_flatrate[$v_ipid]; //dummy control
						}
					}

					if(empty($final_flatrate[$v_ipid]))
					{
						$final_flatrate[$v_ipid] = array();
					}

					$final_flatrate[$v_ipid] = array_merge_recursive($final_flatrate[$v_ipid], $flatrate_inperiod_temp[$v_ipid]);
				}

				foreach($final_flatrate[$v_ipid] as $k_fl_day => $v_fl_day)
				{
					$seached_key = '';
					if(!in_array($v_fl_day, $sapv_days_active[$v_ipid]))
					{
						$seached_key = array_search($v_fl_day, $final_flatrate[$v_ipid]);

						if(strlen($seached_key) > '0')
						{
							unset($final_flatrate[$v_ipid][$seached_key]);
							array_values($final_flatrate[$v_ipid]);
						}
					}
					unset($seached_key);
				}

				//get back pay days
				$final_flatrate[$v_ipid]['pay_days'] = $flatrate_structured_inperiod[$v_ipid]['pay_days'];
			}



//			print_r("allowed_flatrate_days\n");
//			print_r($allowed_flatrate_days);
//			print_r("sapv_days_active\n");
//			print_r($sapv_days_active);
//			print_r("sapv_days\n");
//			print_r($sapv_days);
//			print_r("flatrate_structured\n");
//			print_r($flatrate_structured);
//			print_r("fl in period\n");
//			print_r($flatrate_inperiod);
//			print_r("fl in structured period\n");
//			print_r($flatrate_structured_inperiod);
//			print_r("final flatrate\n");
//			print_r($final_flatrate);
//			print_r("patients_details\n");
//			print_r($patients_details);
//			exit;

			return $final_flatrate;
		}
		
		private function multi_patients_flatrate_days_lag($ipids, $clientid, $current_period, $active_days_overall, $days_nosapv_overall, $hospital_hospiz_days_cs, $patients_details)
		{
			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn("ipid", $ipids)
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			//get patients discharges
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids);

			//get client discharge methods
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid, 0);

			//get only dead methods
			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			//get discharged dead date
			foreach($patients_discharge as $k_pat_dis => $v_pat_dis)
			{
				if(in_array($v_pat_dis['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$v_pat_dis['ipid']] = date('Y-m-d', strtotime($v_pat_dis['discharge_date']));
				}
			}


			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);
//				$sapv_cycle_days[$v_sapv['id']] = $s_days;

				if(empty($sapv_days[$v_sapv['ipid']]))
				{
					$sapv_days[$v_sapv['ipid']] = array();
				}

				$sapv_days[$v_sapv['ipid']] = array_merge_recursive($s_days, $sapv_days[$v_sapv['ipid']]);
			}
			$sapv_days[$v_sapv['ipid']] = array_values(array_unique($sapv_days[$v_sapv['ipid']]));

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$active_days_overall[$v_ipid] = array_diff($active_days_overall[$v_ipid], $hospital_hospiz_days_cs[$v_ipid]);
				foreach($sapv_days[$v_ipid] as $k_sapv_day => $v_sapv_day)
				{
					$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
					$curent_start_month = date('Ym', strtotime($current_period['start']));

					//calculate overall
					if(count($flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall[$v_ipid]))
					{
						$flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
					}
				}

				$sapv_days_active[$v_ipid] = array_intersect($active_days_overall[$v_ipid], $sapv_days[$v_ipid]);
				$sapv_days_active[$v_ipid] = array_values(array_unique($sapv_days_active[$v_ipid]));
				asort($sapv_days[$v_ipid]);

				$sapv_days[$v_ipid] = array_values($sapv_days[$v_ipid]);

				$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
				$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

				if(count($sapv_days_active[$v_ipid]) > '0')
				{
					$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
					$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

					$currtime[$v_ipid] = $last_sapv_day_ts[$v_ipid];
					$discharge_date = end(end($patients_details[$v_ipid]['active_periods']));

					$end_time[$v_ipid] = strtotime(date('Y-m-d', strtotime($discharge_date)));


					$i = '0';
					$first_flatrate[$v_ipid] = true;

					//while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
					while($currtime[$v_ipid] <= $end_time[$v_ipid])
					{
						$cur_time_formated[$v_ipid] = date('Y-m-d', $currtime[$v_ipid]);

						if(!in_array($cur_time_formated[$v_ipid], $days_nosapv_overall[$v_ipid]) && $first_flatrate[$v_ipid] && in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($cur_time_formated[$v_ipid], $hospital_hospiz_days_cs[$v_ipid]))
						{
							$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

							$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
							$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];

							$first_flatrate[$v_ipid] = false;
							$i++;
						}

						$currtime[$v_ipid] = strtotime('+1 day', $currtime[$v_ipid]);
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $kk_flatrate => $vv_flatrate)
				{
					$start_fl_period_day[$v_ipid] = $vv_flatrate;
					$i = 0;

					while(count($flatrate_structured[$v_ipid][$kk_flatrate]) < '7')
					{
						if(!in_array($start_fl_period_day[$v_ipid], $hospital_hospiz_days_cs[$v_ipid]) && in_array($start_fl_period_day[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($start_fl_period_day[$v_ipid], $flatrate_structured[$v_ipid][$kk_flatrate]))
						{
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $start_fl_period_day[$v_ipid];
						}
						else
						{
							//make sure we reach 7 elements
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $vv_flatrate;
						}
						asort($flatrate_structured[$v_ipid][$kk_flatrate]);
						$start_fl_period_day[$v_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day[$v_ipid])));
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $k_flatrate => $v_flatrate)
				{
					$max_flatrate_day[$v_ipid][$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

					$flatrate_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;
					$flatrate_structured_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;

					foreach($flatrate_structured[$v_ipid][$k_flatrate] as $k_day_key => $v_day_value)
					{
						if(strtotime($v_day_value) <= $max_flatrate_day[$v_ipid][$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod[$v_ipid]) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
						{
							$flatrate_inperiod[$v_ipid][] = $v_day_value;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_day_value;
						}
						else
						{
							$flatrate_inperiod[$v_ipid][] = $v_flatrate;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_flatrate;
						}
					}
				}

				foreach($flatrate_structured_inperiod[$v_ipid]['pay_days'] as $k_fl_per => $v_fl_per)
				{
					$flatrate_inperiod_temp[$v_ipid] = $flatrate_structured_inperiod[$v_ipid][$k_fl_per];
					$flatrate_inperiod_temp[$v_ipid] = array_values(array_unique($flatrate_inperiod_temp[$v_ipid]));


					$last_day_flatrate[$v_ipid] = end($flatrate_inperiod_temp[$v_ipid]);
					$ts_last_day_flatrate[$v_ipid] = strtotime($last_day_flatrate[$v_ipid]);
					$next_flatrate_day[$v_ipid] = '';
					while(count($flatrate_inperiod_temp[$v_ipid]) < '7')
					{

						if(strlen($next_flatrate_day[$v_ipid]) == '0')
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $ts_last_day_flatrate[$v_ipid]);
						}
						else
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $next_flatrate_day[$v_ipid]);
						}

						//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
						if($next_flatrate_day[$v_ipid] <= strtotime($current_period['end']))
						{
							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days_overall[$v_ipid]) && !in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $days_nosapv_overall[$v_ipid]))
//							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days[$v_ipid]))
							{
								$flatrate_inperiod_temp[$v_ipid][] = date('Y-m-d', $next_flatrate_day[$v_ipid]);
							}
						}
						else
						{
							$flatrate_inperiod_temp[$v_ipid][] = $last_day_flatrate[$v_ipid]; //dummy control
						}
					}

					if(empty($final_flatrate[$v_ipid]))
					{
						$final_flatrate[$v_ipid] = array();
					}

					$final_flatrate[$v_ipid] = array_merge_recursive($final_flatrate[$v_ipid], $flatrate_inperiod_temp[$v_ipid]);
				}

				foreach($final_flatrate[$v_ipid] as $k_fl_day => $v_fl_day)
				{
					$seached_key = '';
					if(!in_array($v_fl_day, $sapv_days_active[$v_ipid]))
					{
						$seached_key = array_search($v_fl_day, $final_flatrate[$v_ipid]);

						if(strlen($seached_key) > '0')
						{
							unset($final_flatrate[$v_ipid][$seached_key]);
							array_values($final_flatrate[$v_ipid]);
						}
					}
					unset($seached_key);
				}

				//get back pay days
				$final_flatrate[$v_ipid]['pay_days'] = $flatrate_structured_inperiod[$v_ipid]['pay_days'];
			}



//			print_r("allowed_flatrate_days\n");
//			print_r($allowed_flatrate_days);
//			print_r("sapv_days_active\n");
//			print_r($sapv_days_active);
//			print_r("sapv_days\n");
//			print_r($sapv_days);
//			print_r("flatrate_structured\n");
//			print_r($flatrate_structured);
//			print_r("fl in period\n");
//			print_r($flatrate_inperiod);
//			print_r("fl in structured period\n");
//			print_r($flatrate_structured_inperiod);
//			print_r("final flatrate\n");
//			print_r($final_flatrate);
//			print_r("patients_details\n");
//			print_r($patients_details);
//			exit;

			return $final_flatrate;
		}
		
		private function multi_patients_flatrate_days_continued($clientid, $ipids, $current_period, $active_days_overall, $days_nosapv_overall, $hospital_overall_days, $patients_details, $allowed_flatrate_restart_days)
		{
			//days where there is sapv and at least 4w from last product
//			$allowed_flatrate_restart_days[$ipid]['days_products']
//			print_r("allowed_flatrate_restart_days\n");
//			print_r($allowed_flatrate_restart_days);
			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn("ipid", $ipids)
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			//get patients discharges
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids);

			//get client discharge methods
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid, 0);

			//get only dead methods
			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			//get discharged dead date
			foreach($patients_discharge as $k_pat_dis => $v_pat_dis)
			{
				if(in_array($v_pat_dis['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$v_pat_dis['ipid']] = date('Y-m-d', strtotime($v_pat_dis['discharge_date']));
				}
			}


			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);

				if(empty($sapv_days[$v_sapv['ipid']]))
				{
					$sapv_days[$v_sapv['ipid']] = array();
				}

				$sapv_days[$v_sapv['ipid']] = array_merge_recursive($s_days, $sapv_days[$v_sapv['ipid']]);
			}
			$sapv_days[$v_sapv['ipid']] = array_values(array_unique($sapv_days[$v_sapv['ipid']]));

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$active_days_overall[$v_ipid] = array_diff($active_days_overall[$v_ipid], $hospital_overall_days[$v_ipid]);

				foreach($sapv_days[$v_ipid] as $k_sapv_day => $v_sapv_day)
				{
					$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
					$curent_start_month = date('Ym', strtotime($current_period['start']));

					//calculate overall
					if(count($flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall[$v_ipid]))
					{
						$flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
					}
				}

				$sapv_days_active[$v_ipid] = array_intersect($active_days_overall[$v_ipid], $sapv_days[$v_ipid]);
				$sapv_days_active[$v_ipid] = array_values(array_unique($sapv_days_active[$v_ipid]));
				asort($sapv_days[$v_ipid]);

				$sapv_days[$v_ipid] = array_values($sapv_days[$v_ipid]);

				$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
				$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

				if(count($sapv_days_active[$v_ipid]) > '0')
				{
					$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
					$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

					$currtime[$v_ipid] = $last_sapv_day_ts[$v_ipid];
					$discharge_date = end(end($patients_details[$v_ipid]['active_periods']));

					$end_time[$v_ipid] = strtotime(date('Y-m-d', strtotime($discharge_date)));


					$counted_days[$v_ipid] = array();
					$dbg_count[$v_ipid] = array();
					$i = '0';
					$first_flatrate[$v_ipid] = true;

					//while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
//					if($v_ipid == 'f137d842622fb6001bf925ab459999675db788a4')
//					{
//						print_r("days_nosapv_overall\n");
//						print_r($days_nosapv_overall[$v_ipid]);
//						print_r("allowed_flatrate_restart_days\n");
//						print_r($allowed_flatrate_restart_days[$v_ipid]['days_products']);
//						print_r("sapv_days_active\n");
//						print_r($sapv_days_active[$v_ipid]);
//						print_r("hospital_overall_days\n");
//						print_r($hospital_overall_days[$v_ipid]);
//						exit;
//
//					}
					while($currtime[$v_ipid] <= $end_time[$v_ipid])
					{
						$cur_time_formated[$v_ipid] = date('Y-m-d', $currtime[$v_ipid]);

						//not found in nosapv days(possible sapv) check if is not hospital
						if(!in_array($cur_time_formated[$v_ipid], $days_nosapv_overall[$v_ipid]) &&
							in_array($cur_time_formated[$v_ipid], $allowed_flatrate_restart_days[$v_ipid]['days_products']) &&
							in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) &&
							!in_array($cur_time_formated[$v_ipid], $hospital_overall_days[$v_ipid])
						)
						{
							$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

							//get curent fl start day key
							$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
							$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];

							$i++;
						}

						$currtime[$v_ipid] = strtotime('+1 day', $currtime[$v_ipid]);
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $kk_flatrate => $vv_flatrate)
				{
					$start_fl_period_day[$v_ipid] = $vv_flatrate;
					$i = 0;

					while(count($flatrate_structured[$v_ipid][$kk_flatrate]) < '7')
					{
						if(!in_array($start_fl_period_day[$v_ipid], $hospital_overall_days[$v_ipid]) && in_array($start_fl_period_day[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($start_fl_period_day[$v_ipid], $flatrate_structured[$v_ipid][$kk_flatrate]))
						{
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $start_fl_period_day[$v_ipid];
						}
						else
						{
							//make sure we reach 7 elements
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $vv_flatrate;
						}
						asort($flatrate_structured[$v_ipid][$kk_flatrate]);
						$start_fl_period_day[$v_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day[$v_ipid])));
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $k_flatrate => $v_flatrate)
				{
					$max_flatrate_day[$v_ipid][$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

					$flatrate_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;
					$flatrate_structured_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;

					foreach($flatrate_structured[$v_ipid][$k_flatrate] as $k_day_key => $v_day_value)
					{
						if(strtotime($v_day_value) <= $max_flatrate_day[$v_ipid][$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod[$v_ipid]) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
						{
							$flatrate_inperiod[$v_ipid][] = $v_day_value;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_day_value;
						}
						else
						{
							$flatrate_inperiod[$v_ipid][] = $v_flatrate;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_flatrate;
						}
					}
				}

				foreach($flatrate_structured_inperiod[$v_ipid]['pay_days'] as $k_fl_per => $v_fl_per)
				{
					$flatrate_inperiod_temp[$v_ipid] = $flatrate_structured_inperiod[$v_ipid][$k_fl_per];
					$flatrate_inperiod_temp[$v_ipid] = array_values(array_unique($flatrate_inperiod_temp[$v_ipid]));


					$last_day_flatrate[$v_ipid] = end($flatrate_inperiod_temp[$v_ipid]);
					$ts_last_day_flatrate[$v_ipid] = strtotime($last_day_flatrate[$v_ipid]);
					$next_flatrate_day[$v_ipid] = '';
					while(count($flatrate_inperiod_temp[$v_ipid]) < '7')
					{

						if(strlen($next_flatrate_day[$v_ipid]) == '0')
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $ts_last_day_flatrate[$v_ipid]);
						}
						else
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $next_flatrate_day[$v_ipid]);
						}

						//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
						if($next_flatrate_day[$v_ipid] <= strtotime($current_period['end']))
						{
							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days_overall[$v_ipid]))
//							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days[$v_ipid]))
							{
								$flatrate_inperiod_temp[$v_ipid][] = date('Y-m-d', $next_flatrate_day[$v_ipid]);
							}
						}
						else
						{
							$flatrate_inperiod_temp[$v_ipid][] = $last_day_flatrate[$v_ipid]; //dummy control
						}
					}

					if(empty($final_flatrate[$v_ipid]))
					{
						$final_flatrate[$v_ipid] = array();
					}

					$final_flatrate[$v_ipid] = array_merge_recursive($final_flatrate[$v_ipid], $flatrate_inperiod_temp[$v_ipid]);
				}

				foreach($final_flatrate[$v_ipid] as $k_fl_day => $v_fl_day)
				{
					$seached_key = '';
					if(!in_array($v_fl_day, $sapv_days_active[$v_ipid]))
					{
						$seached_key = array_search($v_fl_day, $final_flatrate[$v_ipid]);

						if(strlen($seached_key) > '0')
						{
							unset($final_flatrate[$v_ipid][$seached_key]);
							array_values($final_flatrate[$v_ipid]);
						}
					}
					unset($seached_key);
				}

				//get back pay days
				$final_flatrate[$v_ipid]['pay_days'] = $flatrate_structured_inperiod[$v_ipid]['pay_days'];
				
				//period in which the flatrate is not billed
				$excluded_fl_period = Pms_CommonData::exclude_bw_flatrate($v_ipid);

				if($excluded_fl_period)
				{
					$pre_final_days[$v_ipid] = $final_flatrate[$v_ipid];

					unset($pre_final_days[$v_ipid]['pay_days']);

					$temp_final_fl[$v_ipid]['days'] = array_diff($pre_final_days[$v_ipid], $excluded_fl_period);
					$temp_final_fl[$v_ipid]['pay_days'] = array_diff($final_flatrate[$v_ipid]['pay_days'], $excluded_fl_period);


					if(count($temp_final_fl[$v_ipid]['days']) == '0' || count($temp_final_fl[$v_ipid]['pay_days']) == '0')
					{
						$final_flatrate[$v_ipid] = array();
					}		
				}
			}

			return $final_flatrate;
		}
		
		
		private function multi_patients_flatrate_days_continued_lag($clientid, $ipids, $current_period, $active_days_overall, $days_nosapv_overall, $hospital_overall_days, $patients_details, $allowed_flatrate_restart_days)
		{
			//days where there is sapv and at least 4w from last product
//			$allowed_flatrate_restart_days[$ipid]['days_products']
//			print_r("allowed_flatrate_restart_days\n");
//			print_r($allowed_flatrate_restart_days);
			$patientmaster = new PatientMaster();

			$drop = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn("ipid", $ipids)
				->andWhere('isdelete=0')
				->andWhere("status != 1")
				->andWhere('verordnet LIKE "%4%" OR verordnet LIKE "%3%"')
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->orderBy("verordnungam ASC");
			$res = $drop->fetchArray();

			//get patients discharges
			$patients_discharge = PatientDischarge::get_patients_discharge($ipids);

			//get client discharge methods
			$discharge_methods = DischargeMethod::getDischargeMethod($clientid, 0);

			//get only dead methods
			foreach($discharge_methods as $k_dis_method => $v_dis_method)
			{
				if($v_dis_method['abbr'] == "TOD" || $v_dis_method['abbr'] == "TODNA")
				{
					$death_methods[] = $v_dis_method['id'];
				}
			}

			$death_methods = array_values(array_unique($death_methods));

			//get discharged dead date
			foreach($patients_discharge as $k_pat_dis => $v_pat_dis)
			{
				if(in_array($v_pat_dis['discharge_method'], $death_methods))
				{
					$discharge_dead_date[$v_pat_dis['ipid']] = date('Y-m-d', strtotime($v_pat_dis['discharge_date']));
				}
			}


			foreach($res as $k_sapv => $v_sapv)
			{
				$s_days = $patientmaster->getDaysInBetween($v_sapv['verordnungam'], $v_sapv['verordnungbis']);

				if(empty($sapv_days[$v_sapv['ipid']]))
				{
					$sapv_days[$v_sapv['ipid']] = array();
				}

				$sapv_days[$v_sapv['ipid']] = array_merge_recursive($s_days, $sapv_days[$v_sapv['ipid']]);
			}
			$sapv_days[$v_sapv['ipid']] = array_values(array_unique($sapv_days[$v_sapv['ipid']]));

			foreach($ipids as $k_ipid => $v_ipid)
			{
				$active_days_overall[$v_ipid] = array_diff($active_days_overall[$v_ipid], $hospital_overall_days[$v_ipid]);

				foreach($sapv_days[$v_ipid] as $k_sapv_day => $v_sapv_day)
				{
					$curent_sapv_day_month = date('Ym', strtotime($v_sapv_day));
					$curent_start_month = date('Ym', strtotime($current_period['start']));

					//calculate overall
					if(count($flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month]) < '7' && in_array($v_sapv_day, $active_days_overall[$v_ipid]))
					{
						$flatrate_starts[$v_ipid]['overall_period'][$curent_sapv_day_month][] = $v_sapv_day;
					}
				}

				$sapv_days_active[$v_ipid] = array_intersect($active_days_overall[$v_ipid], $sapv_days[$v_ipid]);
				$sapv_days_active[$v_ipid] = array_values(array_unique($sapv_days_active[$v_ipid]));
				asort($sapv_days[$v_ipid]);

				$sapv_days[$v_ipid] = array_values($sapv_days[$v_ipid]);

				$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
				$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

				if(count($sapv_days_active[$v_ipid]) > '0')
				{
					$last_sapv_day[$v_ipid] = $sapv_days_active[$v_ipid][0];
					$last_sapv_day_ts[$v_ipid] = strtotime($last_sapv_day[$v_ipid]);

					$currtime[$v_ipid] = $last_sapv_day_ts[$v_ipid];
					$discharge_date = end(end($patients_details[$v_ipid]['active_periods']));

					$end_time[$v_ipid] = strtotime(date('Y-m-d', strtotime($discharge_date)));


					$counted_days[$v_ipid] = array();
					$dbg_count[$v_ipid] = array();
					$i = '0';
					$first_flatrate[$v_ipid] = true;

					//while from $last_sapv_day_ts +1 day and check if exists in in $days_nosapv_overall (increment $counted_days value till 28)
//					if($v_ipid == 'f137d842622fb6001bf925ab459999675db788a4')
//					{
//						print_r("days_nosapv_overall\n");
//						print_r($days_nosapv_overall[$v_ipid]);
//						print_r("allowed_flatrate_restart_days\n");
//						print_r($allowed_flatrate_restart_days[$v_ipid]['days_products']);
//						print_r("sapv_days_active\n");
//						print_r($sapv_days_active[$v_ipid]);
//						print_r("hospital_overall_days\n");
//						print_r($hospital_overall_days[$v_ipid]);
//						exit;
//
//					}
					while($currtime[$v_ipid] <= $end_time[$v_ipid])
					{
						$cur_time_formated[$v_ipid] = date('Y-m-d', $currtime[$v_ipid]);

						//not found in nosapv days(possible sapv) check if is not hospital
						if(!in_array($cur_time_formated[$v_ipid], $days_nosapv_overall[$v_ipid]) &&
							in_array($cur_time_formated[$v_ipid], $allowed_flatrate_restart_days[$v_ipid]['days_products']) &&
							in_array($cur_time_formated[$v_ipid], $sapv_days_active[$v_ipid]) &&
							!in_array($cur_time_formated[$v_ipid], $hospital_overall_days[$v_ipid])
						)
						{
							$flatrate_structured[$v_ipid]['pay_days'][] = $cur_time_formated[$v_ipid];

							//get curent fl start day key
							$fl_start_key[$v_ipid] = array_search($cur_time_formated[$v_ipid], $flatrate_structured[$v_ipid]['pay_days']);
							$flatrate_structured[$v_ipid][$fl_start_key[$v_ipid]][] = $cur_time_formated[$v_ipid];

							$i++;
						}

						$currtime[$v_ipid] = strtotime('+1 day', $currtime[$v_ipid]);
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $kk_flatrate => $vv_flatrate)
				{
					$start_fl_period_day[$v_ipid] = $vv_flatrate;
					$i = 0;

					while(count($flatrate_structured[$v_ipid][$kk_flatrate]) < '7')
					{
						if(!in_array($start_fl_period_day[$v_ipid], $hospital_overall_days[$v_ipid]) && in_array($start_fl_period_day[$v_ipid], $sapv_days_active[$v_ipid]) && !in_array($start_fl_period_day[$v_ipid], $flatrate_structured[$v_ipid][$kk_flatrate]))
						{
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $start_fl_period_day[$v_ipid];
						}
						else
						{
							//make sure we reach 7 elements
							$flatrate_structured[$v_ipid][$kk_flatrate][] = $vv_flatrate;
						}
						asort($flatrate_structured[$v_ipid][$kk_flatrate]);
						$start_fl_period_day[$v_ipid] = date('Y-m-d', strtotime('+1 day', strtotime($start_fl_period_day[$v_ipid])));
					}
				}

				foreach($flatrate_structured[$v_ipid]['pay_days'] as $k_flatrate => $v_flatrate)
				{
					$max_flatrate_day[$v_ipid][$k_flatrate] = strtotime('+6 days', strtotime($v_flatrate));

					$flatrate_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;
					$flatrate_structured_inperiod[$v_ipid]['pay_days'][$k_flatrate] = $v_flatrate;

					foreach($flatrate_structured[$v_ipid][$k_flatrate] as $k_day_key => $v_day_value)
					{
						if(strtotime($v_day_value) <= $max_flatrate_day[$v_ipid][$k_flatrate] && ((in_array(date('Y-m-d', strtotime('-1 day', strtotime($v_day_value))), $flatrate_inperiod[$v_ipid]) && $v_day_value != $v_flatrate) || $v_day_value == $v_flatrate))
						{
							$flatrate_inperiod[$v_ipid][] = $v_day_value;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_day_value;
						}
						else
						{
							$flatrate_inperiod[$v_ipid][] = $v_flatrate;
							$flatrate_structured_inperiod[$v_ipid][$k_flatrate][] = $v_flatrate;
						}
					}
				}

				foreach($flatrate_structured_inperiod[$v_ipid]['pay_days'] as $k_fl_per => $v_fl_per)
				{
					$flatrate_inperiod_temp[$v_ipid] = $flatrate_structured_inperiod[$v_ipid][$k_fl_per];
					$flatrate_inperiod_temp[$v_ipid] = array_values(array_unique($flatrate_inperiod_temp[$v_ipid]));


					$last_day_flatrate[$v_ipid] = end($flatrate_inperiod_temp[$v_ipid]);
					$ts_last_day_flatrate[$v_ipid] = strtotime($last_day_flatrate[$v_ipid]);
					$next_flatrate_day[$v_ipid] = '';
					while(count($flatrate_inperiod_temp[$v_ipid]) < '7')
					{

						if(strlen($next_flatrate_day[$v_ipid]) == '0')
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $ts_last_day_flatrate[$v_ipid]);
						}
						else
						{
							$next_flatrate_day[$v_ipid] = strtotime('+1 day', $next_flatrate_day[$v_ipid]);
						}

						//added check for discharge dead in hospital day -> WHERE IS THE HOSPITAL DAY???
						if($next_flatrate_day[$v_ipid] <= strtotime($current_period['end']))
						{
							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days_overall[$v_ipid]) && !in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $days_nosapv_overall[$v_ipid]))
//							if(in_array(date('Y-m-d', $next_flatrate_day[$v_ipid]), $active_days[$v_ipid]))
							{
								$flatrate_inperiod_temp[$v_ipid][] = date('Y-m-d', $next_flatrate_day[$v_ipid]);
							}
						}
						else
						{
							$flatrate_inperiod_temp[$v_ipid][] = $last_day_flatrate[$v_ipid]; //dummy control
						}
					}

					if(empty($final_flatrate[$v_ipid]))
					{
						$final_flatrate[$v_ipid] = array();
					}

					$final_flatrate[$v_ipid] = array_merge_recursive($final_flatrate[$v_ipid], $flatrate_inperiod_temp[$v_ipid]);
				}

				foreach($final_flatrate[$v_ipid] as $k_fl_day => $v_fl_day)
				{
					$seached_key = '';
					if(!in_array($v_fl_day, $sapv_days_active[$v_ipid]))
					{
						$seached_key = array_search($v_fl_day, $final_flatrate[$v_ipid]);

						if(strlen($seached_key) > '0')
						{
							unset($final_flatrate[$v_ipid][$seached_key]);
							array_values($final_flatrate[$v_ipid]);
						}
					}
					unset($seached_key);
				}

				//get back pay days
				$final_flatrate[$v_ipid]['pay_days'] = $flatrate_structured_inperiod[$v_ipid]['pay_days'];
				
				//period in which the flatrate is not billed
				$excluded_fl_period = Pms_CommonData::exclude_bw_flatrate($v_ipid);

				if($excluded_fl_period)
				{
					$pre_final_days[$v_ipid] = $final_flatrate[$v_ipid];

					unset($pre_final_days[$v_ipid]['pay_days']);

					$temp_final_fl[$v_ipid]['days'] = array_diff($pre_final_days[$v_ipid], $excluded_fl_period);
					$temp_final_fl[$v_ipid]['pay_days'] = array_diff($final_flatrate[$v_ipid]['pay_days'], $excluded_fl_period);


					if(count($temp_final_fl[$v_ipid]['days']) == '0' || count($temp_final_fl[$v_ipid]['pay_days']) == '0')
					{
						$final_flatrate[$v_ipid] = array();
					}		
				}
			}

			return $final_flatrate;
		}
		
		
		private function get_period_sapvs($ipids, $active_days, $hospital_hospiz_days)
		{
			$patientmaster = new PatientMaster();
			if(count($hospital_hospiz_days) == 0)
			{
				$hospital_hospiz_days[] = '999999999999';
			}

			if(is_array($ipids))
			{
				$ipids_arr = $ipids;
			}
			else
			{
				$ipids_arr[] = $ipids;
			}

			$dropSapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $ipids_arr)
				->andWhere('verordnungam != "0000-00-00 00:00:00"')
				->andWhere('verordnungbis != "0000-00-00 00:00:00"')
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->orderBy('verordnungam ASC');
			$droparray = $dropSapv->fetchArray();

			$all_sapv_days = array();
			$temp_sapv_days = array();

			foreach($droparray as $k_sapv => $v_sapv)
			{
				$s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
				$s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));

				$temp_sapv_days = $patientmaster->getDaysInBetween($s_start, $s_end);

				foreach($temp_sapv_days as $k_tsapv => $v_tsapv)
				{

					if(in_array($v_tsapv, $active_days[$v_sapv['ipid']]) && !in_array($v_tsapv, $hospital_hospiz_days))
					{
						$temp_sapv_verordnet[$v_sapv['ipid']] = explode(',', $v_sapv['verordnet']);

						if(empty($all_sapv_days[$v_sapv['ipid']][$v_tsapv]))
						{
							$all_sapv_days[$v_sapv['ipid']][$v_tsapv] = array();
						}
						$all_sapv_days[$v_sapv['ipid']][$v_tsapv] = array_merge_recursive($all_sapv_days[$v_sapv['ipid']][$v_tsapv], $temp_sapv_verordnet[$v_sapv['ipid']]);

						$all_sapv_days[$v_sapv['ipid']][$v_tsapv] = array_values(array_unique($all_sapv_days[$v_sapv['ipid']][$v_tsapv]));
					}
				}
			}

			foreach($all_sapv_days as $k_ipid => $v_sapv_days)
			{
				foreach($v_sapv_days as $k_s_day => $v_s_day)
				{
					if(in_array($k_s_day, $active_days[$k_ipid]) && !in_array($k_s_day, $hospital_hospiz_days))
					{
						$all_sapv_days_arr[$k_ipid][$k_s_day] = $v_s_day;
					}
//					$all_sapv_days_arr['relevant_sapvs_days'][$k_ipid] = $relevant_sapvs_days[$k_ipid];
				}
			}

			return $all_sapv_days_arr;
		}

		private function nosapv_days($active_days_in_period, $hospital_days, $sapv_days)
		{
			foreach($active_days_in_period as $k_active_days_ipid => $v_active_days)
			{
				foreach($v_active_days as $k_active_day => $v_active_day)
				{
					if(in_array($v_active_day, $hospital_days[$k_active_days_ipid]) || !array_key_exists($v_active_day, $sapv_days[$k_active_days_ipid]))
					{
						$real_active_days[$k_active_days_ipid][] = $v_active_day;
					}
				}
			}

			return $real_active_days;
		}

		private function get_patients_period_course($ipids = false)
		{
			if($ipids)
			{
				$course = Doctrine_Query::create()
					->select("id, ipid, course_date, wrong, done_date, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type")
					->from('PatientCourse')
					->where("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U' OR AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
					->andWhere("wrong = 0")
					->andWhere('source_ipid = ""')
					->andWhereIn('ipid', $ipids)
					->orderBy('course_date ASC');
				$course_res = $course->fetchArray();

				foreach($course_res as $k_course => $v_course)
				{
					$course_date = date('Y-m-d', strtotime($v_course['done_date']));

					$days_course[$v_course['ipid']][$course_date][] = $v_course['course_type'];
				}

				return $days_course;
			}
		}
		
		private function get_patients_period_course_lag($ipids = false)
		{
			if($ipids)
			{
				$course = Doctrine_Query::create()
					->select("id, ipid, course_date, wrong, done_date, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type")
					->from('PatientCourse')
					->where("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'U' OR AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
					->andWhere("wrong = 0")
					->andWhereIn('ipid', $ipids)
					->andWhere('source_ipid = ""')
					->orderBy('course_date ASC');
				$course_res = $course->fetchArray();

				foreach($course_res as $k_course => $v_course)
				{
					$course_date = date('Y-m-d H:i:s', strtotime($v_course['done_date']));

					$days_course[$v_course['ipid']][$course_date][$v_course['id']] = $v_course['course_type'];
				}

				return $days_course;
			}
		}

		private function get_patients_period_cf($ipids = false, $current_period = array())
		{
			if(is_array($ipids))
			{
				$ipids_arr = $ipids;
			}
			else
			{
				$ipids_arr[] = $ipids;
			}
			$contact_from_course = Doctrine_Query::create()
				->select("*, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
				->from('PatientCourse')
				->whereIn('ipid', $ipids_arr)
				->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'F'")
				->andWhere("wrong = 1")
				->andWhere("AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') = 'contact_form'")
				->orderBy('course_date ASC');

			$contact_v = $contact_from_course->fetchArray();

			$deleted_contact_forms[] = '9999999999999999';
			foreach($contact_v as $k_contact_v => $v_contact_v)
			{
				$deleted_contact_forms[] = $v_contact_v['recordid'];
			}

			$contact_form_visits = Doctrine_Query::create()
				->select("*")
				->from("ContactForms")
				->whereIn('ipid', $ipids_arr)
				->andWhereNotIn('id', $deleted_contact_forms)
//				->andWhere('DATE(date) BETWEEN DATE("' . $current_period['start'] . '") and DATE("' . $current_period['end'] . '")')
				->andWhere('isdelete ="0"')
				->andWhere('parent ="0"');
			$contact_form_visits->orderBy('begin_date_h, begin_date_m ASC');
			$contact_form_visits_res = $contact_form_visits->fetchArray();

			foreach($contact_form_visits_res as $k_contact_visit => $v_contact_visit)
			{
				$contact_form_visit_date = date('Y-m-d', strtotime($v_contact_visit['billable_date']));

				$cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date][] = $v_contact_visit;

				$cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date]['form_types'][] = $v_contact_visit['form_type'];
				$cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date]['form_types'] = array_unique($cf_visit_days[$v_contact_visit['ipid']][$contact_form_visit_date]['form_types']);
			}

			return $cf_visit_days;
		}

		public function discharged_patients_all($params)
		{
			// report_id = 152
			// report_name = §39 Kinder
			// *§39 Kinder*: it looks  for discharged patients (DEAD patients and not DEAD) and (report period looks for discharges )
			// |Name (Surname) |Vorname  (Firstname) |Geburtstag  (DoB)|Krankenkasse (Health insurance) | Beginn(admission) | Ende (discharge) |

			$logininfo = new Zend_Session_Namespace('Login_Info');

			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			$whereepid = $this->getDocCondition();
			$ipidsarr = $this->getPatientsByDischarge($quarterarr, $yeararr, $montharr);

			$ipidsval = "'X'";
			$comma = ",";
			foreach($ipidsarr as $ipid)
			{
				$ipidsval .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}

			$ipidsArray = $ipidsarr;

			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}

			$Q = Doctrine_Query::create()
				->select("p.*,e.ipid,e.epid,
				AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name,
				AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,
				convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
				convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
				convert(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
				convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city
				");
			$Q->from('PatientMaster p');
			$Q->whereIn('p.ipid', $ipidsArray);
			$Q->andWhere('p.isdelete = 0');
			$Q->andWhere('p.isstandbydelete = 0');
			$Q->orderBy('p.admission_date DESC');
			$Q->leftJoin("p.EpidIpidMapping e");
			$Q->andWhere('p.ipid = e.ipid ');
			$Q->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$Q->orderBy('CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ASC');
			$deadPatients = $Q->fetchArray();

			foreach($deadPatients as $patient)
			{
				$deadIpidPatients[$patient['ipid']] = $patient;
				$deadIpidPatientsarr[] = $patient['ipid'];
				$epidsarr[$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
			}

			$dispatloc = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge as p")
				->whereIn('p.ipid', $ipidsArray)
				->andWhere('isdelete = 0');
			$dispatlocarr = $dispatloc->fetchArray();

			$comma = ",";
			foreach($dispatlocarr as $dischargedpat)
			{
				$dischargeLocationsArray[$dischargedpat['ipid']] = $dischargedpat;
				$comma = ",";
			}
			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
				->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
				->from('PatientHealthInsurance')
				->whereIn('ipid', $ipidsArray);
			$Healtharray = $Health->fetchArray();

			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['number'] = $patient_health["insurance_no"];
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
				$patienthelth[$patient_health['ipid']]['ik'] = $patient_health["institutskennzeichen"];
				$patienthelth[$patient_health['ipid']]['kasse_nr'] = $patient_health["kvk_no"];
			}

			foreach($deadIpidPatients as $k_dipid => $v_dpatient)
			{
				$master[$k_dipid]['epid'] = $epidsarr[$k_dipid]['epid'];
				$master[$k_dipid]['lastname'] = $v_dpatient['last_name'];
				$master[$k_dipid]['firstname'] = $v_dpatient['first_name'];
				$master[$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd']));

				if(strlen($patienthelth[$v_dpatient['ipid']]['company']) > 0)
				{
					$master[$k_dipid]['healthinsurance'] = $patienthelth[$v_dpatient['ipid']]['company'];
				}
				else
				{
					$master[$k_dipid]['healthinsurance'] = "keine Angabe";
				}

				$master[$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($v_dpatient['admission_date']));
				$master[$k_dipid]['diedon'] = date("d.m.Y", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date']));
			}

			foreach($master as $key => $row)
			{
				$health[$key] = $row['healthinsurance'];
				$lastname[$key] = $row['lastname'];
			}

			array_multisort($health, SORT_ASC, $lastname, SORT_ASC, $master);

			foreach($master as $ipid_key => $vpatient)
			{
				$MasterData['data'][$ipid_key]['epid'] = $vpatient['epid'];
				$MasterData['data'][$ipid_key]['lname'] = $vpatient['lastname'];
				$MasterData['data'][$ipid_key]['fname'] = $vpatient['firstname'];
				$MasterData['data'][$ipid_key]['birth_day'] = $vpatient['birthd'];
				$MasterData['data'][$ipid_key]['healthinsurance_name'] = $vpatient['healthinsurance'];
				$MasterData['data'][$ipid_key]['adm_start'] = $vpatient['admissiondate'];
				$MasterData['data'][$ipid_key]['discharge_end'] = $vpatient['diedon'];
			}

			return $MasterData;
		}
		public function period_patients_nopain($params){
			// report_id = 153
			// report_name = Montagsliste NoPain - copy
			
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$required_user = $this->getDocCondition(true);
			$pm = new PatientMaster ();
			
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			
			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
			//print_r($period);exit;
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= 'convert(AES_DECRYPT(p.kontactnumber,"' . Zend_Registry::get('salt') . '") using latin1) as kontactnumber,';
			$sql .= 'birthd,admission_date,';
			
			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
			
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$active_patients_ipids = array_keys($active_patient_details); // return ipids
			//print_r($active_patient_details);exit;
			
			//ISPC-2045
			$pcp_obj = new PatientContactphone();
			$PatientContactphone = $pcp_obj->getByIpid($active_patients_ipids);
			
			
             foreach($active_patient_details as $keypatient => $patient){
					$epids_array[] = $patient['details']['epid'];
					$doctorids[] = $patient['details']['familydoc_id'];
			}
			if(empty($epids_array)){
			    $epids_array[] = "999999999";
			}
			
			if(empty($doctorids)){
			    $doctorids[] = "999999999";
			}
			
			if($active_patients_ipids)
			{
				$i = 1;
				foreach($active_patients_ipids as $ipid)
				{
					if($i != count($active_patients_ipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$activeipids_array[]['ipid'] = $ipid;
					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}
			}
			
			/* -------------------------Get Patients - Contact persons------------------------------------------ */
			$contact = new ContactPersonMaster();
			$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($active_patients_ipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
			/* -------------------------Get Patients - Locations------------------------------------------ */
			
			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod['interval_location_sql_qtz']));
			
			$locations = Doctrine_Query::create()
			->select('*')
			->from('PatientLocation')
			->Where('isdelete = 0')
			->andwhere('' . $time_interval . '')
			->andWhereIn('ipid', $active_patients_ipids);
			$locationaarr = $locations->fetchArray();
			
			if($locationaarr)
			{
				$locinc = 1;
				foreach($locationaarr as $patloc)
				{
					$locationaarripid[$patloc['ipid']] = $patloc;
					if($locinc != count($locationaarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
			
					$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
					$locinc++;
				}
			
				$floc = Doctrine_Query::create()
				->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where("id IN (" . $patientlocationstr . ")")
				->andWhere('isdelete=0')
				->orderBy('location ASC');
				$locationdata = $floc->fetchArray();
			
				foreach($locationdata as $kloc => $vloc)
				{
					$locationLastData[$vloc['id']] = $vloc;
				}
			
				foreach($locationaarr as $k_loc => $v_loc)
				{
			
					$locid = substr($v_loc['location_id'], 0, 4);
					if($locid == "8888")
					{
						$patient_location_id = $v_loc['location_id'];
						$z = 1;
						$cnt_number = 1;
						foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
						{
							if($value_cnt['isdelete'] == '0')
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
								$cnt_number++;
							}
							else
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ';
							}
			
							$z++;
						}
						$locationaarrFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
					}
					else
					{
						$locationaarrFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
						$locationaarrFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
						if($locationaarrFinal[$v_loc['ipid']]['location_type'] == "5")
						{
							$locationaarrFinal[$v_loc['ipid']]['location_street'] = $active_patient_details[$v_loc['ipid']]['details']['street1'];
							$locationaarrFinal[$v_loc['ipid']]['location_zip'] = $active_patient_details[$v_loc['ipid']]['details']['zip'];
							$locationaarrFinal[$v_loc['ipid']]['location_city'] = $active_patient_details[$v_loc['ipid']]['details']['city'];
						}
						else
						{
							$locationaarrFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
							$locationaarrFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
							$locationaarrFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
						}
					}
				
				}
			}

			//		Get diagnosis type
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ", ";
			}
 
			
			//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}
				
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);
				
				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				
				/* ----------------------- Get Treated By -------------------------------- */
                // get client users details
				$treatedbyUsersQ = Doctrine_Query::create()
				->select('*')
				->from('User')
				->andWhere('clientid ="' . $logininfo->clientid . '" ');
				
				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();
				foreach($treatedbyUsersarr as $usertreated)
				{
					$treatedbyUsers[$usertreated['id']] = $usertreated['user_title'].' '.$usertreated['last_name'] . ", " . $usertreated['first_name'];
				}
				
				
				$treatedbyQ = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->whereIn('epid',$epids_array);
				$treatedbyarr = $treatedbyQ->fetchArray();
		 
				foreach($treatedbyarr as $treatedby)
				{
				    if(!in_array($treatedby['userid'],$used_ipids[$treatedby['epid']])){
					    $qpa2epid[$treatedby['epid']][] = $treatedbyUsers[$treatedby['userid']];
       				    $used_ipids[$treatedby['epid']][] = $treatedby['userid'];
				    }
				}
		 
				
				
				/* --------------------------------------------------------------------------- */
				//get healthinsurance
				$patientinsurance = new PatientHealthInsurance();
				$healthinsu_array = $patientinsurance->get_patients_healthinsurance($active_patients_ipids);
				
				foreach($healthinsu_array as $k_healthinsu => $v_healthinsu)
				{
					$patients_healthinsu[$v_healthinsu['ipid']] = $v_healthinsu;
				}
				
				/* ----------------------- Get SAPV-------------------------------- */
				$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
				$s = array('%date_start%', '%date_end%');
				$r = array('verordnungam', 'verordnungbis');
				$sapv_arr_details = array('1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');
				
				$dropSapv = Doctrine_Query::create()
				->select('*, GROUP_CONCAT(verordnet) as vero')
				->from('SapvVerordnung')
				->whereIn('ipid', $active_patients_ipids)
				->andWhere(str_replace($s, $r, $active_cond['interval_sql']))
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();
				
				foreach($droparray as $kverord => $verord)
				{					
					$sapv_values[$verord['ipid']] = explode(',', $verord['vero']);
					foreach($sapv_values[$verord['ipid']] as $k_sapv => $v_sapv)
					{
						$patientsapv[$verord['ipid']][] = $sapv_arr_details[$v_sapv];
					}
				}
				
				foreach($patientsapv as $k => $kval)
				{
					$patient_sapv[$k] = array_unique($kval);
					$patient_final_sapv[$k] = implode(',', $patient_sapv[$k]);
				}
				//print_r($patient_sapv);exit;
				//print_r($patient_final_sapv);exit;
				/* ----------------------- Get Discharge date-------------------------------- */
				$dispatloc = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge as p")
				->whereIn('p.ipid', $active_patients_ipids)
				->andWhere('isdelete = 0');
				$dispatlocarr = $dispatloc->fetchArray();
				
				$comma = ",";
				foreach($dispatlocarr as $dischargedpat)
				{
					$dischargeArray[$dischargedpat['ipid']] = date('d.m.Y',strtotime($dischargedpat['discharge_date']));
					$comma = ",";
				}
				
				foreach($active_patient_details as $keypatient => $patient)
				{
				
					$MasterData['data'][$keypatient]['epid'] = $patient['details']['epid'] . ' ';
					$MasterData['data'][$keypatient]['lastname'] = $patient['details']['last_name'] . ' ';
					$MasterData['data'][$keypatient]['firstname'] = $patient['details']['first_name'] . ' ';
					$MasterData['data'][$keypatient]['location'] = $locationaarrFinal[$keypatient]['location_name'] . '<br />' . $locationaarrFinal[$keypatient]['location_street'] . '<br />' . $locationaarrFinal[$keypatient]['location_zip'] . ' ' . $locationaarrFinal[$keypatient]['location_city'];
					$MasterData['data'][$keypatient]['contact_number'] = $patient['details']['kontactnumber'] . ' ' ;
					
					//ISPC-2045
					if ( $PatientContactphone && ! empty($PatientContactphone[$keypatient])) {						
						$MasterData['data'][$keypatient]['contact_number'] = implode("; ", array_column($PatientContactphone[$keypatient], 'phone_number'));
					}
					
					$MasterData['data'][$keypatient]['birthd'] = date('d.m.Y',strtotime($patient['details']['birthd'])) . ' ';
					$MasterData['data'][$keypatient]['admissiondate'] = date('d.m.Y',strtotime($patient['details']['admission_date']));
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['details']['familydoc_id']]['name'] . ' ';
					$MasterData['data'][$keypatient]['familydoctorphone'] = $Familydoctor[$patient['details']['familydoc_id']]['phone'] . ' ';
					if($patient_final_sapv[$keypatient])
					{
						$MasterData['data'][$keypatient]['verordnung'] = $patient_final_sapv[$keypatient];
					}
					else
					{
						$MasterData['data'][$keypatient]['verordnung'] = 'keine';
					}	
								
					$MasterData['data'][$keypatient]['treatedby'] = implode("<br />",$qpa2epid[$patient['details']['epid']]);
					
					
					if(array_key_exists($keypatient, $patients_healthinsu))
					{
						if(strlen($patients_healthinsu[$keypatient]['company_name']) > 0)
						{
							$MasterData['data'][$keypatient]['healthinsurance_name'] = $patients_healthinsu[$keypatient]['company_name'];
						}
						else
						{
							$MasterData['data'][$keypatient]['healthinsurance_name'] = ' - ';
						}
				
						if(strlen($patients_healthinsu[$keypatient]['insurance_no']) > 0)
						{
							$MasterData['data'][$keypatient]['healthinsurance_nr'] = $patients_healthinsu[$keypatient]['insurance_no'];
						}
						else
						{
							$MasterData['data'][$keypatient]['healthinsurance_nr'] = ' - ';
						}
					}
					else
					{
						$MasterData['data'][$keypatient]['healthinsurance_name'] = ' - ';
						$MasterData['data'][$keypatient]['healthinsurance_nr'] = ' - ';
					}
					$MasterData['data'][$keypatient]['discharge_date'] = $dischargeArray[$keypatient];
				}
				
				return $MasterData;
			}
			public function anthrocare_accounting_period($params){
				// report_id = 154
				// report_name = Anthrocare - Abrechnung
					
				$quarterarr = $params['quarterarr'];
				$yeararr = $params['yeararr'];
				$montharr = $params['montharr'];
				$includearr = $params['includearr'];
				$onlyactive = $params['onlyactive'];
					
				$logininfo = new Zend_Session_Namespace('Login_Info');
				$clientid = $logininfo->clientid;
				$whereepid = $this->getDocCondition();
				$required_user = $this->getDocCondition(true);
				$pm = new PatientMaster ();
					
				$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
				$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
					
				foreach($period ['start'] as $keyd => $startDate)
				{
					$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
					if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
					{
						$report_period_array[$keyd]['end'] = date("Y-m-d");
					}
					else
					{
						$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
					}
				}
				//print_r($period);exit;
				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
				$sql .= 'convert(AES_DECRYPT(p.kontactnumber,"' . Zend_Registry::get('salt') . '") using latin1) as kontactnumber,';
				$sql .= 'birthd,admission_date,';
					
				$conditions['periods'] = $report_period_array;
				$conditions['client'] = $clientid;
				
				$discharged_ipids = $this->getPatientsByDischarge($quarterarr, $yeararr, $montharr);
				//print_r($discharge_ipids);exit;
				if(empty($discharged_ipids))
				{
					$discharged_ipids[] = '99999999';
				}
				//Get Patient Master Data
				$patientMasterData = Doctrine_Query::create()
				->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using latin1) as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber")
				->from('PatientMaster p')
				->whereIn('ipid', $discharged_ipids)
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0');
				
				$patientarr = $patientMasterData->fetchArray();
				
				//get healthinsurance
				$patientinsurance = new PatientHealthInsurance();
				$healthinsu_array = $patientinsurance->get_patients_healthinsurance($discharged_ipids);
				
				foreach($healthinsu_array as $k_healthinsu => $v_healthinsu)
				{
					$patients_healthinsu[$v_healthinsu['ipid']] = $v_healthinsu;
				}
				
				// get contact persons 
				
				$contact = new ContactPersonMaster();
				$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($discharged_ipids);
				//print_r($contactpersons_loc_array);exit;
				foreach($contactpersons_loc_array as $k => $value)
				{
				
					foreach($value as $kv => $valcontact)
					{
						$patient_contactperson[$valcontact['ipid']][$kv]['contactperson'] = $valcontact['cnt_last_name'] . ", " . $valcontact['cnt_first_name'] ."<br />" . $valcontact['cnt_street1'] . "<br />". $valcontact['cnt_zip'] . "<br />". $valcontact['cnt_city'];
						$patient_contactperson[$valcontact['ipid']][$kv]['contactperson_comment'] = $valcontact['cnt_comment'];
					}
				}
				//print_r($patient_contactperson);exit;
				// get SAPV 
				$s = array('%date_start%', '%date_end%');
				$r = array('verordnungam', 'verordnungbis');
				
				$sapv = Doctrine_Query::create()
				->select('*')
				->from('SapvVerordnung')
				->whereIn('ipid', $discharged_ipids)
				->andWhere(' isdelete=0 and ((' . str_replace($s, $r, $active_cond['interval_sql']) . '))')
				->andWhere('status != 1')
				->orderBy("ipid, verordnungam, verordnungbis");
				$sapvarr = $sapv->fetchArray();
				
				if($sapvarr)
				{
					foreach($sapvarr as $keys => $sapv)
					{						
						$sapv_details[$sapv['ipid']][] = $sapv;
							
					}
				}
				//print_r($sapv_details);exit;
				foreach($patientarr as $patient)
				{
					$MasterData['data'][$patient['ipid']]['lastname'] = $patient['last_name'] ;
					$MasterData['data'][$patient['ipid']]['firstname'] = $patient['first_name'];
					$MasterData['data'][$patient['ipid']]['birthd'] = date('d.m.Y',strtotime($patient['birthd']));
					if(strlen($patients_healthinsu[$patient['ipid']]['company_name']) > 0)
					{
						$MasterData['data'][$patient['ipid']]['healthinsurance_name'] = $patients_healthinsu[$patient['ipid']]['company_name'];
					}else 
					{
						$MasterData['data'][$patient['ipid']]['healthinsurance_name'] = '-';
					}
					if(strlen($patients_healthinsu[$patient['ipid']]['insurance_no']) > 0)
					{
						$MasterData['data'][$patient['ipid']]['healthinsurance_nr'] = $patients_healthinsu[$patient['ipid']]['insurance_no'];
					}
					else 
					{
						$MasterData['data'][$patient['ipid']]['healthinsurance_nr'] = '-';
					}
					$MasterData['data'][$patient['ipid']]['contactperson_1'] = $patient_contactperson[$patient['ipid']][0]['contactperson'];
					$MasterData['data'][$patient['ipid']]['contactperson1_comment'] = $patient_contactperson[$patient['ipid']][0]['contactperson_comment'];
					$MasterData['data'][$patient['ipid']]['contactperson_2'] = $patient_contactperson[$patient['ipid']][1]['contactperson'];
					$MasterData['data'][$patient['ipid']]['contactperson2_comment'] = $patient_contactperson[$patient['ipid']][1]['contactperson_comment'];
					
						foreach($sapv_details[$patient['ipid']] as $sapv_key => $sapv_val)
						{
							if(strlen($sapv_val['approved_number']) > 0)
							{
								$MasterData['data'][$patient['ipid']]['sapv'][$sapv_key]['sapv_number'] = $sapv_val['approved_number'];
							}else
							{
								$MasterData['data'][$patient['ipid']]['sapv'][$sapv_key]['sapv_number'] = '-';
							}
							$MasterData['data'][$patient['ipid']]['sapv'][$sapv_key]['verordnung_from'] = date('d.m.Y',strtotime($sapv_val['verordnungam']));
							$MasterData['data'][$patient['ipid']]['sapv'][$sapv_key]['verordnung_to'] = date('d.m.Y',strtotime($sapv_val['verordnungbis']));
						}
					
				}
				return $MasterData;
				
 		}
 		
 		
 		
 		
 		
 		
		public function internal_invoice_nurse_day_products($params){
				// report_id = 155
				// report_name = NO NAME
					
				$quarterarr = $params['quarterarr'];
				$yeararr = $params['yeararr'];
				$montharr = $params['montharr'];
				$includearr = $params['includearr'];
				$onlyactive = $params['onlyactive'];
					
				$logininfo = new Zend_Session_Namespace('Login_Info');
				$clientid = $logininfo->clientid;
				$whereepid = $this->getDocCondition();
				$required_user = $this->getDocCondition(true);
				$pm = new PatientMaster ();
					
				$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
				$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
					
				if($logininfo->usertype != 'SA')
				{
					$this->_redirect(APP_BASE . "reportsnew/exportlist");
				}
				foreach($period['start'] as $keyd => $startDate)
				{
					$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
					if(strtotime($period['end'] [$keyd]) > strtotime(date("Y-m-d")))
					{
						$report_period_array[$keyd]['end'] = date("Y-m-d");
					}
					else
					{
						$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period['end'][$keyd]));
					}
				}
				
				foreach($period ['start'] as $keyd => $startDate)
				{
					$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
				}
				foreach($periodDays as $keyp => $daysp)
				{
					foreach($daysp as $day)
					{
						$finalPeriodDays [] = $day;
					}
				}
				$finalPeriodDays = array_unique($finalPeriodDays);
				
				print_r("\n report period \n ");
				print_r($period);
				
				$sql = 'e.epid, p.ipid, e.ipid,';
				$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
				$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
				$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
				$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
				$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
				$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
				
				$conditions['periods'] = $report_period_array;
				$conditions['client'] = $clientid;
				$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
				
				$total_patients_array = array_keys($active_patient_details); // return ipids

				/* ################################################################################################### */
				/* ----------------- Get Nurse Users - Group  Details -------------------- */
				$usergroup = new Usergroup();
				$MasterGroups = array("5"); // nurses
				$master_group_ids = $usergroup->getUserGroups($MasterGroups);
				
				foreach($master_group_ids as $key => $value)
				{
					$groups_id[$value['groupmaster']] = $value['id'];
					$group_info[$value['id']]['master'] = $value['groupmaster'];
				}
				//get client users
				$user = new User();
				$client_users_arr = $user->getUserByClientid($clientid, '0', true);
				
				foreach($client_users_arr as $k_usr => $v_usr)
				{
					$client_users[$v_usr['id']] = $v_usr;
					$client_users_ids[] = $v_usr['id'];
				}
				
				/* ################################################################################################### */
				/* ----------------- Get User Details -------------------- */
				$usermod = new User();
				$groups_users_array = $usermod->getuserbyGroupId($groups_id, $clientid, true);
 
				foreach($groups_users_array as $key => $val)
				{
					$users ['nurse'][] = $val ['id'];
				}

				if(empty($users['nurse']) || count($users['nurse']) == 0)
				{
					$users['nurse']['9999'] = "999999999999";
				}
				print_r(" \n All nurses \n ");
				print_R($users['nurse']);
				
				
				
				// get all client nurse associeted users
				$users_ids_associated = UsersAssociation::get_associated_user_multiple($users ['nurse']);
				print_r(" \n All users associated to nurses \n ");
				print_R($users_ids_associated );

				
				$nurse_associeted_users = array_unique(array_values($users_ids_associated));
				print_r(" \n Unique associeasted users (related to norses) \n ");
				print_R($nurse_associeted_users );
				
				/* ----------------------------------- Get all saved and completed invoices data  ------------------------------------------ */
				$previous_invoices_items = InternalInvoices::get_users_completed_invoices($clientid,$nurse_associeted_users, $period);

				if($_REQUEST['dbg']== 'all'){
					print_r(" \n All invoices in period\n");
					print_r($previous_invoices_items);
				}

				
				$overall_amount_day_products = 0;
				foreach($previous_invoices_items as $kii=>$inv_items){
					if(!in_array($inv_items['type'],array('sp','cu')) ){
						
						$item_start = strtotime($inv_items['periods']['from_date'][0]);
						$item_end = strtotime($inv_items['periods']['till_date'][0]);
						
						$selected_period_start = strtotime($finalPeriodDays[0]);
						$selected_period_end = strtotime(end($finalPeriodDays));
						
						$intersected = Pms_CommonData::isintersected($item_start, $item_end, $selected_period_start, $selected_period_end);
						if($intersected)
						{
							// all day products
							$day_products[$inv_items['user']][] = $inv_items;
	
							// products to user
							$day_products2users[$inv_items['user']][$inv_items['id']] ['EPID'] = $active_patient_details[$inv_items['ipid']]['details']['epid'];
							$day_products2users[$inv_items['user']][$inv_items['id']] ['patient_name'] = $active_patient_details[$inv_items['ipid']]['details']['last_name'].', '.$active_patient_details[$inv_items['ipid']]['details']['first_name'];
							$day_products2users[$inv_items['user']][$inv_items['id']] ['type'] = $inv_items['type'];
							$day_products2users[$inv_items['user']][$inv_items['id']] ['name'] = $inv_items['name'];
							$day_products2users[$inv_items['user']][$inv_items['id']] ['qty'] = $inv_items['qty'];
							$day_products2users[$inv_items['user']][$inv_items['id']] ['price'] = $inv_items['price'];
							$day_products2users[$inv_items['user']][$inv_items['id']] ['total'] = $inv_items['total'];
							$day_products2users[$inv_items['user']][$inv_items['id']] ['from'] = $inv_items['periods']['from_date'][0];
							$day_products2users[$inv_items['user']][$inv_items['id']] ['till'] = $inv_items['periods']['till_date'][0];
							$day_products2users[$inv_items['user']][$inv_items['id']] ['invoice_id'] = $inv_items['invoice'];
							
							// day product amounts to users
							$day_products_ammount2users[$inv_items['user']]['id'] = $inv_items['user']; 
							$day_products_ammount2users[$inv_items['user']]['name'] = $client_users[$inv_items['user']]['last_name'].', '.$client_users[$inv_items['user']]['first_name']; 
							$day_products_ammount2users[$inv_items['user']]['qty'] += $inv_items['qty']; 
							$day_products_ammount2users[$inv_items['user']]['total'] += $inv_items['total']; 
							$day_products_ammount2users[$inv_items['user']]['items'] += 1; 
							// all day products invoicesd 2 user
							$day_products_invoices2users[$inv_items['user']][] = $inv_items['invoice']; 
							$day_products_invoices2users[$inv_items['user']] = array_unique($day_products_invoices2users[$inv_items['user']]);
							//overall noumn of day products
							$overall_amount_day_products += $inv_items['qty'];
						} else{
							// all day products
							$other_day_products[$inv_items['user']][] = $inv_items;
							
							// products to user
							$other_day_products2users[$inv_items['user']][$inv_items['id']] ['EPID'] = $active_patient_details[$inv_items['ipid']]['details']['epid'];
							$other_day_products2users[$inv_items['user']][$inv_items['id']] ['patient_name'] = $active_patient_details[$inv_items['ipid']]['details']['last_name'].', '.$active_patient_details[$inv_items['ipid']]['details']['first_name'];
							$other_day_products2users[$inv_items['user']][$inv_items['id']] ['type'] = $inv_items['type'];
							$other_day_products2users[$inv_items['user']][$inv_items['id']] ['name'] = $inv_items['name'];
							$other_day_products2users[$inv_items['user']][$inv_items['id']] ['qty'] = $inv_items['qty'];
							$other_day_products2users[$inv_items['user']][$inv_items['id']] ['price'] = $inv_items['price'];
							$other_day_products2users[$inv_items['user']][$inv_items['id']] ['total'] = $inv_items['total'];
							$other_day_products2users[$inv_items['user']][$inv_items['id']] ['from'] = $inv_items['periods']['from_date'][0];
							$other_day_products2users[$inv_items['user']][$inv_items['id']] ['till'] = $inv_items['periods']['till_date'][0];
							$other_day_products2users[$inv_items['user']][$inv_items['id']] ['invoice_id'] = $inv_items['invoice'];
								
							// day product amounts to users
							$other_day_products_ammount2users[$inv_items['user']]['id'] = $inv_items['user'];
							$other_day_products_ammount2users[$inv_items['user']]['name'] = $client_users[$inv_items['user']]['last_name'].', '.$client_users[$inv_items['user']]['first_name'];
							$other_day_products_ammount2users[$inv_items['user']]['qty'] += $inv_items['qty'];
							$other_day_products_ammount2users[$inv_items['user']]['total'] += $inv_items['total'];
							$other_day_products_ammount2users[$inv_items['user']]['items'] += 1;
							// all day products invoicesd 2 user
							$other_day_products_invoices2users[$inv_items['user']][] = $inv_items['invoice'];
							$other_day_products_invoices2users[$inv_items['user']] = array_unique($other_day_products_invoices2users[$inv_items['user']]);
							//overall noumn of day products
							$other_overall_amount_day_products += $inv_items['qty'];
						}
					}
				}
				
				
				print_r(" \n All day products gruped or not \n ");  
				print_r($day_products);

				if($_REQUEST['other'] == '1'){
					print_r(" \n OUTSIDE PERIOD: All day products gruped or not \n ");
					print_r($other_day_products);
				}
				
				print_r(" \n Display : user day products invoices  \n ");  
				print_r($day_products_invoices2users);
				if($_REQUEST['other'] == '1'){
					print_r(" \n OUTSIDE PERIOD:  Display : user day products invoices  \n ");  
					print_r($other_day_products_invoices2users);
				}
				
				
				print_r(" \n Display : user day products \n ");  
				print_r($day_products2users);
				if($_REQUEST['other'] == '1'){
					print_r(" \n OUTSIDE PERIOD:  Display : user day products \n ");  
					print_r($other_day_products2users);
				}
				
				
				print_r(" \n OVERALL AMOUNT PER USER\n ");  
				print_r($day_products_ammount2users);
				if($_REQUEST['other'] == '1'){
					print_r(" \n OUTSIDE PERIOD:  OVERALL AMOUNT PER USER\n ");  
					print_r($other_day_products_ammount2users);
				}
				
				
				print_r(" \n OVERALL AMOUNT  \n ");  
				print_r($overall_amount_day_products);
				if($_REQUEST['other'] == '1'){
					print_r(" \n OUTSIDE PERIOD:  OVERALL AMOUNT  \n ");  
					print_r($other_overall_amount_day_products);
				}
				
				exit;
				
 		}
 		
 		
 		public function heimnetz_first_admission_old($params){
 			
            // report_id = 157
            // report_name = Heimnetz - Erst-Einschreibungen
            	
            $quarterarr = $params['quarterarr'];
            $yeararr = $params['yeararr'];
            $montharr = $params['montharr'];
            $includearr = $params['includearr'];
            $onlyactive = $params['onlyactive'];
            	
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $whereepid = $this->getDocCondition();
            $required_user = $this->getDocCondition(true);
            
            $timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
            $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
            
            
            $pm = new PatientMaster();
            ################################################
            // get all client patients - non standby
            ################################################
            $all_clients_non_standby_patients = $this->getClientPatients($clientid);
            
            ################################################
            //query - get all client patients(non standby) admited in report period
            ################################################
            $clientAdmissionPatients = Doctrine_Query::create()
            ->select('*')
            ->from('PatientMaster')
            ->whereIn('ipid', $all_clients_non_standby_patients)
            ->andWhere('isdelete="0"')
            ->andWhere('isstandby="0"')
            ->andWhere('isstandbydelete="0"')
            ->andWhere('(' . str_replace('%date%', 'admission_date', $timeperiod['admission_sql']) . ')');
            $clientPatientsAdmission = $clientAdmissionPatients->fetchArray();

            
            foreach($clientPatientsAdmission as $patient)
            {
                $pat_admited_in_report[] = $patient['ipid'];
                $patient_fam_doctor[$patient['ipid']] = $patient['familydoc_id'];
                $ipids2fam_doc[$patient['familydoc_id']] [] = $patient['ipid'];
                $patient_details[$patient['ipid']]['admission'] = $patient['admission_date'];
                
                $doctorids[] = $patient['familydoc_id'];
            }
            
            if(count($pat_admited_in_report) == 0)
            {
                $pat_admited_in_report[0] = "999999";
            }
            
            ################################################
            //query - get all client patients(non standby) re-admited in report period
            ################################################
            $s = array('%date_start%', '%date_end%');
            $r = array('date', 'date');
            
            $clientReAdmissionPatients = Doctrine_Query::create()
            ->select('*')
            ->from('PatientReadmission')
            ->whereIn('ipid', $all_clients_non_standby_patients)
            ->andWhere('date_type = "1"')
            ->andWhere('(' . str_replace('%date%', 'date', $timeperiod['active_sql']) . ')');
            $clientPatientsAdmissions = $clientReAdmissionPatients->fetchArray();

            foreach($clientPatientsAdmissions as $patientR)
            {
                $pat_readmited_in_report[] = $patientR['ipid'];
                $readmited_data[$patientR['ipid']][] = $patientR;
            }
            
            
            if(count($pat_readmited_in_report) == 0)
            {
                $pat_readmited_in_report[0] = "999999";
            }

            
            ################################################
             //get all client patients(non standby) -admission, readmission details
            ################################################
            $b_patient_admisions = $pm->getTreatedDaysRealMultiple($all_clients_non_standby_patients);
            
            ################################################
            //get all client patients(non standby) - re-admited outside the report period
            ################################################
            $ipids_readmision_outisde[] = '9999999';
            
            foreach($b_patient_admisions as $k_admision => $v_admision)
            {
                foreach($period['start'] as $k_start => $v_start)
                {
                    if(!Pms_CommonData::isintersected(strtotime(date('Y-m-d',strtotime($v_admision['admission_date']))), strtotime(date('Y-m-d',strtotime($v_admision['admission_date']))), strtotime($v_start), strtotime($period['end'][$k_start] . ' 23:59:59')))
                    {
                      	$ipids_readmision_outisde[] = $k_admision;
                    }
                }
            }
            
            $patients_first_admited_in_report = array_merge($pat_admited_in_report, $pat_readmited_in_report);
    	    $patients_first_admited_in_report = array_values(array_unique($patients_first_admited_in_report));
    	    $patients_first_admited_in_report = array_values(array_diff($patients_first_admited_in_report, $ipids_readmision_outisde));
    	    $patients_first_admited_in_report = array_values(array_unique($patients_first_admited_in_report));
    	    
    		/* ----------------------- Get family doctor details-------------------------------- */
    		$famdoc = new FamilyDoctor();
    		$client_family_doctor = $famdoc->getFamilyDoctors(false, false, false, false);
    		
    		foreach($client_family_doctor as $fd_key => $fd_value)
    		{
    		    $client_family_doctor_data[$fd_value['id']] = $fd_value;
    		}
    		
    		/* -------------------------Get Client locations------------------------------------------ */
    		$client_locations = Locations::getAllLocations(false, false, false, false,  true);
    		foreach($client_locations as $kloc => $vloc)
    		{
    		    $client_location_data[$vloc['id']] = $vloc;
    		}
    		
    		/* -------------------------Get Patients - Contact persons -  for ocation------------------------------------------ */
    		$contact = new ContactPersonMaster();
    		$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($patients_first_admited_in_report, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
    		
    		
    		/* -------------------------Get Patients - locations------------------------------------------ */
    		$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod['interval_location_sql_qtz']));
    		
    		$locations = Doctrine_Query::create()
    		->select('*')
    		->from('PatientLocation')
    		->whereIn('ipid',$patients_first_admited_in_report)
    		->andWhere('location_id != 0')
    		->andWhere('isdelete = 0')
    		->andwhere('(' . $time_interval . ')')
    		->orderBy('valid_from,id ASC');
    		$locationsarr = $locations->fetchArray();
    		
    		
    		foreach($locationsarr as $k => $pat_loc){
    		    $patient_location_array[$pat_loc['ipid']][] =  $pat_loc;
    		    $patient_location_final[$pat_loc['ipid']] = end( $patient_location_array[$pat_loc['ipid']]); 
    		}
    		
    		if($patient_location_final)
    		{
    		    foreach($patient_location_final as $pipid => $patloc)
    		    {
    		        $patlocarrayipid[$patloc['ipid']] = $patloc;
    		        $location_ids[] =  $patloc['location_id'];
    		        $location2ipids[$patloc['location_id']][] =  $patloc['ipid'];
    		        $ipids2locations[$patloc['location_id']][] =  $patloc['ipid'];
    		    }
    		
    		    foreach($patient_location_final as $k_loc => $v_loc)
    		    {
    		        $locid = substr($v_loc['location_id'], 0, 4);
    		
    		        if($locid == "8888")
    		        {
    		            $patient_location_id = $v_loc['location_id'];
    		            $z = 1;
    		            $cnt_number = 1;
    		            foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
    		            {
   		                    $pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson';
    		                $z++;
    		            }
    		            $patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
    		        }
    		        else
    		        {
    		            $patlocarrayFinal[$v_loc['ipid']] = $client_location_data[$v_loc['location_id']]['location'];
    		        }
    		    }
    		}
    		
    		
    		foreach($patients_first_admited_in_report as $k =>$pat_ipid){
    		    foreach($client_family_doctor_data as $doc_id => $doc_data){
    		        if(is_array($ipids2fam_doc[$doc_id]) && !empty($ipids2fam_doc[$doc_id])){
        		        if(in_array($pat_ipid,$ipids2fam_doc[$doc_id])){
        		            foreach($client_location_data as $loc_id => $loc_data){
        		                if(is_array($ipids2locations[$loc_id]) && !empty($ipids2locations[$loc_id])){
        		                    if(in_array($pat_ipid,$ipids2locations[$loc_id])){
                    		            $data[$doc_id][$loc_id][] = $pat_ipid;
                    		            $requested_data[$doc_id][$loc_id] = count($data[$doc_id][$loc_id]);
                    		            $requested_data_dbg[$doc_id][$loc_id][] = $pat_ipid.' '.$patient_details[$pat_ipid]['admission'];
        		                    }
        		                }
        		            }
        		        }
    		        }
    		    }
    		}
    		
    		if($_REQUEST['dbg'] == "1"){
    		    print_r(" \n ");
    		    print_r($requested_data_dbg); 
    		}
    		
    		$knr = 0;
    		$overall = 0;
    		foreach($requested_data as $fam_id => $loc_details){
                $master_data['data'][$fam_id]['family_doctor'] = $client_family_doctor_data[$fam_id]['title'].' '.$client_family_doctor_data[$fam_id]['first_name'].' '.$client_family_doctor_data[$fam_id]['last_name'];
                foreach($loc_details as $location_id => $patient_count){
                    $master_data_locations['data'][$fam_id]['locations_ids'][$location_id]['name'] = $client_location_data[$location_id]['location'];
                    $master_data_locations['data'][$fam_id]['locations_ids'][$location_id]['amount'] = $patient_count;
                    
                    $overall +=$patient_count;
                    $master_data['data'][$fam_id]['locations'] = array_values($master_data_locations['data'][$fam_id]['locations_ids']);
                }
                $knr++;
    		}
    		
    		if($_REQUEST['dbg'] == "1"){
    		    print_r(" \n overall patients 2 location  and familydoc  \n ");
    		    print_r($overall);
    		    exit; 
    		}
    		
    		$master_data['data'] = array_values($master_data['data']);

 
    		return $master_data;
 		}
 		
 		
 		
 		
 		
 		
 		public function heimnetz_first_admission_180901($params){
 			
            // report_id = 157
            // report_name = Heimnetz - Erst-Einschreibungen
            	
            $quarterarr = $params['quarterarr'];
            $yeararr = $params['yeararr'];
            $montharr = $params['montharr'];
            $includearr = $params['includearr'];
            $onlyactive = $params['onlyactive'];
            	
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $whereepid = $this->getDocCondition();
            $required_user = $this->getDocCondition(true);
            
            $timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
            $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
            
            
            
            foreach($period ['start'] as $keyd => $startDate)
            {
                $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
                if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
                {
                    $report_period_array[$keyd]['end'] = date("Y-m-d");
                }
                else
                {
                    $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
                }
            }
            
            $conditions['periods'] = $report_period_array;
            
            $conditions_ov['periods'] = array('0' => array('start' => "2014-01-01", 'end' => date("Y-m-d")));
            $conditions_ov['client'] = $clientid;
            
            $sql = 'e.epid, p.ipid, e.ipid,';
            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
            
            $active_patient_details = Pms_CommonData::patients_days($conditions_ov, $sql);
            $ipidarr = array_keys($active_patient_details); // return ipids

            foreach($active_patient_details as $kipid =>$p_data){
                foreach($period['start'] as $k_start => $v_start)
                {
                    if(Pms_CommonData::isintersected(strtotime(date('Y-m-d',strtotime($p_data['admission_days'][0]))), strtotime(date('Y-m-d',strtotime($p_data['admission_days'][0]))), strtotime($v_start), strtotime($period['end'][$k_start] . ' 23:59:59')))
                    {
                        $admission_inside[] = $kipid;
                        $patient_inside[$kipid][] = $period_data;
                    } else {
                        $admission_outside[] = $kipid;
                        $patient_outside[$kipid][] = $period_data;
                        unset($active_patient_details[$kipid]);
                    }
                }
            }
            
            foreach($active_patient_details as $kipid => $pat_data){
              $ipids2fam_doc[$pat_data['details']['familydoc_id']] [ ] = $pat_data['details']['ipid']; 
              $fam_doc2ipid[$pat_data['details']['ipid']]= $pat_data['details']['familydoc_id']; 
              $patient_ipids[] = $pat_data['details']['ipid'];

              $doc_ids[] = $pat_data['details']['familydoc_id']; 
              
              $patient_details[$pat_data['details']['ipid']] = $pat_data['details'];
              
            }
            if(empty($patient_ipids)){
                $patient_ipids[] = "9999999999";
            }
            if(empty($doc_ids)){
                $doc_ids[] = "9999999999";
            }
    		/* ----------------------- Get family doctor details-------------------------------- */
    		$famdoc = new FamilyDoctor();
    		$client_family_doctor = $famdoc->getFamilyDoctors(false, false, false, $doc_ids);
    		
    		foreach($client_family_doctor as $fd_key => $fd_value)
    		{
    		    $client_family_doctor_data[$fd_value['id']] = $fd_value;
    		}
 		   		
    		/* -------------------------Get Patients - Contact persons -  for ocation------------------------------------------ */
    		$contact = new ContactPersonMaster();
    		$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($patient_ipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
    		
    		/* -------------------------Get Patients - locations------------------------------------------ */
    		$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod['interval_location_sql_qtz']));
    		
    		$locations = Doctrine_Query::create()
    		->select('*')
    		->from('PatientLocation')
    		->whereIn('ipid',$patient_ipids)
    		->andWhere('location_id != 0')
    		->andWhere('isdelete = 0')
    		->andwhere('(' . $time_interval . ')')
    		->orderBy('valid_from,id ASC');
    		$locationsarr = $locations->fetchArray();
    		
  		    $has_contact_person = 0; 
    		foreach($locationsarr as $k => $pat_loc){
    		    $patient_location_array[$pat_loc['ipid']][] =  $pat_loc;
    		    $patient_location_final[$pat_loc['ipid']] = end( $patient_location_array[$pat_loc['ipid']]); 
    		    $location_ids[] = $pat_loc['location_id']; 
    		    
    		    $locid = substr($pat_loc['location_id'], 0, 4);
    		    if($locid == "8888")
    		    {
    		     $has_contact_person += 1; 
     		    } 
    		}
    		if(empty($location_ids)){
    		    $location_ids[] = "9999999999";
    		}
    		/* -------------------------Get Client locations------------------------------------------ */
    		$client_locations = Locations::getAllLocations(false, false, false, $location_ids,  true);
    		foreach($client_locations as $kloc => $vloc)
    		{
    		    $client_location_data[$vloc['id']] = $vloc;
    		}
    		if($has_contact_person > 0){
    		    $client_location_data["88888888"]['location'] = "bei Kontaktperson";
    		}
   		    $client_location_data["9999999999"]['location'] = " - ";
    		
    		
    		if($patient_location_final)
    		{
    		    foreach($patient_location_final as $pipid => $patloc)
    		    {
    		        $patlocarrayipid[$patloc['ipid']] = $patloc;
    		        $location_ids[] =  $patloc['location_id'];
    		        $location2ipids[$patloc['location_id']][] =  $patloc['ipid'];
    		        $locid = substr($patloc['location_id'], 0, 4);
    		        
    		        if($locid == "8888")
    		        {
        		        $ipids2locations['88888888'][] =  $patloc['ipid'];
    		        } else{
        		        $ipids2locations[$patloc['location_id']][] =  $patloc['ipid'];
    		        }
    		    }
    		    
    		    
    		
    		    foreach($patient_location_final as $k_loc => $v_loc)
    		    {
    		        $locid = substr($v_loc['location_id'], 0, 4);
    		
    		        if($locid == "8888")
    		        {
    		            $patient_location_id = $v_loc['location_id'];
    		            $z = 1;
    		            $cnt_number = 1;
    		            foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
    		            {
   		                    $pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson';
    		                $z++;
    		            }
    		            $patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
    		            $patlocarray2locid[$v_loc['ipid']] = "88888888";
    		        }
    		        else
    		        {
    		            $patlocarrayFinal[$v_loc['ipid']] = $client_location_data[$v_loc['location_id']]['location'];
    		            $patlocarray2locid[$v_loc['ipid']] = $v_loc['location_id'];
    		        }
    		    }
    		}
    		
    		
 			foreach($patient_ipids as $k =>$pat_ipid){
    		    $pateint_location_ids[$pat_ipid] = $patlocarray2locid[$pat_ipid];
    		    $pateint_doc_ids[$pat_ipid] = $fam_doc2ipid[$pat_ipid];
    		}
    		
    		foreach($patient_ipids as $k =>$pat_ipid){
    		    if($pateint_doc_ids[$pat_ipid] != 0){
        		    foreach($client_family_doctor_data as $doc_id => $doc_data){
        		        if(is_array($ipids2fam_doc[$doc_id]) && !empty($ipids2fam_doc[$doc_id])){
            		        if(in_array($pat_ipid,$ipids2fam_doc[$doc_id])){
            		            if($pateint_location_ids[$pat_ipid]){
                		            foreach($client_location_data as $loc_id => $loc_data){
                		                if(is_array($ipids2locations[$loc_id]) && !empty($ipids2locations[$loc_id])){
                		                    if(in_array($pat_ipid,$ipids2locations[$loc_id])){
                            		            $data[$doc_id][$loc_id][] = $pat_ipid;
                            		            $requested_data[$doc_id][$loc_id] = count($data[$doc_id][$loc_id]);
                            		            $requested_data_dbg[$doc_id][$loc_id][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
                		                    } 
                		                }  
                		            }
            		            } else {
                		            $data[$doc_id]["9999999999"][] = $pat_ipid;
                		            $requested_data[$doc_id]["9999999999"] = count($data[$doc_id]["9999999999"]);
                		            $requested_data_dbg[$doc_id]["9999999999"][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
            		                
            		            }
            		        } 
        		        }  
        		    } 
    		    } else{
        		    if($pateint_location_ids[$pat_ipid]){
        		        foreach($client_location_data as $loc_id => $loc_data){
        		            if(is_array($ipids2locations[$loc_id]) && !empty($ipids2locations[$loc_id])){
        		                if(in_array($pat_ipid,$ipids2locations[$loc_id])){
        		                    $data["9999999999"][$loc_id][] = $pat_ipid;
        		                    $requested_data["9999999999"][$loc_id] = count($data["9999999999"][$loc_id]);
        		                    $requested_data_dbg["9999999999"][$loc_id][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
        		                }
        		            }
        		        }
        		    } else {
        		            $data["9999999999"]["9999999999"][] = $pat_ipid;
        		            $requested_data["9999999999"]["9999999999"] = count($data["9999999999"]["9999999999"]);
        		            $requested_data_dbg["9999999999"]["9999999999"][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
            		    }
    		    }
    		    
    		}
    		
 
 		 
    		if($_REQUEST['dbg'] == "1"){
    		    print_r(" \n count patients \n ");
    		    print_r(count($patient_ipids));
    		    print_r(" \n ");
    		    print_r(" \n patients \n ");
    		    print_r($patient_ipids);
    		    print_r(" \n ");
    		    print_r($requested_data_dbg);
    		}
    		
    		$knr = 0;
    		$overall = 0;
    		foreach($requested_data as $fam_id => $loc_details){
    		    if($fam_id == "9999999999"){
                    $master_data['data'][$fam_id]['heimnetz_familydoc'] = "-";
    		    } else{
                    $master_data['data'][$fam_id]['heimnetz_familydoc'] = $client_family_doctor_data[$fam_id]['title'].' '.$client_family_doctor_data[$fam_id]['first_name'].' '.$client_family_doctor_data[$fam_id]['last_name'];
    		    }
    		    
                foreach($loc_details as $location_id => $patient_count){
                $master_data_locations['data'][$fam_id]['locations_ids'][$location_id]['name'] = $client_location_data[$location_id]['location'];
                $master_data_locations['data'][$fam_id]['locations_ids'][$location_id]['amount'] = $patient_count;
                
                $overall +=$patient_count;
                $master_data['data'][$fam_id]['locations'] = array_values($master_data_locations['data'][$fam_id]['locations_ids']);
                }
                $knr++;
    		}
    		
    		if($_REQUEST['dbg'] == "1"){
    		    print_r(" \n overall patients 2 location  and familydoc  \n ");
    		    print_r($overall);
    		    exit; 
    		}
    		
    		$master_data['data'] = array_values($master_data['data']);

 
    		return $master_data;
 		}
 		
 		
 		
 		public function heimnetz_first_admission($params){
 			
            // report_id = 157
            // report_name = Heimnetz - Erst-Einschreibungen
            	
            $quarterarr = $params['quarterarr'];
            $yeararr = $params['yeararr'];
            $montharr = $params['montharr'];
            $includearr = $params['includearr'];
            $onlyactive = $params['onlyactive'];
            	
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $whereepid = $this->getDocCondition();
            $required_user = $this->getDocCondition(true);
            
            $timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
            $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
            
            
            
            foreach($period ['start'] as $keyd => $startDate)
            {
                $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
                if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
                {
                    $report_period_array[$keyd]['end'] = date("Y-m-d");
                }
                else
                {
                    $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
                }
            }
            
            $conditions['periods'] = $report_period_array;
            
            // if user selected - get only assigned to user
            if($whereepid){
                $patientMasterData = Doctrine_Query::create()
                ->select("e.ipid")
                ->from("EpidIpidMapping e")
                ->where($whereepid . ' e.clientid = ' . $logininfo->clientid);
                $pmarr = $patientMasterData->fetchArray();
                	
                $doctor_assigned_ipids = array();
                foreach($pmarr as $patient)
                {
                    $doctor_assigned_ipids[] =  $patient['ipid'];
                }
                	
                if(!empty($doctor_assigned_ipids)){
                    $conditions_ipids['ipids'] =  $doctor_assigned_ipids;
                }
                 
            } else{
                $conditions_ipids['ipids'] = false;
            }
            
            
            $conditions_ov['periods'] = array('0' => array('start' => "2010-01-01", 'end' => date("Y-m-d")));
            $conditions_ov['client'] = $clientid;
            $conditions_ov['ipids'] = $conditions_ipids['ipids'] ;
            
            $sql = 'e.epid, p.ipid, e.ipid,';
            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
            
            $active_patient_details = Pms_CommonData::patients_days($conditions_ov, $sql);
            $ipidarr = array_keys($active_patient_details); // return ipids
            
            
            foreach($active_patient_details as $kipid =>$p_data){
                foreach($period['start'] as $k_start => $v_start)
                {
                    if(Pms_CommonData::isintersected(strtotime(date('Y-m-d',strtotime($p_data['admission_days'][0]))), strtotime(date('Y-m-d',strtotime($p_data['admission_days'][0]))), strtotime($v_start), strtotime($period['end'][$k_start] . ' 23:59:59')))
                    {
                        $admission_inside[] = $kipid;
                        $patient_inside[$kipid][] = $period_data;
                    } else {
                        $admission_outside[] = $kipid;
                        $patient_outside[$kipid][] = $period_data;
                        unset($active_patient_details[$kipid]);
                    }
                }
            }
            
            
            
            
            foreach($active_patient_details as $kipid => $pat_data){
                
              $epids_array[] = $pat_data['details'] ['epid'];
              $patient_epid2ipid[$pat_data['details'] ['epid']] = $kipid; 
              $patient_ipids[] = $pat_data['details']['ipid'];
              $patient_details[$pat_data['details']['ipid']] = $pat_data['details'];
            }
            if(empty($patient_ipids)){
                $patient_ipids[] = "9999999999";
            }
            if(empty($epids_array)){
                $epids_array[] = "9999999999";
            }
            
            
            
            /* ################################################################################################### */
            /* ----------------- Get User - Group  Details -------------------- */
            $usergroup = new Usergroup();
            $MasterGroups = array("4","9");
            $master_group_ids = $usergroup->getUserGroups($MasterGroups);
            
            foreach($master_group_ids as $key => $value)
            {
                $groups_id[$value['groupmaster']] = $value['id'];
                $group_info[$value['id']]['master'] = $value['groupmaster'];
            }
            /* ################################################################################################### */
            /* ----------------- Get User group Details -------------------- */
            $usermod = new User();
            $groups_users_array = $usermod->getuserbyGroupId($groups_id, $clientid, true);
            
            foreach($groups_users_array as $key => $val)
            {
               $users ['doctor'][] = $val ['id'];
            }
            if(empty($users['doctor']) || count($users['doctor']) == 0)
            {
                $users['doctor']['9999'] = "999999999999";
            }
            
            /* ----------------------- Get client users details-------------------------------- */
            $cl_users_q = Doctrine_Query::create()
            ->select('*')
            ->from('User')
            ->andWhere('clientid ="' . $logininfo->clientid . '" ')
            ->andWhereIn('id', $users['doctor']);
            $cl_users_array = $cl_users_q->fetchArray();
            foreach($cl_users_array as $usertreated)
            {
                $user_details[$usertreated['id']] = $usertreated['user_title'].' '.$usertreated['last_name'] . ", " . $usertreated['first_name'];
                $user_details_last_name[$usertreated['id']] = $usertreated['last_name'];
                $client_user_data[$usertreated['id']] = $usertreated;
            }
            
            /* ----------------------- Assigned users-------------------------------- */

            $treatedbyQ = Doctrine_Query::create()
            ->select('*')
            ->from('PatientQpaMapping')
            ->whereIn('epid',$epids_array);
            $treatedbyarr = $treatedbyQ->fetchArray();
            	
            foreach($treatedbyarr as $treatedby)
            {
                if(!in_array($treatedby['userid'],$used_ipids[$treatedby['epid']])){
                    
                    $qpas2epid[$treatedby['epid']][] = $treatedby['userid'];
                    $qpa2ipids[$patient_epid2ipid[$treatedby['epid']]][] = $treatedby['userid'];

                    $ipids2qpa[$treatedby['userid']][] = $patient_epid2ipid[$treatedby['epid']];
                    $epids2qpa[$treatedby['userid']][] = $treatedby['epid'];
                    
                    $qpa_details2epid[$treatedby['epid']][] = $user_details[$treatedby['userid']];
                    $qpa_details2ipid[$patient_epid2ipid[$treatedby['epid']]][] = $user_details[$treatedby['userid']];

                    $used_ids[$treatedby['epid']][] = $treatedby['userid'];
                }
            }
            
            if($_REQUEST['dbg'] == 1){
                
                print_r("  \n all epids assigned to user \n");
                print_r($epids2qpa);
            }
            
    		/* -------------------------Get Patients - Contact persons -  for ocation------------------------------------------ */
    		$contact = new ContactPersonMaster();
    		$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($patient_ipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
    		
    		/* -------------------------Get Patients - locations------------------------------------------ */
    		$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod['interval_location_sql_qtz']));
    		
    		$locations = Doctrine_Query::create()
    		->select('*')
    		->from('PatientLocation')
    		->whereIn('ipid',$patient_ipids)
    		->andWhere('location_id != 0')
    		->andWhere('isdelete = 0')
    		->andwhere('(' . $time_interval . ')')
    		->orderBy('valid_from,id ASC');
    		$locationsarr = $locations->fetchArray();
    		
  		    $has_contact_person = 0; 
    		foreach($locationsarr as $k => $pat_loc){
    		    $patient_location_array[$pat_loc['ipid']][] =  $pat_loc;
    		    $patient_location_final[$pat_loc['ipid']] = end( $patient_location_array[$pat_loc['ipid']]); 
    		    $location_ids[] = $pat_loc['location_id']; 
    		    
    		    $locid = substr($pat_loc['location_id'], 0, 4);
    		    if($locid == "8888")
    		    {
    		     $has_contact_person += 1; 
     		    } 
    		}
    		if(empty($location_ids)){
    		    $location_ids[] = "9999999999";
    		}
    		/* -------------------------Get Client locations------------------------------------------ */
    		$client_locations = Locations::getAllLocations(false, false, false, $location_ids,  true);
    		foreach($client_locations as $kloc => $vloc)
    		{
    		    $client_location_data[$vloc['id']] = $vloc;
    		}
    		if($has_contact_person > 0){
    		    $client_location_data["88888888"]['location'] = "bei Kontaktperson";
    		}
   		    $client_location_data["9999999999"]['location'] = " - ";
    		
    		
    		if($patient_location_final)
    		{
    		    foreach($patient_location_final as $pipid => $patloc)
    		    {
    		        $patlocarrayipid[$patloc['ipid']] = $patloc;
    		        $location_ids[] =  $patloc['location_id'];
    		        $location2ipids[$patloc['location_id']][] =  $patloc['ipid'];
    		        $locid = substr($patloc['location_id'], 0, 4);
    		        
    		        if($locid == "8888")
    		        {
        		        $ipids2locations['88888888'][] =  $patloc['ipid'];
    		        } else{
        		        $ipids2locations[$patloc['location_id']][] =  $patloc['ipid'];
    		        }
    		    }
    		    
    		    
    		
    		    foreach($patient_location_final as $k_loc => $v_loc)
    		    {
    		        $locid = substr($v_loc['location_id'], 0, 4);
    		
    		        if($locid == "8888")
    		        {
    		            $patient_location_id = $v_loc['location_id'];
    		            $z = 1;
    		            $cnt_number = 1;
    		            foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
    		            {
   		                    $pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson';
    		                $z++;
    		            }
    		            $patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
    		            $patlocarray2locid[$v_loc['ipid']] = "88888888";
    		        }
    		        else
    		        {
    		            $patlocarrayFinal[$v_loc['ipid']] = $client_location_data[$v_loc['location_id']]['location'];
    		            $patlocarray2locid[$v_loc['ipid']] = $v_loc['location_id'];
    		        }
    		    }
    		}
    		
    		
 			foreach($patient_ipids as $k =>$pat_ipid){
    		    $pateint_location_ids[$pat_ipid] = $patlocarray2locid[$pat_ipid];
    		    $pateint_doc_ids[$pat_ipid] = $qpa2ipids[$pat_ipid];
    		}
    		
    		foreach($patient_ipids as $k =>$pat_ipid){
    		    if(!empty($pateint_doc_ids[$pat_ipid])){
        		    foreach($client_user_data as $doc_id => $doc_data){
        		        if(is_array($ipids2qpa[$doc_id]) && !empty($ipids2qpa[$doc_id])){
            		        if(in_array($pat_ipid,$ipids2qpa[$doc_id])){
            		            if($pateint_location_ids[$pat_ipid]){
                		            foreach($client_location_data as $loc_id => $loc_data){
                		                if(is_array($ipids2locations[$loc_id]) && !empty($ipids2locations[$loc_id])){
                		                    if(in_array($pat_ipid,$ipids2locations[$loc_id])){
                            		            $data[$doc_id][$loc_id][] = $pat_ipid;
                            		            $requested_data[$doc_id][$loc_id] = count($data[$doc_id][$loc_id]);
                            		            $requested_data_dbg[$doc_id][$loc_id][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
                		                    } 
                		                }  
                		            }
            		            } else {
                		            $data[$doc_id]["9999999999"][] = $pat_ipid;
                		            $requested_data[$doc_id]["9999999999"] = count($data[$doc_id]["9999999999"]);
                		            $requested_data_dbg[$doc_id]["9999999999"][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
            		                
            		            }
            		        } 
        		        }  
        		    } 
    		    } else{
        		    if($pateint_location_ids[$pat_ipid]){
        		        foreach($client_location_data as $loc_id => $loc_data){
        		            if(is_array($ipids2locations[$loc_id]) && !empty($ipids2locations[$loc_id])){
        		                if(in_array($pat_ipid,$ipids2locations[$loc_id])){
        		                    $data["9999999999"][$loc_id][] = $pat_ipid;
        		                    $requested_data["9999999999"][$loc_id] = count($data["9999999999"][$loc_id]);
        		                    $requested_data_dbg["9999999999"][$loc_id][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
        		                }
        		            }
        		        }
        		    } else {
        		            $data["9999999999"]["9999999999"][] = $pat_ipid;
        		            $requested_data["9999999999"]["9999999999"] = count($data["9999999999"]["9999999999"]);
        		            $requested_data_dbg["9999999999"]["9999999999"][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
            		    }
    		    }
    		    
    		}
    		
 
 		 
    		if($_REQUEST['dbg'] == "1"){
    		    print_r(" \n count patients \n ");
    		    print_r(count($patient_ipids));
    		    print_r(" \n ");
    		    print_r(" \n patients \n ");
    		    print_r($patient_ipids);
    		    print_r(" \n ");
    		    print_r($requested_data_dbg);
    		}
    		
    		$knr = 0;
    		$overall = 0;
    		foreach($requested_data as $user_id => $loc_details){
    		    if($user_id == "9999999999"){
                    $doc_master_data['data'][$user_id]['heimnetz_familydoc'] = "-";
                    $doc_master_data['data'][$user_id]['user_last_name'] = "-";
    		    } else {
                    $doc_master_data['data'][$user_id]['heimnetz_familydoc'] = $user_details[$user_id];
                    $doc_master_data['data'][$user_id]['user_last_name'] = $user_details_last_name[$user_id];
    		    }
    		    
                foreach($loc_details as $location_id => $patient_count){
                    $master_data_locations['data'][$user_id]['locations_ids'][$location_id]['name'] = $client_location_data[$location_id]['location'];
                    $master_data_locations['data'][$user_id]['locations_ids'][$location_id]['amount'] = $patient_count;
                    
                    $overall +=$patient_count;
                    $loc_master_data['data'][$user_id]['locations'] = array_values($master_data_locations['data'][$user_id]['locations_ids']);
                }
                $knr++;
    		}
    		
    		if($_REQUEST['dbg'] == "1"){
    		    print_r(" \n overall patients 2 location  and familydoc  \n ");
    		    print_r($overall);
    		    exit; 
    		}
    		
    		$master_data['data'] = $this->array_sort($doc_master_data['data'], 'user_last_name', SORT_ASC);
    		
    		foreach($loc_master_data['data'] as $user_id => $locations_data){
    		    foreach($locations_data as $k=> $pat_data){
    		        $master_data['data'][$user_id][$k] = array_values($this->array_sort($pat_data, 'name', SORT_ASC));
    		    }
    		}
    		$master_data['data'] = array_values($master_data['data']);
    		$master_data['extra']['sum'] = $overall;
 
    		return $master_data;
 		}
 		
 		
 		public function heimnetz_patient_fam2location($params){
 			
            // report_id = 158
            // report_name = Heimnetz - Erst-Einschreibungen // SECOND
            	
            $quarterarr = $params['quarterarr'];
            $yeararr = $params['yeararr'];
            $montharr = $params['montharr'];
            $includearr = $params['includearr'];
            $onlyactive = $params['onlyactive'];
            	
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $whereepid = $this->getDocCondition();
            $required_user = $this->getDocCondition(true);
            
            $timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
            $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
            $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
            $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
            
            
            foreach($period ['start'] as $keyd => $startDate)
            {
                $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
                if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
                {
                    $report_period_array[$keyd]['end'] = date("Y-m-d");
                }
                else
                {
                    $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
                }
            }
            
            // if user selected - get only assigned to user
            if($whereepid){
                $patientMasterData = Doctrine_Query::create()
                ->select("e.ipid")
                ->from("EpidIpidMapping e")
                ->where($whereepid . ' e.clientid = ' . $logininfo->clientid);
                $pmarr = $patientMasterData->fetchArray();
                 
                $doctor_assigned_ipids = array();
                foreach($pmarr as $patient)
                {
                    $doctor_assigned_ipids[] =  $patient['ipid'];
                }
                 
                if(!empty($doctor_assigned_ipids)){
                    $conditions_ipids['ipids'] =  $doctor_assigned_ipids;
                }
                 
            } else{
                $conditions_ipids['ipids'] = false;
            }
            
            $conditions['periods'] = $report_period_array;
            $conditions['client'] = $clientid;
            $conditions['ipids'] = $conditions_ipids['ipids'];
            
            $sql = 'e.epid, p.ipid, e.ipid,';
            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
            
            $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);

            foreach($active_patient_details as $kipid =>$p_data){
                foreach($p_data['active_periods'] as $per_id => $period_data){

                    foreach($period['start'] as $k_start => $v_start)
                    {
                        if(!Pms_CommonData::isintersected(strtotime(date('Y-m-d',strtotime($period_data['start']))), strtotime(date('Y-m-d',strtotime($period_data['start']))), strtotime($v_start), strtotime($period['end'][$k_start] . ' 23:59:59')))
                        {
                            $admission_outside[] = $kipid;
                            $patient_outside[$kipid][] = $period_data;
                        } else{
                            $admission_inside[] = $kipid;
                            $patient_inside[$kipid][] = $period_data;
                            unset($active_patient_details[$kipid]); 
                        }
                    }
                    
                }
            }
            foreach($active_patient_details as $kipid => $pat_data){
                
                
                $epids_array[] = $pat_data['details'] ['epid'];
                
                $patient_epid2ipid[$pat_data['details'] ['epid']] = $kipid;
                
                $patient_ipids[] = $pat_data['details']['ipid'];
                
                $patient_details[$pat_data['details']['ipid']] = $pat_data['details'];
            }
            if(empty($patient_ipids )){
                 $patient_ipids[] = "9999999999";
            }
            
    
            if(empty($epids_array )){
                 $epids_array[] = "9999999999";
            }
            


            /* ################################################################################################### */
            /* ----------------- Get User - Group  Details -------------------- */
            $usergroup = new Usergroup();
            $MasterGroups = array("4","9");
            $master_group_ids = $usergroup->getUserGroups($MasterGroups);
            
            foreach($master_group_ids as $key => $value)
            {
                $groups_id[$value['groupmaster']] = $value['id'];
                $group_info[$value['id']]['master'] = $value['groupmaster'];
            }
            /* ################################################################################################### */
            /* ----------------- Get User group Details -------------------- */
            $usermod = new User();
            $groups_users_array = $usermod->getuserbyGroupId($groups_id, $clientid, true);
            
            foreach($groups_users_array as $key => $val)
            {
                $users ['doctor'][] = $val ['id'];
            }
            if(empty($users['doctor']) || count($users['doctor']) == 0)
            {
                $users['doctor']['9999'] = "999999999999";
            }
            
            
            /* ----------------------- Get client users details-------------------------------- */
            $cl_users_q = Doctrine_Query::create()
            ->select('*')
            ->from('User')
            ->andWhere('clientid ="' . $logininfo->clientid . '" ')
            ->andWhereIn('id',$users['doctor']);
            
            $cl_users_array = $cl_users_q->fetchArray();
            foreach($cl_users_array as $usertreated)
            {
                $user_details[$usertreated['id']] = $usertreated['user_title'].' '.$usertreated['last_name'] . ", " . $usertreated['first_name'];
                $user_last_name[$usertreated['id']] = $usertreated['last_name'];
                $client_user_data[$usertreated['id']] = $usertreated;
            }
            
            /* ----------------------- Assigned users-------------------------------- */
            
            $treatedbyQ = Doctrine_Query::create()
            ->select('*')
            ->from('PatientQpaMapping')
            ->whereIn('epid',$epids_array);
            $treatedbyarr = $treatedbyQ->fetchArray();
             
            foreach($treatedbyarr as $treatedby)
            {
                if(!in_array($treatedby['userid'],$used_ipids[$treatedby['epid']])){
            
                    $qpas2epid[$treatedby['epid']][] = $treatedby['userid'];
                    $qpa2ipids[$patient_epid2ipid[$treatedby['epid']]][] = $treatedby['userid'];
            
                    $ipids2qpa[$treatedby['userid']][] = $patient_epid2ipid[$treatedby['epid']];
                    $epids2qpa[$treatedby['userid']][] = $treatedby['epid'];
            
                    $qpa_details2epid[$treatedby['epid']][] = $user_details[$treatedby['userid']];
                    $qpa_details2ipid[$patient_epid2ipid[$treatedby['epid']]][] = $user_details[$treatedby['userid']];
            
                    $used_ids[$treatedby['epid']][] = $treatedby['userid'];
                }
            }
            
            if($_REQUEST['dbg'] == 1){
            
                print_r("  \n all epids assigned to user \n");
                print_r($epids2qpa);
            }
            
    		/* -------------------------Get Patients - Contact persons -  for ocation------------------------------------------ */
    		$contact = new ContactPersonMaster();
    		$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($patient_ipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
    		
    		/* -------------------------Get Patients - locations------------------------------------------ */
    		$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod['interval_location_sql_qtz']));
    		
    		$locations = Doctrine_Query::create()
    		->select('*')
    		->from('PatientLocation')
    		->whereIn('ipid',$patient_ipids)
    		->andWhere('location_id != 0')
    		->andWhere('isdelete = 0')
    		->andwhere('(' . $time_interval . ')')
    		->orderBy('valid_from,id ASC');
    		$locationsarr = $locations->fetchArray();
    		
  		    $has_contact_person = 0; 
    		foreach($locationsarr as $k => $pat_loc){
    		    $patient_location_array[$pat_loc['ipid']][] =  $pat_loc;
    		    $patient_location_final[$pat_loc['ipid']] = end( $patient_location_array[$pat_loc['ipid']]); 
    		    $location_ids[] = $pat_loc['location_id']; 
    		    
    		    $locid = substr($pat_loc['location_id'], 0, 4);
    		    if($locid == "8888")
    		    {
    		     $has_contact_person += 1; 
     		    } 
    		}
    		if(empty($location_ids)){
    		    $location_ids[] = "9999999999";
    		}
    		/* -------------------------Get Client locations------------------------------------------ */
    		$client_locations = Locations::getAllLocations(false, false, false, $location_ids,  true);
    		foreach($client_locations as $kloc => $vloc)
    		{
    		    $client_location_data[$vloc['id']] = $vloc;
    		}
    		if($has_contact_person > 0){
    		    $client_location_data["88888888"]['location'] = "bei Kontaktperson";
    		}
   		    $client_location_data["9999999999"]['location'] = " - ";
    		
    		
    		if($patient_location_final)
    		{
    		    foreach($patient_location_final as $pipid => $patloc)
    		    {
    		        $patlocarrayipid[$patloc['ipid']] = $patloc;
    		        $location_ids[] =  $patloc['location_id'];
    		        $location2ipids[$patloc['location_id']][] =  $patloc['ipid'];
    		        $locid = substr($patloc['location_id'], 0, 4);
    		        
    		        if($locid == "8888")
    		        {
        		        $ipids2locations['88888888'][] =  $patloc['ipid'];
    		        } else{
        		        $ipids2locations[$patloc['location_id']][] =  $patloc['ipid'];
    		        }
    		    }
    		    
    		    
    		
    		    foreach($patient_location_final as $k_loc => $v_loc)
    		    {
    		        $locid = substr($v_loc['location_id'], 0, 4);
    		
    		        if($locid == "8888")
    		        {
    		            $patient_location_id = $v_loc['location_id'];
    		            $z = 1;
    		            $cnt_number = 1;
    		            foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
    		            {
   		                    $pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson';
    		                $z++;
    		            }
    		            $patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
    		            $patlocarray2locid[$v_loc['ipid']] = "88888888";
    		        }
    		        else
    		        {
    		            $patlocarrayFinal[$v_loc['ipid']] = $client_location_data[$v_loc['location_id']]['location'];
    		            $patlocarray2locid[$v_loc['ipid']] = $v_loc['location_id'];
    		        }
    		    }
    		}
    		
    		
 			foreach($patient_ipids as $k =>$pat_ipid){
    		    $pateint_location_ids[$pat_ipid] = $patlocarray2locid[$pat_ipid];
    		    $pateint_doc_ids[$pat_ipid] = $qpa2ipids[$pat_ipid];
    		}
    		
    		
    		foreach($patient_ipids as $k =>$pat_ipid){
    		    if(!empty($pateint_doc_ids[$pat_ipid])){
        		    foreach($client_user_data as $doc_id => $doc_data){
        		        if(is_array($ipids2qpa[$doc_id]) && !empty($ipids2qpa[$doc_id])){
            		        if(in_array($pat_ipid,$ipids2qpa[$doc_id])){
            		            if($pateint_location_ids[$pat_ipid]){
                		            foreach($client_location_data as $loc_id => $loc_data){
                		                if(is_array($ipids2locations[$loc_id]) && !empty($ipids2locations[$loc_id])){
                		                    if(in_array($pat_ipid,$ipids2locations[$loc_id])){
                            		            $data[$doc_id][$loc_id][] = $pat_ipid;
                            		            $requested_data[$doc_id][$loc_id] = count($data[$doc_id][$loc_id]);
                            		            $requested_data_dbg[$doc_id][$loc_id][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
                		                    } 
                		                }  
                		            }
            		            } else {
                		            $data[$doc_id]["9999999999"][] = $pat_ipid;
                		            $requested_data[$doc_id]["9999999999"] = count($data[$doc_id]["9999999999"]);
                		            $requested_data_dbg[$doc_id]["9999999999"][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
            		                
            		            }
            		        } 
        		        }  
        		    } 
    		    } else{
        		    if($pateint_location_ids[$pat_ipid]){
        		        foreach($client_location_data as $loc_id => $loc_data){
        		            if(is_array($ipids2locations[$loc_id]) && !empty($ipids2locations[$loc_id])){
        		                if(in_array($pat_ipid,$ipids2locations[$loc_id])){
        		                    $data["9999999999"][$loc_id][] = $pat_ipid;
        		                    $requested_data["9999999999"][$loc_id] = count($data["9999999999"][$loc_id]);
        		                    $requested_data_dbg["9999999999"][$loc_id][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
        		                }
        		            }
        		        }
        		    } else {
        		            $data["9999999999"]["9999999999"][] = $pat_ipid;
        		            $requested_data["9999999999"]["9999999999"] = count($data["9999999999"]["9999999999"]);
        		            $requested_data_dbg["9999999999"]["9999999999"][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
            		    }
    		    }
    		    
    		}
    		
 
    		if($_REQUEST['dbg'] == "1"){
    		    print_r(" \n count patients \n ");
    		    print_r(count($patient_ipids));
    		    print_r(" \n ");
    		    print_r(" \n patients \n ");
    		    print_r($patient_ipids);
    		    print_r(" \n ");
    		    print_r($requested_data_dbg);
    		}
    		
    		
    		$knr = 0;
    		$overall = 0;
    		foreach($requested_data as $fam_id => $loc_details){
    		    if($fam_id == "9999999999"){
                    $doc_master_data['data'][$fam_id]['heimnetz_familydoc'] = "-";
                    $doc_master_data['data'][$fam_id]['user_last_name'] = "-";
    		    } else{
                    $doc_master_data['data'][$fam_id]['heimnetz_familydoc'] = $user_details[$fam_id];
                    $doc_master_data['data'][$fam_id]['user_last_name'] = $user_last_name[$fam_id];
    		    }
    		    
                foreach($loc_details as $location_id => $patient_count){
                    $master_data_locations['data'][$fam_id]['locations_ids'][$location_id]['name'] = $client_location_data[$location_id]['location'];
                    $master_data_locations['data'][$fam_id]['locations_ids'][$location_id]['amount'] = $patient_count;
                    
                    $overall +=$patient_count;
                    $loc_master_data['data'][$fam_id]['locations'] = array_values($master_data_locations['data'][$fam_id]['locations_ids']);
                }
                $knr++;
    		}
    		
    		if($_REQUEST['dbg'] == "1"){
    		    print_r(" \n overall patients 2 location  and familydoc  \n ");
    		    print_r($overall);
    		    exit; 
    		}

    		$master_data['data'] = $this->array_sort($doc_master_data['data'], 'user_last_name', SORT_ASC);
    		
    		foreach($loc_master_data['data'] as $user_id => $locations_data){
    		    foreach($locations_data as $k=> $pat_data){
    		        $master_data['data'][$user_id][$k] = array_values($this->array_sort($pat_data, 'name', SORT_ASC));
    		    }
    		}
    		$master_data['data'] = array_values($master_data['data']);
    		$master_data['extra']['sum'] = $overall;
 
    		return $master_data;
 		}
 		
 		public function heimnetz_patient_fam2location_150901($params){
 			
            // report_id = 158
            // report_name = Heimnetz - Erst-Einschreibungen // SECOND
            	
            $quarterarr = $params['quarterarr'];
            $yeararr = $params['yeararr'];
            $montharr = $params['montharr'];
            $includearr = $params['includearr'];
            $onlyactive = $params['onlyactive'];
            	
            $logininfo = new Zend_Session_Namespace('Login_Info');
            $clientid = $logininfo->clientid;
            $whereepid = $this->getDocCondition();
            $required_user = $this->getDocCondition(true);
            
            $timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
            $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
            $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
            $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
            
            
            foreach($period ['start'] as $keyd => $startDate)
            {
                $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
                if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
                {
                    $report_period_array[$keyd]['end'] = date("Y-m-d");
                }
                else
                {
                    $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
                }
            }
            
            $conditions['periods'] = $report_period_array;
            $conditions['client'] = $clientid;
            
            $sql = 'e.epid, p.ipid, e.ipid,';
            $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
            $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
            
            $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);

            foreach($active_patient_details as $kipid =>$p_data){
                foreach($p_data['active_periods'] as $per_id => $period_data){

                    foreach($period['start'] as $k_start => $v_start)
                    {
                        if(!Pms_CommonData::isintersected(strtotime(date('Y-m-d',strtotime($period_data['start']))), strtotime(date('Y-m-d',strtotime($period_data['start']))), strtotime($v_start), strtotime($period['end'][$k_start] . ' 23:59:59')))
                        {
                            $admission_outside[] = $kipid;
                            $patient_outside[$kipid][] = $period_data;
                        } else{
                            $admission_inside[] = $kipid;
                            $patient_inside[$kipid][] = $period_data;
                            unset($active_patient_details[$kipid]); 
                        }
                    }
                    
                }
            }
            foreach($active_patient_details as $kipid => $pat_data){
                $ipids2fam_doc[$pat_data['details']['familydoc_id']] [ ] = $pat_data['details']['ipid'];
                $fam_doc2ipid[$pat_data['details']['ipid']]= $pat_data['details']['familydoc_id'];
                $patient_ipids[] = $pat_data['details']['ipid'];
                $doc_ids[] = $pat_data['details']['familydoc_id'];
                
                $patient_details[$pat_data['details']['ipid']] = $pat_data['details'];
            }
            if(empty($patient_ipids )){
                 $patient_ipids[] = "9999999999";
            }
            
            if(empty($doc_ids )){
                 $doc_ids[] = "9999999999";
            }
    		/* ----------------------- Get family doctor details-------------------------------- */
    		$famdoc = new FamilyDoctor();
    		$client_family_doctor = $famdoc->getFamilyDoctors(false, false, false, $doc_ids);
    		
    		foreach($client_family_doctor as $fd_key => $fd_value)
    		{
    		    $client_family_doctor_data[$fd_value['id']] = $fd_value;
    		}
    		
    		/* -------------------------Get Patients - Contact persons -  for ocation------------------------------------------ */
    		$contact = new ContactPersonMaster();
    		$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($patient_ipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
    		
    		/* -------------------------Get Patients - locations------------------------------------------ */
    		$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod['interval_location_sql_qtz']));
    		
    		$locations = Doctrine_Query::create()
    		->select('*')
    		->from('PatientLocation')
    		->whereIn('ipid',$patient_ipids)
    		->andWhere('location_id != 0')
    		->andWhere('isdelete = 0')
    		->andwhere('(' . $time_interval . ')')
    		->orderBy('valid_from,id ASC');
    		$locationsarr = $locations->fetchArray();
    		
  		    $has_contact_person = 0; 
    		foreach($locationsarr as $k => $pat_loc){
    		    $patient_location_array[$pat_loc['ipid']][] =  $pat_loc;
    		    $patient_location_final[$pat_loc['ipid']] = end( $patient_location_array[$pat_loc['ipid']]); 
    		    $location_ids[] = $pat_loc['location_id']; 
    		    
    		    $locid = substr($pat_loc['location_id'], 0, 4);
    		    if($locid == "8888")
    		    {
    		     $has_contact_person += 1; 
     		    } 
    		}
    		if(empty($location_ids)){
    		    $location_ids[] = "9999999999";
    		}
    		/* -------------------------Get Client locations------------------------------------------ */
    		$client_locations = Locations::getAllLocations(false, false, false, $location_ids,  true);
    		foreach($client_locations as $kloc => $vloc)
    		{
    		    $client_location_data[$vloc['id']] = $vloc;
    		}
    		if($has_contact_person > 0){
    		    $client_location_data["88888888"]['location'] = "bei Kontaktperson";
    		}
   		    $client_location_data["9999999999"]['location'] = " - ";
    		
    		
    		if($patient_location_final)
    		{
    		    foreach($patient_location_final as $pipid => $patloc)
    		    {
    		        $patlocarrayipid[$patloc['ipid']] = $patloc;
    		        $location_ids[] =  $patloc['location_id'];
    		        $location2ipids[$patloc['location_id']][] =  $patloc['ipid'];
    		        $locid = substr($patloc['location_id'], 0, 4);
    		        
    		        if($locid == "8888")
    		        {
        		        $ipids2locations['88888888'][] =  $patloc['ipid'];
    		        } else{
        		        $ipids2locations[$patloc['location_id']][] =  $patloc['ipid'];
    		        }
    		    }
    		    
    		    
    		
    		    foreach($patient_location_final as $k_loc => $v_loc)
    		    {
    		        $locid = substr($v_loc['location_id'], 0, 4);
    		
    		        if($locid == "8888")
    		        {
    		            $patient_location_id = $v_loc['location_id'];
    		            $z = 1;
    		            $cnt_number = 1;
    		            foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
    		            {
   		                    $pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson';
    		                $z++;
    		            }
    		            $patlocarrayFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
    		            $patlocarray2locid[$v_loc['ipid']] = "88888888";
    		        }
    		        else
    		        {
    		            $patlocarrayFinal[$v_loc['ipid']] = $client_location_data[$v_loc['location_id']]['location'];
    		            $patlocarray2locid[$v_loc['ipid']] = $v_loc['location_id'];
    		        }
    		    }
    		}
    		
    		
 			foreach($patient_ipids as $k =>$pat_ipid){
    		    $pateint_location_ids[$pat_ipid] = $patlocarray2locid[$pat_ipid];
    		    $pateint_doc_ids[$pat_ipid] = $fam_doc2ipid[$pat_ipid];
    		}
    		
    		foreach($patient_ipids as $k =>$pat_ipid){
    		    if($pateint_doc_ids[$pat_ipid] != 0){
        		    foreach($client_family_doctor_data as $doc_id => $doc_data){
        		        if(is_array($ipids2fam_doc[$doc_id]) && !empty($ipids2fam_doc[$doc_id])){
            		        if(in_array($pat_ipid,$ipids2fam_doc[$doc_id])){
            		            if($pateint_location_ids[$pat_ipid]){
                		            foreach($client_location_data as $loc_id => $loc_data){
                		                if(is_array($ipids2locations[$loc_id]) && !empty($ipids2locations[$loc_id])){
                		                    if(in_array($pat_ipid,$ipids2locations[$loc_id])){
                            		            $data[$doc_id][$loc_id][] = $pat_ipid;
                            		            $requested_data[$doc_id][$loc_id] = count($data[$doc_id][$loc_id]);
                            		            $requested_data_dbg[$doc_id][$loc_id][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
                		                    } 
                		                }  
                		            }
            		            } else {
                		            $data[$doc_id]["9999999999"][] = $pat_ipid;
                		            $requested_data[$doc_id]["9999999999"] = count($data[$doc_id]["9999999999"]);
                		            $requested_data_dbg[$doc_id]["9999999999"][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
            		                
            		            }
            		        } 
        		        }  
        		    } 
    		    } else{
        		    if($pateint_location_ids[$pat_ipid]){
        		        foreach($client_location_data as $loc_id => $loc_data){
        		            if(is_array($ipids2locations[$loc_id]) && !empty($ipids2locations[$loc_id])){
        		                if(in_array($pat_ipid,$ipids2locations[$loc_id])){
        		                    $data["9999999999"][$loc_id][] = $pat_ipid;
        		                    $requested_data["9999999999"][$loc_id] = count($data["9999999999"][$loc_id]);
        		                    $requested_data_dbg["9999999999"][$loc_id][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
        		                }
        		            }
        		        }
        		    } else {
        		            $data["9999999999"]["9999999999"][] = $pat_ipid;
        		            $requested_data["9999999999"]["9999999999"] = count($data["9999999999"]["9999999999"]);
        		            $requested_data_dbg["9999999999"]["9999999999"][] = $pat_ipid.' '.$patient_details[$pat_ipid]['epid'].' '.$patient_details[$pat_ipid]['admission'];
            		    }
    		    }
    		    
    		}
    		
 
    		if($_REQUEST['dbg'] == "1"){
    		    print_r(" \n count patients \n ");
    		    print_r(count($patient_ipids));
    		    print_r(" \n ");
    		    print_r(" \n patients \n ");
    		    print_r($patient_ipids);
    		    print_r(" \n ");
    		    print_r($requested_data_dbg);
    		}
    		
    		
    		$knr = 0;
    		$overall = 0;
    		foreach($requested_data as $fam_id => $loc_details){
    		    if($fam_id == "9999999999"){
                    $master_data['data'][$fam_id]['heimnetz_familydoc'] = "-";
    		    } else{
                    $master_data['data'][$fam_id]['heimnetz_familydoc'] = $client_family_doctor_data[$fam_id]['title'].' '.$client_family_doctor_data[$fam_id]['first_name'].' '.$client_family_doctor_data[$fam_id]['last_name'];
    		    }
                foreach($loc_details as $location_id => $patient_count){
                    $master_data_locations['data'][$fam_id]['locations_ids'][$location_id]['name'] = $client_location_data[$location_id]['location'];
                    $master_data_locations['data'][$fam_id]['locations_ids'][$location_id]['amount'] = $patient_count;
                    
                    $overall +=$patient_count;
                    $master_data['data'][$fam_id]['locations'] = array_values($master_data_locations['data'][$fam_id]['locations_ids']);
                }
                $knr++;
    		}
    		
    		if($_REQUEST['dbg'] == "1"){
    		    print_r(" \n overall patients 2 location  and familydoc  \n ");
    		    print_r($overall);
    		    exit; 
    		}
    		
    		$master_data['data'] = array_values($master_data['data']);

 
    		return $master_data;
 		}
 
		private function homegroup_nursing($params)
		{
			//report_id = 159
			//report_name = Heimnetz report "Pflegeheim"
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$user = new User();
			$whereepid = $this->getDocCondition();
			$required_user = $this->getDocCondition(true);
			$clientid = $logininfo->clientid;
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];

			$required_location = "0";
			if(!empty($params['custom']['location']) && $params['custom']['location'] != 0){
    			$required_location =  $params['custom']['location'];
			}
			

			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);

			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}

			if($onlyactive == 1)
			{ // this is needed if now active
				$active_ipids = $this->getActiveIpids();
				if(!empty($active_ipids))
				{
					$conditions['ipids'] = $active_ipids;
				}
				else
				{
					$conditions['ipids'] = array("XXXXXX");
				}
			}
			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;

			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$ipidarr = array_keys($active_patient_details); // return ipids
			//
			if(empty($ipidarr))
			{
				$ipidarr[] = '99999999999999999';
			}
			//get epids
			$discharge_ids[] = "999999999999";
			$patient_epids[] = "999999999999";
			foreach($active_patient_details as $k_ipid => $v_pat_data)
			{
				$patient_epids[] = $v_pat_data['details']['epid'];
				$patient_epid2ipid[$v_pat_data['details']['epid']] = $k_ipid;
			}

			//get discharge details
			$dis_pat = Doctrine_Query::create()
				->select("*")
				->from("PatientDischarge")
				->whereIn("ipid", $ipidarr)
				->andWhere('isdelete = "0"');
			$dis_pat_arr = $dis_pat->fetchArray();

			$discharge_methods[] = "99999999999";
			foreach($dis_pat_arr as $k_pat_dis => $v_pat_dis)
			{
				$discharge_methods[] = $v_pat_dis['discharge_method'];
				$discharge_data[$v_pat_dis['ipid']][] = $v_pat_dis;
			}

			if($discharge_methods)
			{
				$dis_methods = Doctrine_Query::create()
					->select("*")
					->from('DischargeMethod')
					->where("isdelete = 0")
					->andWhere("clientid = '" . $clientid . "'")
					->andWhereIn('id', $discharge_methods);
				$dis_methods_arr = $dis_methods->fetchArray();
			}

			foreach($dis_methods_arr as $k_dis => $v_dis)
			{
				$discharge_methods_names[$v_dis['id']] = $v_dis['description'];
			}

			//get all client doctors
			$master_groups = array("4");
			$usergroup = new Usergroup();
			$usersgroups = $usergroup->getUserGroups($master_groups);

			$doctor_groups[] = '999999999999';
			$doctor_users[] = '999999999999';
			if(count($usersgroups) > 0)
			{
				foreach($usersgroups as $group)
				{
					if($group['groupmaster'] == "4")
					{
						$doctor_groups[] = $group['id'];
					}
				}

				$user_doctors = $user->getuserbyGroupId($doctor_groups, $clientid, true);

				foreach($user_doctors as $k_doc => $doctor)
				{
					$doctor_users[] = $doctor['id'];
					$doctors[$doctor['id']] = trim(rtrim($doctor['user_title'] . " " . $doctor['last_name'] . ", " . $doctor['first_name']));
				}
			}


			//get assigned doctors based on previous doctors ids
			$treatedbyQ = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->whereIn('epid', $patient_epids)
				->andWhereIn('userid', $doctor_users);
			$treatedbyarr = $treatedbyQ->fetchArray();

			foreach($treatedbyarr as $k_qpa => $v_qpa)
			{
				$assigned_users[$patient_epid2ipid[$v_qpa['epid']]][] = $doctors[$v_qpa['userid']];
			}

			if(empty($ipidarr))
			{
				$ipidarr[] = "XXXXXXXXXXX";
			}

			/* -------------------------Get Patients - Contact persons -  for ocation------------------------------------------ */
			$contact = new ContactPersonMaster();
			$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($ipidarr, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )

			/* -------------------------Get Patients - locations------------------------------------------ */
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $active_cond['interval_location_sql_qtz']));

			$locations = Doctrine_Query::create()
				->select('*')
				->from('PatientLocation')
				->whereIn('ipid', $ipidarr)
				->andWhere('location_id != 0')
				->andWhere('isdelete = 0')
				->andwhere('(' . $time_interval . ')');
			if($required_location != 0){
				$locations->andWhere('location_id = "'.$required_location.'" ');
			}
				$locations->orderBy('valid_from,id ASC');
			$locationsarr = $locations->fetchArray();

			$has_contact_person = 0;
			$location_ids[] = "9999999999";
			foreach($locationsarr as $k => $pat_loc)
			{
				$patient_location_final[$pat_loc['ipid']][] = $pat_loc;
//    		    $patient_location_final[$pat_loc['ipid']] = end($patient_location_array[$pat_loc['ipid']]); 
				$location_ids[] = $pat_loc['location_id'];

				$locid = substr($pat_loc['location_id'], 0, 4);
				if($locid == "8888")
				{
					$has_contact_person += 1;
				}
			}

			/* -------------------------Get Client locations------------------------------------------ */
			$client_locations = Locations::getAllLocations(false, false, false, $location_ids, true);

			foreach($client_locations as $kloc => $vloc)
			{
				$client_location_data[$vloc['id']] = $vloc;
			}

			if($has_contact_person > 0)
			{
				$client_location_data["88888888"]['location'] = "bei Kontaktperson";
			}
			$client_location_data["9999999999"]['location'] = " - ";


			if($patient_location_final)
			{
				foreach($patient_location_final as $pipid => $patlocs)
				{
					foreach($patlocs as $klocs => $patloc)
					{
						$patlocarrayipid[$patloc['ipid']] = $patloc;
						$location_ids[] = $patloc['location_id'];
						$location2ipids[$patloc['location_id']][] = $patloc['ipid'];
						$locid = substr($patloc['location_id'], 0, 4);

						if($locid == "8888")
						{
							$ipids2locations['88888888'][] = $patloc['ipid'];
						}
						else
						{
							$ipids2locations[$patloc['location_id']][] = $patloc['ipid'];
						}
					}
				}

				foreach($patient_location_final as $k_loc => $v_locs)
				{
					foreach($v_locs as $klocs => $v_loc)
					{
//						$locid = substr($v_loc['location_id'], 0, 4);
//						if($locid == "8888")
//						{
//							$patient_location_id = $v_loc['location_id'];
//							$z = 1;
//							$cnt_number = 1;
//							foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
//							{
//								$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson';
//								$z++;
//							}
//							$patlocarrayFinal[$v_loc['ipid']][] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
//							$patlocarray2locid[$v_loc['ipid']] = "88888888";
//						}
//						else
//						{
//							$patlocarrayFinal[$v_loc['ipid']][] = $client_location_data[$v_loc['location_id']]['location'];
//							$patlocarray2locid[$v_loc['ipid']] = $v_loc['location_id'];
//						}


						$locid = substr($v_loc['location_id'], 0, 4);
						if($locid == "8888")
						{
							$patient_location_id = $v_loc['location_id'];
							$z = 1;
							$cnt_number = 1;
							foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson';
								$z++;
							}

							$pat_location_sort[$v_loc['location_id']] = trim(rtrim($pat_locarrayl[$v_loc['ipid']][$patient_location_id]));
							$patlocarrayFinal[$patient_location_id][] = $v_loc['ipid'];
						}
						else
						{
							$pat_location_sort[$v_loc['location_id']] = trim(rtrim($client_location_data[$v_loc['location_id']]['location']));
							$patlocarrayFinal[$v_loc['location_id']][] = $v_loc['ipid'];
						}
					}
				}
			}


			$pat_location_sort = Pms_CommonData::a_sort($pat_location_sort);

			foreach($pat_location_sort as $k_location => $v_location)
			{
				$patient_location_sorted[$k_location] = $patlocarrayFinal[$k_location];
			}

			foreach($patient_location_sorted as $k_location => $v_ipids)
			{
				foreach($v_ipids as $k_ord => $v_ipid)
				{
					if($active_patient_details[$v_ipid]['details']['isdischarged'] == "0")
					{
						$master_data[$k_location]['active'][$v_ipid]['ipid'] = $v_ipid;
						//debug purposes
						$master_data[$k_location]['active'][$v_ipid]['epid'] = $active_patient_details[$v_ipid]['details']['epid'];
						$master_data[$k_location]['active'][$v_ipid]['location_name'] = $pat_location_sort[$k_location];
						$master_data[$k_location]['active'][$v_ipid]['patient_name'] = $active_patient_details[$v_ipid]['details']['first_name'] . ' ' . $active_patient_details[$v_ipid]['details']['last_name'];
						$master_data[$k_location]['active'][$v_ipid]['patient_last_name'] = $active_patient_details[$v_ipid]['details']['last_name'];

						if(!empty($assigned_users[$v_ipid]))
						{
							$doctors = implode("; ", $assigned_users[$v_ipid]);
						}
						else
						{
							$doctors = " - ";
						}

						$master_data[$k_location]['active'][$v_ipid]['assigned_doctors'] = $doctors;
						$master_data[$k_location]['active'][$v_ipid]['admission_date'] = date('d.m.Y', strtotime($active_patient_details[$v_ipid]['details']['admission_date']));
					}
					else
					{
						$master_data[$k_location]['discharged'][$v_ipid]['ipid'] = $v_ipid;
						//debug purposes
						$master_data[$k_location]['discharged'][$v_ipid]['epid'] = $active_patient_details[$v_ipid]['details']['epid'];
						$master_data[$k_location]['discharged'][$v_ipid]['location_name'] = $pat_location_sort[$k_location];
						$master_data[$k_location]['discharged'][$v_ipid]['patient_name'] = $active_patient_details[$v_ipid]['details']['first_name'] . ' ' . $active_patient_details[$v_ipid]['details']['last_name'];
						$master_data[$k_location]['discharged'][$v_ipid]['patient_last_name'] =  $active_patient_details[$v_ipid]['details']['last_name'];

						if(!empty($assigned_users[$v_ipid]))
						{
							$doctors = implode("; ", $assigned_users[$v_ipid]);
						}
						else
						{
							$doctors = " - ";
						}

						$master_data[$k_location]['discharged'][$v_ipid]['assigned_doctors'] = $doctors;
						$master_data[$k_location]['discharged'][$v_ipid]['admission_date'] = date('d.m.Y', strtotime($active_patient_details[$v_ipid]['details']['admission_date']));

						$patient_last_discharge = end($discharge_data[$v_ipid]);

						if(date('Y', strtotime($patient_last_discharge['discharge_date'])) != "1970")
						{
							$master_data[$k_location]['discharged'][$v_ipid]['dischargedate'] = date('d.m.Y', strtotime($patient_last_discharge['discharge_date']));
						}

						$master_data[$k_location]['discharged'][$v_ipid]['discharge_methode'] = $discharge_methods_names[$patient_last_discharge['discharge_method']];
						$patient_last_discharge = '';
					}
				}
			}

			$sortarr = 'patient_last_name';
            foreach($master_data as $location_id => $table_type){
                foreach($table_type as $k=>$pat_data){
        			 $sorted_master_data[$location_id][$k] = $this->array_sort($pat_data, $sortarr, SORT_ASC);
                }
            }
				
			$MasterData['data'] = $sorted_master_data;
			$MasterData['extra'] = $pat_location_sort;

			return $MasterData;
		}

		public function discharged_patients_nohospiz($params)
 		{
 			// report_id = 160
 			// report_name = §39a Anlage 6 II
 			// *§39a Anlage 6*: it looks only for DEAD patients (report period looks for discharges type = death)
 			// |Name (Surname) |Vorname  (Firstname) |Geburtstag  (DoB)|Krankenkasse (Health insurance) | Beginn(admission) | Ende (discharge) |
     		// only patients are shown and listed where actions were documented under "hospiz-V" tab. means there is no activity, then patient is not listed in report.
 			$logininfo = new Zend_Session_Namespace('Login_Info');
 			$clientid = $logininfo->clientid;
 			
 			
 			$quarterarr = $params['quarterarr'];
 			$yeararr = $params['yeararr'];
 			$montharr = $params['montharr'];
 			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
 		
 			$whereepid = $this->getDocCondition();
 			$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);

 			$ipidsval = "'X'";
 			$comma = ",";
 			foreach($ipidsarr as $ipid)
 			{
 				$ipidsval .= $comma . "'" . $ipid . "'";
 				$comma = ",";
 			}
 		
 			$ipidsArray = $ipidsarr;
 		
 			if(empty($ipidsArray))
 			{
 				$ipidsArray[] = "99999999999";
 			}
 		
 			$Q = Doctrine_Query::create()
 			->select("p.*,e.ipid,e.epid,
 					AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name,
 					AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,
 					convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
 					convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
 					convert(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
 					convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city
 					");
 			$Q->from('PatientMaster p');
 			$Q->whereIn('p.ipid', $ipidsArray);
 			$Q->andWhere('p.isdelete = 0');
 			$Q->andWhere('p.isstandbydelete = 0');
 			$Q->orderBy('p.admission_date DESC');
 			$Q->leftJoin("p.EpidIpidMapping e");
 			$Q->andWhere('p.ipid = e.ipid ');
 			$Q->andWhere($whereepid . 'e.clientid = ' . $clientid);
 			$Q->orderBy('CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ASC');
 			$deadPatients = $Q->fetchArray();
 		
 			foreach($deadPatients as $patient)
 			{
 				$deadIpidPatients[$patient['ipid']] = $patient;
 				$deadIpidPatientsarr[] = $patient['ipid'];
 				$epidsarr[$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
 			}
 		
 			$dispatloc = Doctrine_Query::create()
 			->select("*")
 			->from("PatientDischarge as p")
 			->whereIn('p.ipid', $ipidsArray)
 			->andWhere('isdelete = 0');
 			$dispatlocarr = $dispatloc->fetchArray();
 		
 			$comma = ",";
 			foreach($dispatlocarr as $dischargedpat)
 			{
 				$dischargeLocationsArray[$dischargedpat['ipid']] = $dischargedpat;
 				$comma = ",";
 			}
 			/* ----------------------- Get Health Insurance-------------------------------- */
 			$Health = Doctrine_Query::create()
 			->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
 			->from('PatientHealthInsurance')
 			->whereIn('ipid', $ipidsArray);
 			$Healtharray = $Health->fetchArray();
 		
 			foreach($Healtharray as $patient_health)
 			{
 				$patienthelth[$patient_health['ipid']]['number'] = $patient_health["insurance_no"];
 				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
 				$patienthelth[$patient_health['ipid']]['ik'] = $patient_health["institutskennzeichen"];
 				$patienthelth[$patient_health['ipid']]['kasse_nr'] = $patient_health["kvk_no"];
 			}
 		
 			/* ----------------------- Get Hospiz visits-------------------------------- */
 			
 			$drop = Doctrine_Query::create()
 			->select('*')
 			->from('PatientHospizvizits')
 			->where('isdelete=0')
 			->andWhereIn('ipid',$ipidsArray);
 			$hospizvizits = $drop->fetchArray();
 			
 
            foreach($hospizvizits as $kh => $vh ){
                $hospiz_v_patients[] = $vh['ipid'];
                $patients2hospiz_v[$vh['ipid']][] = $vh;
            }
                
            $hospiz_v_patients = array_unique($hospiz_v_patients); 
 			if(empty($hospiz_v_patients)){
 			    $hospiz_v_patients[] = "999999999";
 			}
 			$no_activity_patients_str ="";
 			foreach($deadIpidPatients as $k_dipid => $v_dpatient)
 			{
 			    if(in_array($v_dpatient['ipid'],$hospiz_v_patients)){
     				$master[$k_dipid]['epid'] = $epidsarr[$k_dipid]['epid'];
     				$master[$k_dipid]['lastname'] = $v_dpatient['last_name'];
     				$master[$k_dipid]['firstname'] = $v_dpatient['first_name'];
     				$master[$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd']));
     		
     				if(strlen($patienthelth[$v_dpatient['ipid']]['company']) > 0)
     				{
     					$master[$k_dipid]['healthinsurance'] = $patienthelth[$v_dpatient['ipid']]['company'];
     				}
     				else
     				{
     					$master[$k_dipid]['healthinsurance'] = "keine Angabe";
     				}
     		
     				$master[$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($v_dpatient['admission_date']));
     				$master[$k_dipid]['diedon'] = date("d.m.Y", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date']));
 			    } else{
 			        $no_activity_patients[$k_dipid]['ipid'] = $v_dpatient['ipid'];
 			        $no_activity_patients[$k_dipid]['epid'] = $epidsarr[$k_dipid]['epid'];
 			        $no_activity_patients_str  .= '"'.$v_dpatient['ipid'].'", ';
 			    }
 			}
 		
 			if($_REQUEST['dbg']=="1"){
 			    print_r(" patients with no data str: \n ");
 			    print_R($no_activity_patients_str);
 			    print_r(" patients with no data array: \n ");
 			    print_R($no_activity_patients);
 			    exit;
 			}
 			foreach($master as $key => $row)
 			{
 				$health[$key] = $row['healthinsurance'];
 				$lastname[$key] = $row['lastname'];
 			}
 		
 			array_multisort($health, SORT_ASC, $lastname, SORT_ASC, $master);
 		
 			foreach($master as $ipid_key => $vpatient)
 			{
 				$MasterData['data'][$ipid_key]['epid'] = $vpatient['epid'];
 				$MasterData['data'][$ipid_key]['lname'] = $vpatient['lastname'];
 				$MasterData['data'][$ipid_key]['fname'] = $vpatient['firstname'];
 				$MasterData['data'][$ipid_key]['birth_day'] = $vpatient['birthd'];
 				$MasterData['data'][$ipid_key]['healthinsurance_name'] = $vpatient['healthinsurance'];
 				$MasterData['data'][$ipid_key]['adm_start'] = $vpatient['admissiondate'];
 				$MasterData['data'][$ipid_key]['discharge_end'] = $vpatient['diedon'];
 			}
 		
 			return $MasterData;
 		}
 			
 		public function generate_table_header($start_line, $start_column, $columns, $excluded_active_cols)
		{
			if($start_line && $start_column && $columns)
			{
				$line = $start_line;
				$c = $start_column;
				
				$this->xlsWriteLabel($line, 0, $this->view->translate('no'));
				$nrCols = (count($columns));
				foreach($columns as $column)
				{
					if(count($excluded_active_cols)>'0')
					{
						if(!in_array($column['column_name'], $excluded_active_cols))
						{
							$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
							$c++;
						}
					}
					else
					{
						$this->xlsWriteLabel($line, $c, ucfirst(utf8_decode($this->view->translate($column['column_name']))));
						$c++;
					}
				}
				$line++;
				
				return $line;
			}
		}
		public function actual_patients_nopaincopy($params)
		{
			//report_id = 161
			// report_name = Montagsliste NoPain - copy( with time filter) 
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
				
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			$required_user = $this->getDocCondition(true);
			$pm = new PatientMaster ();
				
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
				
			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
			//print_r($period);exit;
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= 'convert(AES_DECRYPT(p.kontactnumber,"' . Zend_Registry::get('salt') . '") using latin1) as kontactnumber,';
			$sql .= 'birthd,admission_date,';
				
			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
				
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$active_patients_ipids = array_keys($active_patient_details); // return ipids
			//print_r($active_patient_details);exit;
			

			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$active_patients_ipids = array_keys($active_patient_details); // return ipids
			//print_r($active_patient_details);exit;
				
			foreach($active_patient_details as $keypatient => $patient){
			    $epids_array[] = $patient['details']['epid'];
			    $doctorids[] = $patient['details']['familydoc_id'];
			}
			if(empty($epids_array)){
			    $epids_array[] = "999999999";
			}
				
			if(empty($doctorids)){
			    $doctorids[] = "999999999";
			}
			
			if($active_patients_ipids)
			{
				$i = 1;
				foreach($active_patients_ipids as $ipid)
				{
					if($i != count($active_patients_ipids))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
					$activeipids_array[]['ipid'] = $ipid;
					$ipidsactive .= "'" . $ipid . "'" . $end;
					$i++;
				}
			}
			
			$Q = Doctrine_Query::create()
			->select("p.*,e.ipid,e.epid,
					AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
					convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
					convert(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
					convert(AES_DECRYPT(p.kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1) as kontactnumber,
					convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city
					");
			$Q->from('PatientMaster p');
			$Q->whereIn('p.ipid', $active_patients_ipids);
			$Q->andWhere('p.isdelete = 0');
			$Q->andWhere('p.isstandbydelete = 0');
			$Q->orderBy('p.admission_date DESC');
			$Q->leftJoin("p.EpidIpidMapping e");
			$Q->andWhere('p.ipid = e.ipid ');
			$Q->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$Q->orderBy('CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ASC');
			
			//ISPC-2045 - get kontact-phone
			$Q->leftJoin("p.PatientContactphone pcp");
			$Q->addSelect("pcp.phone, pcp.mobile");
			
			$activePatients = $Q->fetchArray();
			
			foreach($activePatients as $patvalue)
			{
				$active_patients[$patvalue['ipid']] = $patvalue;
			}
			//print_r($activePatients);exit;
			/* -------------------------Get Patients - Contact persons------------------------------------------ */
			$contact = new ContactPersonMaster();
			$contactpersons_loc_array = $contact->get_contact_persons_by_ipids($active_patients_ipids, false, false); //get_contact_persons_by_ipids ( $ipids_array = false, $group_by = false, $hide_deleted = true )
			/* -------------------------Get Patients - Locations------------------------------------------ */
			
			$timeperiod = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $timeperiod['interval_location_sql_qtz']));
			
			$locations = Doctrine_Query::create()
			->select('*')
			->from('PatientLocation')
			->Where('isdelete = 0')
			->andwhere('' . $time_interval . '')
			->andWhereIn('ipid', $active_patients_ipids);
			$locationaarr = $locations->fetchArray();
			
			if($locationaarr)
			{
				$locinc = 1;
				foreach($locationaarr as $patloc)
				{
					$locationaarripid[$patloc['ipid']] = $patloc;
					if($locinc != count($locationaarr))
					{
						$end = ",";
					}
					else
					{
						$end = "";
					}
			
					$patientlocationstr .= "'" . $patloc['location_id'] . "'" . $end;
					$locinc++;
				}
			
				$floc = Doctrine_Query::create()
				->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
				->from('Locations')
				->where("id IN (" . $patientlocationstr . ")")
				->andWhere('isdelete=0')
				->orderBy('location ASC');
				$locationdata = $floc->fetchArray();
			
				foreach($locationdata as $kloc => $vloc)
				{
					$locationLastData[$vloc['id']] = $vloc;
				}
			
				foreach($locationaarr as $k_loc => $v_loc)
				{
			
					$locid = substr($v_loc['location_id'], 0, 4);
					if($locid == "8888")
					{
						$patient_location_id = $v_loc['location_id'];
						$z = 1;
						$cnt_number = 1;
						foreach($contactpersons_loc_array[$v_loc['ipid']] as $cnt_key => $value_cnt)
						{
							if($value_cnt['isdelete'] == '0')
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_street'] = $value_cnt['cnt_street1'];
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_zip'] = $value_cnt['cnt_zip'];
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z]['location_city'] = $value_cnt['cnt_city'];
								$cnt_number++;
							}
							else
							{
								$pat_locarrayl[$v_loc['ipid']]['8888' . $z] = 'bei Kontaktperson ';
							}
			
							$z++;
						}
						$locationaarrFinal[$v_loc['ipid']] = $pat_locarrayl[$v_loc['ipid']][$patient_location_id];
					}
					else
					{
						$locationaarrFinal[$v_loc['ipid']]['location_name'] = $locationLastData[$v_loc['location_id']]['location'];
						$locationaarrFinal[$v_loc['ipid']]['location_type'] = $locationLastData[$v_loc['location_id']]['location_type'];
						if($locationaarrFinal[$v_loc['ipid']]['location_type'] == "5")
						{
							$locationaarrFinal[$v_loc['ipid']]['location_street'] = $active_patient_details[$v_loc['ipid']]['details']['street1'];
							$locationaarrFinal[$v_loc['ipid']]['location_zip'] = $active_patient_details[$v_loc['ipid']]['details']['zip'];
							$locationaarrFinal[$v_loc['ipid']]['location_city'] = $active_patient_details[$v_loc['ipid']]['details']['city'];
						}
						else
						{
							$locationaarrFinal[$v_loc['ipid']]['location_street'] = $locationLastData[$v_loc['location_id']]['street'];
							$locationaarrFinal[$v_loc['ipid']]['location_zip'] = $locationLastData[$v_loc['location_id']]['zip'];
							$locationaarrFinal[$v_loc['ipid']]['location_city'] = $locationLastData[$v_loc['location_id']]['city'];
						}
					}
				
				}
			}


			
			//get doctors details
				$Familydoctor = "";
				$famdoc = new FamilyDoctor();
				$familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);

				foreach($familidoc as $fd_key => $fd_value)
				{
					$familydoctors[$fd_value['id']] = $fd_value;
				}

				if(count($familidoc) > 0)
				{
					$Familydoctor = array();
					foreach($familidoc as $doc)
					{
						if(strlen($doc['title']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['title'] . " ";
						}
						if(strlen($doc['first_name']) > 0 || strlen($doc['last_name']) > 0)
						{
							$Familydoctor[$doc['id']]['name'] .= $doc['last_name'] . ", " . $doc['first_name'];
						}

						if(strlen($doc['phone_practice']) > 0)
						{
							$Familydoctor[$doc['id']]['phone'] = $doc['phone_practice'];
						}
					}
				}
				
				
				//		Get diagnosis type
				$dg = new DiagnosisType();
				$abb2 = "'HD'";
				$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
				$comma = ",";
				$typeid = "'0'";
				foreach($ddarr2 as $key => $valdia)
				{
				    $typeid .=$comma . "'" . $valdia['id'] . "'";
				    $comma = ", ";
				}
				$patdia = new PatientDiagnosis();
				$dianoarray = $patdia->getFinalData($ipidsactive, $typeid, true);
				
				foreach($dianoarray as $diangosis)
				{
					$diagnosisarr[$diangosis['ipid']][] = $diangosis['diagnosis'];
				}
				foreach($diagnosisarr as $d_key => $d_val)
				{
					$diagnosisarr[$d_key] = implode(", ", $d_val);
				}
				/* ----------------------- Get Treated By -------------------------------- */
				$treatedbyUsersQ = Doctrine_Query::create()
				->select('*')
				->from('User')
				->andWhere('clientid ="' . $logininfo->clientid . '" ');
				
				$treatedbyUsersarr = $treatedbyUsersQ->fetchArray();
				foreach($treatedbyUsersarr as $usertreated)
				{
				    $treatedbyUsers[$usertreated['id']] = $usertreated['user_title'].' '.$usertreated['last_name'] . ", " . $usertreated['first_name'];
				}
								

				$treatedbyQ = Doctrine_Query::create()
				->select('*')
				->from('PatientQpaMapping')
				->whereIn('epid',$epids_array);
				$treatedbyarr = $treatedbyQ->fetchArray();
					
				foreach($treatedbyarr as $treatedby)
				{
				    if(!in_array($treatedby['userid'],$used_ipids[$treatedby['epid']])){
				        $qpa2epid[$treatedby['epid']][] = $treatedbyUsers[$treatedby['userid']];
				        $used_ipids[$treatedby['epid']][] = $treatedby['userid'];
				    }
				}
				
				
				/* --------------------------------------------------------------------------- */
				//get healthinsurance
				$patientinsurance = new PatientHealthInsurance();
				$healthinsu_array = $patientinsurance->get_patients_healthinsurance($active_patients_ipids);
				
				foreach($healthinsu_array as $k_healthinsu => $v_healthinsu)
				{
					$patients_healthinsu[$v_healthinsu['ipid']] = $v_healthinsu;
				}
				
				/* ----------------------- Get SAPV-------------------------------- */
				$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
				$s = array('%date_start%', '%date_end%');
				$r = array('verordnungam', 'verordnungbis');
				$sapv_arr_details = array('1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');
				
				$dropSapv = Doctrine_Query::create()
				->select('*, GROUP_CONCAT(verordnet) as vero')
				->from('SapvVerordnung')
				->whereIn('ipid', $active_patients_ipids)
				->andWhere(str_replace($s, $r, $active_cond['interval_sql']))
				->andWhere('isdelete=0')
				->andWhere('status != 1 ')
				->groupBy('ipid');
				$droparray = $dropSapv->fetchArray();
				
				foreach($droparray as $kverord => $verord)
				{					
					$sapv_values[$verord['ipid']] = explode(',', $verord['vero']);
					foreach($sapv_values[$verord['ipid']] as $k_sapv => $v_sapv)
					{
						$patientsapv[$verord['ipid']][] = $sapv_arr_details[$v_sapv];
					}
				}
				
				foreach($patientsapv as $k => $kval)
				{
					$patient_sapv[$k] = array_unique($kval);
					$patient_final_sapv[$k] = implode(',', $patient_sapv[$k]);
				}
				//print_r($patient_sapv);exit;
				//print_r($patient_final_sapv);exit;
				
				
				foreach($active_patients as $keypatient => $patient)
				{
				
					$MasterData['data'][$keypatient]['epid'] = $patient['EpidIpidMapping']['epid'] . ' ';
					$MasterData['data'][$keypatient]['lastname'] = $patient['last_name'] . ' ';
					$MasterData['data'][$keypatient]['firstname'] = $patient['first_name'] . ' ';
					$MasterData['data'][$keypatient]['location'] = $locationaarrFinal[$keypatient]['location_name'] . '<br />' . $locationaarrFinal[$keypatient]['location_street'] . '<br />' . $locationaarrFinal[$keypatient]['location_zip'] . ' ' . $locationaarrFinal[$keypatient]['location_city'];
					$MasterData['data'][$keypatient]['contact_number'] = $patient['kontactnumber'] . ' ';
					
					//ISPC-2045
					if ( ! empty($patient['PatientContactphone']) ) {
					
						$MasterData['data'][$keypatient]['contact_number'] = implode("; ", array_column($patient['PatientContactphone'], 'phone_number'));
					}
					
					$MasterData['data'][$keypatient]['birthd'] = date('d.m.Y',strtotime($patient['birthd'])) . ' ';
					$MasterData['data'][$keypatient]['admissiondate'] = date('d.m.Y',strtotime($patient['admission_date']));
					$MasterData['data'][$keypatient]['diagnosis'] = $diagnosisarr[$keypatient] . ' ';
					$MasterData['data'][$keypatient]['familydoctor'] = $Familydoctor[$patient['familydoc_id']]['name'] . ' ';
					$MasterData['data'][$keypatient]['familydoctorphone'] = $Familydoctor[$patient['familydoc_id']]['phone'] . ' ';
					if($patient_final_sapv[$keypatient])
					{
						$MasterData['data'][$keypatient]['verordnung'] = $patient_final_sapv[$keypatient];
					}
					else
					{
						$MasterData['data'][$keypatient]['verordnung'] = 'keine';
					}				
					
					$MasterData['data'][$keypatient]['treatedby'] = implode("<br />",$qpa2epid[$patient['EpidIpidMapping']['epid']]);
					
					if(array_key_exists($keypatient, $patients_healthinsu))
					{
						if(strlen($patients_healthinsu[$keypatient]['company_name']) > 0)
						{
							$MasterData['data'][$keypatient]['healthinsurance_name'] = $patients_healthinsu[$keypatient]['company_name'];
						}
						else
						{
							$MasterData['data'][$keypatient]['healthinsurance_name'] = ' - ';
						}
				
						if(strlen($patients_healthinsu[$keypatient]['insurance_no']) > 0)
						{
							$MasterData['data'][$keypatient]['healthinsurance_nr'] = $patients_healthinsu[$keypatient]['insurance_no'];
						}
						else
						{
							$MasterData['data'][$keypatient]['healthinsurance_nr'] = ' - ';
						}
					}
					else
					{
						$MasterData['data'][$keypatient]['healthinsurance_name'] = ' - ';
						$MasterData['data'][$keypatient]['healthinsurance_nr'] = ' - ';
					}
					
				}
				
				return $MasterData;
							
		}

		
		private function voluntaryworkerseropromotion($params)
		{
		    // report_id = 163
		    // report_name = 1 Euro Forderung
		    $quarterarr = $params['quarterarr'];
		    $yeararr = $params['yeararr'];
		    $montharr = $params['montharr'];
		    $includearr = $params['includearr'];
		    $onlyactive = $params['onlyactive'];
		
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $whereepid = $this->getDocCondition();
		
		    $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
		    $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		    
		    
		    // if user selected - get only assigned to user
		    if($whereepid){
		        $patientMasterData = Doctrine_Query::create()
		        ->select("e.ipid")
		        ->from("EpidIpidMapping e")
		        ->where($whereepid . ' e.clientid = ' . $logininfo->clientid);
		        $pmarr = $patientMasterData->fetchArray();
		        	
		        $doctor_assigned_ipids = array();
		        foreach($pmarr as $patient)
		        {
		            $doctor_assigned_ipids[] =  $patient['ipid'];
		        }
		        	
		        if(!empty($doctor_assigned_ipids)){
		            $conditions_ipids['ipids'] =  $doctor_assigned_ipids;
		        }
		         
		    } else{
		        $conditions_ipids['ipids'] = false;
		    }
		    	
		    	
		    
		    if($onlyactive == 1)
		    {
		         
		        $sql = "a.*,e.*,p.*, e.ipid,e.epid,p.birthd,p.admission_date,p.change_date,p.last_update,p.traffic_status,p.isdischarged,p.isarchived,p.isstandby,p.isstandbydelete,p.familydoc_id,";
		        $sql .= "CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)  as first_name,";
		        $sql .= "CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
		        $sql .= "CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
		        $sql .= "CONVERT(AES_DECRYPT(p.title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
		        $sql .= "CONVERT(AES_DECRYPT(p.salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
		        $sql .= "CONVERT(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
		        $sql .= "CONVERT(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
		        $sql .= "CONVERT(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
		        $sql .= "CONVERT(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
		        $sql .= "CONVERT(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
		        $sql .= "CONVERT(AES_DECRYPT(p.mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
		        $sql .= "CONVERT(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex,";
		        $sql .= "CONVERT(AES_DECRYPT(p.kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1)  as kontactnumber";
		        //               $active_patient_details = Pms_CommonData::patients_active($select = "*", $client = nulz = false, $page = '0', $include_standby = false);
		        $active_patients_data = Pms_CommonData::patients_active($sql, $logininfo->clientid, null, $conditions_ipids['ipids'], "p.last_name", "ASC", "p.isdischarged = 0", false,"0",false);
		    
		    
		        foreach($active_patients_data as $k_active => $v_active)
		        {
		            $active_patient_details[$v_active['ipid']]['details']  = $v_active['PatientMaster'];
		            $active_patient_details[$v_active['ipid']]['details']['epid']  = $v_active['epid'];
		            $ipidarr[] = $v_active['ipid'];
		        }
		    
		        if(empty($ipidarr)){
		            $ipidarr []  = "9999999999";
		        }
		        	
		        if($_REQUEST['dbg'] ==1){
		            print_r($sql);
		        }
		    
		    
		    } else {
		         
		        foreach($period ['start'] as $keyd => $startDate)
		        {
		            $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
		            // 			$report_period_array[$keyd]['end'] = date ( "Y-m-d", strtotime ( $period ['end'] [$keyd] ) );
		            if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
		            {
		                $report_period_array[$keyd]['end'] = date("Y-m-d");
		            }
		            else
		            {
		                $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
		            }
		        }
		        // get active patients new methos - faster!!!
		        $sql_tp = 'e.epid, p.ipid, e.ipid,p.familydoc_id,';
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') using latin1)  as first_name,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.middle_name,'" . Zend_Registry::get('salt') . "') using latin1)  as middle_name,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') using latin1)  as last_name,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.title,'" . Zend_Registry::get('salt') . "') using latin1)  as title,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.salutation,'" . Zend_Registry::get('salt') . "') using latin1)  as salutation,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1)  as street1,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1)  as street2,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1)  as zip,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1)  as city,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.mobile,'" . Zend_Registry::get('salt') . "') using latin1)  as mobile,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1)  as sex,";
		        $sql_tp .= "CONVERT(AES_DECRYPT(p.kontactnumber,'" . Zend_Registry::get('salt') . "') using latin1)  as kontactnumber,";
		         
		        $conditions['periods'] = $report_period_array;
		        $conditions['client'] = $clientid;
		         
		        if( !empty($conditions_ipids['ipids']) ){
		            $conditions['ipids'] = $conditions_ipids['ipids'];
		        }
		         
		        $active_patient_details = Pms_CommonData::patients_days($conditions, $sql_tp);
		        $ipidarr = array_keys($active_patient_details); // return ipids
		    }

		    if(count($ipidarr) == 0)
		    {
		        $ipidarr[] = "0";
		    }
		
		    foreach($ipidarr as $val)
		    {
		        $ipids .= "'" . $val . "',";
		    }
		
		    // ################################################
		    // get associated clients of current clientid START
		    // ###############################################
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
		    if($connected_client){
		        $vw_clientid = $connected_client;
		    } else{
		        $vw_clientid = $logininfo->clientid;
		    }
		    
		    // ################################################
		    // get associated clients of current clientid END
		    // ###############################################
		    
		    $billable_hvtypes = HospizVisitsTypes::get_client_hospiz_visits_types($vw_clientid,false,true);
		    
		    if($billable_hvtypes){
		        foreach($billable_hvtypes as $gid => $gdata){
    		        $allowed_grund[] = $gid; 
		        }
		    } else{
		        $allowed_grund[0] = "9999999999"; 
		    }
		    
		    
		    $fdoc = new Voluntaryworkers();
		    $docarray = $fdoc->getClientsVoluntaryworkers($vw_clientid);
		    
            if($_REQUEST['dbg_vw'] == 1){
    		    $drop = Doctrine_Query::create()
    		    ->select('*')
    		    ->from('PatientHospizvizits')
    		    ->where('ipid in ("999999",' . substr($ipids, 0, -1) . ') and isdelete=0 and (' . str_replace('%date%', 'hospizvizit_date', $active_cond['date_sql']) . ') ')
    		    ->andWhereIn('grund',$allowed_grund);
    		    $hospizvizits = $drop->fetchArray();
    		    
    		    foreach($hospizvizits as $value)
    		    {
    		        foreach($docarray as $name_user)
    		        {
    		            if($value['vw_id'] == $name_user['id'])
    		            {
    		                $s_dbg[$value['vw_id']][$value['id']] = $value ;
    		                $s_dbg[$value['vw_id']][$value['id']]['epid'] =  $active_patient_details[$value['ipid']]['details']['epid'];
    		                $s_dbg[$value['vw_id']][$value['id']]['voluntary'] = $name_user['last_name'].' '.$name_user['first_name'] ;
    		            }
    		        }
    		    }
    		    print_r("visits details"); 
    		    print_r($s_dbg); 
    		    exit;
    		    
            }		    
		
		    // get patients visits
		    $drop = Doctrine_Query::create()
		    ->select('*, count(distinct(ipid)) as ipids, sum(besuchsdauer) as duration, sum(fahrtzeit) as driving_time')
		    ->from('PatientHospizvizits')
		    ->where('ipid in ("999999",' . substr($ipids, 0, -1) . ') and isdelete=0 and (' . str_replace('%date%', 'hospizvizit_date', $active_cond['date_sql']) . ') ')
		    ->andWhereIn('grund',$allowed_grund)
		    ->groupBy('vw_id');
		    $hospizvizits = $drop->fetchArray();
		    
		    foreach($hospizvizits as $value)
		    {
		        foreach($docarray as $name_user)
		        {
		            if($value['vw_id'] == $name_user['id'])
		            {
		                $dataneeded[$value['vw_id']]['lastname'] = $name_user['last_name'];
		                $dataneeded[$value['vw_id']]['firstname'] = $name_user['first_name'];
        		        $dataneeded[$value['vw_id']]['duration'] = round(($value['duration'] / 60),2) ;
// 		                $dataneeded[$value['vw_id']]['driving_time'] = $value['driving_time'];
		                $dataneeded[$value['vw_id']]['driving_time'] =round(($value['driving_time'] / 60),2) ;
        		        
        		        $dataneeded_dbg[$value['vw_id']][$value['id']] = $value ;
        		        $dataneeded_dbg[$value['vw_id']][$value['id']]['epid'] =  $active_patient_details[$value['ipid']]['details']['epid'];
        		        $dataneeded_dbg[$value['vw_id']][$value['id']]['voluntary'] = $name_user['last_name'].' '.$name_user['first_name'] ;
		            }
		        }
		    }
		    
		  $dataneeded = $this->array_sort($dataneeded, "lastname", SORT_ASC);
		    $overall = 0;
		    $overall_driving = 0;
		    foreach($dataneeded as $keyworker => $worker)
		    {
		        $masterdata['data'][$keyworker]['lastname'] = $dataneeded[$keyworker]['lastname'];
		        $masterdata['data'][$keyworker]['firstname'] = $dataneeded[$keyworker]['firstname'];
		        $masterdata['data'][$keyworker]['duration_hours'] = $dataneeded[$keyworker]['duration'];
		        $masterdata['data'][$keyworker]['driving_time_count'] = $dataneeded[$keyworker]['driving_time'];
		        $overall +=$dataneeded[$keyworker]['duration'] ;
		        $overall_driving +=$dataneeded[$keyworker]['driving_time'] ;
		    }
		    $masterdata['extra']['sum'] = $overall;
		    $masterdata['extra']['sum_driving'] = $overall_driving;
		    
		    return $masterdata;
		}
		
		private function voluntaryworkersactivities($params)
		{
		    // report_id = 164
		    // report_name = Ehrenamtliche Fortbildungen
		    
		    $quarterarr = $params['quarterarr'];
		    $yeararr = $params['yeararr'];
		    $montharr = $params['montharr'];
		    $includearr = $params['includearr'];
		    $onlyactive = $params['onlyactive'];
		
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $whereepid = $this->getDocCondition();
		
		    $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
		    $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		
		    // ################################################
		    // get associated clients of current clientid START
		    // ###############################################
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
		    if($connected_client){
		        $vw_clientid = $connected_client;
		    } else{
		        $vw_clientid = $logininfo->clientid;
		    }
		    
		    // ################################################
		    // get associated clients of current clientid END
		    // ###############################################
		    
		    $fdoc = new Voluntaryworkers();
		    $docarray = $fdoc->getClientsVoluntaryworkers($vw_clientid);
		    
		    foreach($docarray as $k=>$vw){
		        $vw_details[$vw['id']] = $vw; 
		        $vw_ids[] = $vw['id'];
		    }
		    if(empty($vw_ids)){
		        $vw_ids[] = "9999999999";
		    }
		    
		    $vw_act_q = Doctrine_Query::create()
    		    ->select('*')
    		    ->from('VoluntaryworkersActivities')
    		    ->where("isdelete = 0")
    		    ->andWhereIn('vw_id',$vw_ids)
    		    ->where(' isdelete=0 and (' . str_replace('%date%', 'date', $active_cond['date_sql']) . ') ')
    		    ->orderBy('date DESC');
		    $vw_act_array = $vw_act_q->fetchArray();
		    
		    foreach($vw_act_array as $k=>$va){
		        $vw_activities[$va['vw_id']][] = $va;
		    }
		    
	        foreach($vw_details as $vw_id => $vw_data)
            {
               $req_data[$vw_id]['lastname'] =  $vw_data['last_name'];
               $req_data[$vw_id]['firstname'] =  $vw_data['first_name'];
               if(!empty($vw_activities[$vw_id])){
                   $k=0;
                   foreach($vw_activities[$vw_id] as $kac =>$vac){
                       if($vac['date'] != "1970-01-01 00:00:00"){
                           $req_data[$vw_id]['activities'][$k]['date'] = date('d.m.Y',strtotime($vac['date']));
                       } else{
                           $req_data[$vw_id]['activities'][$k]['date'] = '-';
                       }
                       if($vac['duration'] != "" ) {
                       	$req_data[$vw_id]['activities'][$k]['duration'] = $vac['duration'];
                       } else{
                       	$req_data[$vw_id]['activities'][$k]['duration'] = '-';
                       }
                       
                       $req_data[$vw_id]['activities'][$k]['name'] = $vac['activity'] ;
                       $k++;
                   }
               } else{
//                       $req_data[$vw_id]['activities'] = "-";
                      $req_data[$vw_id]['activities'][99999999999]['date'] = "-";
                      $req_data[$vw_id]['activities'][99999999999]['duration'] = "-";
                      $req_data[$vw_id]['activities'][99999999999]['name'] = "-" ;
               }
	        }
	        
		    $dataneeded = $this->array_sort($req_data, "lastname", SORT_ASC);
		    
		    foreach($dataneeded as $keyworker => $worker)
		    {
		        $masterdata['data'][$keyworker]['lastname'] = $dataneeded[$keyworker]['lastname'];
		        $masterdata['data'][$keyworker]['firstname'] = $dataneeded[$keyworker]['firstname'];
		        $masterdata['data'][$keyworker]['activities'] = $dataneeded[$keyworker]['activities'];
		    }
		    
		    return $masterdata;
		}
		
		
		private function bielefeldhb($params)
		{
		    // report_id = 165
		    // report_name = Bielefeld HB;
		    // ISPC-1491 Comment added on 21/Oct/15
            // 1) add coloumn "Einschreibedatum" (first admission)
            // 2) add coloumn "VWD in Tagen" (active day overall (no time filter)
            // 3) add coloumn "Anzahl HB der QPA" -> HB in L shortcut of user group DOCTOR
            // 4) add coloumn "HB/ Tage VWD" -> show 3 divided by 2
            // 5) add coloumn "Anzahl HB der Koordinatoren (KO)" -> HB in L of all koordination users
            // 6) add coloumn "Anzahl tp der KO" -> ammount of tp in L
            // 7) add coloumn "Anzahl tf der KO" -> ammount of tf in L
            // 8) add coloumn "Name Hausarzt" -> family doc
            // 9) add coloumn PPD -> show the name of nurse service if available which has PPD selected.
            
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $whereepid = $this->getDocCondition();
		    $clientid = $logininfo->clientid;

		    $quarterarr = $params['quarterarr'];
		    $yeararr = $params['yeararr'];
		    $montharr = $params['montharr'];
		    $includearr = $params['includearr'];
		    $onlyactive = $params['onlyactive'];
		    
		    /* ----------------- Report period days  -------------------- */
		    $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
		    $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		    
		    foreach($period ['start'] as $keyd => $startDate)
		    {
		        $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
		        if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d");
		        }
		        else
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
		        }
		    }
		    
		    /* ----------------------- Get patients in report period-------------------------------------- */
		    $sql = 'e.epid, p.ipid, e.ipid,p.familydoc_id,';
		    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		    $conditions['periods'] = $report_period_array;
		    $conditions['client'] = $clientid;

		    // if user selected - get only assigned to user
		    if($whereepid){
		        $patientMasterData = Doctrine_Query::create()
		        ->select("e.ipid")
		        ->from("EpidIpidMapping e")
		        ->where($whereepid . ' e.clientid = ' . $logininfo->clientid);
		        $pmarr = $patientMasterData->fetchArray();
		         
		        $doctor_assigned_ipids = array();
		        foreach($pmarr as $patient)
		        {
		            $doctor_assigned_ipids[] =  $patient['ipid'];
		        }
		         
		        if(!empty($doctor_assigned_ipids)){
		            $conditions['ipids'] =  $doctor_assigned_ipids;
		        }
		         
		    } else{
		        $conditions['ipids'] = false;
		    }
		    
		    $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);

		    $required_ipids = array_keys($active_patient_details); // return ipids
		    
		    if(empty($required_ipids)){
		        $required_ipids[] = "9999999999";
		    }
		    
		    foreach($required_ipids as $key => $val)
		    {
		        $allfinal_str .= "'" . $val . "',";
		    }
		    /*----------------------- Get patients who died in report period------------------------------------------*/
		    
		    $dm_dead = Doctrine_Query::create()
		    ->select("*")
		    ->from('DischargeMethod')
		    ->where("clientid='" . $logininfo->clientid . "' AND (abbr='TOD' OR abbr='TODNA')");
		    
		    $dm_deadarray = $dm_dead->fetchArray();
		    
		    $dm_deadfinal[] = '999999999';
		    foreach($dm_deadarray as $key => $val)
		    {
		        $dm_deadfinal[] = $val['id'];
		    }
		    
		    $deadpatients = Doctrine_Query::create()
		    ->select('*')
		    ->from('PatientDischarge p')
		    ->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ") AND discharge_method IN (" . implode($dm_deadfinal, ',') . ") AND isdelete=0")
		    ->andWhere('(' . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ')');
	   	    if($_REQUEST['dbgq'] == "1"){
    		    echo $deadpatients->getSqlQuery(); exit;
	   	    }
	   	    $deadpatientarray = $deadpatients->fetchArray();

		    
		    foreach($deadpatientarray as  $k=>$dspat){
		        $dead_ipids[] = $dspat['ipid'];
		    }
		    
		    if(empty($dead_ipids)){
		        $dead_ipids[] = "9999999999";
		    }
		    
		    // get details only for deade ipids
		    
		    

		    ###########################
		    $conditions_ov['periods'] = array('0' => array('start' => "2007-01-01", 'end' => date("Y-m-d")));
		    $conditions_ov['client'] = $clientid;
		    $conditions_ov['ipids'] = $dead_ipids;
		    $overall_patient_details = Pms_CommonData::patients_days($conditions_ov);
		    
// 		    print_R($overall_patient_details['0540603e9fbdd18318aff192e91ae47c5a8a54ca']); exit;
		    foreach($overall_patient_details as $ipid => $op_details)
		    {
		        
// 	            $patient_data [$op_details['details'] ['ipid']]['treateddays'] = $op_details['real_active_days_no'];
	            $overall_patient_data [$op_details['details'] ['ipid']]['overall_days_of_treatment'] = $op_details['treatment_days_no'];
	            $overall_patient_data [$op_details['details'] ['ipid']]['overall_active_days'] = $op_details['real_active_days_no'];
	            $overall_patient_data [$op_details['details'] ['ipid']]['admission_days'] = $op_details['admission_days'];
	            $overall_patient_data [$op_details['details'] ['ipid']]['first_admission_ever'] = $op_details['admission_days'][0];
		    }
// 		    print_r($overall_patient_data); exit;
		    //0540603e9fbdd18318aff192e91ae47c5a8a54ca
		    //get pflegedienste
		    $nursing = new PatientPflegedienste();
		    $patient_nursing_arr = $nursing->get_multiple_patient_pflegedienste($dead_ipids,false,true);
		    
		    foreach($patient_nursing_arr['results'] as $pipid => $ppd_data ){
		        foreach($ppd_data as $k=>$ppd_details){
    		        if(strlen($ppd_details['nursing'])>0){
                        $ppd_nurses_array[$pipid][] = $ppd_details['nursing'];     		            
    		        } else{
                        $ppd_nurses_array[$pipid][] = $ppd_details['last_name'].', '. $ppd_details['first_name'];     		            
    		        }
		            
		        }
		    }
		    
		    
		    /* ----------------- Get User - Group  Details -------------------- */
		    $usergroup = new Usergroup();
		    $MasterGroups = array("4", "5","6"); 
		    $master_group_ids = $usergroup->getUserGroups($MasterGroups);
		    
		    foreach($master_group_ids as $key => $value)
		    {
		        $groups_id[$value['groupmaster']] = $value['id'];
		        $group_info[$value['id']]['master'] = $value['groupmaster'];
		    }
		    /* ################################################################################################### */
		    /* ----------------- Get User Details -------------------- */
		    $usermod = new User();
		    $groups_users_array = $usermod->getuserbyGroupId($groups_id, $clientid, true);
		    
		    
		    foreach($groups_users_array as $key => $val)
		    {
		        if($group_info[$val['groupid']]['master'] == '4')
		        {
		            $users ['doctor'][] = $val ['id'];
		        }
		    
		        if($group_info[$val['groupid']]['master'] == '5')
		        {
		            $users ['nurse'][] = $val ['id'];
		        }
		        
		        if($group_info[$val['groupid']]['master'] == '6')
		        {
		            $users ['koord'][] = $val ['id'];
		        }
		    
		    }
		    
		    
		    
		    /* ----------------------- Get patient l entry -------------------------------------- */
		    $qpa1 = Doctrine_Query::create()
		    ->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
		    ->from('PatientCourse')
		    ->where('wrong != 1')
		    ->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("L")) . '"')
		    ->andWhereIn('ipid', $dead_ipids)
		    ->andWhere('source_ipid = ""')
		    ->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
		    $qparray = $qpa1->fetchArray();
		    
		    if($_REQUEST['dbgq'] == "2"){
		        
		        var_dump($qparray); exit;
		    }
		    
		    
            $allowed_special_texts = array("hb","tp","tf");
            
            $create_user = "";
		    foreach($qparray as $kc => $c_value)
		    {
		        $specialtext = "";
		        $specialtext = trim(substr(trim($c_value['course_title']), 0, 2));
		        
		        if(in_array($specialtext,$allowed_special_texts)){
		            $create_user = $c_value['create_user'];
		            if(in_array($create_user,$users ['doctor'])){
	                // get all entries added by doctors
		                $entries_array[$c_value['ipid']]['doctor'][$specialtext][] = $c_value['id'];
		            } 
		            
		            if(in_array($create_user,$users ['nurse'])){
	                // get all entries added by nurses
		                $entries_array[$c_value['ipid']]['nurse'][$specialtext][] = $c_value['id'];
		                
		            }
		            if(in_array($create_user,$users ['koord'])){
	                // get all entries added by koordinator
		                $entries_array[$c_value['ipid']]['koord'][$specialtext][] = $c_value['id'];
		            }
		            $entries_array[$c_value['ipid']]['overall'][$specialtext][] = $c_value['id'];
		        }
		        
		    }
 

		    /*----------------------- Patient details ------------------------------------------*/
		    foreach($active_patient_details as $ipid => $p_details)
		    {
		        if(in_array($p_details['details'] ['ipid'],$dead_ipids)){
    		        $patient_details [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
    		        $patient_details [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
    		        $patient_details [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
    		        $patient_details [$p_details['details'] ['ipid']] ['family_doctor'] =$p_details['details'] ['familydoc_id'];
    		        $patient_details [$p_details['details'] ['ipid']] ['first_admission_ever'] = $overall_patient_data[$p_details['details'] ['ipid']]['first_admission_ever'];
    		        $patient_details [$p_details['details'] ['ipid']] ['overall_active_days'] = $overall_patient_data[$p_details['details'] ['ipid']]['overall_days_of_treatment'];
    		        $doctorids[] = $p_details['details'] ['familydoc_id'];
		        }
		    }
		    /* ----------------------- Get family doctors ids -------------------------------- */
	 
		    if(empty($doctorids))
		    {
		        $doctorids[] = "9999999999";
		    }
		    /* ----------------------- Get family doctor details-------------------------------- */
		    $famdoc = new FamilyDoctor();
		    $familidoc = $famdoc->getFamilyDoctors(false, false, false, $doctorids);
		
		    foreach($familidoc as $fd_key => $fd_value)
		    {
		        $familydoctors[$fd_value['id']] = $fd_value;
		        
		        $familydoctors_details[$fd_value['id']]="";
		        
		        if(strlen($fd_value['title']) > 0)
		        {
		            $familydoctors_details[$fd_value['id']] = $fd_value['title'] . ' ';
		        }
		        if(strlen($fd_value['first_name']) > 0 || strlen($fd_value['last_name']) > 0)
		        {
		            $familydoctors_details[$fd_value['id']] .= $fd_value['last_name'] . ', '.$fd_value['first_name'];
		        }
		        
		    }
		
		
		    /* ----------------------- Display all data-------------------------------- */
		    foreach($patient_details as $patient_ipid => $val)
		    {
		        $statdia_array[$patient_ipid]['epid'] = $val['epid'];
		        $statdia_array[$patient_ipid]['lastname'] = ltrim($val["surname"]);
		        $statdia_array[$patient_ipid]['firstname'] = ltrim($val["firstname"]);
		        $statdia_array[$patient_ipid]['familydoctor'] = ltrim($familydoctors_details[$val['family_doctor']]);
		        
		        // "Einschreibedatum" (first admission)
		        $statdia_array[$patient_ipid]['first_admission_ever'] = $val["first_admission_ever"];
		        // "VWD in Tagen" (active day overall (no time filter)
		        $statdia_array[$patient_ipid]['overall_active_days'] = $val["overall_active_days"];
		        
		        // "Anzahl der HB"
		        if(!empty($entries_array[$patient_ipid]['overall']["hb"]   )){
    		        $statdia_array[$patient_ipid]['hb_amount'] = count($entries_array[$patient_ipid]['overall']["hb"]);
		        } else{
    		        $statdia_array[$patient_ipid]['hb_amount'] = "-";
		        }
		        
		        
	            //"Anzahl HB der QPA" -> HB in L shortcut of user group DOCTOR
	            //"HB/ Tage VWD" -> show 3 divided by 2
		        if(!empty($entries_array[$patient_ipid]['doctor']["hb"] )){
    		        $statdia_array[$patient_ipid]['doctor_hb_amount'] = count($entries_array[$patient_ipid]['doctor']["hb"]);
    		        $statdia_array[$patient_ipid]['doctor_hb_devided_amount'] = round((count($entries_array[$patient_ipid]['doctor']["hb"])/$val["overall_active_days"]),2);
		        } else{
    		        $statdia_array[$patient_ipid]['doctor_hb_amount'] = "-";
    		        $statdia_array[$patient_ipid]['doctor_hb_devided_amount'] = "-";
		        }
		        
		        //"Anzahl HB der Koordinatoren (KO)" -> HB in L of all koordination users
		        if(!empty($entries_array[$patient_ipid]['koord']["hb"] )){
    		        $statdia_array[$patient_ipid]['koord_hb_amount'] = count($entries_array[$patient_ipid]['koord']["hb"]);
		        } else{
    		        $statdia_array[$patient_ipid]['koord_hb_amount'] = "-";
		        }
		        
		        
		        
		        //"Anzahl tp der KO" -> ammount of tp in L of all koordination users
		        if(!empty($entries_array[$patient_ipid]['koord']["tp"] )){
    		        $statdia_array[$patient_ipid]['koord_tp_amount'] = count($entries_array[$patient_ipid]['koord']["tp"]);
		        } else{
    		        $statdia_array[$patient_ipid]['koord_tp_amount'] = '-';
		        }
		        
		        //"Anzahl tf der KO" -> ammount of tp in L of all koordination users
		        if(!empty($entries_array[$patient_ipid]['koord']["tf"] )){
    		        $statdia_array[$patient_ipid]['koord_tf_amount'] = count($entries_array[$patient_ipid]['koord']["tf"]);
		        } else{
    		        $statdia_array[$patient_ipid]['koord_tf_amount'] = '-';
		        }
   		        
   		        // PPD -> show the name of nurse service if available which has PPD selected.
   		        if(!empty($ppd_nurses_array[$patient_ipid])){
       		        $statdia_array[$patient_ipid]['ppd_nurse'] = implode('<br />',$ppd_nurses_array[$patient_ipid]);
   		        } else{
       		        $statdia_array[$patient_ipid]['ppd_nurse'] = " - ";
   		        }
		    }
		    
		    $data['data'] = $statdia_array;
		
		    return $data;
		}
		
		
		public function user_working_hours_kntf_rp($params)
		{
		    // report_id = 166
		    // report_name =  Arbeitszeit Rhein Lahn
		    //this report looks for working times, driving times, xt times in report period.
		    // FROM CONTACT FORM
		    //Nachname | Vorname   | Benutzer | Datum          | Besuchszeit |	XT Minuten | Fahrtzeit   | Dokumentationszeit | koordination Minuten
		    // surname | firstname | USER     | Date of action | visit time  |  xt time    | driving time|  bavaria form      | koordination time
		    $quarterarr = $params['quarterarr'];
		    $yeararr = $params['yeararr'];
		    $montharr = $params['montharr'];
		    $includearr = $params['includearr'];
		    $onlyactive = $params['onlyactive'];
		
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $whereepid = $this->getDocCondition();
		    $required_user = $this->getDocCondition(true);
		    $pm = new PatientMaster ();
		
		    $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
		    $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		
		    foreach($period ['start'] as $keyd => $startDate)
		    {
		        $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
		        if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d");
		        }
		        else
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
		        }
		    }
		
		
		
		    $sql = 'e.epid, p.ipid, e.ipid,';
		    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		    $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		    $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		    $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		    $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
		    $conditions['periods'] = $report_period_array;
		    $conditions['client'] = $clientid;
		
		    $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
		    // 		$active_patients_ipids = array_keys($active_patient_details);// return ipids
		    $ipidarr = array_keys($active_patient_details); // return ipids
		
		    foreach($active_patient_details as $ipid => $p_details)
		    {
		        $patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
		        $patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
		        $patientDetails [$p_details['details'] ['ipid']] ['lastname'] = $p_details['details'] ['last_name'];
		        $patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
		        $patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
		        $patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
		    }
		
		    if(empty($ipidarr))
		    {
		        $ipidarr[] = "XXXXXX";
		    }
		
		
		    /* ################################################################################################### */
		    /* ----------------- Get User Details -------------------- */
		    $usrar = Doctrine_Query::create()
		    ->select('*')
		    ->from('User')
		    ->where('isdelete=0')
		    ->orderBy('last_name ASC');
		    $user_arrayq = $usrar->fetchArray();
		
		    foreach($user_arrayq as $key => $val)
		    {
		        $username[$val['id']] =  $val['user_title'] . ' ' . $val['last_name'] . ', ' . $val['first_name'];
		    }
		    /* ################################################################################################### */
		    /* ----------------- Get Contact form types -------------------- */
		
		    $types = Doctrine_Query::create()
		    ->select('*')
		    ->from('FormTypes')
			->where('clientid =?', $clientid)
			->andWhere('isdelete =?','0');
		    $types_res = $types->fetchArray();
		
		
		    foreach($types_res as $k_ft => $v_ft)
		    {
		        $form_type[$v_ft['id']] = $v_ft['name'];
		    }
		
		
		    /* ----------------------Get all "deleted visits"  from patients------------------------------------- */
		    $deleted_visits = Doctrine_Query::create()
		    ->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title, AES_DECRYPT(tabname,'" . Zend_Registry::get('salt') . "') as tabname")
		    ->from('PatientCourse')
		    ->where('wrong=1')
		    ->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("F")) . '"')
		    ->andWhere("tabname='" . addslashes(Pms_CommonData::aesEncrypt('contact_form')) . "'")
		    ->andWhereIn('ipid', $ipidarr);
		    $deleted_visits_array = $deleted_visits->fetchArray();
		
		    $del_visits['contact_form'][] = '999999999999';
		
		    foreach($deleted_visits_array as $k_del_visit => $v_del_visit)
		    {
		        $del_visits[$v_del_visit['tabname']][] = $v_del_visit['recordid'];
		    }
		
		    /* ----------------------Get all "doctor visits" details from patients------------------------------------- */
		    $doctor_visits = Doctrine_Query::create()
		    ->select("*,c.ipid,c.id")
		    ->from("ContactForms c")
		    ->whereIn('c.ipid', $ipidarr)
		    ->andWhereNotIn('c.id', $del_visits['contact_form'])
		    ->andWhere(str_replace('%date%', 'billable_date', $active_cond['date_sql']))
		    ->andWhere("isdelete = 0");
		    if(!empty($required_user))
		    {
		        $doctor_visits->andWhere('create_user = "' . $required_user . '"');
		    }
		    $doctor_visits->orderBy('start_date ASC');
		    $doctor_visits_arr = $doctor_visits->fetchArray();
		
		
		    foreach($doctor_visits_arr as $doc => $value_doc)
		    {
		
		        $start_date = strtotime($value_doc['start_date']);
		        $end_date = strtotime($value_doc['end_date']);
		        $doc_visit_minutes = round(($end_date - $start_date) / 60);
		
		        $minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_date'] = date('d.m.Y', strtotime($value_doc['start_date']));
		        $minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['user_name'] = $username[$value_doc['create_user']];
		        $minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_time'] = date('H:i', strtotime($value_doc['start_date'])) . ' - ' . date('H:i', strtotime($value_doc['end_date']));
		        $minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['action_type'] = $form_type[$value_doc['form_type']];
		        $minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_minutes'] = $doc_visit_minutes;
		        $minutes_array[$value_doc['ipid']]['visit_' . $value_doc['id']]['visit_driving'] = $value_doc['fahrtzeit'];
		
		        $doctor_visits_dbg[$value_doc['ipid']][] = $value_doc;
		    }
		
		    if($_REQUEST['dbg'] == '1')
		    {
		        print_r("\n doctor_visits \n");
		        print_r($doctor_visits_dbg);
		    }
		
		    /* ------------------------Get all VERLAUF - "Telefonate" details from patients----------------------------------- */
		
		    $course_xt = Doctrine_Query::create()
		    ->select("ipid,course_date, create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
		    ->from('PatientCourse')
		    ->whereIn('ipid', $ipidarr)
		    ->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'XT' ")
		    ->andWhere("wrong = 0")
		    ->andWhere('source_ipid = ""')
		    ->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
		    if(!empty($required_user))
		    {
		        $course_xt->andWhere('create_user = "' . $required_user . '"');
		    }
		    $course_xt->orderBy('course_date ASC');
		    $course_xt_array = $course_xt->fetchArray();
		
		    foreach($course_xt_array as $course_xt_key => $course_xt_val)
		    {
		        $valid_date_xt = date('Y-m-d', strtotime($course_xt_val['course_date']));
		
		        if(!in_array($valid_date_xt, $finalDays[$course_xt_val['ipid']]['FinalCountDays']))
		        {
		            $course_xt_arr = explode("|", $course_xt_val['course_title']);
		            $xt_array[$patient_array[$course_xt_val['ipid']]['epid']][] = $course_xt_val['course_title'];
		
		            $minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['action_date'] = date('d.m.Y', strtotime($course_xt_val['course_date']));
		            ;
		            $minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['action_type'] = "Telefon";
		            $minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['user_name'] = $username[$course_xt_val['create_user']];
		            if(count($course_xt_arr) == 3)
		            { //method implemented with 3 inputs
		                $minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['telefon_minutes'] = intval($course_xt_arr[0]);
		            }
		            else if(count($course_xt_arr) != 3 && count($course_xt_arr) < 3)
		            { //old method before anlage 10
		                $minutes_array[$course_xt_val['ipid']]["xt_" . $course_xt_val['id']]['telefon_minutes'] = intval($course_xt_arr[0]);
		            }
		        }
		    }
		
		
		    if($_REQUEST['dbg'] == '1')
		    {
		        print_r("\n telefon \n");
		        print_r($xt_array);
		    }
		
		    /* -----------------------Get all VERLAUF - "Koordination" details from patients ------------------------------ */
		    $course_v = Doctrine_Query::create()
		    ->select("ipid,course_date,create_user, AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type,AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
		    ->from('PatientCourse')
		    ->whereIn('ipid', $ipidarr)
		    ->andWhere("AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') = 'V'")
		    ->andWhere("wrong = 0")
		    ->andWhere('source_ipid = ""')
		    ->andWhere(str_replace('%date%', 'course_date', $active_cond['date_sql']));
		    if(!empty($required_user))
		    {
		        $course_v->andWhere('create_user = "' . $required_user . '"');
		    }
		    $course_v->orderBy('course_date ASC');
		    $course_v_array = $course_v->fetchArray();
		
		    foreach($course_v_array as $course_v_key => $course_v_val)
		    {
		        $valid_date_v = date('Y-m-d', strtotime($course_v_val['course_date']));
		
		
		        $course_v_arr = explode("|", $course_v_val['course_title']);
		        $v_array[$patient_array[$course_v_val['ipid']]['epid']][] = $course_v_val['course_title'];
		
		        $minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['user_name'] = $username[$course_v_val['create_user']];
		        $minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['action_date'] = date('d.m.Y', strtotime($course_v_val['course_date']));
		        $minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['action_type'] = "Koordination";
		
		        if(count($course_v_arr) == 3)
		        {
		            $minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['coordination_minutes'] = intval($course_v_arr[0]);
		        }
		        else if(count($course_v_arr) != 3)
		        {
		            $minutes_array[$course_v_val['ipid']]["coordination_" . $course_v_val['id']]['coordination_minutes'] = intval($course_v_arr[0]);
		        }
		    }
		
		    if($_REQUEST['dbg'] == '1')
		    {
		        print_r("\n koordination \n");
		        print_r($v_array);
		    }
		
		
		    /* ----------------------Prepare data for display ----------------------------- */
		    $patient_actions_count = array();
		    $visit_count = 0;
		
		    if($_REQUEST['dbg'] == 'x')
		    {
		        print_r($activ_in_perioada);
		        exit;
		    }
		    $total_visits_per_day = 0;
		    $total_contacts_per_day = 0;
		    foreach($minutes_array as $patient_ipid => $values)
		    {
		        $patient_values[] = $patient_ipid;
		
		        $x = 0;
		        foreach($values as $action_identification => $vls)
		        {
		            $user_documentation[$patient_ipid][$x]['user_name'] = $vls['user_name'];
		            $user_documentation[$patient_ipid][$x]['date_of_action'] = $vls['action_date'];
		            $user_documentation[$patient_ipid][$x]['user_action_type'] = $vls['action_type'];
		
		
		            if($vls['action_time'])
		            {
		                $user_documentation[$patient_ipid][$x]['time_of_action'] = $vls['action_time'];
		            }
		            else
		            {
		                $user_documentation[$patient_ipid][$x]['time_of_action'] = "-";
		            }
		
		            if($vls['visit_minutes'])
		            {
		                $user_documentation[$patient_ipid][$x]['visit_time_duration'] = $vls['visit_minutes'];
		            }
		            else
		            {
		                $user_documentation[$patient_ipid][$x]['visit_time_duration'] = "-";
		            }
		
		            if($vls['telefon_minutes'])
		            {
		                $user_documentation[$patient_ipid][$x]['xt_time_count'] = $vls['telefon_minutes'];
		            }
		            else
		            {
		                $user_documentation[$patient_ipid][$x]['xt_time_count'] = "-";
		            }
		
		
		            if($vls['visit_driving'])
		            {
		                $user_documentation[$patient_ipid][$x]['driving_time_count'] = $vls['visit_driving'];
		            }
		            else
		            {
		                $user_documentation[$patient_ipid][$x]['driving_time_count'] = "-";
		            }
		
		
		            if($vls['coordination_minutes'])
		            {
		                $user_documentation[$patient_ipid][$x]['coordination_time_count'] = $vls['coordination_minutes'];
		            }
		            else
		            {
		                $user_documentation[$patient_ipid][$x]['coordination_time_count'] = "-";
		            }
		
		            $x++;
		        }
		    }
		
		
		    /* ------------------------------------Display all results ------------------------------------------ */
		    $i = 0;
		
		    if(!empty($patientDetails))
		    {
		        foreach($patientDetails as $keypatient => $patient)
		        {
		            if(!in_array($patient['ipid'], $patient_values))
		            {
		                unset($patientDetails[$patient['ipid']]);
		            }
		        }
		        foreach($patientDetails as $keypatient => $patient)
		        {
		            $MasterData['data'][$patient['ipid']]['epid'] = $patient['epid'];
		            $MasterData['data'][$patient['ipid']]['lastname'] = $patient['lastname'];
		            $MasterData['data'][$patient['ipid']]['firstname'] = $patient['firstname'];
		            $MasterData['data'][$patient['ipid']]['birthd'] = $patient['dateofbirth'];
		            $MasterData['data'][$patient['ipid']]['patient_actions'] = $user_documentation[$patient['ipid']];
		            $MasterData['data'][$patient['ipid']]['rp_pat_dead'] = "";
		            $MasterData['data'][$patient['ipid']]['rpassessment'] = "";
		
		            $i++;
		        }
		        
		        return $MasterData;
		    }
		}		

		
		
		public function hessen_statistics_fall_active_kh($params)
		{
		    // report id = 167
		    // report_name = Hessen Statistik - Fall III --- FOR ACTIVE PATIENTs - And hospital changes
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $whereepid = $this->getDocCondition();
		
		    $quarterarr = $params ['quarterarr'];
		    $yeararr = $params ['yeararr'];
		    $montharr = $params ['montharr'];
		    $includearr = $params ['includearr'];
		    $onlyactive = $params ['onlyactive'];
		
		    $patient_master = new PatientMaster();
		
		    $s = array('%date_start%', '%date_end%');
		    $r = array('`date`', '`date`');
		
	        //  get active patients
	        $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
	        $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
	
	        foreach($period ['start'] as $keyd => $startDate)
	        {
	            $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
	            if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
	            {
	                $report_period_array[$keyd]['end'] = date("Y-m-d");
	            }
	            else
	            {
	                $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
	            }
	        }
	
	        $sql = 'e.epid, p.ipid, e.ipid,';
	        $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
	        $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
	        $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
	        $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
	        $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
	        $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
	
	        $conditions['periods'] = $report_period_array;
	        $conditions['client'] = $clientid;
// 	        $conditions['ipids'] = array("455e1a632c5e42bc4293f9ffe62b7814baf24600","c482eaf8421616077d5136d5aef803cadab70cd7","3c303d4d5b4603fb3f078b77f5f769d7dfe77f78");
// 	        $conditions['ipids'] = array("3c303d4d5b4603fb3f078b77f5f769d7dfe77f78");
// 	        $conditions['ipids'] = array("f73f10f8a077483d9b2adea11418a4fee3cc4908");
// 	        $conditions['ipids'] = array("6627dbf8b34fcd800964437c7f92caa8a15b08e2");
	        
	        $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
	        $active_ipids = array_keys($active_patient_details); // return ipids
	        
	        foreach($active_patient_details as $ipid => $p_details)
	        {
	            $patient_array [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
	            $patient_array [$p_details['details'] ['ipid']] ['last_name'] = $p_details['details'] ['last_name'];
	            $patient_array [$p_details['details'] ['ipid']] ['first_name'] = $p_details['details'] ['first_name'];
	            $patient_array [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
	            $patient_array [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));

	            
	            $patient_array [$p_details['details'] ['ipid']] ['admission_dates'] = $p_details['admission_days'];
	            $patient_array [$p_details['details'] ['ipid']] ['discharge_dates'] = $p_details['discharge'];
	            $patient_array [$p_details['details'] ['ipid']] ['discharge_dead'] = $p_details['discharge_dead'];
	            
	            foreach($p_details['active_periods'] as $pid => $aperiod)
	            {
	                $patient_array[$p_details['details'] ['ipid']]['adm'][] = date('Y-m-d', strtotime($aperiod['start']));
	                if($aperiod['end'] != "0000-00-00" && !empty($p_details['discharge']))
	                {
		                $patient_array[$p_details['details'] ['ipid']]['dis'][] = date('Y-m-d', strtotime($aperiod['end']));
	                } 
	                else
	                {
		                $patient_array[$p_details['details'] ['ipid']]['dis'][] = "";
	                }
	            }
	            
	            $patient_array [$p_details['details'] ['ipid']] ['active_days'] = $p_details ['real_active_days'];
	            $patient_array [$p_details['details'] ['ipid']] ['hospital_days'] = $p_details['hospital'] ['real_days'];
	            
	            if($p_details['hospital'] ['real_days']){
	                
                    $patient_array [$p_details['details'] ['ipid']] ['hospital_admissions'] = $p_details['hospital'] ['admission'];
	                $patient_array [$p_details['details'] ['ipid']] ['hospital_discharges'] = $p_details['hospital'] ['discharge'];
   	            
                    $patient_array [$p_details['details'] ['ipid']] ['full_hospital_days'] = array_diff($p_details['hospital'] ['real_days'], $p_details['hospital'] ['admission']);
                    $patient_array [$p_details['details'] ['ipid']] ['full_hospital_days'] = array_diff($patient_array [$p_details['details'] ['ipid']] ['full_hospital_days'], $p_details['hospital'] ['discharge']);
	            }
	            
	            
	            if($patient_array [$p_details['details'] ['ipid']] ['full_hospital_days'])
	            {
		            $patient_array [$p_details['details'] ['ipid']] ['active_no_hospital'] = array_diff($p_details ['real_active_days'],$patient_array [$p_details['details'] ['ipid']] ['full_hospital_days']);
	            }
	            else
	            {
		            $patient_array [$p_details['details'] ['ipid']] ['active_no_hospital'] = $p_details ['real_active_days'];
	            }
	        }

		        
	        if(empty($active_ipids))
	        {
	            $active_ipids[] = "XXXXXX";
	        }
	        
	        foreach($active_ipids as $k => $ipid){
	            $active_days[$ipid] = array_values($patient_array[$ipid]['active_no_hospital']);
	        }
	        
	        foreach($active_ipids as $k => $ipid){
	            $i = 0 ; 
	            $datediff = 0;
	            $days_bewtween = 0;
	            
	            
	            $patient_falls[$ipid][$i]['epid'] = $patient_array [$ipid] ['epid'] ;
	            $patient_falls[$ipid][$i]['start'] = $active_days[$ipid][0];
	            
	            foreach($active_days[$ipid] as $k=>$day){
	                
		            $patient_falls[$ipid][$i]['admission'] = "";
		            $patient_falls[$ipid][$i]['discharge'] = "";
	                
	                $datediff =  strtotime($day) - strtotime($active_days[$ipid][$k-1]) ;
	                $days_bewtween = floor($datediff / (60 * 60 * 24));
	                 
	                if($days_bewtween > 1 && isset($active_days[$ipid][$k-1] ))
	                {
	                    $patient_falls[$ipid][$i]['end'] = $active_days[$ipid][$k-1];
	                    $i++;
	                    $patient_falls[$ipid][$i]['start'] = $day;
	                    $active_days[$ipid][$k-1]  = $day;
	                }
	            }
	            
	            $patient_falls[$ipid][$i]['end'] = end($active_days[$ipid]);
	        }
		        
	        //get sapv(s) in all falls
	        $s_sapv = array('%date_start%', '%date_end%');
	        $r_sapv = array('verordnungam', 'verordnungbis');
	        $int_cond = str_replace($s_sapv, $r_sapv, $active_cond['interval_sql']);
	        
	        $sapv_arr_details = array('1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');
	        $patientmaster = new PatientMaster();
	        
	        /*$patientsapv = Doctrine_Query::create()
	        ->select("*")
	        ->from('SapvVerordnung sv')
	        ->whereIn('sv.ipid', $active_ipids)
// 	        ->andWhere('sv.status != 1')
	        ->andWhere('sv.isdelete = 0 and ((' . str_replace($s_sapv, $r_sapv, $active_cond['interval_sql']) . '))');
	        $sapvarr = $patientsapv->fetchArray();*/
	        $sapv = new SapvVerordnung();
	        $sapvarr = $sapv->get_all_sapvs_new($active_ipids, $clientid,"",$int_cond);
	        
	        foreach($sapvarr as $k_sapv => $v_sapv)
	        {
	            $sapv_arr['verordnet_arr'] = explode(',', $v_sapv['verordnet']);
	
	            foreach($sapv_arr['verordnet_arr'] as $k_vv => $v_vv)
	            {
	                $v_sapv['verordnet_arr'][] = $sapv_arr_details[$v_vv];
	            }
	            $v_sapv['verordnet_arr'] = array_values(array_unique($v_sapv['verordnet_arr']));
	
	            $patients_sapv_arr[] = $v_sapv;
	
	            //$sapv_vons_str .= '"' . $v_sapv['verordnet_von'] . '",' ;

	            $s_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
	            
	            if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $v_sapv['verorddisabledate'] != '1970-01-01 00:00:00')
	            {
	                $verordisablenext = strtotime('+1 day', strtotime($v_sapv['verorddisabledate']));
	                $v_sapv ['verordnungbis'] = date('Y-m-d', $verordisablenext);
	            }
	            $s_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
	             
	            if(empty($all_sapv_days[$v_sapv['ipid']]))
	            {
	                $all_sapv_days[$v_sapv['ipid']] = array();
	            }
	            if(empty($temp_sapv_days[$v_sapv['ipid']]))
	            {
	                $temp_sapv_days[$v_sapv['ipid']] = array();
	            }
	             
	            $temp_sapv_days[$v_sapv['ipid']] = $patientmaster->getDaysInBetween($s_start, $s_end);
	             
	            $all_sapv_days[$v_sapv['ipid']] = array_merge($all_sapv_days[$v_sapv['ipid']], $temp_sapv_days[$v_sapv['ipid']]);
	        }
	        
	        //$family_doctors = FamilyDoctor::getFamilyDocMultiple(substr($sapv_vons_str, 0, -1));

	        
		        
	        //get contact person
	        $contact = new ContactPersonMaster();
	        $contactpersons_loc_array = $contact->get_contact_persons_by_ipids($active_ipids, false, false);
	
	        
	        
	        //get patient location in report period
	        $time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $active_cond['interval_location_sql_qtz']));
	
	        
	        //get patient locations and ipids based on master hospital ids and into selected time period
	        $locations = Doctrine_Query::create()
	        ->select('*')
	        ->from('PatientLocation')
	        ->where('location_id != 0')
	        ->andWhere('isdelete = 0')
	        ->andwhere('' . $time_interval . '')
	        ->andWhereIn('ipid', $active_ipids)
	        ->orderBy('valid_from ASC');
	        $pat_locations_arr_q = $locations->fetchArray();
	
	        $pat_loc_ids[] = '99999999999';
	        foreach($pat_locations_arr_q as $k_p_loc => $v_p_loc)
	        {
	            $pat_loc_ids[] = $v_p_loc['location_id'];
	        }
	
	        $types = Locations::getLocationTypes();
	        
	        //get master locations data
	        $floc = Doctrine_Query::create()
	        ->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
	        ->from('Locations')
	        ->whereIn("id", $pat_loc_ids)
	        ->andWhere('isdelete=0')
	        ->orderBy('location ASC');
	        $locationdata = $floc->fetchArray();
	
	        foreach($locationdata as $k_loc => $v_loc)
	        {
	            $master_locations[$v_loc['id']] = $v_loc;
	            $master_locations_types[$v_loc['id']] = $types[$v_loc['location_type']];
	        }
	        
	        
	        //za foreach to combine 2 universe locations in one
	        foreach($pat_locations_arr_q as $k_pat_arr => $v_pat_arr)
	        {

	            if($master_locations[$v_pat_arr['location_id']]['location_type'] != "1"){
	                
	                $pat_locations_arr[$k_pat_arr] = $v_pat_arr;
	                
	                
		            $locid = substr($v_pat_arr['location_id'], 0, 4);
		            if($locid == "8888")
		            {
		                $patient_location_id = $v_pat_arr['location_id'];
		                $z = 1;
		                $cnt_number = 1;
		                foreach($contactpersons_loc_array[$v_pat_arr['ipid']] as $k => $value_cnt)
		                {
		                    if($value_cnt['isdelete'] == '0')
		                    {
		                        $pat_locarrayl[$v_pat_arr['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
		                        $cnt_number++;
		                    }
		                    else
		                    {
		                        $pat_locarrayl[$v_pat_arr['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
		                    }
		                    $z++;
		                }
		                $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr] = $pat_locarrayl[$v_pat_arr['ipid']][$patient_location_id];
		            }
		            else
		            {
		                $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_name'] = $master_locations[$v_pat_arr['location_id']]['location'];
		            }
	                
		            $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_type'] = $master_locations[$v_pat_arr['location_id']]['location_type'];
	                $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_type_description'] = $master_locations_types[$v_pat_arr['location_id']];
	                
		            $pat_locations_arr[$k_pat_arr]['location_name'] = $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_name'];
		            
		            $pat_locations_arr[$k_pat_arr]['location_type'] =  $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_type'];
		            $pat_locations_arr[$k_pat_arr]['location_type_description'] =  $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_type_description'];
	            }
	            else
	            {
	                $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_name'] = $master_locations[$v_pat_arr['location_id']]['location'];
	                $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_type'] = $master_locations[$v_pat_arr['location_id']]['location_type'];
	                $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_type_description'] = $master_locations_types[$v_pat_arr['location_id']];
	                 
	                $pat_kh_locations_arr[$k_pat_arr] = $v_pat_arr;
	                $pat_kh_locations_arr[$k_pat_arr]['location_name'] = $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_name'];
	                $pat_kh_locations_arr[$k_pat_arr]['location_type'] =  $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_type'];
	                $pat_kh_locations_arr[$k_pat_arr]['location_type_description'] =  $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_type_description'];
	            }
	        
	        }
	        
	        if($_REQUEST['dbg'] == "1"){
	            print_r(" \n hospitals \n ");
	            print_r($pat_kh_locations_arr);
	        }
		        
	        //get discharge methods
	        $dis_methods = Doctrine_Query::create()
	        ->select("*")
	        ->from('DischargeMethod')
	        ->where("clientid='" . $clientid . "'");
	        $dis_methods->getSqlQuery();
	        $dis_methods_array = $dis_methods->fetchArray();
	
	        foreach($dis_methods_array as $k_d_method => $v_d_method)
	        {
	            $dis_methods_details[$v_d_method['id']] = $v_d_method;
	            
	            $dis_methods_data[$v_d_method['id']] = $v_d_method['description'];
	            
	        }
	
	        $patientdis = Doctrine_Query::create()
	        ->select("*")
	        ->from('PatientDischarge')
	        ->whereIn('ipid', $active_ipids);
	        $patientdisarray = $patientdis->fetchArray();
	
	        foreach($patientdisarray as $k_dis => $v_dis)
	        {
	            $patients_discharges[$v_dis['ipid']][] = $v_dis;
	            $patient_discharged_dates[$v_dis['ipid']][ ] = date('Y-m-d', strtotime($v_dis['discharge_date']));
	            
	            
	            $patient_discharged_details[$v_dis['ipid']][date('Y-m-d', strtotime($v_dis['discharge_date']))]['discharge_date'] = date('Y-m-d', strtotime($v_dis['discharge_date']));
	            $patient_discharged_details[$v_dis['ipid']][date('Y-m-d', strtotime($v_dis['discharge_date']))]['discharge_method'] = $dis_methods_data[$v_dis['discharge_method']];
	        }

            // Admission details 	     
	        foreach($active_ipids as $k_dis_ipid => $v_dis_ipid)
	        {
	            $i = '0';
	            foreach($patient_array[$v_dis_ipid]['adm'] as $k_dis_date => $v_dis_date)
	            {
	                $admission_date = date('Y-m-d', strtotime($v_dis_date));
	
	                foreach($patient_falls[$v_dis_ipid] as $fali =>$fall_data)
	                {
	                    $fall_start =  date('Y-m-d', strtotime($fall_data['start']));
	                    $fall_end = date('Y-m-d', strtotime($fall_data['end']));
	                    
	                    if(Pms_CommonData::isintersected($admission_date, $admission_date, $fall_start, $fall_end))
	                    {
	                        $patient_falls[$v_dis_ipid][$fali]['admission'] = date("d.m.Y",strtotime($admission_date));
	                    } 
	                    else
	                    {
	                        $patient_falls[$v_dis_ipid][$fali]['admission'] = "";
	                    }
	                }
	            }
	        }
	        
	        // Discharge - end  fall   details
	        foreach($active_ipids as $k_dis_ipid => $v_dis_ipid)
	        {
                foreach($patient_falls[$v_dis_ipid] as $fali =>$fall_data)
                {
                    $fall_start =  date('Y-m-d', strtotime($fall_data['start']));
                    $fall_end = date('Y-m-d', strtotime($fall_data['end']));
                    $fall_end_Ymd = date('Y-m-d', strtotime($fall_data['end']));
                    $fall_end_dmY = date('d.m.Y', strtotime($fall_data['end']));
                    
                    if( in_array($fall_end_Ymd,$patient_array[$v_dis_ipid]['dis']) && !in_array($fall_end_dmY, $patient_array[$v_dis_ipid]['hospital_admissions']) )
                    {
                        // discharge date
                        $patient_falls[$v_dis_ipid][$fali]['discharge'] = date("d.m.Y",strtotime($fall_end_Ymd));
                        // discharge method
                        $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] =  $patient_discharged_details[$v_dis_ipid][$fall_end_Ymd]['discharge_method'] ;
                    }
                    elseif(!in_array($fall_end_Ymd,$patient_array[$v_dis_ipid]['dis']) && in_array($fall_end_dmY, $patient_array[$v_dis_ipid]['hospital_admissions']) )
                    {
                        // discharge date
                        $patient_falls[$v_dis_ipid][$fali]['discharge'] = date("d.m.Y",strtotime($fall_end_Ymd));
                        // discharge method
                        $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] =   "Krankenhauseinweisung" ;
                    }
                    elseif(in_array($fall_end_Ymd,$patient_array[$v_dis_ipid]['dis']) && in_array($fall_end_dmY, $patient_array[$v_dis_ipid]['hospital_admissions']) )
                    {
                        // discharge date
                        $patient_falls[$v_dis_ipid][$fali]['discharge'] = date("d.m.Y",strtotime($fall_end_Ymd));
                        // discharge method
                        $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] =  $patient_discharged_details[$v_dis_ipid][$fall_end_Ymd]['discharge_method'] ;                        
                    }
                    else
                    {
                        // discharge date
                        $patient_falls[$v_dis_ipid][$fali]['discharge'] = "";
                        // discharge method
                        $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] =  "";
                        
                    }
                }
	        }
	        
	        $locations_and_sapv = array();
	        foreach($pat_locations_arr as $k_loc => $v_loc)
	        {
	            foreach($patient_falls[$v_loc['ipid']] as $k_fall => $v_fall)
	            {
	                $location_start = date('Y-m-d', strtotime($v_loc['valid_from']));
	
	                if($v_loc['valid_till'] != '0000-00-00 00:00:00')
	                {
	                    $location_end = date('Y-m-d', strtotime($v_loc['valid_till']));
	                }
	                else
	                {
	                    $location_end = date('Y-m-d', time());
	                }
	
	                
	                $fall_start = date('Y-m-d', strtotime($v_fall['start']));
	
	                $fall_end = date('Y-m-d', strtotime($v_fall['end']));

	                if(Pms_CommonData::isintersected($location_start, $location_end, $fall_start, $fall_end))
	                {
	                    $locations_and_sapv = $patientmaster->getDaysInBetween($location_start, $location_end);
	                    foreach($locations_and_sapv as $k=>$Ymd){
	                        if(in_array($Ymd,$all_sapv_days[$v_loc['ipid']])){
	                             $v_loc['days'][] = $Ymd;
	                        }
	                    }
                        if(!empty($v_loc['days'])){
	                       $patient_falls[$v_loc['ipid']][$k_fall]['locations'][] = $v_loc;
                        }
	                }
	            }
	        }
	        
	        //foreach to gather data sapv(s) per fall
	        foreach($patients_sapv_arr as $k_sapv => $v_sapv)
	        {
	            $sapv_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
	            
	            if($v_sapv['status'] == '1' && $v_sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $v_sapv['verorddisabledate'] != '1970-01-01 00:00:00')
	            {
	                $verordisablenext = strtotime('+1 day', strtotime($v_sapv['verorddisabledate']));
	                $v_sapv ['verordnungbis'] = date('Y-m-d', $verordisablenext);
	            }
	            
	            $sapv_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
	
	            foreach($patient_falls[$v_sapv['ipid']] as $k_fall => $v_fall)
	            {
	                $fall_start = date('Y-m-d', strtotime($v_fall['start']));
	                $fall_end = date('Y-m-d', strtotime($v_fall['end']));
	                
	                if(Pms_CommonData::isintersected($sapv_start, $sapv_end, $fall_start, $fall_end))
	                {
	                    if(empty($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr']))
	                    {
	                        $patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array();
	                        $patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'] = array();
	                    }
	
	                    $patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array_merge($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'], $v_sapv['verordnet_arr']);
	                    //$patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'][] = $family_doctors[$v_sapv['verordnet_von']]['last_name'] . ', ' . $family_doctors[$v_sapv['verordnet_von']]['first_name'];
	                    $patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'][] = $v_sapv['verordner'];
	                }
	                $patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array_unique(array_values($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr']));
	                $patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'] = array_unique(array_values($patient_falls[$v_sapv['ipid']][$k_fall]['von_arr']));
	            }
	        }
	        /* ------------------------------------ DISPLAY DATA -------------------------------------- */
	        

	        if($_REQUEST['pfals'] == "1"){
	            print_r($patient_falls); exit;
	        }
	        
	        
	        $x = '0';
	        foreach($patient_falls as $k_ipid => $v_falls_data)
	        {
	            foreach($v_falls_data as $k_fall => $v_fall_data)
	            {
	                if(count($v_fall_data['locations']) > '0')
	                {
	                    $v_fall_data['locations'] = $this->array_sort($v_fall_data['locations'], 'valid_from', SORT_ASC);
	                    
	                    $master_data['data'][$x]['epid'] = strtoupper($patient_array[$k_ipid]['epid']);
	                    $master_data['data'][$x]['lastname'] = $patient_array[$k_ipid]['last_name'];
	                    $master_data['data'][$x]['firstname'] = $patient_array[$k_ipid]['first_name'];
	
	                    if(count($v_fall_data['sapv_arr']) > '0')
	                    {
	                        $master_data['data'][$x]['sapv_activity'] = implode(', ', $v_fall_data['sapv_arr']);
	                    }
	                    else
	                    {
	                        $master_data['data'][$x]['sapv_activity'] = '-';
	                    }
	
	                    if(count($v_fall_data['von_arr']) > '0')
	                    {
	                        $master_data['data'][$x]['sapv_by'] = implode('<br />', $v_fall_data['von_arr']);
	                    }
	                    else
	                    {
	                        $master_data['data'][$x]['sapv_by'] = '-';
	                    }
	
	                    if(count($v_fall_data['locations']) > '0')
	                    {
	                        $loc = 0;
	                        foreach($v_fall_data['locations'] as $k_loc => $v_loc)
	                        {
	                            $master_data['data'][$x]['locations']['location_name'][$loc] = $v_loc['location_name'];
	                            
	                            if($loc == 0){
                                    $master_data['data'][$x]['locations']['location_start'][$loc] = date('d.m.Y', strtotime($v_loc['days'][0]));
	                            } else {
                                    $master_data['data'][$x]['locations']['location_start'][$loc] = date('d.m.Y', strtotime($v_loc['valid_from']));
	                            }
	                             $loc++;
	                        }
	                    }
	                    else
	                    {
	                        $master_data['data'][$x]['locations'] = array();
	                    }
	                    
	                    
	                    if($v_fall_data['fall_dsicharge_method']){
	                        
	                    
		                    if($v_fall_data['discharge']){
		                        
		                        
    		                    if( $v_fall_data['discharge'] == $v_fall_data['end'] )
    		                    {
    		                        $master_data['data'][$x]['dischargedate'] = $v_fall_data['discharge'];
    		                    }
    		                    else
    		                    {
    		                        $master_data['data'][$x]['dischargedate'] = $v_fall_data['end'];
    		                    }
		                    } 
		                    else
		                    {
   		                        $master_data['data'][$x]['dischargedate'] = $v_fall_data['end'];
		                    }
    		                $master_data['data'][$x]['discharge_methode'] = $v_fall_data['fall_dsicharge_method'];
	                    } 
	                    else
	                    {
	                        $master_data['data'][$x]['dischargedate'] = "-";
	                        $master_data['data'][$x]['discharge_methode'] = "-";
	                    }
	                    
	                    $master_data['location_count'][] = count($master_data['data'][$x]['locations']['location_name']);
	                    $x++;
	                }
	            }
	        }
	        $master_data['data'] = $this->array_sort($master_data['data'], 'epid', SORT_ASC);
	        
	        return $master_data;
		}
		
		public function hessen_statistics_fall_active_kh160705($params)
		{
		    // report id = 167
		    // report_name = Hessen Statistik - Fall III --- FOR ACTIVE PATIENTs - And hospital changes
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $whereepid = $this->getDocCondition();
		
		    $quarterarr = $params ['quarterarr'];
		    $yeararr = $params ['yeararr'];
		    $montharr = $params ['montharr'];
		    $includearr = $params ['includearr'];
		    $onlyactive = $params ['onlyactive'];
		
		    $patient_master = new PatientMaster();
		
		    $s = array('%date_start%', '%date_end%');
		    $r = array('`date`', '`date`');
		
	        //  get active patients
	        $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
	        $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
	
	        foreach($period ['start'] as $keyd => $startDate)
	        {
	            $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
	            if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
	            {
	                $report_period_array[$keyd]['end'] = date("Y-m-d");
	            }
	            else
	            {
	                $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
	            }
	        }
	
	        $sql = 'e.epid, p.ipid, e.ipid,';
	        $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
	        $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
	        $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
	        $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
	        $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
	        $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
	
	        $conditions['periods'] = $report_period_array;
	        $conditions['client'] = $clientid;
// 	        $conditions['ipids'] = array("455e1a632c5e42bc4293f9ffe62b7814baf24600","c482eaf8421616077d5136d5aef803cadab70cd7","3c303d4d5b4603fb3f078b77f5f769d7dfe77f78");
// 	        $conditions['ipids'] = array("3c303d4d5b4603fb3f078b77f5f769d7dfe77f78");
// 	        $conditions['ipids'] = array("ecba9d389f37bf5dba4f03117fb79ee067df319b");
	        
	        $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
	        $active_ipids = array_keys($active_patient_details); // return ipids
	        
	        foreach($active_patient_details as $ipid => $p_details)
	        {
	            $patient_array [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
	            $patient_array [$p_details['details'] ['ipid']] ['last_name'] = $p_details['details'] ['last_name'];
	            $patient_array [$p_details['details'] ['ipid']] ['first_name'] = $p_details['details'] ['first_name'];
	            $patient_array [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
	            $patient_array [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));

	            
	            $patient_array [$p_details['details'] ['ipid']] ['admission_dates'] = $p_details['admission_days'];
	            $patient_array [$p_details['details'] ['ipid']] ['discharge_dates'] = $p_details['discharge'];
	            $patient_array [$p_details['details'] ['ipid']] ['discharge_dead'] = $p_details['discharge_dead'];
	            
	            foreach($p_details['active_periods'] as $pid => $aperiod)
	            {
	                $patient_array[$p_details['details'] ['ipid']]['adm'][] = date('Y-m-d', strtotime($aperiod['start']));
	                if($aperiod['end'] != "0000-00-00" && !empty($p_details['discharge']))
	                {
		                $patient_array[$p_details['details'] ['ipid']]['dis'][] = date('Y-m-d', strtotime($aperiod['end']));
	                } 
	                else
	                {
		                $patient_array[$p_details['details'] ['ipid']]['dis'][] = "";
	                }
	            }
	            
	            $patient_array [$p_details['details'] ['ipid']] ['active_days'] = $p_details ['real_active_days'];
	            $patient_array [$p_details['details'] ['ipid']] ['hospital_days'] = $p_details['hospital'] ['real_days'];
	            
	            if($p_details['hospital'] ['real_days']){
	                
                    $patient_array [$p_details['details'] ['ipid']] ['hospital_admissions'] = $p_details['hospital'] ['admission'];
	                $patient_array [$p_details['details'] ['ipid']] ['hospital_discharges'] = $p_details['hospital'] ['discharge'];
   	            
                    $patient_array [$p_details['details'] ['ipid']] ['full_hospital_days'] = array_diff($p_details['hospital'] ['real_days'], $p_details['hospital'] ['admission']);
                    $patient_array [$p_details['details'] ['ipid']] ['full_hospital_days'] = array_diff($patient_array [$p_details['details'] ['ipid']] ['full_hospital_days'], $p_details['hospital'] ['discharge']);
	            }
	            
	            
	            if($patient_array [$p_details['details'] ['ipid']] ['full_hospital_days'])
	            {
		            $patient_array [$p_details['details'] ['ipid']] ['active_no_hospital'] = array_diff($p_details ['real_active_days'],$patient_array [$p_details['details'] ['ipid']] ['full_hospital_days']);
	            }
	            else
	            {
		            $patient_array [$p_details['details'] ['ipid']] ['active_no_hospital'] = $p_details ['real_active_days'];
	            }
	        }

		        
	        if(empty($active_ipids))
	        {
	            $active_ipids[] = "XXXXXX";
	        }
	        
	        foreach($active_ipids as $k => $ipid){
	            $active_days[$ipid] = array_values($patient_array[$ipid]['active_no_hospital']);
	        }
	        
	        foreach($active_ipids as $k => $ipid){
	            $i = 0 ; 
	            $datediff = 0;
	            $days_bewtween = 0;
	            
	            
	            $patient_falls[$ipid][$i]['epid'] = $patient_array [$ipid] ['epid'] ;
	            $patient_falls[$ipid][$i]['start'] = $active_days[$ipid][0];
	            
	            foreach($active_days[$ipid] as $k=>$day){
	                
		            $patient_falls[$ipid][$i]['admission'] = "";
		            $patient_falls[$ipid][$i]['discharge'] = "";
	                
	                $datediff =  strtotime($day) - strtotime($active_days[$ipid][$k-1]) ;
	                $days_bewtween = floor($datediff / (60 * 60 * 24));
	                 
	                if($days_bewtween > 1 && isset($active_days[$ipid][$k-1] ))
	                {
	                    $patient_falls[$ipid][$i]['end'] = $active_days[$ipid][$k-1];
	                    $i++;
	                    $patient_falls[$ipid][$i]['start'] = $day;
	                    $active_days[$ipid][$k-1]  = $day;
	                }
	            }
	            
	            $patient_falls[$ipid][$i]['end'] = end($active_days[$ipid]);
	        }
		        
	        //get sapv(s) in all falls
	        $s_sapv = array('%date_start%', '%date_end%');
	        $r_sapv = array('verordnungam', 'verordnungbis');
	        $int_cond = str_replace($s_sapv, $r_sapv, $active_cond['interval_sql']);
	        $sv_status = 'status != 1';
	        
	        $sapv_arr_details = array('1' => 'BE', '2' => 'KO', '3' => 'TV', '4' => 'VV');
	
	        /*$patientsapv = Doctrine_Query::create()
	        ->select("*")
	        ->from('SapvVerordnung sv')
	        ->whereIn('sv.ipid', $active_ipids)
	        ->andWhere('sv.status != 1')
	        ->andWhere('sv.isdelete = 0 and ((' . str_replace($s_sapv, $r_sapv, $active_cond['interval_sql']) . '))');
	        $sapvarr = $patientsapv->fetchArray();*/
	        $sapv = new SapvVerordnung();
	        $sapvarr = $sapv->get_all_sapvs_new($active_ipids, $clientid,"",$int_cond, $sv_status);
	        
	        foreach($sapvarr as $k_sapv => $v_sapv)
	        {
	            $sapv_arr['verordnet_arr'] = explode(',', $v_sapv['verordnet']);
	
	            foreach($sapv_arr['verordnet_arr'] as $k_vv => $v_vv)
	            {
	                $v_sapv['verordnet_arr'][] = $sapv_arr_details[$v_vv];
	            }
	            $v_sapv['verordnet_arr'] = array_values(array_unique($v_sapv['verordnet_arr']));
	
	            $patients_sapv_arr[] = $v_sapv;
	
	            //$sapv_vons_str .= '"' . $v_sapv['verordnet_von'] . '",' ;
	        }
	
	        //$family_doctors = FamilyDoctor::getFamilyDocMultiple(substr($sapv_vons_str, 0, -1));
	
		        
		        
		        
	        //get contact person
	        $contact = new ContactPersonMaster();
	        $contactpersons_loc_array = $contact->get_contact_persons_by_ipids($active_ipids, false, false);
	
	        
	        
	        //get patient location in report period
	        $time_interval = str_replace('%date_end%', 'valid_till', str_replace('%date_start%', 'valid_from', $active_cond['interval_location_sql_qtz']));
	
	        
	        //get patient locations and ipids based on master hospital ids and into selected time period
	        $locations = Doctrine_Query::create()
	        ->select('*')
	        ->from('PatientLocation')
	        ->where('location_id != 0')
	        ->andWhere('isdelete = 0')
	        ->andwhere('' . $time_interval . '')
	        ->andWhereIn('ipid', $active_ipids)
	        ->orderBy('valid_from ASC');
	        $pat_locations_arr_q = $locations->fetchArray();
	
	        $pat_loc_ids[] = '99999999999';
	        foreach($pat_locations_arr_q as $k_p_loc => $v_p_loc)
	        {
	            $pat_loc_ids[] = $v_p_loc['location_id'];
	        }
	
	        $types = Locations::getLocationTypes();
	        
	        //get master locations data
	        $floc = Doctrine_Query::create()
	        ->select("*,AES_DECRYPT(location,'" . Zend_Registry::get('salt') . "') as location")
	        ->from('Locations')
	        ->whereIn("id", $pat_loc_ids)
	        ->andWhere('isdelete=0')
	        ->orderBy('location ASC');
	        $locationdata = $floc->fetchArray();
	
	        foreach($locationdata as $k_loc => $v_loc)
	        {
	            $master_locations[$v_loc['id']] = $v_loc;
	            $master_locations_types[$v_loc['id']] = $types[$v_loc['location_type']];
	        }
	        
	        
	        //za foreach to combine 2 universe locations in one
	        foreach($pat_locations_arr_q as $k_pat_arr => $v_pat_arr)
	        {

	            if($master_locations[$v_pat_arr['location_id']]['location_type'] != "1"){
	                
	                $pat_locations_arr[$k_pat_arr] = $v_pat_arr;
	                
	                
		            $locid = substr($v_pat_arr['location_id'], 0, 4);
		            if($locid == "8888")
		            {
		                $patient_location_id = $v_pat_arr['location_id'];
		                $z = 1;
		                $cnt_number = 1;
		                foreach($contactpersons_loc_array[$v_pat_arr['ipid']] as $k => $value_cnt)
		                {
		                    if($value_cnt['isdelete'] == '0')
		                    {
		                        $pat_locarrayl[$v_pat_arr['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ' . $cnt_number . ' (' . $value_cnt['cnt_last_name'] . ' ' . $value_cnt['cnt_first_name'] . ')';
		                        $cnt_number++;
		                    }
		                    else
		                    {
		                        $pat_locarrayl[$v_pat_arr['ipid']]['8888' . $z]['location_name'] = 'bei Kontaktperson ';
		                    }
		                    $z++;
		                }
		                $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr] = $pat_locarrayl[$v_pat_arr['ipid']][$patient_location_id];
		            }
		            else
		            {
		                $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_name'] = $master_locations[$v_pat_arr['location_id']]['location'];
		            }
	                
		            $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_type'] = $master_locations[$v_pat_arr['location_id']]['location_type'];
	                $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_type_description'] = $master_locations_types[$v_pat_arr['location_id']];
	                
		            $pat_locations_arr[$k_pat_arr]['location_name'] = $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_name'];
		            
		            $pat_locations_arr[$k_pat_arr]['location_type'] =  $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_type'];
		            $pat_locations_arr[$k_pat_arr]['location_type_description'] =  $patlocarrayFinal[$v_pat_arr['ipid']][$k_pat_arr]['location_type_description'];
	            }
	            else
	            {
	                $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_name'] = $master_locations[$v_pat_arr['location_id']]['location'];
	                $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_type'] = $master_locations[$v_pat_arr['location_id']]['location_type'];
	                $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_type_description'] = $master_locations_types[$v_pat_arr['location_id']];
	                 
	                $pat_kh_locations_arr[$k_pat_arr] = $v_pat_arr;
	                $pat_kh_locations_arr[$k_pat_arr]['location_name'] = $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_name'];
	                $pat_kh_locations_arr[$k_pat_arr]['location_type'] =  $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_type'];
	                $pat_kh_locations_arr[$k_pat_arr]['location_type_description'] =  $patlocarrayFinal_kh[$v_pat_arr['ipid']][$k_pat_arr]['location_type_description'];
	            }
	        
	        }
	        
	        if($_REQUEST['dbg'] == "1"){
	            print_r(" \n hospitals \n ");
	            print_r($pat_kh_locations_arr);
	        }
		        
	        //get discharge methods
	        $dis_methods = Doctrine_Query::create()
	        ->select("*")
	        ->from('DischargeMethod')
	        ->where("clientid='" . $clientid . "'");
	        $dis_methods->getSqlQuery();
	        $dis_methods_array = $dis_methods->fetchArray();
	
	        foreach($dis_methods_array as $k_d_method => $v_d_method)
	        {
	            $dis_methods_details[$v_d_method['id']] = $v_d_method;
	            
	            $dis_methods_data[$v_d_method['id']] = $v_d_method['description'];
	            
	        }
	
	        $patientdis = Doctrine_Query::create()
	        ->select("*")
	        ->from('PatientDischarge')
	        ->whereIn('ipid', $active_ipids);
	        $patientdisarray = $patientdis->fetchArray();
	
	        foreach($patientdisarray as $k_dis => $v_dis)
	        {
	            $patients_discharges[$v_dis['ipid']][] = $v_dis;
	            $patient_discharged_dates[$v_dis['ipid']][ ] = date('Y-m-d', strtotime($v_dis['discharge_date']));
	            
	            
	            $patient_discharged_details[$v_dis['ipid']][date('Y-m-d', strtotime($v_dis['discharge_date']))]['discharge_date'] = date('Y-m-d', strtotime($v_dis['discharge_date']));
	            $patient_discharged_details[$v_dis['ipid']][date('Y-m-d', strtotime($v_dis['discharge_date']))]['discharge_method'] = $dis_methods_data[$v_dis['discharge_method']];
	        }

            // Admission details 	     
	        foreach($active_ipids as $k_dis_ipid => $v_dis_ipid)
	        {
	            $i = '0';
	            foreach($patient_array[$v_dis_ipid]['adm'] as $k_dis_date => $v_dis_date)
	            {
	                $admission_date = date('Y-m-d', strtotime($v_dis_date));
	
	                foreach($patient_falls[$v_dis_ipid] as $fali =>$fall_data)
	                {
	                    $fall_start =  date('Y-m-d', strtotime($fall_data['start']));
	                    $fall_end = date('Y-m-d', strtotime($fall_data['end']));
	                    
	                    if(Pms_CommonData::isintersected($admission_date, $admission_date, $fall_start, $fall_end))
	                    {
	                        $patient_falls[$v_dis_ipid][$fali]['admission'] = date("d.m.Y",strtotime($admission_date));
	                    } 
	                    else
	                    {
	                        $patient_falls[$v_dis_ipid][$fali]['admission'] = "";
	                    }
	                }
	            }
	        }
	        
	        // Discharge - end  fall   details
	        foreach($active_ipids as $k_dis_ipid => $v_dis_ipid)
	        {
                foreach($patient_falls[$v_dis_ipid] as $fali =>$fall_data)
                {
                    $fall_start =  date('Y-m-d', strtotime($fall_data['start']));
                    $fall_end = date('Y-m-d', strtotime($fall_data['end']));
                    $fall_end_Ymd = date('Y-m-d', strtotime($fall_data['end']));
                    $fall_end_dmY = date('d.m.Y', strtotime($fall_data['end']));
                    
                    if( in_array($fall_end_Ymd,$patient_array[$v_dis_ipid]['dis']) && !in_array($fall_end_dmY, $patient_array[$v_dis_ipid]['hospital_admissions']) )
                    {
                        // discharge date
                        $patient_falls[$v_dis_ipid][$fali]['discharge'] = date("d.m.Y",strtotime($fall_end_Ymd));
                        // discharge method
                        $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] =  $patient_discharged_details[$v_dis_ipid][$fall_end_Ymd]['discharge_method'] ;
                    }
                    elseif(!in_array($fall_end_Ymd,$patient_array[$v_dis_ipid]['dis']) && in_array($fall_end_dmY, $patient_array[$v_dis_ipid]['hospital_admissions']) )
                    {
                        // discharge date
                        $patient_falls[$v_dis_ipid][$fali]['discharge'] = date("d.m.Y",strtotime($fall_end_Ymd));
                        // discharge method
                        $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] =   "Krankenhauseinweisung" ;
                    }
                    elseif(in_array($fall_end_Ymd,$patient_array[$v_dis_ipid]['dis']) && in_array($fall_end_dmY, $patient_array[$v_dis_ipid]['hospital_admissions']) )
                    {
                        // discharge date
                        $patient_falls[$v_dis_ipid][$fali]['discharge'] = date("d.m.Y",strtotime($fall_end_Ymd));
                        // discharge method
                        $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] =  $patient_discharged_details[$v_dis_ipid][$fall_end_Ymd]['discharge_method'] ;                        
                    }
                    else
                    {
                        // discharge date
                        $patient_falls[$v_dis_ipid][$fali]['discharge'] = "";
                        // discharge method
                        $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] =  "";
                        
                    }
                }
	        }
	        
	        
/* 	        foreach($active_ipids as $k_dis_ipid => $v_dis_ipid)
	        {
	            $i = '0';
	            foreach($patient_array[$v_dis_ipid]['adm'] as $k_dis_date => $v_dis_date)
	            {
	                $admission_date = date('Y-m-d', strtotime($v_dis_date));
	
	                if($patient_array[$v_dis_ipid]['dis'][$k_dis_date])
	                {
	                    $discharge_date = date('Y-m-d', strtotime($patient_array[$v_dis_ipid]['dis'][$k_dis_date]));
	                    $discharge_date_str = date('Y-m-d', strtotime($patient_array[$v_dis_ipid]['dis'][$k_dis_date]));
	                } 
	                else
	                {
	                    $discharge_date_str = date('Y-m-d', time());
	                }
	
	                foreach($patient_falls[$v_dis_ipid] as $fali =>$fall_data)
	                {
	                    $fall_start =  date('Y-m-d', strtotime($fall_data['start']));
	                    $fall_end = date('Y-m-d', strtotime($fall_data['end']));
	                    $fall_end_dmY = date('d.m.Y', strtotime($fall_data['end']));
	                    
	                    if(Pms_CommonData::isintersected($admission_date, $admission_date, $fall_start, $fall_end))
	                    {
	                        $patient_falls[$v_dis_ipid][$fali]['admission'] = date("d.m.Y",strtotime($admission_date));
	                    } 
	                    else
	                    {
	                        $patient_falls[$v_dis_ipid][$fali]['admission'] = "";
	                    }
	                    
	                    if($discharge_date)
	                    {
		                    if(Pms_CommonData::isintersected($discharge_date, $discharge_date, $fall_start, $fall_end))
		                    {
		                        $patient_falls[$v_dis_ipid][$fali]['discharge'] = date("d.m.Y",strtotime($discharge_date));
		                    } 
		                   else
		                    {
		                        $patient_falls[$v_dis_ipid][$fali]['discharge'] = "";
		                    } 
	                    }
	                    
	                     
	                    if($patient_falls[$v_dis_ipid][$fali]['discharge'] == $fall_end_dmY  && !in_array($fall_end_dmY,$patient_array [$v_dis_ipid] ['hospital_admissions']) )
	                    {
	                        if(in_array($fall_end, $patient_discharged_dates[$v_dis_ipid]))
	                        {
	                            // discharge method
	                            $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] =  $patient_discharged_details[$v_dis_ipid][$fall_end]['discharge_method'] ;
	                        } 
	                        else
	                        {
	                            // hospital
	                            $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] = "Krankenhauseinweisung";
	                        }
	                    }
	                    elseif(in_array($fall_end_dmY,$patient_array [$v_dis_ipid] ['hospital_admissions']))
	                    {
	                        if(in_array($fall_end, $patient_discharged_dates[$v_dis_ipid]))
	                        {
	                            // discharge method
	                            $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] =  $patient_discharged_details[$v_dis_ipid][$fall_end]['discharge_method'] ;
	                        } 
	                        else
	                        {
	                            // hospital
	                            $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] = "Krankenhauseinweisung";
	                        }
	                    }
	                    else
	                    {
	                        $patient_falls[$v_dis_ipid][$fali]['fall_dsicharge_method'] = "";
	                    }		                    
	                }
	            }
	        } */

// 	        print_R($patient_falls); exit;
	        
	        /* $i = '0';
	         foreach($patient_array[$v_dis_ipid]['adm'] as $k_dis_date => $v_dis_date)
	         {
	         $admission_date = date('Y-m-d', strtotime($v_dis_date));
	         $patient_falls[$v_dis_ipid][$i]['admission'] = $admission_date;
	          
	         if($patient_array[$v_dis_ipid]['dis'][$k_dis_date])
	         {
	         $discharge_datex = date('Y-m-d', strtotime($patient_array[$v_dis_ipid]['dis'][$k_dis_date]));
	         }
	         else
	         {
	         $discharge_datex = "";
	         }
	          
	         $patient_falls[$v_dis_ipid][$i]['discharge'] = $discharge_datex;
	         if(in_array($discharge_datex, $patient_discharged_dates[$v_dis_ipid]))
	         {
	         $patient_falls[$v_dis_ipid][$i]['fall_dsicharge_method'] = $patient_discharged_details[$v_dis_ipid][$discharge_datex]['discharge_method'] ;;
	          
	         $i++;
	         }
	         } */
	        
	        
	        foreach($pat_locations_arr as $k_loc => $v_loc)
	        {
	            foreach($patient_falls[$v_loc['ipid']] as $k_fall => $v_fall)
	            {
	                $location_start = date('Y-m-d', strtotime($v_loc['valid_from']));
	
	                if($v_loc['valid_till'] != '0000-00-00 00:00:00')
	                {
	                    $location_end = date('Y-m-d', strtotime($v_loc['valid_till']));
	                }
	                else
	                {
	                    $location_end = date('Y-m-d', time());
	                }
	
	                $fall_start = date('Y-m-d', strtotime($v_fall['start']));
	
	                $fall_end = date('Y-m-d', strtotime($v_fall['end']));

	                if(Pms_CommonData::isintersected($location_start, $location_end, $fall_start, $fall_end))
	                {
	                    $patient_falls[$v_loc['ipid']][$k_fall]['locations'][] = $v_loc;
	                }
	            }
	        }
		         
	        //foreach to gather data sapv(s) per fall
	        foreach($patients_sapv_arr as $k_sapv => $v_sapv)
	        {
	            $sapv_start = date('Y-m-d', strtotime($v_sapv['verordnungam']));
	            $sapv_end = date('Y-m-d', strtotime($v_sapv['verordnungbis']));
	
	            foreach($patient_falls[$v_sapv['ipid']] as $k_fall => $v_fall)
	            {
	                $fall_start = date('Y-m-d', strtotime($v_fall['start']));
	                $fall_end = date('Y-m-d', strtotime($v_fall['end']));
	                
	                if(Pms_CommonData::isintersected($sapv_start, $sapv_end, $fall_start, $fall_end))
	                {
	                    if(empty($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr']))
	                    {
	                        $patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array();
	                        $patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'] = array();
	                    }
	
	                    $patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array_merge($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'], $v_sapv['verordnet_arr']);
	                    //$patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'][] = $family_doctors[$v_sapv['verordnet_von']]['last_name'] . ', ' . $family_doctors[$v_sapv['verordnet_von']]['first_name'];
	                    $patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'][] = $v_sapv['verordner'];
	                }
	                $patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr'] = array_unique(array_values($patient_falls[$v_sapv['ipid']][$k_fall]['sapv_arr']));
	                $patient_falls[$v_sapv['ipid']][$k_fall]['von_arr'] = array_unique(array_values($patient_falls[$v_sapv['ipid']][$k_fall]['von_arr']));
	            }
	        }
	        /* ------------------------------------ DISPLAY DATA -------------------------------------- */
	        $x = '0';
// 		        print_R($patient_falls); exit;
	        foreach($patient_falls as $k_ipid => $v_falls_data)
	        {
	            foreach($v_falls_data as $k_fall => $v_fall_data)
	            {
	                if(count($v_fall_data['locations']) > '0')
	                {
	                    $v_fall_data['locations'] = $this->array_sort($v_fall_data['locations'], 'valid_from', SORT_ASC);
	                    
	                    $master_data['data'][$x]['epid'] = strtoupper($patient_array[$k_ipid]['epid']);
	                    $master_data['data'][$x]['lastname'] = $patient_array[$k_ipid]['last_name'];
	                    $master_data['data'][$x]['firstname'] = $patient_array[$k_ipid]['first_name'];
	
	                    if(count($v_fall_data['sapv_arr']) > '0')
	                    {
	                        $master_data['data'][$x]['sapv_activity'] = implode(', ', $v_fall_data['sapv_arr']);
	                    }
	                    else
	                    {
	                        $master_data['data'][$x]['sapv_activity'] = '-';
	                    }
	
	                    if(count($v_fall_data['von_arr']) > '0')
	                    {
	                        $master_data['data'][$x]['sapv_by'] = implode('<br />', $v_fall_data['von_arr']);
	                    }
	                    else
	                    {
	                        $master_data['data'][$x]['sapv_by'] = '-';
	                    }
	
	                    if(count($v_fall_data['locations']) > '0')
	                    {
	                        foreach($v_fall_data['locations'] as $k_loc => $v_loc)
	                        {
	                            $master_data['data'][$x]['locations']['location_name'][] = $v_loc['location_name'];
	                            $master_data['data'][$x]['locations']['location_start'][] = date('d.m.Y', strtotime($v_loc['valid_from']));
	                        }
	                    }
	                    else
	                    {
	                        $master_data['data'][$x]['locations'] = array();
	                    }
	                    
	                    
	                    if($v_fall_data['fall_dsicharge_method']){
	                        
	                    
		                    if($v_fall_data['discharge']){
		                        
		                        
    		                    if( $v_fall_data['discharge'] == $v_fall_data['end'] )
    		                    {
    		                        $master_data['data'][$x]['dischargedate'] = $v_fall_data['discharge'];
    		                    }
    		                    else
    		                    {
    		                        $master_data['data'][$x]['dischargedate'] = $v_fall_data['end'];
    		                    }
		                    } 
		                    else
		                    {
   		                        $master_data['data'][$x]['dischargedate'] = $v_fall_data['end'];
		                    }
    		                $master_data['data'][$x]['discharge_methode'] = $v_fall_data['fall_dsicharge_method'];
	                    } 
	                    else
	                    {
	                        $master_data['data'][$x]['dischargedate'] = "-";
	                        $master_data['data'][$x]['discharge_methode'] = "-";
	                    }
	                    
	                    $master_data['location_count'][] = count($master_data['data'][$x]['locations']['location_name']);
	                    $x++;
	                }
	            }
	        }
	        
	        $master_data['data'] = $this->array_sort($master_data['data'], 'epid', SORT_ASC);
	        
	        return $master_data;
		}

		public function accounting_special($params)
		{
		    // report_id = 168
		    // report_name = Abrechnung Wiesbaden
		    $quarterarr = $params['quarterarr'];
		    $yeararr = $params['yeararr'];
		    $montharr = $params['montharr'];
		    $includearr = $params['includearr'];
		    $onlyactive = $params['onlyactive'];
		
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $whereepid = $this->getDocCondition();
		    $patientmaster = new PatientMaster();
		    $locations = new Locations();
		    $pat_locations = new PatientLocation();
		
		    $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
		    $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		
		    /* ----------------- Get All Discharged Patients of Client -------------------- */
		    $allpatient = Doctrine_Query::create()
		    ->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
		    ->from('PatientMaster p')
		    ->where('isdischarged = 1')
		    ->andWhere('isdelete = 0');
		    $allpatient->leftJoin("p.EpidIpidMapping e");
		    $allpatient->andWhere($whereepid . ' e.ipid = p.ipid and e.clientid = ' . $logininfo->clientid);
		    $allarray = $allpatient->fetchArray();
		
		    foreach($allarray as $key => $val)
		    {
		        $allfinal[] = $val['ipid'];
		        $allfinal_str .= "'" . $val['ipid'] . "',";
		        $patient_array[$val['ipid']]['epid'] = $val['EpidIpidMapping']['epid'];
		        $patient_array[$val['ipid']]['last_name'] = $val['last_name'];
		        $patient_array[$val['ipid']]['first_name'] = $val['first_name'];
		        $patient_array[$val['ipid']]['admission_date'] = date('d.m.Y', strtotime($val['admission_date']));
		        $patient_array[$val['ipid']]['birthd'] = date('d.m.Y', strtotime($val['birthd']));
		        $patient_array[$val['ipid']]['was_hospiz'] = '0';
		    }
		
		    if(empty($allfinal))
		    {
		        $allfinal[999999]['ipid'] = 'X';
		    }
		
		    /* ----------------- Get All Discharged Patients IN REPORT PERIODE -------------------- */
		    $dispatients_met = Doctrine_Query::create()
		    ->select('*')
		    ->from('PatientDischarge p')
		    ->whereIn(" ipid", $allfinal)
		    ->andWhere(str_replace('%date%', 'discharge_date', $active_cond['date_sql']))
		    ->andWhere("isdelete=0");
		    $methode_patients = $dispatients_met->fetchArray();
		
		
		    foreach($methode_patients as $kh => $val_pat)
		    {
		        $patients_discharge_details[$val_pat['ipid']]['discharge_date'] = date('d.m.Y', strtotime($val_pat['discharge_date']));
		        $total_patients_final[$kh]['ipid'] = $val_pat['ipid'];
		        $total_patients_array[] = $val_pat['ipid'];
		    }
		    $total_patients_final[] = '99999999';
		    if(count($total_patients_array) == '0')
		    {
		        $total_patients_array[] = 'xxxx';
		    }
		    if($_REQUEST['dbg'] == '4')
		    {
		        print_r($total_patients_array);
		        exit;
		    }
		    /* ----------------------------------------------------------------------- */
		    /* ----------------- Patients - VALID all sapv days (to do - limit to admissions and discharge dates) ---------- */
		    /* ----------------------------------------------------------------------- */
		    $patientsapv_days = Doctrine_Query::create()
		    ->select("*")
		    ->from('SapvVerordnung sv')
		    ->whereIn('sv.ipid', $total_patients_array)
		    ->andwhere('sv.verordnet NOT LIKE ""')
		    ->andWhere('sv.isdelete = 0');
		    $sapv_days_q = $patientsapv_days->fetchArray();
		    foreach($sapv_days_q as $k => $sapv_item)
		    {
		        $patient_all_sapv_data[$sapv_item['ipid']][] = $sapv_item;
		
		        if($sapv_days_q[$k]['primary_set'] == "5" && $sapv_days_q[$k]['secondary_set'] == "5")
		        {
		            $patient_sapv_data[$sapv_item['ipid']]['original'][] = $sapv_item;
		        }
		        else
		        {
		            $patient_sapv_data[$sapv_item['ipid']]['inprogress'][] = $sapv_item;
		        }
		    }
		    /* ------------------------------------Get patients locations (normal/hospiz/hospital) and treatment days ------------------------------------------ */
		
		    foreach($period['start'] as $keyd => $startDate)
		    {
		        $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
		        // 			$report_period_array[$keyd]['end'] = date ("Y-m-d", strtotime ($period['end'][$keyd]));
		        if(strtotime($period['end'] [$keyd]) > strtotime(date("Y-m-d")))
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d");
		        }
		        else
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period['end'][$keyd]));
		        }
		    }
		
		    $sql = 'e.epid, p.ipid, e.ipid,';
		    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		    $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		    $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		    $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		    $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
		    $conditions['periods'] = $report_period_array;
		    $conditions['client'] = $clientid;
		    $conditions['ipids'] = $total_patients_array;
		    $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
		
		
		
		    foreach($active_patient_details as $ipid => $p_details)
		    {
		        $patientDetails [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
		        $patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
		        $patientDetails [$p_details['details'] ['ipid']] ['standby'] = $p_details['details'] ['isstandby'];
		
		        $patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
		        $patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
		        $patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
		        if($p_details['details']['isdischarged'] == '1')
		        {
		            $dischargedipid_arr[] = $p_details['details']['ipid'];
		            $patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
		            $patientDetails [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
		        }
		        else
		        {
		            $patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
		        }
		
		        $patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
		        $patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
		        $patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
		        $patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
		        $patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
		        $patientDetails [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];
		        $patientDetails [$p_details['details'] ['ipid']]['locations'] = $p_details['locations'];
		        $patientDetails [$p_details['details'] ['ipid']]['treatment_days'] = $p_details ['treatment_days'];
		        $patientDetails [$p_details['details'] ['ipid']]['treatment_days_no'] = $p_details ['treatment_days_no'];
		        $patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
		    }
		
		
		    foreach($patientDetails as $ipid => $det)
		    {
		        foreach($det['locations'] as $loc_id => $values)
		        {
		            if($values['type'] == '2')
		            {
		                // 					$patient2hospiz[$ipid][] = $values;
		                $patient2hospiz[$ipid][] = $loc_id;
		            }
		            // 				$patient2location_types[$ipid][$values['type']][] = $values;
		        }
		    }
		
		    /* ------------------------------------Get client path - Abrechnung ToDo ------------------------------------------ */
		    $paths = new OrgPaths();
		    $current_path = $paths->get_paths($clientid, 'discharged_billing_todo');
		
		    /* ------------------------------------Get client steps for path::Abrechnung ToDo ------------------------------------------ */
		    $steps = new OrgSteps();
		    $current_path_shortcuts = $steps->get_paths_steps($current_path, true);
		
		
		    /* ------------------------------------Get patients saved data ------------------------------------------ */
		    $patient_steps = new PatientSteps();
		    $saved_data = $patient_steps->get_patient_steps($total_patients_array);
		
		    $status_of_sapvs_7days_shortcut_id = array_search('AB2', $current_path_shortcuts['shortcuts']);
		    $status_of_sapvs_10days_shortcut_id = array_search('AB3', $current_path_shortcuts['shortcuts']);
		
		    /* ------------------------------------ Get health insurance ------------------------------------------ */
		    //get health insurance name
		    $healthinsu = Doctrine_Query::create()
		    ->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
		    ->from('PatientHealthInsurance')
		    ->whereIn('ipid', $total_patients_array);
		    $healthinsu_array = $healthinsu->fetchArray();
		
		    foreach($healthinsu_array as $k_pat_healthinsu => $v_pat_healthinsu)
		    {
		        $patienthealth[$v_pat_healthinsu['ipid']]['company'] = $v_pat_healthinsu["company_name"];
		    }
		
		    /* ------------------------------------ Verify if there are more items to be invoiced ------------------------------------------ */
		
		    $dp_subproducts_days = array('normal_days', 'hosp_adm_days', 'hosp_days', 'hosp_dis_days', 'hospiz_adm_days', 'hospiz_days', 'hospiz_dis_days', 'standby_days', 'hosp_dis_hospiz_adm_days', 'hospiz_dis_hosp_adm_days');
		    $days_keys = array('normal_days', 'hosp_days', 'hosp_adm_days', 'hosp_dis_days', 'hospiz_adm_days', 'hospiz_days', 'hospiz_dis_days', 'standby_days');
		    //get client users
		    $user = new User();
		    $users_array = array("1161","1163","1162","1200");
		
// 		    $client_users_arr = $user->getUserByClientid($clientid, '0', true,true,$users_array);
		
		    $client_users_arr = $user->getUserByClientid($clientid, '0', true);
		
		    foreach($client_users_arr as $k_usr => $v_usr)
		    {
		        $client_users[$v_usr['id']] = $v_usr;
		        $client_users_ids[] = $v_usr['id'];
		    }
		
		    //		print_r($period);
		    //get client users associations
// 		    $users_ids_associated = UsersAssociation::get_associated_user_multiple($client_users_ids);
		    $users_ids_associated = UsersAssociation::get_associated_user_multiple($client_users_ids,$users_array);

		    foreach( $users_ids_associated as $us =>$ass)
		    {
		        $reverse_ass[$ass][] = $us;
		        $slave_users[] = $us;
		        $show_master[$us] = $ass;
		        
		    }
		    
		    $used_users = array_merge($client_users_ids, $users_ids_associated);
		
		    //get all client products in period
		    $period_pricelist_products = InternalInvoicePriceList::get_period_pricelist($period['start'][0], end($period['end']));
		
		    //get all client national holidays
		    $national_holidays_arr = NationalHolidays::getNationalHoliday($clientid, $current_period['start'], true);
		
		    foreach($national_holidays_arr as $k_natholiday => $v_natholiday)
		    {
		        $national_holidays[] = date('Y-m-d', strtotime($v_natholiday['NationalHolidays']['date']));
		    }
		    asort($national_holidays);
		    $national_holidays = array_values($national_holidays);
		    //		print_r($period);
		
		    $previous_invoices_items = InternalInvoices::get_completed_previous_invoices_multiple($clientid, $total_patients_array, $client_users_ids, $period, $active_patient_details);
		    if($_REQUEST['dbg'] == '1')
		    {
		        print_r("previous_invoices_items\n");
		        print_r($previous_invoices_items);
		    }
	        $previous_invoices_items = false;
		    
		    // CONTACT FORMS
		    //get patient contact forms, deleted from verlauf are excluded
		    $pat_course = new PatientCourse();
		    $excluded_cf = $pat_course->get_deleted_contactforms($total_patients_array, false);
		    
		    //get contact forms
		    $cf = new ContactForms();
		    $patient_working_cf = $cf->get_internal_invoice_contactforms_multiple($total_patients_array, $excluded_cf, $period);
		    
		    
		    foreach($patient_working_cf as $contact_id => $contact_data)
		    {
		        if(in_array($contact_data['create_user'],$users_array))
		        {
		            $contact_forms_nr[$client_users[$contact_data['create_user']]['last_name'].', '.$client_users[$contact_data['create_user']]['first_name']]["number"]  +=  "1";
		            $contact_forms_ipids[$client_users[$contact_data['create_user']]['last_name'].', '.$client_users[$contact_data['create_user']]['first_name']]["number"] =  $contact_data['ipid'];
		        } 
		        else if(in_array($contact_data['create_user'],$slave_users) )
		        {
		            $contact_forms_nr[$client_users[$show_master[$contact_data['create_user']] ]['last_name'].', '.$client_users[$show_master[$contact_data['create_user']]]['first_name'] ]['associate'][$client_users[$contact_data['create_user']]['last_name'].' '.$client_users[$contact_data['create_user']]['first_name']] += "1";
		            $contact_forms_ipids[$client_users[$show_master[$contact_data['create_user']] ]['last_name'].', '.$client_users[$show_master[$contact_data['create_user']]]['first_name'] ]['associate'][$client_users[$contact_data['create_user']]['last_name'].' '.$client_users[$contact_data['create_user']]['first_name']][] =  $contact_data['ipid'];;
		        } 
		        else
		        {
		            //$contact_forms_nr['OTHER'][$contact_data['create_user']] += "1";
		        }
		    }
		    
		    print_R("\n CONTACT FORMS : \n");
		    print_R($contact_forms_nr);
		    
		    $dp_products = InternalInvoices::dp_rules_multiple($period_pricelist_products['dp'], $period, $total_patients_array, $clientid, $users_ids_associated, $national_holidays, $previous_invoices_items, $active_patient_details);

		    foreach($users_array as $uid){
		        $dbg_days[$uid] = "0";
		    }
		    
		    foreach($dp_products as $k_ipid_dp => $v_users_dproducts)
		    {
		        foreach($v_users_dproducts as $user_id => $products)
		        {
		            foreach ($products as $product_id => $days_details)
		            {
		                if(in_array($user_id,$users_array))
		                {
        		            $cumulate_day[$client_users[$user_id]['last_name'].','.$client_users[$user_id]['first_name']]['number'] += $days_details['normal'];
        		            $dbg_days[$client_users[$user_id]['username']] += $days_details['normal'];
		                }
		                
		                if(in_array($user_id,$slave_users))
		                {
        		            $cumulate_day[$client_users[$show_master[$user_id]]['last_name'].','.$client_users[$show_master[$user_id]]['first_name']][$client_users[$user_id]['last_name'].', '.$client_users[$user_id]['first_name']] += $days_details['normal'];
        		            $cumulate_day_ipids['slave'][$client_users[$user_id]['last_name'].' '.$client_users[$user_id]['first_name']][]  = $k_ipid_dp;
		                }
		            }
		        }
		    }
		    
		    print_R("\n DAY: \n");
		   print_r($cumulate_day); 
		    print_r($dbg_days); exit;
		    exit;
		}
		
		
		
		
		
		
		private function lmurufbereitschaft ( $params )
		{
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		
		    $_POST['columnname']='lastname';
		
		
		    $str_convert='latin1';
		
		    $patientMasterData = Doctrine_Query::create()
		    ->select("*,AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name,AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(zip,'" . Zend_Registry::get('salt') . "') using ".$str_convert.") as zip,convert(AES_DECRYPT(street1,'" . Zend_Registry::get('salt') . "') using ".$str_convert.") as street1,convert(AES_DECRYPT(city,'" . Zend_Registry::get('salt') . "') using ".$str_convert.") as city,convert(AES_DECRYPT(phone,'" . Zend_Registry::get('salt') . "') using ".$str_convert.") as phone,convert(AES_DECRYPT(mobile,'" . Zend_Registry::get('salt') . "') using ".$str_convert.") as mobile, e.epid as patepid")
		    ->from('PatientMaster p')
		    ->where('p.isdelete = 0 AND p.isstandbydelete=0 AND p.isdischarged = 0 AND p.isstandby = 0 AND p.isarchived = 0');
		    $patientMasterData->leftJoin("p.EpidIpidMapping e");
		    $patientMasterData->andWhere(' e.clientid = ' . $logininfo->clientid);
		    $pmarr = $patientMasterData->fetchArray();
		
		    $activeIpids=array();
		    foreach($pmarr as $pat){
		        $activeIpids[]=$pat['ipid'];
		    }
		
		
		    if (count($activeIpids)==0){
		        $activeIpids=array("xxxxxxxxxxxy");
		    }
		
		    // get sapv details
		    $sapv = Doctrine_Query::create()
		    ->select('*')
		    ->from('SapvVerordnung')
		    ->whereIn('ipid', $activeIpids)
		    ->andWhere('isdelete = 0')
		    ->andWhere('date(NOW()) between date(verordnungam) and date(verordnungbis)')
		    ->orderBy("ipid, verordnungam, verordnungbis");
		    $sapvarr = $sapv->fetchArray();
		    
		    foreach($sapvarr as $k=>$sapv_data){
		        $ipids[] = $sapv_data['ipid'];
		    }
		    
            if(empty($ipids))
            {
                $ipids = array("xxxxy");
            }       
		    
		    //PATIENT MASTER DATA ARR
		    //ISPC-1828 p.1
		    $patientMasterArray = $patientMasterArray_without_sapv = array();
		    foreach ($pmarr as $patient)
		    {
		        if(in_array($patient['ipid'], $ipids)){
		            $patientMasterArray[$patient['ipid']] = $patient;
		        }else{
		        	$patientMasterArray_without_sapv[$patient['ipid']] = $patient;	
		        }
		    }
		    $patientMasterArray +=$patientMasterArray_without_sapv;
		    //ISPC-1828 p.1
		    $ipids =  $activeIpids;
		    
		    if(!empty($patientMasterArray))
		    {
    		    $patloc = new PatientLocation();
    		    $locations_arr = $patloc->getActiveLocations($patientMasterArray);
    		    $locations = array();
    		    $locc = new Locations();
    		    foreach ($locations_arr as $location)
    		    {
    		        $locations[$location['ipid']]=$locc->getLocationbyId($location['location_id']);
    		    }
		    }
		
		    
		    $patdiag = new PatientDiagnosis();
		    $diagnosis_arr = $patdiag->get_multiple_finaldata($ipids);
		
		    $diags = array();
		    foreach($diagnosis_arr as $diag)
		    {
		        $diags[$diag['ipid']][]=$diag;
		    }
		
		    $dtypes = new DiagnosisType();
		    $digtypes_arr = $dtypes->get_client_diagnosistypes($clientid);
		    
		    foreach($digtypes_arr as $k=>$d_details)
		    {
		        $digtypes[$d_details['abbrevation']] = $d_details['id']; 
		    }
		    
		
		    // health Insurance
		    $hi = new PatientHealthInsurance();
		    $phis = $hi->get_patients_healthinsurance($ipids);
		    $patient_insurances = array();
		    
		    foreach ($phis as $phi_item)
		    {
		        $t='<span style="font-size:8px;">'.$phi_item['kvk_no'] . " " . $phi_item['company_name'].'</span>';
		        if($phi_item['insurance_no']){
		            $t.='<br><b>'.$phi_item['insurance_no'].'</b>';
		        }
		        $patient_insurances[$phi_item['ipid']][]=$t;
		    }
		    // Patients Memo
		    $patmemo = new PatientMemo();
		    $memos = $patmemo->get_multiple_patient_memo($ipids);
		
		    // Asigned users
		    $patqpamap = new PatientQpaMapping();
		    $patmaps = $patqpamap->getAssignedUsers($ipids);
		
		    $userdb = new User();
		    $usersarr = $userdb->getUserByClientid($clientid);
		    $users = array();
		    foreach($usersarr as $useritem)
		    {
		        $users[$useritem['id']][]=$useritem['username'];
		    }
		    $count=0;
		    

		    $sortarr = 'last_name';
		    $patient_data = array_values($patientMasterArray);
		    $patient_data = $this->array_sort($patient_data, $sortarr, SORT_ASC);
		    
		    
		    // Create display data
		    foreach ($patient_data as $kp_ipid => $val_patient)
    		{
                $ipid = $val_patient['ipid'];
                $count ++;
                $col3 = "<b>";
                $col3 .= $val_patient['last_name'] . ", ";
                $col3 .= $val_patient['first_name'] . " ";
                $col3 .= " *" . strftime('%d.%m.%Y', strtotime($val_patient['birthd'])) . ", ";
                
                $neben = "";
                $haupt = "";
                foreach ($diags[$ipid] as $diag) {
                    
                    
                    if ($diag['diagnosis_type_id'] == $digtypes['HD']) {
                        $haupt .= $diag['diagnosis'] . ' ';
                    }
                    if ($diag['diagnosis_type_id'] == $digtypes['ND']) {
                        $neben .= $diag['diagnosis'] . ' ';
                    }
                }
                $locname = $val_patient['street1'] . " " . $val_patient['zip'] . " " . $val_patient['city'];
                $phone = "";
                if ($val_patient['phone']) {
                    $phone = "FN " . $val_patient['phone'];
                }
                if ($val_patient['mobile']) {
                    $phone .= ", Hdy " . $val_patient['mobile'];
                }
                foreach ($locations[$ipid] as $location) {
                    if ($location['location_type'] == 5) {
                        // homeaddress
                    } else {
                        $locname = $location['location'] . " " . $location['street'] . " " . $location['zip'] . " " . $location['city'];
                        $phone = "FN " . $location['phone1'];
                        if ($location['phone2']) {
                            $phone .= ", Hdy " . $location['phone2'];
                        }
                    }
                }
                
                $col3 .= $locname . ", ";
                $col3 .= $phone . "<br>";
                $col3 .= "</b>";
                if ($haupt) {
                    $col3 .= $haupt . ", ";
                }
                if (trim($neben)) {
                    $col3 .= $neben . ", ";
                }
                
                $sapv = new SapvVerordnung();
                $patient_sapv_data = $sapv->get_today_active_highest_sapv($ipid, false, true);
                $today_high_sapv = $patient_sapv_data['last'][$ipid];
                $verordnung_info = "";
                $verordnungbis = "";
                if ($today_high_sapv) {
                    if ($today_high_sapv['verordnungbis'] != '0000-00-00 00:00:00' || date('Y-m-d', strtotime($today_high_sapv['verordnungbis'])) != '1970-01-01') {
                        $verordnungbis = date('d.m.Y', strtotime($today_high_sapv['verordnungbis']));
                    } else {
                        $verordnungbis = " - ";
                    }
                    
                    $verordnung_info = $today_high_sapv['max_verordnet_patientinfo'];
                }
                
                $col3 .= $memos[$ipid];
                $MasterData['data'][$count]['lastname'] = $val_patient['last_name'];
                $col1 = $patient_insurances[$ipid][0];
                $zustaendig = "";
                foreach ($patmaps['assignments'][$ipid] as $assignment) {
                    if ($assignment > 1) {
                        if (strlen($zustaendig) > 0) {
                            $zustaendig .= "<br>";
                        }
                        $zustaendig .= $users[$assignment][0];
                    }
                }
                
                $col1 = "<b>" . str_replace('LMU', '', $val_patient['patepid']) . "</b><br>" . $col1;
                if ($verordnung_info || $verordnungbis) {
                    $col1 .= '<br><span>' . $verordnung_info . "<br>bis " . $verordnungbis . "</span>";
                }
                
                $MasterData['data'][$count]['Nummer'] = $col1;
                $MasterData['data'][$count]['zustaendig'] = $zustaendig;
                $MasterData['data'][$count]['patient'] = $col3;
            }
		    return $MasterData;
		}
		

		
		
		public function  beratung_actions($params)
		{
		    // report_id = 170
		    // report_name = BERATUNG
		    $quarterarr = $params ['quarterarr'];
		    $yeararr = $params ['yeararr'];
		    $montharr = $params ['montharr'];
		    $includearr = $params ['includearr'];
		    $onlyactive = $params ['onlyactive'];
		
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    $whereepid = $this->getDocCondition();
		    

		    // get patient details
		    $allpatient = Doctrine_Query::create()
		    ->select("*,p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
		    ->from('PatientMaster p')
		    ->where('isdelete = 0');
		    $allpatient->leftJoin("p.EpidIpidMapping e");
		    $allpatient->andWhere(' e.ipid = p.ipid and e.clientid = ' . $clientid);
		    $allarray = $allpatient->fetchArray();
		    
		    foreach($allarray as $k_pat_details => $v_pat_details)
		    {
// 		        $pat_details[$v_pat_details['ipid']] = $v_pat_details;
		        $pat_details[$v_pat_details['ipid']]['ipid'] = $v_pat_details['ipid'];
		        $pat_details[$v_pat_details['ipid']]['epid'] = $v_pat_details['EpidIpidMapping']['epid'];
		        $pat_details[$v_pat_details['ipid']]['lastname'] = $v_pat_details['last_name'];
		        $pat_details[$v_pat_details['ipid']]['firstname'] = $v_pat_details['first_name'];
		        $ipidarr[] = $v_pat_details['ipid'];
		    }
// 		    print_r($pat_details); exit;
		    if(empty($ipidarr)){
		        $ipidarr[] = "9999999999";
		    }
		    
		    // get beratung (verlauf)
		    $beratung = Doctrine_Query::create()
		    ->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
		    ->from('PatientCourse')
		    ->where('wrong!=1')
		    ->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("U")) . '"')
		    ->andWhereIn('ipid', $ipidarr)
		    ->andWhere('source_ipid = ""')
		    ->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
		    $beratung_array = $beratung->fetchArray();
		    
		    foreach($beratung_array as $k_beratung => $v_beratung)
		    {
		        $patient_ipids[] = $v_beratung['ipid'];
		        $available_users['beratrung'][] = $v_beratung['create_user'];
		        $global_beratung[$v_beratung['create_user']][] = $v_beratung;
		    }
		    
		    $l = "0";
		    foreach($beratung_array as $course_key => $course_val)
		    { 
		        $duration = "";
		        $coursearr = explode("|", $course_val['course_title']);
		        
		        if(count($coursearr) == 3)
		        { //method implemented with 3 inputs
		            $duration  = intval($coursearr[0]);
		            
		        }
		        else if(count($coursearr) != 3 && count($coursearr) < 3)
		        { //old method before anlage 10
		            $duration  = intval($coursearr[0]);
		        }
		        else if(count($coursearr) != 3 && count($coursearr) > 3)
		        { //new method (U) 3 inputs and 1 select newly added in verlauf
		            $duration  = intval($coursearr[1]);
 		        }
 		        
	            $master_data['data'][$l]['epid'] = $pat_details[$course_val['ipid']]['epid'];
	            $master_data['data'][$l]['lastname'] = $pat_details[$course_val['ipid']]['lastname'];
	            $master_data['data'][$l]['firstname'] = $pat_details[$course_val['ipid']]['firstname'];
	            $master_data['data'][$l]['date'] = date("d.m.Y",strtotime($coursearr[3]));
	            $master_data['data'][$l]['time_from'] = date("H:i",strtotime($coursearr[3]));
	            $minutes = "";
	            $minutes = "+".$duration." minutes";
	            $master_data['data'][$l]['time_till'] = date("H:i",strtotime($minutes, strtotime($coursearr[3])));
	            
	            
	            $master_data_dbg['data'][$l][$course_val['ipid']]['epid'] = $pat_details[$course_val['ipid']]['epid'];
	            $master_data_dbg['data'][$l][$course_val['ipid']]['lastname'] = $pat_details[$course_val['ipid']]['lastname'];
	            $master_data_dbg['data'][$l][$course_val['ipid']]['firstname'] = $pat_details[$course_val['ipid']]['firstname'];
	            $master_data_dbg['data'][$l][$course_val['ipid']]['duration'] = $duration;
	            $master_data_dbg['data'][$l][$course_val['ipid']]['date'] = date("d.m.Y",strtotime($coursearr[3]));
	            $master_data_dbg['data'][$l][$course_val['ipid']]['time_from'] = date("d.m.Y H:i",strtotime($coursearr[3]));
	            $minutes_dbg = "";
	            $minutes_dbg = "+".$duration." minutes";
	            $master_data_dbg['data'][$l][$course_val['ipid']]['time_till'] = date("d.m.Y H:i",strtotime($minutes_dbg, strtotime($coursearr[3])));
	           $l++; 
		    }
		    
// 		    print_r($master_data_dbg); exit;
		    
		    return $master_data;
		}
		
		

		public function homegroup_activities($params)
		{
		    // report_id = 171
		    // report_name = Heimnetz Aktivitaten;
		
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $whereepid = $this->getDocCondition();
		    $clientid = $logininfo->clientid;
		
		    $quarterarr = $params['quarterarr'];
		    $yeararr = $params['yeararr'];
		    $montharr = $params['montharr'];
		    $includearr = $params['includearr'];
		    $onlyactive = $params['onlyactive'];
		
		    /* ----------------- Report period days  -------------------- */
		    $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
		    $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		
		    foreach($period ['start'] as $keyd => $startDate)
		    {
		        $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
		        if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d");
		        }
		        else
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
		        }
		    }
		
		    /* ----------------------- Get patients in report period-------------------------------------- */
		    $sql = 'e.epid, p.ipid, e.ipid,p.familydoc_id,';
		    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		    $conditions['periods'] = $report_period_array;
		    $conditions['client'] = $clientid;
		
		    // if user selected - get only assigned to user
		    if($whereepid){
		        $patientMasterData = Doctrine_Query::create()
		        ->select("e.ipid")
		        ->from("EpidIpidMapping e")
		        ->where($whereepid . ' e.clientid = ' . $logininfo->clientid);
		        $pmarr = $patientMasterData->fetchArray();
		         
		        $doctor_assigned_ipids = array();
		        foreach($pmarr as $patient)
		        {
		            $doctor_assigned_ipids[] =  $patient['ipid'];
		        }
		         
		        if(!empty($doctor_assigned_ipids)){
		            $conditions['ipids'] =  $doctor_assigned_ipids;
		        }
		         
		    } else{
		        $conditions['ipids'] = false;
		    }
		
		    $active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
		
		    $required_ipids = array_keys($active_patient_details); // return ipids
		
		    if(empty($required_ipids)){
		        $required_ipids[] = "9999999999";
		    }
		
		    foreach($required_ipids as $key => $val)
		    {
		        $allfinal_str .= "'" . $val . "',";
		    }
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    /*----------------------- Get patients who died in report period------------------------------------------*/
		
		    $dm_dead = Doctrine_Query::create()
		    ->select("*")
		    ->from('DischargeMethod')
		    ->where("clientid='" . $logininfo->clientid . "' AND (abbr='TOD' OR abbr='TODNA')");
		
		    $dm_deadarray = $dm_dead->fetchArray();
		
		    $dm_deadfinal[] = '999999999';
		    foreach($dm_deadarray as $key => $val)
		    {
		        $dm_deadfinal[] = $val['id'];
		    }
		
		    $deadpatients = Doctrine_Query::create()
		    ->select('*')
		    ->from('PatientDischarge p')
		    ->where(" ipid IN (" . substr($allfinal_str, 0, -1) . ") AND discharge_method IN (" . implode($dm_deadfinal, ',') . ") AND isdelete=0")
		    ->andWhere('(' . str_replace('%date%', 'discharge_date', $active_cond['date_sql']) . ')');
		    if($_REQUEST['dbgq'] == "1"){
		        echo $deadpatients->getSqlQuery(); exit;
		    }
		    $deadpatientarray = $deadpatients->fetchArray();
		
		
		    foreach($deadpatientarray as  $k=>$dspat){
		        $dead_ipids[] = $dspat['ipid'];
		    }
		
		    if(empty($dead_ipids)){
		        $dead_ipids[] = "9999999999";
		    }
		
		    // get details only for deade ipids
		
		
		
		    ###########################
		    $conditions_ov['periods'] = array('0' => array('start' => "2007-01-01", 'end' => date("Y-m-d")));
		    $conditions_ov['client'] = $clientid;
		    $conditions_ov['ipids'] = $dead_ipids;
		    $overall_patient_details = Pms_CommonData::patients_days($conditions_ov);
		
		    // 		    print_R($overall_patient_details['0540603e9fbdd18318aff192e91ae47c5a8a54ca']); exit;
		    foreach($overall_patient_details as $ipid => $op_details)
		    {
		
		        // 	            $patient_data [$op_details['details'] ['ipid']]['treateddays'] = $op_details['real_active_days_no'];
		        $overall_patient_data [$op_details['details'] ['ipid']]['overall_days_of_treatment'] = $op_details['treatment_days_no'];
		        $overall_patient_data [$op_details['details'] ['ipid']]['overall_active_days'] = $op_details['real_active_days_no'];
		        $overall_patient_data [$op_details['details'] ['ipid']]['admission_days'] = $op_details['admission_days'];
		        $overall_patient_data [$op_details['details'] ['ipid']]['first_admission_ever'] = $op_details['admission_days'][0];
		    }

		    /* ----------------- Get User - Group  Details -------------------- */
		    
		   // get all group users
		    $usergroup = new Usergroup();
		    //$MasterGroups = array("4", "5","6");
		    $master_group_details = $usergroup->get_clients_groups($clientid); // all groups
		
		    
		    
		    foreach($master_group_details as $key => $value)
		    {
		        $groups_id[$value['groupmaster']] = $value['id'];
		        $group_info[$value['id']]['master'] = $value['groupmaster'];
		        $group_info[$value['id']]['groupname'] = $value['groupname'];
		    }
		    
		    /* ################################################################################################### */
		    /* ----------------- Get User Details -------------------- */
		    $usermod = new User();
		    $groups_users_array = $usermod->getuserbyGroupId($groups_id, $clientid, true);
		
		
		    foreach($groups_users_array as $key => $val)
		    {
		        $users2groups[$val['groupid']][] = $val ['id'];
		    }
		
		    /* ----------------------- Get patient l entry -------------------------------------- */
		    $qpa1 = Doctrine_Query::create()
		    ->select("*,AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') as course_type, AES_DECRYPT(course_title,'" . Zend_Registry::get('salt') . "') as course_title")
		    ->from('PatientCourse')
		    ->where('wrong != 1')
		    ->andWhere('course_type="' . addslashes(Pms_CommonData::aesEncrypt("L")) . '"')
		    ->andWhereIn('ipid', $required_ipids)
		    ->andWhere('source_ipid = ""')
		    ->orderBy("convert(AES_DECRYPT(course_type,'" . Zend_Registry::get('salt') . "') using latin1) ASC");
		    $qparray = $qpa1->fetchArray();
		
		    if($_REQUEST['dbgq'] == "2"){
		
		        var_dump($qparray); exit;
		    }

		    $allowed_special_texts = array("hb","tp");
		
		    $create_user = "";
		    foreach($qparray as $kc => $c_value)
		    {
		        $specialtext = "";
		        $specialtext = trim(substr(trim($c_value['course_title']), 0, 2));
		
		        if(in_array($specialtext,$allowed_special_texts)){
		            
		            foreach($users2groups as $gr_id => $user_array){
    		            if(in_array($c_value['create_user'],$user_array)){
    		                // get all entries grouped by user groups
    		                $entries_array[$gr_id][$specialtext][] = $c_value['id'];
    		            }
		            }
		            $entries_array['overall'][$specialtext][] = $c_value['id'];
		        }
		    }
		
		
		    /*----------------------- Patient details ------------------------------------------*/
		   foreach ($group_info as $group_id => $group_detials)
		   {
		       
		       $statdia_array[$group_id]['groupname'] = $group_detials['groupname'];
		       $statdia_array[$group_id]['hb_amount'] = count($entries_array[$group_id]['hb']);
		       $statdia_array[$group_id]['hb_per_hundred'] = round((count($entries_array[$group_id]['hb']) / ( count($entries_array['overall']['hb']) / 100 )),2);
		       $statdia_array[$group_id]['tp_amount'] = count($entries_array[$group_id]['tp']);
		       $statdia_array[$group_id]['tp_per_hundred'] =  round((count($entries_array[$group_id]['tp']) / ( count($entries_array['overall']['tp']) / 100 )),2);
		   }		
// 		print_r($statdia_array); exit;
		
		 
		
		    $data['data'] = $statdia_array;
		   $data['extra']['overall_hb_amount'] = count($entries_array['overall']['hb']);
		   $data['extra']['overall_tp_amount'] = count($entries_array['overall']['tp']);
		
		    return $data;
		}
		
		
		


		public function lnrbtm2016($params)
		{
		    // report id = 172
		    //  NR_Homecare LNR report
		    
		
		    $quarterarr = $params ['quarterarr'];
		    $yeararr = $params ['yeararr'];
		    $montharr = $params ['montharr'];
		    $includearr = $params ['includearr'];
		    $onlyactive = $params ['onlyactive'];
		
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    // epids  asigned to user selected from report parameters
		    $whereepid = $this->getDocCondition();
		
		    $epid_ipid = Doctrine_query::create()
		    ->select('ipid')
		    ->from('EpidIpidMapping')
		    ->where($whereepid . 'clientid=' . $clientid);
		    $ipids = $epid_ipid->fetchArray();
		
		    foreach($ipids as $k => $ipid)
		    {
		        $patient_ipid[] = $ipid['ipid'];
		    }
		
		    
		    $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
		    $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		    
		    foreach($period ['start'] as $keyd => $startDate)
		    {
		        $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
		        if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d");
		        }
		        else
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
		        }
		    }
		
		    
		    
	       //get patient history 

            $medic = Doctrine_Query::create()
                ->select('medicationid,sum(amount)')
                ->from('MedicationPatientHistory')
                ->Where('clientid =' . $clientid . ' ')
                ->andWhere('isdelete = "0"')
                ->andWhereIn('ipid', $patient_ipid)
                ->andWhere('methodid = "8"')
                ->andWhere('source = "p"')
                ->andWhere('userid != "0"')
                ->andWhere('(' . str_replace('%date%', 'done_date', $active_cond['date_sql']) . ') OR (' . str_replace('%date%', 'create_date', $active_cond['date_sql']) . ') ')
                ->orderBy('create_date ASC')
                ->groupBy('medicationid');
            $medicsch = $medic->fetchArray();
            
            $medication_pids[] = "9999999999";
            foreach($medicsch as $k => $pmed){
                $medication_pids[] =  $pmed['medicationid'];
            }

            //get client history
            $medic_client = Doctrine_Query::create()
                ->select('medicationid,sum(amount)')
                ->from('MedicationClientHistory')
                ->where('clientid =' . $clientid . ' ')
                ->andWhere('isdelete = "0"')
                ->andWhereIn('ipid != 0 ')
                ->andWhere('methodid = "12"')
                ->andWhere('(' . str_replace('%date%', 'done_date', $active_cond['date_sql']) . ') OR (' . str_replace('%date%', 'create_date', $active_cond['date_sql']) . ') ')
                ->orderBy('create_date ASC')
                ->groupBy('medicationid');
            $medics_client = $medic_client->fetchArray();
            
            $medication_cids[] = "9999999999";
            foreach($medics_client as $k => $cmed){
                $medication_cids[] =  $cmed['medicationid'];
            }
            $med_ids = array_merge($medication_pids,$medication_cids);
            $med_ids = array_unique($med_ids);
            
            $medic = Doctrine_Query::create()
            ->select('*')
            ->from('Medication')
            ->whereIn("id", $med_ids);
            $master_medication = $medic->fetchArray();
            
            foreach($master_medication as $k_medi => $v_medi)
            {
                $medications[$v_medi['id']] = $v_medi['name'];
            }
            
		  foreach($medicsch as $k => $pmed){
		      $medication_data[$pmed['medicationid']]['p_amount'] = abs($pmed['sum']);
		  }
		  
		  foreach($medics_client  as $k => $cmed){
		      $medication_data[$cmed['medicationid']]['c_amount'] = abs($cmed['sum']);
		  }
		  
		  if($_REQUEST['dbg']=="1"){
		      print_R($medication_data); exit;
		  }
		  
		  foreach($medication_data as $medid=>$med_details){
    		  $master_data['data'][$medid]['btm_name'] = $medications[$medid];
    		  $master_data['data'][$medid]['btm_amount'] = $med_details['p_amount'] + $med_details['c_amount'];
		  }
		    return $master_data; 
		}
		
		public function lnrbtm($params)
		{
		    // report id = 172
		    //  NR_Homecare LNR report
			// TODO-944  13.04.2017
			//	period 01.01.2016 - 31.12.2016
			// list all patients where a BTM was returned to a user wioth type Rücknahme
			//	patient surname 	patient firstname 	BTM name 	ammopunt 	date 	user to which was returned 

		    $quarterarr = $params ['quarterarr'];
		    $yeararr = $params ['yeararr'];
		    $montharr = $params ['montharr'];
		    $includearr = $params ['includearr'];
		    $onlyactive = $params ['onlyactive'];
		
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    // epids  asigned to user selected from report parameters
		    $whereepid = $this->getDocCondition();
		
		    
		    $allpatient = Doctrine_Query::create()
		    ->select("p.ipid, e.epid, AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip, convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1, convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city, convert(AES_DECRYPT(p.phone,'" . Zend_Registry::get('salt') . "') using latin1) as phone, convert(AES_DECRYPT(p.sex,'" . Zend_Registry::get('salt') . "') using latin1) as sex")
		    ->from('PatientMaster p')
		    ->where('isdelete = 0');
		    $allpatient->leftJoin("p.EpidIpidMapping e");
		    $allpatient->andWhere(' e.ipid = p.ipid and e.clientid = ' . $clientid);
		    $allarray = $allpatient->fetchArray();
		    
		    
		    foreach($allarray as $k => $ipid)
		    {
		    	$patient_details[$ipid['ipid']]['last_name'] = $ipid['last_name'];
		    	$patient_details[$ipid['ipid']]['first_name'] = $ipid['first_name'];
  		        $patient_ipid[] = $ipid['ipid'];
		    }

		    
		    $usrar = Doctrine_Query::create()
		    ->select('*')
		    ->from('User')
		    ->where('clientid = ?', $logininfo->clientid);
		    $usrexec = $usrar->execute();
		    foreach($usrexec->toArray() as $key => $val)
		    {
		    	if($val['isactive'] == "1" || $val['isdelete'] == "1"){
			    	$user_name[$val['id']] = $val['user_title'] . " " . $val['last_name'] . ", " . $val['first_name']. "(*" ;
		    	} else{
			    	$user_name[$val['id']] = $val['user_title'] . " " . $val['last_name'] . ", " . $val['first_name'];
		    	}
		    }
		    
		    
		    $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
		    $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		    
		    foreach($period ['start'] as $keyd => $startDate)
		    {
		        $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
		        if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d");
		        }
		        else
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
		        }
		    }
		    
	       //get patient history 

            $medic = Doctrine_Query::create()
                ->select('*')
                ->from('MedicationPatientHistory')
                ->Where('clientid =' . $clientid . ' ')
                ->andWhere('isdelete = "0"')
                ->andWhereIn('ipid', $patient_ipid)
                ->andWhere('methodid in ("9","12")')
                ->andWhere('userid != "0"')
                ->andWhere('(' . str_replace('%date%', 'done_date', $active_cond['date_sql']) . ') OR (' . str_replace('%date%', 'create_date', $active_cond['date_sql']) . ') ')
                ->orderBy('create_date ASC');
            $medicsch = $medic->fetchArray();
            
            $med_ids[] = "9999999999";
            foreach($medicsch as $k => $pmed){
                $med_ids[] =  $pmed['medicationid'];
            }
 
            $medic = Doctrine_Query::create()
            ->select('*')
            ->from('Medication')
            ->whereIn("id", $med_ids);
            $master_medication = $medic->fetchArray();
            
            foreach($master_medication as $k_medi => $v_medi)
            {
                $medications[$v_medi['id']] = $v_medi['name'];
            }
            
	 
		  if($_REQUEST['dbg']=="1"){
		      print_R($medicsch); exit;
		  }
		  
		  foreach($medicsch as $k=>$pmh){
		  	$master_data['data'][$pmh['ipid']]['patient_surname'] = $patient_details[$pmh['ipid']]['last_name'];
		  	$master_data['data'][$pmh['ipid']]['patient_firstname'] = $patient_details[$pmh['ipid']]['first_name'];
			$master_data['data'][$pmh['ipid']]['btm_name'] = $medications[$pmh['medicationid']];
			$master_data['data'][$pmh['ipid']]['btm_amount'] = abs($pmh['amount']);
			if($pmh['done_date'] != "0000-00-00 00:00:00"){
				$master_data['data'][$pmh['ipid']]['btm_date'] = date("d.m.Y H:i", strtotime($pmh['done_date']));
			}else{
				$master_data['data'][$pmh['ipid']]['btm_date'] = date("d.m.Y H:i", strtotime($pmh['create_date']));
			}
			$master_data['data'][$pmh['ipid']]['user_name'] = $user_name[$pmh['userid']];
		  }    
		      
 
		    return $master_data; 
		}

		
		public function lagbwsapv($params){
		    // report id = 173
		    // report = LAG BW SAPV Auswertung
		    // EPID | Surname | Firstname | Festbetrag | HB | KO | BE | Tagespauschale | HB | KO | BE | Beratung | Erstberatung | Folgeberatung | Koordination 
		    
		    
		    $quarterarr = $params ['quarterarr'];
		    $yeararr = $params ['yeararr'];
		    $montharr = $params ['montharr'];
		    $includearr = $params ['includearr'];
		    $onlyactive = $params ['onlyactive'];
		    
		    $logininfo = new Zend_Session_Namespace('Login_Info');
		    $clientid = $logininfo->clientid;
		    // epids  asigned to user selected from report parameters
		    $whereepid = $this->getDocCondition();
 
		    
		    
		    $patientmaster = new PatientMaster();
		    $form_types = new FormTypes();
		    $p_list = new PriceList();
		    $block_classification = new FormBlockClassification();
		    
		    
		    $active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
		    $period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		    
		    foreach($period ['start'] as $keyd => $startDate)
		    {
		        $period_days [] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
		        
		        $report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
		        if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d");
		        }
		        else
		        {
		            $report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
		        }
		    }
		    
		    foreach($period_days as $keyp => $daysp)
		    {
		        foreach($daysp as $day)
		        {
		            $finalPeriodDays [] = $day;
		        }
		    }
		    $final_period_days = array_unique($finalPeriodDays);
		    
		    $sql = 'e.epid, p.ipid, e.ipid,';
		    $sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
		    $sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
		    $sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
		    $sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
		    $sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
		    $sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		    
		    $conditions['periods'] = $report_period_array;
		    $conditions['client'] = $clientid;
		    
		    // if user selected - get only assigned to user
		    if($whereepid){
		        $patientMasterData = Doctrine_Query::create()
		        ->select("e.ipid")
		        ->from("EpidIpidMapping e")
		        ->where($whereepid . ' e.clientid = ' . $clientid);
		        $pmarr = $patientMasterData->fetchArray();
		    
		        $doctor_assigned_ipids = array();
		        foreach($pmarr as $patient)
		        {
		            $doctor_assigned_ipids[] =  $patient['ipid'];
		        }
		    
		        if(!empty($doctor_assigned_ipids)){
		            $conditions['ipids'] =  $doctor_assigned_ipids;
		        }
		    }

		    if(!empty($_REQUEST['ipid'])){
                $conditions['ipids'] =  array($_REQUEST['ipid']);
		    }
//                 $conditions['ipids'] =  array("054c38f05b32a36d9d297939157df6df54db4a7e");
//                 $conditions['ipids'] =  array("054c38f05b32a36d9d297939157df6df54db4a7e","36a9cc4780cc6824b4fa1fbd46b9c9ab8507003e","479faf1c7bfed75b92e8e5b83291049d45383d81","7468a03140f55c9e5c1a22ce3738720862b5de86");
//                 $conditions['ipids'] =  array("36a9cc4780cc6824b4fa1fbd46b9c9ab8507003e");
//                 $conditions['ipids'] =  array("479faf1c7bfed75b92e8e5b83291049d45383d81");
		    
                //$conditions['ipids'] =  array("7468a03140f55c9e5c1a22ce3738720862b5de86"); // TP11056
                
//                 $conditions['ipids'] =  array("59aeef2854cda76a5f2dfc8ed279865a1f2a26c5"); // TP10927 - 07.2015

		    
		    
                //$conditions['ipids'] =  array("f53a05035430cc2adf60aa48d20a2ddd437396af"); // TP10815 - 07.2015
                
//                 $conditions['ipids'] =  array("054c38f05b32a36d9d297939157df6df54db4a7e"); // TP10798 - 07.2015
		    $patient_details = Pms_CommonData::patients_days($conditions, $sql);
		    $ipidsarr = array_keys($patient_details); // return ipids

		    
		    
		    foreach($patient_details as $ipid => $p_details)
		    {
		        
		        $patient_details [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
		        $patient_details [$p_details['details'] ['ipid']] ['last_name'] = $p_details['details'] ['last_name'];
		        $patient_details [$p_details['details'] ['ipid']] ['first_name'] = $p_details['details'] ['first_name'];
		        $patient_details [$p_details['details'] ['ipid']] ['isdischarged'] = $p_details['details'] ['isdischarged'];
		        
		        if(!empty($p_details['discharge_details'])){
		            
		            foreach($p_details['discharge_details'] as $dis_id => $dis_data) {
                        $patient_details[$p_details['details'] ['ipid']]['discharge_dates'][] = $dis_data['discharge_date'];
//                         $patient_details[$p_details['details'] ['ipid']]['discharge_dates_sYmd'][$dis_data['discharge_date']] = date('Y-m-d',strtotime($dis_data['discharge_date']));
                        $patient_details[$p_details['details'] ['ipid']]['discharge_dates_sYmd'][date('Y-m-d',strtotime($dis_data['discharge_date']))] = $dis_data['discharge_date'];

                        $patient_discharge_dates[$p_details['details'] ['ipid']][] = $dis_data['discharge_date'];
		            }
		        } else {
		            if(!empty($p_details['discharge'])){
		                
                        $patient_details[$p_details['details'] ['ipid']]['discharge_dates'] = $p_details['discharge'];
//                         $patient_details[$p_details['details'] ['ipid']]['discharge_dates_sYmd'][date("Y-m-d H:i:s",strtotime($p_details['discharge']))] = date('Y-m-d',strtotime($p_details['discharge']));
                        $patient_details[$p_details['details'] ['ipid']]['discharge_dates_sYmd'][date('Y-m-d',strtotime($p_details['discharge']))] = date("Y-m-d H:i:s",strtotime($p_details['discharge']));
    		            $patient_discharge_dates[$p_details['details'] ['ipid']] = $p_details['discharge'];
		            }
		        }
		        $patient_details [$p_details['details'] ['ipid']]['real_active_days'] =  $p_details['real_active_days'];
		        $patient_details [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
		        $patient_details [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
		        $patient_details [$p_details['details'] ['ipid']]['treatment_days'] = $p_details['treatment_days'];
		    }
		    
		    
// 		    print_r($patient_details["7468a03140f55c9e5c1a22ce3738720862b5de86"]); exit;

		    $patients_active_with_sapv = array();
		    $sapv = Doctrine_Query::create()
		    ->select('*')
		    ->from('SapvVerordnung')
		    ->where('isdelete=0')
		    ->andWhereIn('ipid', $ipidsarr)
		    ->orderBy("ipid");
		    $sapvarr = $sapv->fetchArray();
		    
		    //SAPV patient data + list days sapv
		    foreach($sapvarr as $keys => $sapv)
		    {
		        if($sapv['status'] == '1' && $sapv['verorddisabledate'] != '0000-00-00 00:00:00' && $sapv['verorddisabledate'] != '1970-01-01 00:00:00')
		        {
		            $verordisablenext = strtotime('+1 day', strtotime($sapv['verorddisabledate']));
		            $sapv['verordnungbis'] = date('Y-m-d', $verordisablenext);
		        }
		    
		        if(empty($pat_sapv_data[$sapv['ipid']]))
		        {
		            $pat_sapv_data[$sapv['ipid']] = array();
		        }
		    
		        $temp_sapv_days = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($sapv['verordnungam'])), date("Y-m-d", strtotime($sapv['verordnungbis'])), false);
		    
		        $pat_sapv_data[$sapv['ipid']] = array_merge($pat_sapv_data[$sapv['ipid']], $temp_sapv_days);
		    
		        //apply array walk here...otherwise we flood the river with date+strtotime shit
		        array_walk($pat_sapv_data[$sapv['ipid']], function(&$value) {
		            $value = date('d.m.Y', strtotime($value));
		        });
		        
		        
		        
		    }
		    
		    foreach($pat_sapv_data as $ipid => $sapvdata)
		    {
		        foreach($sapvdata as $k_sapv_day => $sapv_day)
		        {
		            if(in_array($sapv_day, $patient_details[$ipid]['real_active_days'])  // active day
		                && !in_array($sapv_day, $patient_details[$ipid]['hospital_days_cs']) // does not exist already in array
		                && !in_array($sapv_day, $patient_details[$ipid]['hospiz_days_cs']) // does not exist already in array
		                && !in_array($sapv_day, $patient_details[$ipid]['sapv_active_days']) // does not exist already in array
		            )
		            {
		                $patient_details[$ipid]['sapv_active_days'][] = $sapv_day;
		                $patient_details_dbg[$ipid]['sapv_active_days'][] = $sapv_day;
		                $patients_active_with_sapv[] = $ipid;
		            }
		        }
		    }
		    
		    foreach($patient_details as $k_ipid => $pat_details)
		    {
		        //add ipid to each counted sapvs days grouped
		        $counted_days = count($pat_details['sapv_active_days']);
		        $counted_weeks = ceil($counted_days / 7);
		    
		        if($counted_days > '0' && $counted_days <= '175')
		        {
		            $sapvs_days_gr[$counted_days][] = $k_ipid;
		        }
		        else if($counted_days > '0')
		        {
		            //more than 175 days enters in key 176
		            $sapvs_days_gr['176'][] = $k_ipid;
		        }
		        $counted_days = '';
		    
		    
		        if($counted_weeks > '0' && $counted_weeks <= '25')
		        {
		            $sapvs_weeks_gr[$counted_weeks][] = $k_ipid;
		        }
		        else if($counted_weeks > '0')
		        {
		            //more than 25 weeks enters in key 26
		            $sapvs_weeks_gr['26'][] = $k_ipid;
		        }
		    }
		    
		    ksort($sapvs_days_gr, SORT_NUMERIC);
		    ksort($sapvs_weeks_gr, SORT_NUMERIC);
		    
		    
		    
		    //CALCULUS REQUIRED DATA START
		    //get all sets form types
		    $set_one = $form_types->get_form_types($clientid, '1');
		    foreach($set_one as $k_set_one => $v_set_one)
		    {
		        $set_one_ids[] = $v_set_one['id'];
		    }
		    
		    $set_two = $form_types->get_form_types($clientid, '2');
		    foreach($set_two as $k_set_two => $v_set_two)
		    {
		        $set_two_ids[] = $v_set_two['id'];
		    }
		    
		    $set_three = $form_types->get_form_types($clientid, '3');
		    foreach($set_three as $k_set_three => $v_set_three)
		    {
		        $set_three_ids[] = $v_set_three['id'];
		    }
		    
		    
		    $set_fourth = $form_types->get_form_types($clientid, '4');
		    foreach($set_fourth as $k_set_fourth => $v_set_fourth)
		    {
		        $set_fourth_ids[] = $v_set_fourth['id'];
		    }
		    
		    $set_ids['one'] = $set_one_ids;
		    $set_ids['two'] = $set_two_ids;
		    $set_ids['three'] = $set_three_ids;
		    $set_ids['fourth'] = $set_fourth_ids;
		    
		    //get active days array
		    $active_days = array();
		    foreach($patient_details as $k_ipid => $pat_details)
		    {
		        //active days "Y-m-d"
		        $active_days[$k_ipid] = $pat_details['active_days'];
		    
		        array_walk($active_days[$k_ipid], function(&$value) {
		            $value = date("Y-m-d", strtotime($value));
		        });
		    
		    
		            //hospital days cs
		            if(!empty($pat_details['hospital']['real_days_cs']))
		            {
		                $hospital_days_cs[$k_ipid] = $pat_details['hospital']['real_days_cs'];
		                array_walk($hospital_days_cs[$k_ipid], function(&$value) {
		                    $value = date("Y-m-d", strtotime($value));
		                });
		            }
		    
		            //hospiz days cs
		            if(!empty($pat_details['hospiz']['real_days_cs']))
		            {
		                $hospiz_days_cs[$k_ipid] = $pat_details['hospiz']['real_days_cs'];
		                array_walk($hospiz_days_cs[$k_ipid], function(&$value) {
		                    $value = date("Y-m-d", strtotime($value));
		                });
		            }
		    
		            if(empty($hospital_days_cs[$k_ipid]))
		            {
		                $hospital_days_cs[$k_ipid] = array();
		            }
		    
		            if(empty($hospiz_days_cs[$k_ipid]))
		            {
		                $hospiz_days_cs[$k_ipid] = array();
		            }
		    
		            //joined hospital hospiz days cs
		            $hospital_hospiz_days_cs[$k_ipid] = array_merge($hospital_days_cs[$k_ipid], $hospiz_days_cs[$k_ipid]);
		    
		    
		            //used in flatrate
		            if(empty($patients_periods[$k_ipid]))
		            {
		                $patients_periods[$k_ipid] = array();
		            }
		    
		            array_walk_recursive($pat_details['active_periods'], function(&$value) {
		                $value = date("Y-m-d", strtotime($value));
		            });
		            $patients_periods[$k_ipid] = array_merge($patients_periods[$k_ipid], $pat_details['active_periods']);
		    }
		    
		    foreach($patients_periods as $k_ipid => $v_periods)
		    {
		        foreach($v_periods as $k_period => $v_period)
		        {
		            if(empty($patients_periods_days[$k_ipid]))
		            {
		                $patients_periods_days[$k_ipid] = array();
		            }
		    
		            $period_days = $patientmaster->getDaysInBetween($v_period['start'], $v_period['end']);
		            $patients_periods_days[$k_ipid] = array_merge($patients_periods_days[$k_ipid], $period_days);
		            $period_days = array();
		        }
		    }
		    
		    
		    //flatrate required data start
		    //verify this
		    $current_period['start'] = date('Y-m-d', time());
		    $current_period['end'] = date('Y-m-d', time());
		    
		    //get sapv days cs
		    $sapv_days_cs = $this->get_period_sapvs($ipidsarr, $active_days, $hospital_hospiz_days_cs);
		    
		    //get no sapv days
		    $days_nosapv_cs = $this->nosapv_days($active_days, $hospital_hospiz_days_cs, $sapv_days_cs);
		    //flatrate required data end
		    
		    
		    $master_price_list = $p_list->get_period_price_list($current_period['start'], $current_period['end']);
		    

		    //get patients courses
		    $course_days_all = $this->get_patients_period_course_lag($ipidsarr);

// 		    print_r($patient_details);
// 		    print_r($course_days_all);
		    foreach($ipidsarr as $k_ipid => $v_ipid)
		    {
		        
		        if(isset($patient_details[$v_ipid]['discharge_dates'])){
		            
    		        //last discharge date
    		        $patients_discharge_date[$v_ipid] = end($patient_details[$v_ipid]['discharge_dates']);
    		        
    		        foreach($course_days_all[$v_ipid] as $pd_done_date => $pc_shortcut_data)
    		        {
//     		            print_r($pd_done_date);
//     		            var_dump(in_array(date("Y-m-d",strtotime($pd_done_date)),array_keys($patient_details[$v_ipid]['discharge_dates_sYmd'])) && strtotime($pd_done_date) > strtotime($patient_details[$v_ipid]['discharge_dates_sYmd'][date("Y-m-d",strtotime($pd_done_date))]));
    		            if(in_array(date("Y-m-d",strtotime($pd_done_date)),array_keys($patient_details[$v_ipid]['discharge_dates_sYmd'])) && strtotime($pd_done_date) > strtotime($patient_details[$v_ipid]['discharge_dates_sYmd'][date("Y-m-d",strtotime($pd_done_date))]))
    		            {
    		              unset($course_days_all[$v_ipid][$pd_done_date]);
    		            }
    		        }
		        }
		    
    		    foreach($course_days_all[$v_ipid] as $pd_done_dates => $pc_shortcut_datad)
    		    {
                    foreach($pc_shortcut_datad as $c_is=>$csh){
                        $course_days[$v_ipid][date('Y-m-d',strtotime($pd_done_dates))][$c_is] = $csh;
                    }
    		    }
    		    //!!!!!!!!!!!!!!!!!!!!!!!
    		    // APPLY THE SAME TO CONTACT FROMS -- ANCUTAAAA

		    }
		    
		    
		    //get contact forms
		    $contact_forms_overall_days = $this->get_patients_period_cf($ipidsarr);
		    
		    $exclude_after_discharge_overall[] = "999999";
		    foreach($ipidsarr as $k_ipid => $v_ipid)
		    {
		        //last discharge date
		        $patients_discharge_date[$v_ipid] = end($patient_details[$v_ipid]['discharge_dates']);
		    
		        foreach($contact_forms_overall_days[$v_ipid] as $k_cf_day => $v_cf_data)
		        {
		            foreach($v_cf_data as $k_cfo => $v_cfo)
		            {
		    
		                if(is_numeric($k_cfo))
		                {
		                    if(strtotime($v_cfo['start_date']) > strtotime($patients_discharge_date[$v_ipid]) && $patient_details [$v_ipid] ['isdischarged']== '1')
		                    {
		                        //excluded cf after last discharge
		                        $exclude_after_discharge_overall[] = $v_cfo['id'];
		                    }
		                    $contact_forms_ids_overall[] = $v_cfo['id'];
		                }
		            }
		        }
		        ksort($contact_forms_days[$v_ipid]);
		    }
		    
		    
		    $classification_data_overall = $block_classification->get_multiple_block_classification($ipidsarr, $contact_forms_ids_overall);
		    //CALCULUS REQUIRED DATA END
		    //CALCULUS START
		    //calculate flatrate for all provided patients
// 		    $flatrate = $this->multi_patients_flatrate_days($ipidsarr, $clientid, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details);
		    $flatrate = $this->multi_patients_flatrate_days_lag($ipidsarr, $clientid, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details);
 
		    //calculate overall shortcuts for all provided patients
		    $overall_patients_shortcuts_nofl = $this->patients_performance_overall($clientid, $ipidsarr, $active_days, $set_ids, $flatrate, false, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall);
// 		    $flatrate_continued = $this->multi_patients_flatrate_days_continued($clientid, $ipidsarr, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details, $overall_patients_shortcuts_nofl);
		    $flatrate_continued = $this->multi_patients_flatrate_days_continued_lag($clientid, $ipidsarr, $current_period, $active_days, $days_nosapv_cs, $hospital_hospiz_days_cs, $patient_details, $overall_patients_shortcuts_nofl);
		    $overall_patients_shortcuts = $this->patients_performance_overall_lag_bw_sapv($clientid, $ipidsarr, $active_days, $set_ids, $flatrate,$flatrate_continued, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall,$patient_discharge_dates,$exclude_after_discharge_overall);
// 		    $overall_patients_shortcuts = $this->patients_performance_overall($clientid, $ipidsarr, $active_days, $set_ids, $flatrate,$flatrate_continued, $master_price_list, $patients_periods_days, $hospital_hospiz_days_cs, $sapv_days_cs, $course_days, $contact_forms_overall_days, $classification_data_overall);
// 		    print_r($overall_patients_shortcuts);  
// exit;
		    foreach($overall_patients_shortcuts as $k_patient_ipid => $v_patient_shortcuts_data)
		    {
		        $patients_totals[$k_patient_ipid] = $v_patient_shortcuts_data['all_visit_types_totals'];
		        $patients_lag[$k_patient_ipid] = $v_patient_shortcuts_data['lag_data'];
		    }
// 		    print_r($patients_lag); exit;
		    foreach($patients_active_with_sapv as $k=>$ipid)
		    {
		        // sort data ascending 
		        foreach($patients_lag[$ipid]['all'] as $type=>$dates_arrays){
		            array_walk($dates_arrays, function(&$value) {
		                $value = date("Y-m-d", strtotime($value));
		            });
		            asort($dates_arrays);
		            $patients_lag[$ipid]['all'][$type] = array_values($dates_arrays); 
		        }
 
		        
		        /* ------------------------- RESET ALL VALUES ---------------------------------------*/
		        $report_data[$ipid] = array();
		        $report_data[$ipid]['billable']['flartrate'] = 0 ;
		        
		        $report_data[$ipid]['billable']['home_visit']= 0;
		        $report_data[$ipid]['billable']['home_visit_days'] = array();
		        
		        $report_data[$ipid]['billable']['first_beratung'] = 0;
		        $report_data[$ipid]['billable']['beratung'] = 0 ;
		        $report_data[$ipid]['during_beratung']['beratung'] = 0 ;
		        
		        $report_data[$ipid]['billable']['koordination'] = 0;
		        
		        $report_data[$ipid]['during_flatrate']['home_visit'] = 0;
		        $report_data[$ipid]['during_flatrate']['beratung'] = 0;
		        $report_data[$ipid]['during_flatrate']['koordination'] = 0;
		        
		        $report_data[$ipid]['during_home_visit']['home_visit'] = 0;
		        $report_data[$ipid]['during_home_visit']['beratung'] = 0;
		        $report_data[$ipid]['during_home_visit']['koordination'] = 0;
		        
		        $report_data[$ipid]['not_billable']['koordination'] = 0 ;
		        
		        
		        //F1 ==> put the ammount of Flatrate here if it was billed in the report period
		        if(!empty($flatrate[$ipid]['pay_days'])){
		            foreach ($flatrate[$ipid]['pay_days'] as $k=>$fday){
                        if(in_array($fday,$final_period_days)){
    		              $report_data[$ipid]['billable']['flartrate'] +=1;
                        }  	                
		            }
		        } 
		        if(!empty($flatrate_continued[$ipid]['pay_days'])){
		            foreach ($flatrate_continued[$ipid]['pay_days'] as $k=>$fcday){
		                if(in_array($fcday,$final_period_days) && !in_array($fcday,$flatrate[$ipid]['pay_days']) ){
		                  $report_data[$ipid]['billable']['flartrate'] +=1;
		                }
		            }
		        }
		        /*---------------------------------------------------------------------------*/
		        //T1 ==> put the ammount of Tagespauschale here if it was billed in the report period
		        if(!empty($patients_lag[$ipid]['billable']['37b2'])){
		            foreach ($patients_lag[$ipid]['billable']['37b2'] as $k=>$hvday){
		                if(in_array($hvday,$final_period_days)){
            		        $report_data[$ipid]['billable']['home_visit'] += 1;
            		        $report_data[$ipid]['during_home_visit']['home_visit'] += 1;
            		        $report_data[$ipid]['billable']['home_visit_days'][] = $hvday;
		                } 
		            }
		        } 

		        
		        /*---------------------------------------------------------------------------*/
		        //B1 ==> put the ammount of BERATUNG here if it was billed in the report period
		        
		        if(!empty($patients_lag[$ipid]['billable']['37b5'])){
		            foreach ($patients_lag[$ipid]['billable']['37b5'] as $k=>$bfday){
		                if(in_array($bfday,$final_period_days)){		                
                            $report_data[$ipid]['billable']['first_beratung'] += 1;
                            $report_data[$ipid]['billable']['beratung'] += 1;
                            /* $report_data[$ipid]['during_beratung']['beratung'] +=1;
                            $report_data[$ipid]['during_beratung']['beratung_array'][$bfday][] = $bfday; */
		                } 
		            }
		        } 
		        
		        
		        if(!empty($patients_lag[$ipid]['billable']['37b6'])){
		            foreach ($patients_lag[$ipid]['billable']['37b6'] as $k=>$bday){
		                if(in_array($bday,$final_period_days)){
    		                  $report_data[$ipid]['billable']['beratung'] += '1';
    		                  $report_data[$ipid]['during_beratung']['beratung'] +=1;
		                } 
                    }
		        } 

		        foreach($patients_lag[$ipid]['all']['beratung'] as $k=>$hv_date){
		            if(in_array($hv_date,$final_period_days)){
		                if(in_array($hv_date,$patients_lag[$ipid]['billable']['37b6']) || in_array($hv_date,$patients_lag[$ipid]['billable']['37b5']) ){
// 		                if(in_array($hv_date,$patients_lag[$ipid]['billable']['37b6']) || in_array($hv_date,$patients_lag[$ipid]['billable']['37b5']) ){
		                    $report_data[$ipid]['during_beratung']['beratung_array'][$hv_date][] =$hv_date;
		                }
		            }
		        }

		        if(!empty($report_data[$ipid]['during_beratung']['beratung_array'])){
		            foreach($report_data[$ipid]['during_beratung']['beratung_array'] as $visit_dates =>$dates){
		                if(count($dates) > 2 ){
		                    $report_data[$ipid]['during_beratung']['beratung'] += (count($dates) - 2);
		                }
		            }
		        }
 

		        
		        /*---------------------------------------------------------------------------*/
		        //K ==> put the ammount of KOORDINATION here if it was billed in the report period
		        
		        if(!empty($patients_lag[$ipid]['billable']['37b7'])){
		            foreach ($patients_lag[$ipid]['billable']['37b7'] as $k=>$kfday){
		                if(in_array($kfday,$final_period_days) && !in_array($kfday,$patients_lag[$ipid]['billable']['37b2']) && !in_array($kfday,$patients_lag[$ipid]['billable']['37b1'])){		            
            		        $report_data[$ipid]['billable']['koordination'] += 1;
		                } 
		            }
		        } 
		        if(!empty($patients_lag[$ipid]['billable']['37b8'])){
		            foreach ($patients_lag[$ipid]['billable']['37b8'] as $k=>$kday){
		                if(in_array($kday,$final_period_days) && !in_array($kday,$patients_lag[$ipid]['billable']['37b2']) && !in_array($kday,$patients_lag[$ipid]['billable']['37b1'])){
    		              $report_data[$ipid]['billable']['koordination'] += 1;
		                }
		            }
		        } 
		        
		        //K ==> shows how many koordinations were done (not on flatrate, not on day price days)
		        foreach($patients_lag[$ipid]['all']['koordination'] as $k=>$koord_date){
		            if(in_array($koord_date,$final_period_days)){
		                if(!in_array($koord_date,$patients_lag[$ipid]['billable']['37b1']) && !in_array($koord_date,$patients_lag[$ipid]['billable']['37b2']) ){
		                    $report_data[$ipid]['not_billable']['koordination'] +=1;
		                }
		            }
		        }
		        
		        
		        /*---------------------------------------------------------------------------*/		        
                if(!empty($patients_lag[$ipid]['billable']['37b1'])) // all billable flatrate days
                {
   	                // F2 ==> give the number of VISTS which were made in the period of the flatrate and therefor not billed
		            foreach($patients_lag[$ipid]['all']['home_visit'] as $k=>$hv_date){
		                if(in_array($hv_date,$final_period_days)){
                            if(in_array($hv_date,$patients_lag[$ipid]['billable']['37b1']) ){
                                $report_data[$ipid]['during_flatrate']['home_visit'] +=1;
                            }
		                } 
	                }

	                
                    //F4 ==> give the number of BERATUNG which were made in the period of the flatrate and therefor not billed
	                foreach($patients_lag[$ipid]['all']['beratung'] as $k=>$beratung_date){
	                    if(in_array($beratung_date,$final_period_days)){
    	                    if(in_array($beratung_date,$patients_lag[$ipid]['billable']['37b1']) ){
    	                        $report_data[$ipid]['during_flatrate']['beratung'] +=1;
    	                    } 
	                    } 
	                }

	                
                    //F3 ==> give the number of KOORDINATIONS which were made in the period of the flatrate and therefor not billed
	                foreach($patients_lag[$ipid]['all']['koordination'] as $k=>$koord_date){
	                    if(in_array($koord_date,$final_period_days)){
    	                    if(in_array($koord_date,$patients_lag[$ipid]['billable']['37b1']) ){
    	                        $report_data[$ipid]['during_flatrate']['koordination'] +=1;
    	                    }
	                    }
	                }
	            } 
 
	            
	            /*---------------------------------------------------------------------------*/

                if(!empty($patients_lag[$ipid]['billable']['37b2'])) // all billable home visits days
                {
                    //T2 ==> give the number of VISTS which were made in the period of the Tagespauschale
		            foreach($patients_lag[$ipid]['all']['home_visit'] as $k=>$hv_date){
		                if(in_array($hv_date,$final_period_days)){
                            if(in_array($hv_date,$patients_lag[$ipid]['billable']['37b2']) && !in_array($hv_date,$patients_lag[$ipid]['billable']['37b1'])){
                                $report_data[$ipid]['during_home_visit']['home_visit_array'][$hv_date][] =$hv_date;
                            }
		                }
	                }
	                if(!empty($report_data[$ipid]['during_home_visit']['home_visit_array'])){
	                    foreach($report_data[$ipid]['during_home_visit']['home_visit_array'] as $visit_dates =>$dates){
	                        if(count($dates) > 1 ){
	                            $report_data[$ipid]['during_home_visit']['home_visit'] += (count($dates) - 1);
	                        } else{
	                            $report_data[$ipid]['during_home_visit']['home_visit'] +=0;
	                        }
	                    }
	                }
	                
                    //T4 ==> give the number of BERATUNG which were made in the period of the Tagespauschale
	                foreach($patients_lag[$ipid]['all']['beratung'] as $k=>$beratung_date){
	                    if(in_array($beratung_date,$final_period_days)){
    	                    if(in_array($beratung_date,$patients_lag[$ipid]['billable']['37b2']) ){
    	                        $report_data[$ipid]['during_home_visit']['beratung'] +=1;
    	                    } 
	                    } 
	                }
	                
    	            //T3 ==> give the number of KOORDINATIONS which were made in the period of the Tagespauschale
	                foreach($patients_lag[$ipid]['all']['koordination'] as $k=>$koord_date){
	                    
	                    if(in_array($koord_date,$final_period_days)){
    	                    if(in_array($koord_date,$patients_lag[$ipid]['billable']['37b2']) ){
    	                        $report_data[$ipid]['during_home_visit']['koordination'] +=1;
    	                    } 
	                    }  
	                }
	            }
		    }
//    		    print_r($report_data);
//     		    exit;  
		    if($_REQUEST['dbg'] == "show_data"){
		        
    		    print_r($report_data);  
    		    print_r($report_data);  
    		    print_r($flatrate);  
    		    print_r($flatrate_continued);  
    		    print_r($patients_lag); 
    		    exit; 
		    }

		    foreach($patients_active_with_sapv as $k=>$pipid){

		        $master_data['data'][$pipid]['epid'] = $patient_details[$pipid]['epid'];
		        $master_data['data'][$pipid]['lastname'] = $patient_details[$pipid]['last_name'];
		        $master_data['data'][$pipid]['firstname'] = $patient_details[$pipid]['first_name'];
		        
		        $master_data['data'][$pipid]['lag_f1'] = $report_data[$pipid]['billable']['flartrate'];//Festbetrag
		        $master_data['data'][$pipid]['lag_f2'] = $report_data[$pipid]['during_flatrate']['home_visit'] ;//HB
		        $master_data['data'][$pipid]['lag_f3'] = $report_data[$pipid]['during_flatrate']['koordination'] ;//KO
		        $master_data['data'][$pipid]['lag_f4'] = $report_data[$pipid]['during_flatrate']['beratung'] ;//BE
		        $master_data['data'][$pipid]['lag_t1'] = $report_data[$pipid]['billable']['home_visit'];//Tagespauschale
		        $master_data['data'][$pipid]['lag_t2'] = $report_data[$pipid]['during_home_visit']['home_visit'];//HB - home visits during bilable home visits
		        $master_data['data'][$pipid]['lag_t3'] = $report_data[$pipid]['during_home_visit']['koordination'];//KO - home visits during bilable home visits
		        $master_data['data'][$pipid]['lag_t4'] = $report_data[$pipid]['during_home_visit']['beratung'];//BE - home visits during bilable home visits
		        $master_data['data'][$pipid]['lag_b1'] = $report_data[$pipid]['billable']['beratung'];//Beratung
		        $master_data['data'][$pipid]['lag_b2'] = $report_data[$pipid]['billable']['first_beratung'];//Erstberatung
		        $master_data['data'][$pipid]['lag_b3'] = $report_data[$pipid]['during_beratung']['beratung'];//Folgeberatung
		        $master_data['data'][$pipid]['lag_k'] = $report_data[$pipid]['billable']['koordination'];//Koordination
		        $master_data['data'][$pipid]['lag_k1'] = $report_data[$pipid]['not_billable']['koordination'];//Koordination
		        $master_data['data'][$pipid]['sapv_days'] = count($patient_details[$pipid]['sapv_active_days']);
		    }

		    return $master_data;
		    
		}
		
		public function physiotherapistslistreport()
		{
			// report_id = 176
			// report_name = Liste Physiotherapeuten
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
		
			$physios = Doctrine_Query::create()
			->select('*')
			->from('Physiotherapists')
			->where('isdelete= "0"')
			->andWhere('clientid="' . $clientid . '"')
			->andWhere("valid_till='0000-00-00' and (first_name!='' or last_name!='')")
			->andWhere('indrop = "0"');
		
			$results = $physios->fetchArray();
		
			foreach($results as $key => $physio)
			{
				$MasterData['data'][$key]['physiotherapist'] = $physio['physiotherapist'];
				$MasterData['data'][$key]['firstname'] = $physio['first_name'];
				$MasterData['data'][$key]['lastname'] = $physio['last_name'];
				$MasterData['data'][$key]['title'] = $physio['title'];
				$MasterData['data'][$key]['street1'] = $physio['street1'];
				$MasterData['data'][$key]['street2'] = $physio['street2'];
				$MasterData['data'][$key]['city'] = $physio['city'];
				$MasterData['data'][$key]['zip'] = $physio['zip'];
				$MasterData['data'][$key]['physnumber'] = $physio['doctornumber'];
				$MasterData['data'][$key]['practice_phone'] = $physio['phone_practice'];
				$MasterData['data'][$key]['private_phone'] = $physio['phone_private'];
				$MasterData['data'][$key]['fax'] = $physio['fax'];
				$MasterData['data'][$key]['email'] = $physio['email'];
				$MasterData['data'][$key]['medicalspeciality'] = $physio['medical_speciality'];
			}			
			return $MasterData;
		}
		
		public function healthinsurancelistreport()
		{
			// report_id = 175
			// report_name = Liste Krankenkassen
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			
		
			$subdiv = Doctrine_Query::create()
			->select('*')
			->from('HealthInsuranceSubdivisions')			
			->where('HealthInsuranceSubdivisions.name = "SAPV"');
			
			$subdivdata = $subdiv->fetchArray();			
			
			$healthins_q = Doctrine_Query::create()
			->select("h.*,h2s.*")					
			->from('HealthInsurance h')
			->leftJoin('h.HealthInsurance2Subdivisions h2s')			
			->andWhere('h.isdelete= "0"')
			->andWhere('h.extra= "0"')
			->andWhere('h.onlyclients= "1"')
			->andWhere('h.clientid="' . $clientid . '"')
			->andWhere("h.valid_till='0000-00-00'");
		
			$results = $healthins_q->fetchArray();			
	
			foreach($results as $key => $healthin)
			{
				$MasterData['data'][$key]['name'] = $healthin['name'];
				$MasterData['data'][$key]['insurance_provider'] = $healthin['insurance_provider'];
				$MasterData['data'][$key]['street1'] = $healthin['street1'];
				$MasterData['data'][$key]['street2'] = $healthin['street2'];
				$MasterData['data'][$key]['zip'] = $healthin['zip'];
				$MasterData['data'][$key]['city'] = $healthin['city'];
				$MasterData['data'][$key]['phone'] = $healthin['phone'];
				$MasterData['data'][$key]['phone2'] = $healthin['phone2'];
				$MasterData['data'][$key]['fax'] = $healthin['phonefax'];
				$MasterData['data'][$key]['postoffice_box'] = $healthin['post_office_box'];
				$MasterData['data'][$key]['postoffice_box_location'] = $healthin['post_office_box_location'];
				$MasterData['data'][$key]['postoffice_zip'] = $healthin['zip_mailbox'];
				$MasterData['data'][$key]['email'] = $healthin['email'];
				$MasterData['data'][$key]['kvnumber'] = $healthin['kvnumber'];
				$MasterData['data'][$key]['iknumber'] = $healthin['iknumber'];
				$MasterData['data'][$key]['debtor_number'] = $healthin['debtor_number'];
				if(!empty($healthin['HealthInsurance2Subdivisions'])){
					foreach ($healthin['HealthInsurance2Subdivisions'] as $subdivvalue) {
						if ($subdivvalue['subdiv_id'] == $subdivdata[0]['id'] and $subdivvalue['isdelete'] == 0 and $subdivvalue['onlyclients'] == 1 and $subdivvalue['valid_till'] == "0000-00-00") {
							$MasterData['data'][$key]['sapv_data'] = $subdivvalue['name'].'<br />';
							if ($subdivvalue['contact_person'] != "") {
								$MasterData['data'][$key]['sapv_data'] .= $subdivvalue['contact_person'].'<br />';
							}
							if ($subdivvalue['street1'] != "") {
								$MasterData['data'][$key]['sapv_data'] .= $subdivvalue['street1'].'<br />';								
							}
							if ($subdivvalue['street2'] != "") {
								$MasterData['data'][$key]['sapv_data'] .= $subdivvalue['street2'].'<br />';								
							}							
								$MasterData['data'][$key]['sapv_data'] .= $subdivvalue['zip'].' '.$subdivvalue['city'];
						}					
					}
					if(!isset($MasterData['data'][$key]['sapv_data'])) {
						$MasterData['data'][$key]['sapv_data'] = '';
					}
				}
				else
				{
					$MasterData['data'][$key]['sapv_data'] = '';
				}
			}
			return $MasterData;
		}
		
		public function discharged_patients_bayern($params)
		{
			// report_id = 177
			// report_name = 39a Anlage 6 Bayern
			// *§39a Anlage 6*: it looks only for DEAD patients (report period looks for discharges type = death)
			// |Name (Surname) |Vorname  (Firstname) |Geburtstag  (DoB)|Krankenkasse (Health insurance) | Beginn(admission) | Ende (discharge) |
		
			//ISPC-1753
			// 2) add all patients discharged with a discharge reason which is checked (1) into the report "§39 Anlage 6"
			// 3) please verify that every patient is only "reported" ONCE. means for the first fall which ended with a reason from above. if he is re admitted and discharged, re admitted and discharged etc etc .. every patient just ONCE exported for the first ever case.
		
			//ISPC-1887
			//the user can SELECT the discharge methods which are relevant for the report
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
				
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			
			$required_discharged_method = array();
			if(!empty($params['custom']['discharged_method']) && $params['custom']['discharged_method'] != 0){
				$required_discharged_method =  $params['custom']['discharged_method'];
			}
			
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			$pm = new PatientMaster ();
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		
				
			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */
				
			foreach($period ['start'] as $keyd => $startDate)
			{
				$period_days [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
				
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);
			/* ################################################################################################### */
				
			$whereepid = $this->getDocCondition();
		
			$ipidsval = "'X'";
			$comma = ",";
			foreach($ipidsarr as $ipid)
			{
				$ipidsval .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}
		
			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}
			
			$dm_dead = DischargeMethod::get_client_discharge_method($clientid,true);
			$dm_report = $required_discharged_method; //ISPC-1887
			
			$cond_overall['all_discharge_details'] = 1;
			
			$all_patients_discharges = $this->get_all_discharge_patients($quarterarr, $yeararr, $montharr,$cond_overall);
			// 			print_r($all_patients_discharges); exit;
				
			
			foreach($all_patients_discharges as $dipid=>$dis_details){
				$first_discharge_ever[$dipid] = $dis_details[0];
				foreach($dis_details as $d_pos=>$ddata){
					if(in_array($ddata['discharge_method'],$dm_report)){
						$all_discharge[$dipid]['special'][] = $ddata;
					}
				}
			}
			
			$special_ipids = array();
				
			foreach($all_discharge as $ipid=>$discharge_type){
				if(!empty($all_discharge[$ipid]['special'])   && in_array(date("Y-m-d",strtotime($all_discharge[$ipid]['special'][0]['discharge_date'])),$finalPeriodDays)){
					$first_discharged[$ipid]['special'] = $all_discharge[$ipid]['special'][0];
					$special_ipids[] = $ipid;
				}
			}
			//var_dump($special_ipids); exit;
			// get first discharges - check if they are in period- and set ipid array
			if(empty($special_ipids)){
				$special_ipids[] = "99999999999999999";
			}

			$ipidsArray = $special_ipids;
				
			$qa = Doctrine_Query::create()
			->select("*")
			->from("PatientActive")
			->whereIn('ipid', $ipidsArray);
			$qarr = $qa->fetchArray();
				
			foreach($qarr as $k=>$p_det){
				$patients_act[$p_det['ipid']][$p_det['end']] = $p_det['start'];
			}
		
			$Q = Doctrine_Query::create()
			->select("p.*,e.ipid,e.epid,
					AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
					convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
					convert(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
					convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city
					");
			$Q->from('PatientMaster p');
			$Q->whereIn('p.ipid', $ipidsArray);
			$Q->andWhere('p.isdelete = 0');
			$Q->andWhere('p.isstandbydelete = 0');
			$Q->orderBy('p.admission_date DESC');
			$Q->leftJoin("p.EpidIpidMapping e");
			$Q->andWhere('p.ipid = e.ipid ');
			$Q->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$Q->orderBy('CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ASC');
			$deadPatients = $Q->fetchArray();
		
			foreach($deadPatients as $patient)
			{
				$deadIpidPatients[$patient['ipid']] = $patient;
				$deadIpidPatientsarr[] = $patient['ipid'];
				$epidsarr[$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
			}
		
			$dispatloc = Doctrine_Query::create()
			->select("*")
			->from("PatientDischarge as p")
			->whereIn('p.ipid', $ipidsArray)
			// 				->andWhere('isdelete = 0')
			;
			$dispatlocarr = $dispatloc->fetchArray();
		
			foreach($dispatlocarr as $dischargedpat)
			{
					$dischargeLocationsArray[$dischargedpat['ipid']] = $dischargedpat;
			}
				
			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
			->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
			->from('PatientHealthInsurance')
			->whereIn('ipid', $ipidsArray);
			$Healtharray = $Health->fetchArray();
		
			foreach($Healtharray as $patient_health)
			{
				$patienthelth[$patient_health['ipid']]['number'] = $patient_health["insurance_no"];
				$patienthelth[$patient_health['ipid']]['company'] = $patient_health["company_name"];
				$patienthelth[$patient_health['ipid']]['ik'] = $patient_health["institutskennzeichen"];
				$patienthelth[$patient_health['ipid']]['kasse_nr'] = $patient_health["kvk_no"];
			}
		
			foreach($deadIpidPatients as $k_dipid => $v_dpatient)
			{
				if($_REQUEST['dbg'] == "dead"){
					$master[$k_dipid]['epid'] = $epidsarr[$k_dipid]['epid'].'<br/>'.$k_dipid;
				} else{
					$master[$k_dipid]['epid'] = $epidsarr[$k_dipid]['epid'];
				}
				$master[$k_dipid]['lastname'] = $v_dpatient['last_name'];
				$master[$k_dipid]['firstname'] = $v_dpatient['first_name'];
				$master[$k_dipid]['birthd'] = date("d.m.Y", strtotime($v_dpatient['birthd']));
		
				if(strlen($patienthelth[$v_dpatient['ipid']]['company']) > 0)
				{
					$master[$k_dipid]['healthinsurance'] = $patienthelth[$v_dpatient['ipid']]['company'];
				}
				else
				{
					$master[$k_dipid]['healthinsurance'] = "keine Angabe";
				}

				if($dischargeLocationsArray['$k_dipid']['discharge_method'] == $dm_dead[0]) { // show discharge dead details
					$master[$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($v_dpatient['admission_date']));
					if($_REQUEST['dbg'] == "dead"){
						$master[$k_dipid]['diedon'] = date("d.m.Y", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date'])) ."  &#8224;";
					} else{
						$master[$k_dipid]['diedon'] = date("d.m.Y", strtotime($dischargeLocationsArray[$k_dipid]['discharge_date']));
					}
				}
				else
				{
					$adm[$k_dipid] =  $patients_act[$k_dipid][date("Y-m-d", strtotime($first_discharged[$k_dipid]['special']['discharge_date']))];
					$master[$k_dipid]['admissiondate'] = date("d.m.Y", strtotime($adm[$k_dipid]));// get the admission relevant to the discharge
					$master[$k_dipid]['diedon'] = date("d.m.Y", strtotime($first_discharged[$k_dipid]['special']['discharge_date']));
				}
			}
		
			foreach($master as $key => $row)
			{
				$health[$key] = $row['healthinsurance'];
				$lastname[$key] = $row['lastname'];
			}
		
			array_multisort($health, SORT_ASC, $lastname, SORT_ASC, $master);
		
			foreach($master as $ipid_key => $vpatient)
			{
				$MasterData['data'][$ipid_key]['epid'] = $vpatient['epid'];
				$MasterData['data'][$ipid_key]['lname'] = $vpatient['lastname'];
				$MasterData['data'][$ipid_key]['fname'] = $vpatient['firstname'];
				$MasterData['data'][$ipid_key]['birth_day'] = $vpatient['birthd'];
				$MasterData['data'][$ipid_key]['healthinsurance_name'] = $vpatient['healthinsurance'];
				$MasterData['data'][$ipid_key]['adm_start'] = $vpatient['admissiondate'];
				$MasterData['data'][$ipid_key]['discharge_end'] = $vpatient['diedon'];
			}
		//var_dump($MasterData); exit;
			return $MasterData;
		}
		
		public function healthinsurance2patients_bayern($params)
		{
			// report_id = 178
			// report_name = Anlage 7 Bayern*
			// |Name der Krankenkasse(health insurance)|Anzahl der abgeschlossenen Sterbebegleitungen (Dead patients) |
			
			//ISPC-1887 the user can SELECT the discharge methods which are relevant for the report
			
			//add all patients discharged with a discharge reason which is checked (1) into the report "§39 Anlage 6"
			//please verify that every patient is only "reported" ONCE. means for the first fall which ended with a reason from above. if he is re admitted and discharged, re admitted and discharged etc etc .. every patient just ONCE exported for the first ever case.
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
				
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$reportPeriod = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			
			$required_discharged_method = array();
			if(!empty($params['custom']['discharged_method']) && $params['custom']['discharged_method'] != 0){
				$required_discharged_method =  $params['custom']['discharged_method'];
			}
			
			$dm_report = $required_discharged_method; //ISPC-1887
			
			$whereepid = $this->getDocCondition();
			//$ipidsarr = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);
			$ipidsarr = $this->getallPatientsByDischarge($quarterarr, $yeararr, $montharr);
			
			
			$ipidsarr_special = array();
			
			foreach($ipidsarr as $dipid=>$dis_details){
					if(in_array($dis_details['discharge_method'],$dm_report)){
						$ipidsarr_special[] = $dis_details['ipid'];
					}
			}
			//var_dump($ipidsarr_special); exit;
			$ipidsval = "'X'";
			$comma = ",";
			
			foreach($ipidsarr_special as $ipid)
			{
				$ipidsval .= $comma . "'" . $ipid . "'";
				$comma = ",";
			}
			
			$ipidsArray = $ipidsarr_special;
		
			if(empty($ipidsArray))
			{
				$ipidsArray[] = "99999999999";
			}
		
			$Q = Doctrine_Query::create()
			->select("p.*,e.ipid,e.epid,
					AES_DECRYPT(p.last_name,'" . Zend_Registry::get('salt') . "') as last_name,
					AES_DECRYPT(p.first_name,'" . Zend_Registry::get('salt') . "') as first_name,
					convert(AES_DECRYPT(p.zip,'" . Zend_Registry::get('salt') . "') using latin1) as zip,
					convert(AES_DECRYPT(p.street1,'" . Zend_Registry::get('salt') . "') using latin1) as street1,
					convert(AES_DECRYPT(p.street2,'" . Zend_Registry::get('salt') . "') using latin1) as street2,
					convert(AES_DECRYPT(p.city,'" . Zend_Registry::get('salt') . "') using latin1) as city
					");
			$Q->from('PatientMaster p');
			$Q->whereIn('p.ipid', $ipidsArray);
			$Q->andWhere('p.isdelete = 0');
			$Q->andWhere('p.isstandbydelete = 0');
			$Q->orderBy('p.admission_date DESC');
			$Q->leftJoin("p.EpidIpidMapping e");
			$Q->andWhere('p.ipid = e.ipid ');
			$Q->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$Q->orderBy('CONVERT(AES_DECRYPT(p.last_name, "' . Zend_Registry::get('salt') . '") using utf8) COLLATE utf8_general_ci ASC');
			$deadPatients = $Q->fetchArray();
		
			$deadPatientFamilyDocStr = "'0',";
			foreach($deadPatients as $patient)
			{
				$deadIpidPatients[$patient['ipid']] = $patient;
				$deadPatientFamilyDocStr .= "'" . $patient['familydoc_id'] . "',";
				$deadIpidPatientsarr[] = $patient['ipid'];
				$epidsarr[$patient['ipid']]['epid'] = $patient['EpidIpidMapping']['epid'];
			}
		
			$dispatloc = Doctrine_Query::create()
			->select("*")
			->from("PatientDischarge as p")
			->whereIn('p.ipid', $ipidsArray)
			->andWhere('isdelete = 0');
			$dispatlocarr = $dispatloc->fetchArray();
		
			foreach($dispatlocarr as $dischargedpat)
			{
				$dischargeLocationsArray[$dischargedpat['ipid']] = $dischargedpat;
			}
		
			/* ----------------------- Get Health Insurance-------------------------------- */
			$Health = Doctrine_Query::create()
			->select("*,AES_DECRYPT(company_name,'" . Zend_Registry::get('salt') . "') as company_name")
			->from('PatientHealthInsurance')
			->whereIn('ipid', $ipidsArray);
			$Healtharray = $Health->fetchArray();
		
		
			foreach($Healtharray as $patient_health)
			{
				$patients_with_health[] = $patient_health["ipid"];
			}
		
			$i = 0;
			foreach($ipidsArray as $k => $ipid)
			{
		
				if(!in_array($ipid, $patients_with_health))
				{
					$key = count($Healtharray) + $i;
					$Healtharray[$key]['ipid'] = $ipid;
					$Healtharray[$key]['company_name'] = "-";
					$Healtharray[$key]['companyid'] = "0";
				}
				$i++;
			}
		
			$health_insurance_ids[] = "XXXXX";
			foreach($Healtharray as $patient_health)
			{
				$healt2patients[$patient_health["company_name"]]['amount'][] = $patient_health["ipid"];
				$health_insurance_ids[] = $patient_health["companyid"];
		
				if($patient_health['privatepatient'] == "1"){
					$healt2patients[$patient_health["company_name"]]['PKV'][] = $patient_health["ipid"];
				}else{
					$healt2patients[$patient_health["company_name"]]['GKV'][] = $patient_health["ipid"];
		
				}
			}
				
			$health_insurance_data = HealthInsurance::get_multiple_healthinsurances($health_insurance_ids);
		
			$total_discharged_patients = 0;
			$s = 0;
			$status = " - ";
			foreach($healt2patients as $key_id => $patients)
			{
				$data[$s]['health_insurance_name'] = $key_id;
				$data[$s]['health_insurance2patients'] = count($healt2patients[$key_id]['amount']);
		
				if(count($patients['PKV']) > 0  ){
					$status = "PKV";
				} else {
					$status = "GKV";
				}
		
				$data[$s]['health_insurance2patients_status'] = $status;
		
				$total_discharged_patients += count($healt2patients[$key_id]['amount']);
				$s++;
			}
		
			$sortarr = 'health_insurance2patients';
			$data = $this->array_sort($data, $sortarr, SORT_DESC);
		
		
			$MasterData['data'] = $data;
			$MasterData['extra']['sum'] = $total_discharged_patients;
		
			//var_dump($MasterData); exit;
			return $MasterData;
		}
		
		
		
		public function bra_sapv($params){
			// report_id = 178
			// report_name = Brandenburg (ISPC-1909)
			// It searches for all patients who were active SAPV (active, SAPV Verordnung, not standby) in report period.
			// COLUMNS
			// Datum Erst-VO = date of FIRST EVER Verordnung (can be outside of report period)
			// HD ICD =  main diagnosis ICD 
			// HD Text = main diagnosis TEXT 
			// Falldauer = SHOW ONLY FOR PATIENTS WHO DIED IN REPORT PERIOD: Days between the very first Verordnung (can be outside of report period) and day of death.no matter if active, no matter if discharged. just calculate the ammoun tof days between first Verordnung and death. 
			// Versorgungsdauer  = SHOW ONLY FOR PATIENTS WHO DIED IN REPORT PERIOD: same like coloumn before, but only active days. 
			// Ort der Leistungserbringung =  location TYPE on the VERY first day of treatment 
			// Ort des Sterbens  = location type on day of death (last)  
			
			
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			
			$pm = new PatientMaster();
			
			$whereepid = $this->getDocCondition();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			
			$dead_in_period = $this->getDeadPatientsByDischarge($quarterarr, $yeararr, $montharr);
// 			print_r($dead_in_period); exit;
			
			foreach($period['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
			
				if(strtotime($period['end'][$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period['end'][$keyd]));
				}
				
				$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			
			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);
			
			$loct = Locations::getLocationTypes();
			
			
			$periodDays_S = array();
			foreach($period['start'] as $k_speriod => $v_speriod)
			{
// 				$periodDays_S[] = array_merge($periodDays_S, $pm->getDaysInBetween($v_speriod, $period['end'][$k_speriod]));
				$periodDays_S[] = $pm->getDaysInBetween($v_speriod, $period['end'][$k_speriod]);
			}

			
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			
			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
			
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
			$active_patients_ipids = array_keys($active_patient_details); // return ipids
		
			foreach($active_patient_details as $ipid => $p_details)
			{
				$patient_details [$p_details['details'] ['ipid']] ['ipid'] = $p_details['details'] ['ipid'];
				$patient_details [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patient_details [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patient_details [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patient_details [$p_details['details'] ['ipid']] ['isdischarged'] = $p_details['details'] ['isdischarged'];

				if($p_details['details'] ['isdischarged'] == "1") {
					if(in_array($p_details['details']['ipid'],$dead_in_period)){
						$patient_details [$p_details['details'] ['ipid']] ['discharge_death_date'] = end($p_details['discharge']);
					}
					$patient_details [$p_details['details'] ['ipid']] ['discharge_details'] = $p_details['discharge_details'];
				}
// 				if(in_array($p_details['details'] ['ipid'],$dead_in_period) ){
					$ov_ipids[] = $p_details['details'] ['ipid'];
// 				}
			}
			
			$conditions_ov['periods'] = array('0' => array('start' => "2007-01-01", 'end' => date("Y-m-d")));
			$conditions_ov['client'] = $clientid;
			$conditions_ov['ipids'] = $ov_ipids;
			$overall_patient_details = Pms_CommonData::patients_days($conditions_ov);

			
			foreach($overall_patient_details as $ipid => $op_details)
			{
				$overall_patient_data [$op_details['details'] ['ipid']]['overall_days_of_treatment'] = $op_details['treatment_days_no'];
				$overall_patient_data [$op_details['details'] ['ipid']]['overall_active_days'] = $op_details['real_active_days'];
				$overall_patient_data [$op_details['details'] ['ipid']]['admission_days'] = $op_details['admission_days'];
				$overall_patient_data [$op_details['details'] ['ipid']]['first_admission_ever'] = $op_details['admission_days'][0];
				//$overall_patient_data [$op_details['details'] ['ipid']]['all'] = $op_details;
// 				$overall_patient_data [$op_details['details'] ['ipid']]['locs'] = $op_details['locations'];
				
				foreach($op_details['locations'] as $loc_id=>$loc_details){
					foreach($loc_details['days'] as $k=>$lday){
						
						
						if(empty($loc_details['type']))
						{
							$locid = "";
							$locid = substr($loc_details['location_id'], 0, 4);
							
							if($locid == "8888")
							{
								$loc_details['type'] = "6";
							}
						}
						
						$overall_patient_data [$op_details['details'] ['ipid']]['location_day2type'][$lday] = $loct[$loc_details['type']];
						
					}
				}
			}
// 			print_r($overall_patient_data['5d7998518ebc57db3b563429bf2b2cfb94cfa129']); exit;
// 			print_r($overall_patient_data['0aca348bd389110438d4783f8862cf7dfd9bc469']); exit;
			
// 			$active_days_period = array();
// 			foreach($active_patient_details as $ka => $day_active)
// 			{
// 				$active_days_period[$ka] = array_values($day_active['real_active_days']);
// 				array_walk($active_days_period[$ka], function(&$value) {
// 					$value = date("Y-m-d", strtotime($value));
// 				});
// 			}
			
			//============================================
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');
			
			$patientsapv = Doctrine_Query::create()
			->select("*")
			->from('SapvVerordnung sv')
			->whereIn('ipid', $active_patients_ipids)
			->andwhere('sv.verordnet NOT LIKE ""')
			->andWhere('sv.isdelete = 0');
			$patientsapvarr_res = $patientsapv->fetchArray();
			
			
			foreach($patientsapvarr_res as $k => $sapv){
				$sapv_data [$sapv ['ipid']] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
			}
			
			foreach($sapv_data as $ipid => $sapv_period)
			{
				foreach($sapv_period as $key => $daysapv_array)
				{
					foreach($daysapv_array as $k=>$daysapv){
						$overall_sapv [$ipid] [] = $daysapv;
						$patient_details[$ipid]['overall_sapv_days'] [] = $daysapv;
					}
				}
			}
			
			foreach  ($overall_sapv as $ipid=>$osapv){
				asort($osapv);
				$overall_sapv[$ipid] = array_values($osapv);
				$first_sapv_day[$ipid] = $overall_sapv[$ipid][0]; 
				$patient_details[$ipid]['first_sapv_day'] = $overall_sapv[$ipid][0]; 
			}

			foreach($periodDays_S as $k_pd => $v_pd)
			{
				$r1start = strtotime(date("Y-m-d 00:00:00", strtotime($v_pd[0])));
				$r1end = strtotime(date("Y-m-d 23:59:59", strtotime(end($v_pd))));
			
				foreach($patientsapvarr_res as $sapv_res)
				{
					$r2start = strtotime($sapv_res['verordnungam']);
					$r2end = strtotime($sapv_res['verordnungbis']);
						
					if(Pms_CommonData::isintersected($r1start, $r1end, $r2start, $r2end))
					{
						$active_with_sapv[] = $sapv_res['ipid'];
					}
				}
			}
			
			//BRB10543
			
			
			foreach($patient_details as $ipid=>$data){
				if($data ['first_sapv_day']){
					
// 					if(in_array($ipid,$dead_in_period)){
						$patient_details [$ipid]['case_duration']  = $pm->getDaysInBetween(date("Y-m-d", strtotime($data ['first_sapv_day'])), date("Y-m-d", strtotime($data ['discharge_death_date'])), false);
						$full_case_duration[$ipid] = $pm->getDaysInBetween(date("Y-m-d", strtotime($data ['first_sapv_day'])), date("Y-m-d", strtotime($data ['discharge_death_date'])), false);
// 					} else{
// 						$patient_details [$ipid]['case_duration']  = array();
// 					}
				}
			}
// 			print_r($full_case_duration["0d0b835ed5e25e26d1b60a7fdc1b44f54b0ce17f"]);
			
			//0d0b835ed5e25e26d1b60a7fdc1b44f54b0ce17f
			
			// 
// print_R($overall_patient_data["0aca348bd389110438d4783f8862cf7dfd9bc469"]); exit;
			foreach($full_case_duration as $ipid =>$case){
				
				foreach($case as $k=>$case_day){
 
					if(in_array(date("d.m.Y",strtotime($case_day)),$overall_patient_data [$ipid]['overall_active_days'])){
						$patient_details [$ipid]['sapv_duration'][] = date("d.m.Y",strtotime($case_day));
					}
				}
			}
			
// 			print_r($patient_details["c03200d5c2e1eaaf7a9496f082e4f36b03af1210"]['first_sapv_day']);
			// 			print_r("ssssssssssssssss");
// 			print_r($patient_details ["c03200d5c2e1eaaf7a9496f082e4f36b03af1210"]['case_duration'] ); exit;
			
// 			print_r($overall_patient_data["c03200d5c2e1eaaf7a9496f082e4f36b03af1210"]); exit;
			//
// 			print_r($patient_details ); exit;
			
			 
// 			print_R($patient_details['076148b59339c07bfca4d43800ffb54b0bedbec3']); 
// 			print_R($overall_fall_data); 
// 			exit;
			
			
			

			
			/* -------------------------Get client locations------------------------------------------ */
			$client_locations_id2type = Locations::getLocations($clientid,3);
			
			/* -------------------------Get client discharge locations------------------------------------------ */
			$client_discharge_locations = DischargeLocation::getDischargeLocation($clientid,0);
			
			foreach($client_discharge_locations as $k => $dl ){
				$discharge_locations[$dl['id']] = $dl;										
			}	
			
			/* -------------------------Get client Main Diagnosis type ------------------------------------------ */
			$dg = new DiagnosisType();
			$abb2 = "'HD'";
			$ddarr2 = $dg->getDiagnosisTypes($logininfo->clientid, $abb2);
			$comma = ",";
			$typeid = "'0'";
			$types = array();
			foreach($ddarr2 as $key => $valdia)
			{
				$typeid .=$comma . "'" . $valdia['id'] . "'";
				$comma = ", ";
				$types[] = $valdia['id'];
			}
			
			/* -------------------------Get Patients - Main Diagnosis data------------------------------------------ */
			$patdia = new PatientDiagnosis();
			$dianoarray = $patdia->get_multiple_finaldata($active_with_sapv, $types);
			
			foreach($dianoarray as $diangosis)
			{
				if(strlen($diangosis['icdnumber']) > 0 ){
					$diagnosisarr['diagno_icd'][$diangosis['ipid']][] = $diangosis['icdnumber'];
				}
				
				$diagnosisarr['diagno_text'][$diangosis['ipid']][] = $diangosis['diagnosis'];
			}
			
			foreach($diagnosisarr as $main_d=>$dpat)
			{
				foreach($dpat as $d_key => $d_val)
				{
					$patient_details[$d_key][$main_d] = trim(implode(";<br /> ", $d_val));
				}
			}
			
			
			//0aca348bd389110438d4783f8862cf7dfd9bc469
// 			print_r
			foreach($active_with_sapv as $pipid){
				$MasterData['data'][$pipid]['epid'] = $patient_details[$pipid]['epid'];
				$MasterData['data'][$pipid]['last_name'] = $patient_details[$pipid]['surname'];
				$MasterData['data'][$pipid]['first_name'] = $patient_details[$pipid]['firstname'];
				$MasterData['data'][$pipid]['first_sapv_ever'] = date('d.m.Y',strtotime($patient_details[$pipid]['first_sapv_day']));
				$MasterData['data'][$pipid]['main_diagno_icds'] = $patient_details[$pipid]['diagno_icd'];
				$MasterData['data'][$pipid]['main_diagno_text'] = $patient_details[$pipid]['diagno_text'];
				if(in_array($pipid,$dead_in_period)){
					$MasterData['data'][$pipid]['case_duration'] = count($patient_details [$pipid]['case_duration']);
					$MasterData['data'][$pipid]['sapv_duration'] = count($patient_details [$pipid]['sapv_duration']);
				} else{
					$MasterData['data'][$pipid]['case_duration'] = " ";
					$MasterData['data'][$pipid]['sapv_duration'] = " ";
				}
				
				if($patient_details [$pipid]['sapv_duration']){
					$MasterData['data'][$pipid]['loc_type_first_day'] = $overall_patient_data[$pipid]['location_day2type'][$patient_details [$pipid]['sapv_duration'][0]];
					
				} else{
					$MasterData['data'][$pipid]['loc_type_first_day'] = '';
				}
				if($patient_details [$pipid] ['discharge_death_date']){
					$MasterData['data'][$pipid]['loc_type_last_day'] = $overall_patient_data[$pipid]['location_day2type'][$patient_details [$pipid] ['discharge_death_date'] ];
				} else{
					$MasterData['data'][$pipid]['loc_type_last_day'] = "";
				}
			}
			
			return $MasterData;
			
		}
		

		
		public function sh_statistik($params){
			// report_id = 181
			// report_name =  SH Statistik - ISPC-1991
			/* 
			REPORT LINE: 1--> | SAPV-Gesamt-Patienten (Fälle) | count the "Fälle" these are in SH = count every "Erstverordnung" of all patients in report period" |
			REPORT LINE: 2--> | von den gesamten SAPV-Pat.  im Hospiz | show the ammount of the active patients in the report period which was minimum 1 day in hospiz location |
			REPORT LINE: 3--> | Verweildauer > = 28 Tage !! | ammount of "FÄLLE" which were longer than 28 active SAPV days. |
			REPORT LINE: 4--> | Verweildauer < = 7 Tage  | ammount of "FÄLLE" which were shorter or equal  than 7 active SAPV days. |
			REPORT LINE: 5--> | Verweildauer < = 3 Tage  | ammount of "FÄLLE" which were shorter or equal  than 3 active SAPV days. |
			REPORT LINE: 6--> | männliche SAPV-Patienten  | male patients |
			REPORT LINE: 7--> | weibliche SAPV-Patienten  | female patients |
			REPORT LINE: 8--> | SAPV-Gesamtverweildauer in Tagen für alle  SAPV-Pat. | count all active SAPV days in report period | 
			REPORT LINE: 9--> | durchschnittl. SAPV-Verweildauer pro Patient (über alle Pat.) | average SAPV Fall |
			REPORT LINE: 10--> | abgerechnete SAPV-Patienten  | count patients in the report period which had at least one day active with valid verordnung = at least one SAPV day |
			
			REPORT LINE: 11--> | abgerechnete Gesamttage (mind. ein Hausbesuch) | sum the *AMMOUNT* of "Anzahl Tagespauschale" (means billed DAYS) |
			REPORT LINE: 12--> | abgerechnete SAPV-Einsätze / Patient  | average ammount of billed days per patient |
			
			REPORT LINE: 13--> | Anzahl der gesamten SAPV-VO | how man Verordnungen were added in report period |
			REPORT LINE: 14--> | Anzahl der Folge-VO | ammount of the above with type "Folge-Verordnung" | 
			REPORT LINE: 15--> | keine SAPV-Bewilligung / incl. Ablehnung Folge-VO | ammount of Verordnungen with type "abgelehnt" |
			REPORT LINE: 16--> | Anzahl der Rückführung in die AAPV| we cant calculate that | 
			REPORT LINE: 17--> | Anzahl der abgerechneten telefonischen Beratungstage  |overall amount of billed days for PHONE | 
			 */
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
			
			
			$report_data =  array();
			$report_labels = array(
				"1" => "first_sapv_in_period",
				"2" => "patients_in_hospiz",	
				"3" => "sapv_longer_28days",
				"4" => "sapv_shorter_7days",
				"5" => "sapv_shorter_3days",					
				"6" => "male_patients",	
				"7" => "female_patients",
				"8" => "all_active_sapv_days",
				"9" => "sapv_fall_averege",
				"11" => "at_least_one_sapv_Day",
				"12" => "billable_days_cf",
				"13" => "average_billable_days_cf",
				"14" => "all_vv_STARTED_in_period",
				"15" => "all_follow_vv_STARTED_in_period",
				"16" => "all_denied_in_period",
				"17" => "aapv_details",
				"18" => "billable_days_xt",
			);
			
			
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			
			
			$phelathinsurance = new PatientHealthInsurance();
			$anlage14ctrl = new Anlage14Control();
			$sh_invoices = new ShInvoices();
			$sh_form = new Application_Form_ShInvoices();
			$p_list = new PriceList();
			
			
			$patientmaster = new PatientMaster();
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			
			$x = 0;
			foreach($period['start'] as $s => $start_date)
			{
				$report_dates[$x]['start'] = $start_date;
				$x++;
			}
			
			$v = 0;
			foreach($period['end'] as $e => $end_date)
			{
				$report_dates[$v]['end'] = $end_date;
				$v++;
			}
			
			
			$ipids = array();
			$standby = array();
			$active_patients = array();
			
			/* ################################################################################################### */
			/* ----------------- Report period days  -------------------- */
			
			foreach($period ['start'] as $keyd => $startDate)
			{
				$selected_moths[] = date("m.Y", strtotime($startDate));
				$period_days [] = $patientmaster->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
			
			$required_month = $selected_moths[0];
			
			
			foreach($period_days as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					
					if(strtotime($day) <= strtotime(date("Y-m-d"))){
						$final_period_days [] = $day;
					}
				}
			}
			$final_period_days = array_unique($final_period_days);
			$number_of_month_days =count($final_period_days) ;
			
			
			
			$months_details[$selected_month]['start'] = $final_period_days[0];
			$months_details[$selected_month]['days_in_month'] = $number_of_month_days;
			$months_details[$selected_month]['end'] = end($final_period_days);
			$months_details[$selected_month]['days'] = $final_period_days;
			
			
			
			
			
			/* ################################################################################################### */
			
			
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= 'convert(AES_DECRYPT(p.sex,"' . Zend_Registry::get('salt') . '") using latin1) as sex,';
			
			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
			
			$patient_days = Pms_CommonData::patients_days($conditions, $sql);
			
			$ipids = array_keys($patient_days); // return ipids
// 			$ipids = array("822fcb6b0e95e895c2bbbcee82be2747b5a6b52a"); // return ipids
			$report_data_extra['all_patients'] = $ipids; 
			if($_REQUEST['dbg'] == "4"){
				print_r($patient_days); exit;
			}
			
			
			if($_REQUEST['dbg'] == "3" ){
				print_R($report_data_extra);
			}
			
			foreach($patient_days as $ipid => $p_details)
			{
				$patient_details [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patient_details [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patient_details [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patient_details [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patient_details [$p_details['details'] ['ipid']] ['dateofbirth_ymd'] = $p_details['details'] ['birthd'];
				$patient_details [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				
				if($p_details['details'] ['sex'] == "1"){// | männliche SAPV-Patienten  | male patients |
					$report_data['male_patients'][] = $ipid; // REPORT LINE: 6
				}else if($p_details['details'] ['sex'] == "2"){//| weibliche SAPV-Patienten  | female patients |
					$report_data['female_patients'][] = $ipid;  // REPORT LINE: 7
				} else {
					$report_data_extra['unknown_gender'][] = $ipid; 
				}
				
				
				
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patient_details [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
					$patient_details [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patient_details [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
				}
					
				$patient_details [$p_details['details'] ['ipid']] ['zip'] = $p_details['details'] ['zip'];
				$family_doctors[] = $p_details['details'] ['familydoc_id'];
				$patient_details [$p_details['details'] ['ipid']] ['familydoc_id'] = $p_details['details'] ['familydoc_id'];
			
				$patient_details [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patient_details [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				
				
				
				$patient_details [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patient_details [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patient_details [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
				
				$patient_details [$p_details['details'] ['ipid']]['hospiz_days_cs'] = $p_details['hospiz']['real_days_cs'];
				$patient_details [$p_details['details'] ['ipid']]['hospiz_days_cs_no'] = $p_details['hospiz']['real_days_cs_no'];
				$patient_details [$p_details['details'] ['ipid']]['active_days_no_hospiz_days'] = $p_details['real_active_days_no'] - $p_details['hospiz']['real_days_cs_no'];
				
				if($p_details['hospiz']['real_days_cs_no'] >=1){
					//| von den gesamten SAPV-Pat.  im Hospiz | show the ammount of the active patients in the report period which was minimum 1 day in hospiz location |
					$report_data['patients_in_hospiz'][] = $p_details['details'] ['ipid']; // REPORT LINE: 2
				}
			}
 
			
			
			
// 			print_r($patient_details); exit;
			// get sapv details
			$all_sapv_data = $this->get_patients_all_valid_sapv($ipids,$final_period_days,$active_cond); 
			$full_sapv_data = $this->get_patients_all_valid_sapv($ipids,$final_period_days,false);
			if($_REQUEST['dbg']=="5"){
				
				print_R($all_sapv_data);
				exit;
			} 
// 				print_R($all_sapv_data);
// 				exit;
			if(!empty($all_sapv_data))
			{
				$sapv_fall_days = array();
				foreach($all_sapv_data as $ipid=>$sapv_data)
				{
					if(!empty($sapv_data['first_sapv_in_period'])){
						
						//| SAPV-Gesamt-Patienten (Fälle) | count the "Fälle" these are in SH = count every "Erstverordnung" of all patients in report period" |
						$report_data['first_sapv_in_period'][] = count($sapv_data['first_sapv_in_period']);  // REPORT LINE: 1
					}
					
					if(!empty($sapv_data['all_vv_STARTED_in_period'])){
						
						//| Anzahl der gesamten SAPV-VO | how man Verordnungen were added in report period |
						$report_data['all_vv_STARTED_in_period'][] = count($sapv_data['all_vv_STARTED_in_period']);  // REPORT LINE: 13
					}
					

					if(!empty($sapv_data['all_follow_vv_STARTED_in_period'])){
						//| Anzahl der Folge-VO | ammount of the above with type "Folge-Verordnung" |
						$report_data['all_follow_vv_STARTED_in_period'][] = count($sapv_data['all_vv_STARTED_in_period']);  // REPORT LINE: 14
					}
					
					
					if(!empty($sapv_data['sapv_days_in_period'])){
						foreach($sapv_data['sapv_days_in_period'] as $k=>$sday){
							if( in_array(date('d.m.Y',strtotime($sday)),$patient_details [$ipid]['real_active_days'])
								&& !in_array(date('d.m.Y',strtotime($sday)),$patient_details [$ipid]['hospital_days_cs'])
								&& !in_array(date('d.m.Y',strtotime($sday)),$patient_details [$ipid]['hospiz_days_cs'])
									){
								$valid_Sapv_Days_in_report[$ipid][] = $sday;
								
								//SAPV-Gesamt-Patienten (Fälle) | count the "Fälle" these are in SH = count every "Erstverordnung" of all patients in report period" |
								$report_data['all_active_sapv_days'][] = $sday; // REPORT LINE: 8
							}
						}
					}
					

					/*
					  if(!empty($sapv_data['all_denied_vv_in_period'])){
						//| keine SAPV-Bewilligung / incl. Ablehnung Folge-VO | ammount of Verordnungen with type "abgelehnt" |
						$report_data['all_denied_vv_in_period'][] = count($sapv_data['all_denied_vv_in_period']);  // REPORT LINE: 15
					}
					*/
					
					if(!empty($sapv_data['all_denied_in_period'])){
						//| keine SAPV-Bewilligung / incl. Ablehnung Folge-VO | ammount of Verordnungen with type "abgelehnt" |
						$report_data['all_denied_in_period'][] = count($sapv_data['all_denied_in_period']);  // REPORT LINE: 15
					}
					
					if(!empty($sapv_data['sapv_falls'])){
						foreach($sapv_data['sapv_falls'] as $sapv_id => $fall_data){
							
							//$fall_days_in_period[] = array_intersect($final_period_days,$fall_data['days']);
							
							if(isset($fall_data['days_no']) &&  $fall_data['days_no'] > 0 ){
								$sapv_fall_days[] = $fall_data['days_no'];
							}
						}
					}
					
					if(!empty( $sapv_data['sapv_days_in_period'])){
						$curent_period_days_sapv[$ipid] = $sapv_data['sapv_days_in_period'];

						array_walk($curent_period_days_sapv[$ipid], function(&$value) {
							$value = date('d.m.Y', strtotime($value));
						});
					}
				}
				

				$report_data['all_active_sapv_days'] = array_values($report_data['all_active_sapv_days']); 
				//durchschnittl. SAPV-Verweildauer pro Patient (über alle Pat.) 	average SAPV Fall 
				if(!empty($sapv_fall_days) ){
					$report_data['sapv_fall_averege'] = round( array_sum($sapv_fall_days) / count($sapv_fall_days), 2); //REPORT LINE: 9
				} 
 
				$report_data['sapv_longer_28days'] = array();
				$report_data['sapv_shorter_7days'] = array();
				$report_data['sapv_shorter_3days'] = array();
				$report_data['at_least_one_sapv_Day'] = array();
				
				foreach($ipids as $pipid){
					$valid_Sapv_Days_in_report[$pipid] = array_unique($valid_Sapv_Days_in_report[$pipid]);
					
					
					//| Verweildauer > = 28 Tage !! | ammount of "FÄLLE" which were longer than 28 active SAPV days. |
					if( count($valid_Sapv_Days_in_report[$pipid]) > 0 && count($valid_Sapv_Days_in_report[$pipid]) >= 28  && !in_array($pipid,$report_data['sapv_longer_28days']) ){
						$report_data['sapv_longer_28days'][] = $pipid;// REPORT LINE: 3
					}
					
					//| Verweildauer < = 7 Tage  | ammount of "FÄLLE" which were shorter or equal  than 7 active SAPV days. |
					if( count($valid_Sapv_Days_in_report[$pipid]) > 0 && count($valid_Sapv_Days_in_report[$pipid]) <= 7 && !in_array($pipid,$report_data['sapv_shorter_7days'])){
						$report_data['sapv_shorter_7days'][] = $pipid;// REPORT LINE: 4
					}
					
					//| Verweildauer < = 3 Tage  | ammount of "FÄLLE" which were shorter or equal  than 3 active SAPV days. |
					if( count($valid_Sapv_Days_in_report[$pipid]) > 0   && count($valid_Sapv_Days_in_report[$pipid]) <= 3 && !in_array($pipid,$report_data['sapv_shorter_3days'])){
						$report_data['sapv_shorter_3days'][] = $pipid;// REPORT LINE: 5
					}
					
					//| abgerechnete SAPV-Patienten  | count patients in the report period which had at least one day active with valid verordnung = at least one SAPV day |
					if(isset($valid_Sapv_Days_in_report[$pipid]) && count($valid_Sapv_Days_in_report[$pipid]) > 0 && !in_array($pipid,$report_data['at_least_one_sapv_Day'])){
						$report_data['at_least_one_sapv_Day'][] = $pipid;// REPORT LINE: 10
					}
				}
			}
			///Billable  
			
			$shortcuts_arr = array(
					'sh_beko',
					'sh_folgeko',
					'sh_doc_non_hospiz_visits',
					'sh_nur_non_hospiz_visits',
					'sh_other_visits',
					'sh_doc_hospiz_visits',
					'sh_telefonat',
					'sh_flatrate',
					//used only in custom totals
					'sh_nur_visits',
					'sh_nur_hospiz_visits',
			);
			
			$visits_shortcuts = array(
					'sh_doc_non_hospiz_visits',
					'sh_nur_non_hospiz_visits',
					'sh_other_visits',
					'sh_doc_hospiz_visits',
					//used only in custom totals
					'sh_nur_hospiz_visits',
					'sh_nur_non_hospiz_visits',
			);
			
			
			
			//patient HEALTH INSURANCE END
			//get patient TELEFONAT (XT) START
// 			$tel_array = PatientCourse::get_sh_patient_shortcuts_course($ipids, array('XT'));
			$tel_array = PatientCourse::get_shstatistik_patient_shortcuts_course($ipids, array('XT'));
			foreach($tel_array as $k_tel => $v_tel)
			{
				$v_tel_date = date('d.m.Y', strtotime($v_tel['done_date']));
			
				if(in_array($v_tel_date, $curent_period_days_sapv[$v_tel['ipid']]))
				{
					$patient_phones[$v_tel['ipid']][$v_tel_date]['sh_telefonat'][] = $v_tel;
				}
				$v_tel_date = '';
			}
			
			//get patient TELEFONAT (XT) END
			//get contact forms (ALL) START
			$contact_forms_all = ContactForms::get_sh_period_contact_forms($ipids, false, false, $curent_period_days_sapv);
			
			$current_form = array('shanlage14');
			$form_items = FormsItems::get_all_form_items($clientid, $current_form, 'v');
			
			foreach($form_items[$current_form[0]] as $k_item => $v_item)
			{
				$items_arr[] = $v_item['id'];
			}
			
			$items_contact_forms = Forms2Items::get_items_forms($clientid, $items_arr);
			
			foreach($contact_forms_all as $kcf => $day_cfs)
			{
				foreach($day_cfs as $k_dcf => $v_dcf)
				{
					//format contact form date to fit the format used in patients_days()
					$contact_form_date = date('d.m.Y', strtotime($kcf));
			
					//all contact forms mapped with id as key
					$contact_forms_details[$v_dcf['id']] = $v_dcf;
			
					if(in_array($v_dcf['form_type'], $items_contact_forms['sh_other_visits']))
					{
						//catch the contact forms added by users which belong to the client setting selected groups
						$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_other_visits'][] = $v_dcf['id'];
					}
			
					if(in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']) || in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_non_hospiz_visits']))
					{
						//all doctor contactforms
						$contact_forms[$v_dcf['ipid']][$contact_form_date]['doctor_all'][] = $v_dcf['id'];
			
						//split doctors contact forms into 2 entities (hospiz and non-hospiz)
						if((in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs']) || in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_hospiz_visits']))
						{
							$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_doc_hospiz_visits'][] = $v_dcf['id'];
						}
						else if((!in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs']) && !in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_doc_non_hospiz_visits']))
						{
							$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_doc_non_hospiz_visits'][] = $v_dcf['id'];
						}
					}
			
					if(in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']) || in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_non_hospiz_visits']))
					{
						//all nurse contactforms
						$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_nur_visits'][] = $v_dcf['id'];
			
						//nurse contact forms in hospiz and non hospiz(non hospiz is used in "Anzahl Tagespauschale")
						if((in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs']) || in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_hospiz_visits']))
						{
							$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_nur_hospiz_visits'][] = $v_dcf['id'];
						}
						//nurse contact forms in hospiz and non hospiz(non hospiz is used in "Anzahl Tagespauschale")
						else if((!in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospiz']['real_days_cs']) && !in_array($contact_form_date, $patient_days[$v_dcf['ipid']]['hospital']['real_days_cs'])) && in_array($v_dcf['form_type'], $items_contact_forms['sh_nur_non_hospiz_visits']))
						{
							$contact_forms[$v_dcf['ipid']][$contact_form_date]['sh_nur_non_hospiz_visits'][] = $v_dcf['id'];
						}
					}
				}
			}
			
			//get contact forms (ALL) END
			
			foreach($ipids as $kk_ipid => $vv_ipid)
			{
				$current_period[$vv_ipid]['start'] = $final_period_days[0];
				$current_period[$vv_ipid]['end'] =  end($final_period_days);
				$curent_period_days[$vv_ipid] =  $final_period_days;
			}
					
			//get saved data if any START
			$this->view->has_data = '0';
// 			$anlage14_res = $anlage14ctrl->get_period_anlage14_controlsheet($ipids, $current_period, true);
			$anlage14_res = $anlage14ctrl->get_period_shstatistik_anlage14_controlsheet($clientid,$ipids, $report_dates, true);

			if(!empty($anlage14_res))
			{
				foreach($anlage14_res as $k_res => $v_res)
				{
					if(!empty($v_res))
					{
						$has_data[$k_res] = '1';
					}
				}
			}
			
			//patient days
			$conditions_oov['client'] = $clientid;
			$conditions_oov['ipids'] = $ipids;
			$conditions_oov['periods'][0]['start'] = '2009-01-01';
			$conditions_oov['periods'][0]['end'] = date('Y-m-d');
			
			$sql_ol = 'e.epid, p.ipid, e.ipid,';
			$sql_ol .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql_ol .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql_ol .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql_ol .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql_ol .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql_ol .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			
			//beware of date d.m.Y format here
			$overall_patient_days = Pms_CommonData::patients_days($conditions_oov, $sql_ol);
			
			$master_data = array();
			foreach($ipids as $kvk_ipid => $vgv_ipid)
			{
				$master_data['patients'][$vgv_ipid]['details'] = $overall_patient_days[$vgv_ipid]['details'];
			}
			/// overall data for flatrate
			
			//load saved data and create master data array START
			foreach($ipids as $kk_ipid => $vv_ipid)
			{
				
				array_walk($curent_period_days[$vv_ipid], function(&$value) {
					$value = date('d.m.Y', strtotime($value));
				});
			
				
				
				$treated_days_all[$vv_ipid] = array_values($overall_patient_days[$vv_ipid]['treatment_days']);
				$pat_sapv_days_dmy[$vv_ipid] = $full_sapv_data[$vv_ipid]['sapv_days_overall'];
				
				array_walk($pat_sapv_days_dmy[$vv_ipid], function(&$value) {
					$value = date('d.m.Y', strtotime($value));
				});
			
				$treated_days_all[$vv_ipid] = array_intersect($treated_days_all[$vv_ipid], $pat_sapv_days_dmy[$vv_ipid]);
		
				$treated_days_all_ts[$vv_ipid] = $treated_days_all[$vv_ipid];
				array_walk($treated_days_all_ts[$vv_ipid], function(&$value) {
					$value = strtotime($value);
				});
		
				asort($treated_days_all_ts[$vv_ipid], SORT_NUMERIC);
	
				$treated_days_all_ts[$vv_ipid] = array_values(array_unique($treated_days_all_ts[$vv_ipid]));
	
				$pat_treatment_days[$vv_ipid] = $treated_days_all_ts[$vv_ipid];
				array_walk($pat_treatment_days[$vv_ipid], function(&$value) {
					$value = date('Y-m-d', $value);
				});
	
				$flatrate_treatment_days[$vv_ipid] = $treated_days_all_ts[$vv_ipid];

				if(count($flatrate_treatment_days[$vv_ipid]) > 0)
				{
					$flatrate_start[$vv_ipid] = $flatrate_treatment_days[$vv_ipid][0];
					$fl_days[$vv_ipid] = array();
					while(count($fl_days[$vv_ipid]) < '7')
					{
						if(in_array($flatrate_start[$vv_ipid], $flatrate_treatment_days[$vv_ipid]))
						{
							$fl_days[$vv_ipid][] = $flatrate_start[$vv_ipid];
						}
						else
						{
							$fl_days[$vv_ipid][] = $flatrate_treatment_days[$vv_ipid][0];
						}

						$flatrate_start[$vv_ipid] = strtotime('+1 day', $flatrate_start[$vv_ipid]);
					}
				}
				//get FLATRATE DAYS - END
				
				
				foreach($curent_period_days[$vv_ipid] as $k_day => $v_day)
				{
					$day_is_sapv = false;
					if(in_array($v_day, $curent_period_days_sapv[$vv_ipid]))
					{
						$day_is_sapv = true;
					}

					foreach($shortcuts_arr as $k_short => $v_short)
					{
						if(in_array($v_short, $visits_shortcuts))
						{
							//handle visitable shortcuts here
							//stop if day is in flatrate days
							//reverted ISPC-1131 - show visits in flatrate days
							if($anlage14_res[$vv_ipid][$v_day][$v_short] > 0)
							{
								$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
								$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $anlage14_res[$vv_ipid][$v_day][$v_short];

								if(strlen($first_active_day[$vv_ipid]) == '0')
								{
									$first_active_day[$vv_ipid] = $v_day;
								}
								$last_active_day[$vv_ipid] = $v_day;
							}
							else if(count($contact_forms[$vv_ipid][$v_day][$v_short]) > '0' && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) && $day_is_sapv)
							{
								$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
								$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = count($contact_forms[$vv_ipid][$v_day][$v_short]);

								if(strlen($first_active_day[$vv_ipid]) == '0')
								{
									$first_active_day[$vv_ipid] = $v_day;
								}
								$last_active_day[$vv_ipid] = $v_day;
							}
							else
							{
								$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
								$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
							}

							//add to totals
							$master_data['invoices'][$vv_ipid]['totals'][$v_short] += $master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'];

							//add to custom overall totals
							if($v_short == 'sh_nur_non_hospiz_visits' || $v_short == 'sh_doc_non_hospiz_visits')
							{
								//Anzahl Tagespauschale - total days doc/nurse non hospiz
								if($master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] == '1')
								{
									$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'][] = $v_day;
									$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']));
								}
							}
							else if($v_short == 'sh_nur_hospiz_visits' || $v_short == 'sh_doc_hospiz_visits')
							{
								//Tagespauschalen Hospiz - total visits doc/nurse in hospiz
								if($master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] == '1')
								{
									$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz'][] = $v_day;
									$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz'] = array_unique(array_values($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz']));
								}
							}

							$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_doc_nur_non_hospiz'] = count($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']);
							$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_doc_nur_hospiz'] = count($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz']);
						}
						else
						{
							
							
							//handle the rest of shortcuts here
							if($v_short == 'sh_beko')
							{
								if($anlage14_res[$vv_ipid][$v_day][$v_short] > '0')
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $anlage14_res[$vv_ipid][$v_day][$v_short];

									if(strlen($first_active_day[$vv_ipid]) == '0')
									{
										$first_active_day[$vv_ipid] = $v_day;
									}
									$last_active_day[$vv_ipid] = $v_day;
								}
								else if(strtotime($v_day) == strtotime($pat_treatment_days[$vv_ipid][0]) && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) && $day_is_sapv)
								{
								
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '1';

									if(strlen($first_active_day[$vv_ipid]) == '0')
									{
										$first_active_day[$vv_ipid] = $v_day;
									}
									$last_active_day[$vv_ipid] = $v_day;
								}
								else
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
								}

								$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_beko'] += $master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'];
							}

							if($v_short == 'sh_folgeko')
							{
								if($anlage14_res[$vv_ipid][$v_day][$v_short] > '0')
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $anlage14_res[$vv_ipid][$v_day][$v_short];
									if(strlen($first_active_day[$vv_ipid]) == '0')
									{
										$first_active_day[$vv_ipid] = $v_day;
									}
									$last_active_day[$vv_ipid] = $v_day;
								}
								else if(count($treated_days_all_ts[$vv_ipid]) >= '26' && strtotime($v_day) == $treated_days_all_ts[$vv_ipid][28] && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) && $day_is_sapv)
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '1';

									if(strlen($first_active_day[$vv_ipid]) == '0')
									{
										$first_active_day[$vv_ipid] = $v_day;
									}
									$last_active_day[$vv_ipid] = $v_day;
								}
								else
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
								}

								$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_folgeko'] += $master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'];
							}

							if($v_short == 'sh_flatrate')
							{
								if($anlage14_res[$vv_ipid][$v_day][$v_short] > '0')
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $anlage14_res[$vv_ipid][$v_day][$v_short];

									if(strlen($first_active_day[$vv_ipid]) == '0')
									{
										$first_active_day[$vv_ipid] = $v_day;
									}
									$last_active_day[$vv_ipid] = $v_day;

									//append flatrate into the Anzahl Tagespauschale
									$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'][] = $v_day;
									$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']));
								}
								else if(!empty($fl_days) && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) && $day_is_sapv)
								{
									if(in_array(strtotime($v_day), $fl_days[$vv_ipid]))
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '1';

										if(strlen($first_active_day[$vv_ipid]) == '0')
										{
											$first_active_day[$vv_ipid] = $v_day;
										}
										$last_active_day[$vv_ipid] = $v_day;

										//append flatrate into the Anzahl Tagespauschale
										$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'][] = $v_day;
										$master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz'] = array_unique(array_values($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']));
									}
									else
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
									}
								}
								else
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
								}
							}

							//added limit to shown/calculate phones only in days with no Anzahl Tagepauschale triggered(has visit and/or flatrate)
							if($v_short == 'sh_telefonat')
							{
								$qty_limit[$vv_ipid] = '0';
								if($anlage14_res[$vv_ipid][$v_day][$v_short] > 0)
								{
									//changed to show maximum 2 phones (same way as it was calculated)
									if($anlage14_res[$vv_ipid][$v_day][$v_short] >= '2')
									{
										$qty_limit[$vv_ipid] = "2";
									}
									else
									{
										$qty_limit[$vv_ipid] = $anlage14_res[$vv_ipid][$v_day][$v_short];
									}

									if($anlage14_res[$vv_ipid][$v_day][$v_short] > '0')
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $qty_limit[$vv_ipid];

										if(strlen($first_active_day[$vv_ipid]) == '0')
										{
											$first_active_day[$vv_ipid] = $v_day;
										}
										$last_active_day[$vv_ipid] = $v_day;
									}
									else
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
									}
								}
								else if(!in_array($v_day, $master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']) && !in_array(strtotime($v_day), $fl_days[$vv_ipid]) && !array_key_exists($v_day, $anlage14_res[$vv_ipid]) && $day_is_sapv
										&& !in_array(date("d.m.Y",strtotime($v_day)), $master_data['patients'][$v_ipid]['invoice_data']['hospital_real_days_cs']))
								{
									//changed to show maximum 2 phones (same way as it was calculated)
									if(count($patient_phones[$vv_ipid][$v_day][$v_short]) >= '2')
									{
										$qty_limit[$vv_ipid] = "2";
									}
									else
									{
										$qty_limit[$vv_ipid] = count($patient_phones[$vv_ipid][$v_day][$v_short]);
									}

									if(count($patient_phones[$vv_ipid][$v_day][$v_short]) > '0')
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '1';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = $qty_limit[$vv_ipid];

										if(strlen($first_active_day[$vv_ipid]) == '0')
										{
											$first_active_day[$vv_ipid] = $v_day;
										}
										$last_active_day[$vv_ipid] = $v_day;
									}
									else
									{
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
										$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
									}
								}
								else
								{
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['checked'] = '0';
									$master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'] = '0';
								}

								//Anzahl Telefonpauschale - total phones with limit per day of 2 qty
								$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_phones'] += $qty_limit[$vv_ipid];
							}

							//add to totals
							$master_data['invoices'][$vv_ipid]['totals'][$v_short] += $master_data['invoices'][$vv_ipid][$v_day][$v_short]['qty'];
						}

						$master_data['patients'][$vv_ipid]['invoice_data']['first_active_day'] = $first_active_day[$vv_ipid];
						$master_data['patients'][$vv_ipid]['invoice_data']['last_active_day'] = $last_active_day[$vv_ipid];

						$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_doc_nur_non_hospiz'] = count($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_non_hospiz']);
						$master_data['invoices'][$vv_ipid]['custom_totals']['sh_overall_doc_nur_hospiz'] = count($master_overall_data['invoices'][$vv_ipid]['overall_doc_nur_hospiz']);
					}
					//						}
				}
			}
			//load saved data and create master data array END
// 			$master_price_list = $p_list->get_period_price_list(date('Y-m-d', strtotime($master_data['patients'][$v_ipid_pat]['invoice_data']['period']['start'])), date('Y-m-d', strtotime($master_data['patients'][$v_ipid_pat]['invoice_data']['period']['end'])));
			
			$report_billing_visits_shs = array("sh_doc_non_hospiz_visits","sh_nur_non_hospiz_visits","sh_other_visits");
			$report_billing_telefonat_shs = array("sh_telefonat");
			
			foreach($master_data['invoices'] as $k_ipid => $v_invoice_data){
				
				$billable_days['full'][$k_ipid ] = array();
				$billable_days['visits'][$k_ipid ] = array();
				$billable_days['phones'][$k_ipid ] = array();
				
				foreach($v_invoice_data as $bill_date=>$date_values){
					foreach($date_values as $sh=>$sh_data){
						if(!in_array($bill_date,$billable_days['full'][$k_ipid ]) && (in_array($sh,$report_billing_visits_shs)|| in_array($sh,$report_billing_telefonat_shs)) && $sh_data['qty'] > 0 ){
							$billable_days['full'][$k_ipid ][] = $bill_date; 
						}			
						if(!in_array($bill_date,$billable_days['visits'][$k_ipid ]) && in_array($sh,$report_billing_visits_shs) && $sh_data['qty'] > 0 ){
							$billable_days['visits'][$k_ipid ][] =$bill_date; 
						}			
						if(!in_array($bill_date,$billable_days['phones'][$k_ipid ]) && in_array($sh,$report_billing_telefonat_shs) && $sh_data['qty'] > 0 ){
							$billable_days['phones'][$k_ipid ][] =$bill_date; 
						}			
					}
				}
			}
			
			foreach($ipids as $ik => $ipid_value)
			{
				$billable_days_array[] = count($billable_days['visits'][$ipid_value ]);
				$billable_phone_days_array[] = count($billable_days['phones'][$ipid_value ]);
			}
			
			if(!empty($billable_days_array)){
				$report_data['billable_days_cf'] = array_sum($billable_days_array);
				$report_data['average_billable_days_cf'] = round( array_sum($billable_days_array) / count($ipids), 2); //REPORT LINE: 9
			}
			
			if(!empty($billable_phone_days_array)){
				$report_data['billable_days_xt'] = array_sum($billable_phone_days_array);
			}
			$simple_vales = array("sapv_fall_averege","billable_days_cf","average_billable_days_cf","billable_days_xt");
			$row = 0 ;
			$translate_sh = $this->view->translate('sh_statistic');
			
			if($_REQUEST['dbg'] == "3" ){
				print_R($report_data); 
				
				
				print_R("\n");
				print_R("\n");
				print_R("SAPV DATAAA");
				print_R("\n");
				print_R("\n");
				print_R($all_sapv_data);
				exit;
			}
			
			foreach($report_labels as $order=>$label){
				$MasterData['data'][$row]["column"] = $translate_sh [$label];

				if(!empty($report_data[$label])){
					if(in_array($label,$simple_vales)){
						$MasterData['data'][$row]["value"] = $report_data[$label];
					} else{
						$MasterData['data'][$row]["value"] = count($report_data[$label]);
					}
				} else{
					$MasterData['data'][$row]["value"] = '';
				}
				
				$row++;
				
			}
 
			
			return $MasterData;
			
			
		}
		
		
		private function voluntaryworkersvisits2($params)
		{
			// ISPC - 1677
			// report_id = 180 NEW
			// report_name = Ehrenamtliche Besuche II
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
		
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$all = array();
			$dead = array();
			$standby = array();
				
			if($onlyactive == 0)
			{
				$all = $this->getActivePatients($quarterarr, $yeararr, $montharr);
					
				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}
					
				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}
			
			$ipids = '';
			$masterdata = array();
			
			if(empty($ipidarr))
			{
				return $masterdata;
			}	
				
			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}
			
			$drop = Doctrine_Query::create()
				->select('*')
				->from('PatientHospizvizits')
				->where('ipid in (' . substr($ipids, 0, -1) . ') and isdelete=0')
				->andWhere('' . str_replace('%date%', 'hospizvizit_date', $active_cond['date_sql']) . '');
				$hospizvizits = $drop->fetchArray();
			
			//$ipid_str = '';
			if (empty($hospizvizits))
			{
				return $masterdata;
			}
			
			$ipids_viz = array();
			//grund details
			$vrs = new HospizVisitsTypes();
			$vrsarray = $vrs->get_client_hospiz_visits_types($clientid);
			//var_dump($vrsarray); exit;
			foreach($hospizvizits as $k => $h_data)
			{
				//$ipid_str .= '"' . $h_data['ipid'] . '",';
				$ipids_viz[] = $h_data['ipid'];
				$h_data['grunddet'] = $vrsarray[$h_data['grund']]['grund'];
				$patient_h_visits[$h_data['vw_id']] [$h_data['ipid']][ strtotime($h_data['hospizvizit_date']) ] [] = $h_data;
			}
			
			//print_r($patient_h_visits); exit;
			//if($ipid_str != '')
			//{
			$connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
			if($connected_client){
				$clientid_for_vw = $connected_client;
			} else{
				$clientid_for_vw = $logininfo->clientid;
			}
					
			//vw details
			$vws = new Voluntaryworkers();
			$vwsarray = $vws->getClientsVoluntaryworkers($clientid_for_vw);
			
			foreach($vwsarray as $k=>$vw_data)
			{
				$vw_details[$vw_data['id']]['last_name']  = trim($vw_data['last_name']);
				$vw_details[$vw_data['id']]['first_name']  = trim($vw_data['first_name']);	
			}
		
			//patient details
			$patientvw = Doctrine_Query::create()
				->select("e.epid, p.ipid, AES_DECRYPT(last_name,'" . Zend_Registry::get('salt') . "') as last_name, AES_DECRYPT(first_name,'" . Zend_Registry::get('salt') . "') as first_name, birthd")
				->from('PatientMaster p')
				//->Where('p.ipid in (' . substr($ipid_str, 0, -1) . ') and isdelete=0')
				->whereIn('p.ipid', $ipids_viz)
				->andWhere('isdelete = 0')
				->andWhere('isstandby = 0')
				->andWhere('isstandbydelete = 0');
		
			$patientvw->leftJoin("p.EpidIpidMapping e");
			$patientvw->andWhere($whereepid . 'e.clientid = ' . $clientid);
			$patientvwarray = $patientvw->fetchArray();
		
			//print_r($patientvwarray); exit;
		
			foreach($patientvwarray as $pat)
			{
				$patdetails[$pat['ipid']]['ipid'] = $pat['ipid'];
				$patdetails[$pat['ipid']]['lastname'] = $pat['last_name'];
				$patdetails[$pat['ipid']]['firstname'] = $pat['first_name'];
				$patdetails[$pat['ipid']]['epid'] = $pat["EpidIpidMapping"]['epid'];
			}
					
			foreach($patient_h_visits as $kvw=>$vwvisits_arr)
			{
				//ksort($vwvisits_arr);
				foreach($vwvisits_arr as $kipid => $ipidvis_arr)
				{
					ksort($ipidvis_arr);
					$pat_id = $patdetails[$kipid]['epid'];
					foreach($ipidvis_arr as $dayk=>$dayvis)
					{
						$tpatient_h_visits[$kvw][$pat_id][] = $dayvis;				
					}
				}
			}
		
			foreach($tpatient_h_visits as $kvvw=>$vvvw)
			{
				ksort($vvvw);
				foreach($vvvw as $pvk=>$pvv)
				{
					foreach($pvv as $kvv=>$dvv)
					{
						$spatient_h_visits[$kvvw][] = $dvv;
					}
				}
			}
		
			//print_r($spatient_h_visits); exit;
					
			foreach($spatient_h_visits as $keyvw => $vwvisits)
			{
				$i = 0;
				$masterdata['data'][$keyvw] = array();
					
				$masterdata['data'][$keyvw]['vw_lastname'] = $vw_details[$keyvw]['last_name'];
				$masterdata['data'][$keyvw]['vw_firstname'] = $vw_details[$keyvw]['first_name'];
				$pkey = $vwvisits[0][0]['ipid'];
		
				$vw_sum_p = array();
					
				foreach($vwvisits as $kpvis=>$vpvis)
				{
					if($pkey != $vpvis[0]['ipid'])
					{
						$pkey = $vpvis[0]['ipid'];
						$masterdata['data'][$keyvw]['visits'][$i]['summ'] = $vw_sum_p;
						$vw_sum_p = array();
						$i++;
					}
		
					foreach($vpvis as $kday=>$vday)
					{
						$masterdata['data'][$keyvw]['visits'][$i]['epid'] = $patdetails[$vday['ipid']]['epid'];
						$masterdata['data'][$keyvw]['visits'][$i]['pat_lastname'] = $patdetails[$vday['ipid']]['lastname'];
						$masterdata['data'][$keyvw]['visits'][$i]['pat_firstname'] = $patdetails[$vday['ipid']]['firstname'];
						$masterdata['data'][$keyvw]['visits'][$i]['visit_date'] = $vday['hospizvizit_date'];
						$masterdata['data'][$keyvw]['visits'][$i]['visit_time_count'] = $vday['besuchsdauer'];
						$masterdata['data'][$keyvw]['visits'][$i]['visit_reason'] = $vday['grunddet'];
						$masterdata['data'][$keyvw]['visits'][$i]['driving_time_count'] = $vday['fahrtzeit'];
						$vw_sum[$keyvw]['number_of_visits'] += 1;
						$vw_sum[$keyvw]['visit_time_sum'] += $vday['besuchsdauer'];
						$vw_sum[$keyvw]['driving_time_sum'] += $vday['fahrtzeit'];
								
						$vw_sum_p['number_of_visits'] += 1;
						$vw_sum_p['visit_time_sum'] += $vday['besuchsdauer'];
						$vw_sum_p['driving_time_sum'] += $vday['fahrtzeit'];
								
						$i++;
					}
							
		
				}
				$masterdata['data'][$keyvw]['visits'][$i]['summ'] = $vw_sum_p;
				$vw_sum_p = array();
				$i++;
						
				$masterdata['data'][$keyvw]['summ'] = $vw_sum[$keyvw];
			}
			//print_r($masterdata); exit;
		
			return $masterdata;
		
		//}
				
		}
		
		public function hessen_patient_statistics_active_3_old($params)
		{
			//Hessen
			// report_id = 184
			// report_name = Hessen Statistik- Patient III
			// the report shows admission age for active patients.
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
			
			$pm = new PatientMaster ();
		
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
		
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= 'convert(AES_DECRYPT(p.sex,"' . Zend_Registry::get('salt') . '") using latin1) as sex,';
		
			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
		
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
		
			$valid_ipids = array_keys($active_patient_details); // return ipids
			//print_r($valid_ipids); exit;
			$masterdata = array();
			
			if(empty($valid_ipids))
			{
				return $masterdata;
			}
			
			$order = "start ASC";
			$actp = new PatientActive();
			$activep_data = $actp->get_patient_fall($valid_ipids, $order);
			
			foreach($activep_data as $kactp=>$vactp)
			{
				$activepatdata[$vactp['ipid']][] = $vactp;
			}
			
			//print_r($activepatdata); exit;
			$genders = Pms_CommonData::getGender();
			// patient health insurance
			$phelathinsurance = new PatientHealthInsurance();
		
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($valid_ipids);
			//var_dump($healthinsu_array); exit;
			foreach($healthinsu_array as $keyh=>$valh)
			{
				$pathealthinsuarr[$valh['ipid']] = $valh;
			}

			foreach($active_patient_details as $ipid => $p_details)
			{
				$masterdata['data'][$ipid]['epid'] = $p_details['details'] ['epid'];
				$masterdata['data'][$ipid]['birthd'] = date("d.m.Y", strtotime($p_details['details'] ['birthd'])).'<br/>'.date("d.m.Y", strtotime($activepatdata[$ipid][0]['start']));
				//$masterdata['data'][$ipid]['admission_age'] = $pm->GetAge($p_details['details'] ['birthd'], date("Y-m-d", strtotime($p_details['admission_days'][0])), true);
				$masterdata['data'][$ipid]['admission_age'] = $pm->GetAge($p_details['details'] ['birthd'], $activepatdata[$ipid][0]['start'], true);
				$masterdata['data'][$ipid]['gender'] = ($p_details['details'] ['sex'] != '' ? $genders[$p_details['details'] ['sex']] : '');
				$masterdata['data'][$ipid]['zip'] = $p_details['details'] ['zip'];
				$masterdata['data'][$ipid]['healthinsurance_name'] = $pathealthinsuarr[$ipid]['company_name'];
			}
		//	var_dump($masterdata); exit;
		return $masterdata;
		}
		
		public function hessen_patient_statistics_active_3($params)
		{
			//Hessen
			// report_id = 184
			// report_name = Hessen Statistik- Patient III
			// the report shows admission age for active patients.
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			//$onlyactive = $params['onlyactive'];
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
				
			$pm = new PatientMaster ();
		
			$valid_ipids = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			$masterdata = array();
				
			if(empty($valid_ipids))
			{
				return $masterdata;
			}
			
			$sql = 'p.*, e.epid, ';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
			$sql .= 'convert(AES_DECRYPT(p.sex,"' . Zend_Registry::get('salt') . '") using latin1) as sex,';
		
			$actpatdet = Doctrine_Query::create()
			->select($sql)
			->from('PatientMaster p')
			->whereIn("ipid", $valid_ipids)
			->andWhere('isdelete = 0');   
			$actpatdet->leftJoin("p.EpidIpidMapping e");
			$actpatdet->andWhere($whereepid . 'e.clientid = ' . $clientid); 
			$active_patients = $actpatdet->fetchArray();
			
			foreach($active_patients as $kactp=>$vactp)
			{
				$active_patient_details[$vactp['ipid']] = $vactp;
				$active_patient_details[$vactp['ipid']]['epid'] = $vactp['EpidIpidMapping']['epid'];
			}
			//print_r($active_patient_details); exit;		
			
			$order = "start ASC";
			$actp = new PatientActive();
			$activep_data = $actp->get_patient_fall($valid_ipids, $order);
				
			foreach($activep_data as $kactp=>$vactp)
			{
				$activepatdata[$vactp['ipid']][] = $vactp;
			}
				
			//print_r($activepatdata); exit;
			$genders = Pms_CommonData::getGender();
			// patient health insurance
			$phelathinsurance = new PatientHealthInsurance();
		
			$healthinsu_array = $phelathinsurance->get_patients_healthinsurance($valid_ipids);
			//var_dump($healthinsu_array); exit;
			foreach($healthinsu_array as $keyh=>$valh)
			{
				$pathealthinsuarr[$valh['ipid']] = $valh;
			}
		
			foreach($active_patient_details as $ipid => $p_details)
			{
				$masterdata['data'][$ipid]['epid'] = $p_details['epid'];
				$masterdata['data'][$ipid]['birthd'] = date("d.m.Y", strtotime($p_details ['birthd']));
				//$masterdata['data'][$ipid]['admission_age'] = $pm->GetAge($p_details['details'] ['birthd'], date("Y-m-d", strtotime($p_details['admission_days'][0])), true);
				$masterdata['data'][$ipid]['admission_age'] = $pm->GetAge($p_details ['birthd'], $activepatdata[$ipid][0]['start'], true);
				$masterdata['data'][$ipid]['gender'] = ($p_details ['sex'] != '' ? $genders[$p_details ['sex']] : '');
				$masterdata['data'][$ipid]['zip'] = $p_details ['zip'];
				$masterdata['data'][$ipid]['healthinsurance_name'] = $pathealthinsuarr[$ipid]['company_name'];
			}

			return $masterdata;
		}
		
		public function sapv_tage_ii_erstverordnungen($params)
		{
			// report id = 190 ISPC - 2085
			// report_name = SAPV Tage Erstverordnungen 
			// copy after report id = 117
			// hospital admission and hospital discharged counted as sapv days
		
			$quarterarr = $params ['quarterarr'];
			$yeararr = $params ['yeararr'];
			$montharr = $params ['montharr'];
			$includearr = $params ['includearr'];
			$onlyactive = $params ['onlyactive'];
		
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
		
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$period = Pms_CommonData::getPeriodDates($quarterarr, $yeararr, $montharr);
		
			foreach($period ['start'] as $keyd => $startDate)
			{
				$report_period_array[$keyd]['start'] = date("Y-m-d", strtotime($startDate));
				if(strtotime($period ['end'] [$keyd]) > strtotime(date("Y-m-d")))
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d");
				}
				else
				{
					$report_period_array[$keyd]['end'] = date("Y-m-d", strtotime($period ['end'] [$keyd]));
				}
			}
		
			$sql = 'e.epid, p.ipid, e.ipid,';
			$sql .= 'AES_DECRYPT(p.last_name,"' . Zend_Registry::get('salt') . '") as last_name,';
			$sql .= 'AES_DECRYPT(p.first_name,"' . Zend_Registry::get('salt') . '") as first_name,';
			$sql .= 'convert(AES_DECRYPT(p.zip,"' . Zend_Registry::get('salt') . '") using latin1) as zip,';
			$sql .= 'convert(AES_DECRYPT(p.street1,"' . Zend_Registry::get('salt') . '") using latin1) as street1,';
			$sql .= 'convert(AES_DECRYPT(p.city,"' . Zend_Registry::get('salt') . '") using latin1) as city,';
			$sql .= 'convert(AES_DECRYPT(p.phone,"' . Zend_Registry::get('salt') . '") using latin1) as phone,';
		
			$conditions['periods'] = $report_period_array;
			$conditions['client'] = $clientid;
		
			$active_patient_details = Pms_CommonData::patients_days($conditions, $sql);
		
			$ipidarr = array_keys($active_patient_details); // return ipids
			
			$MasterData = array();
			if(count($ipidarr) == 0)
			{
				return $MasterData;
			}
		
			foreach($active_patient_details as $ipid => $p_details)
			{
				$patientDetails [$p_details['details'] ['ipid']] ['epid'] = $p_details['details'] ['epid'];
				$patientDetails [$p_details['details'] ['ipid']] ['surname'] = $p_details['details'] ['last_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['firstname'] = $p_details['details'] ['first_name'];
				$patientDetails [$p_details['details'] ['ipid']] ['dateofbirth'] = date("d.m.Y", strtotime($p_details['details'] ['birthd']));
				$patientDetails [$p_details['details'] ['ipid']] ['admissiondate'] = date("d.m.Y", strtotime($p_details['details'] ['admission_date']));
				if($p_details['details']['isdischarged'] == '1')
				{
					$dischargedipid_arr[] = $p_details['details']['ipid'];
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = end($p_details['discharge']);
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate_death'] = implode("<", $p_details['discharge_dead']);
				}
				else
				{
					$patientDetails [$p_details['details'] ['ipid']] ['dischargedate'] = "-";
				}
		
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days'] = $p_details['real_active_days'];
				$patientDetails [$p_details['details'] ['ipid']]['real_active_days_no'] = $p_details['real_active_days_no'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs'] = $p_details['hospital']['real_days_cs'];
				$patientDetails [$p_details['details'] ['ipid']]['hospital_days_cs_no'] = $p_details['hospital']['real_days_cs_no'];
				$patientDetails [$p_details['details'] ['ipid']]['active_days_no_hospital_days'] = $p_details['real_active_days_no'] - $p_details['hospital']['real_days_cs_no'];
			}
		
			/* --------------------------- Get Report period days list ---------------------------------- */
			$pm = new PatientMaster ();
			foreach($period ['start'] as $keyd => $startDate)
			{
				$periodDays [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($startDate)), date("Y-m-d", strtotime($period ['end'] [$keyd])), false);
			}
			foreach($periodDays as $keyp => $daysp)
			{
				foreach($daysp as $day)
				{
					$finalPeriodDays [] = $day;
				}
			}
			$finalPeriodDays = array_unique($finalPeriodDays);
			/* --------------------------- Get sapv days of patients for first sapv periods---------------------------------- */
			$s = array('%date_start%', '%date_end%');
			$r = array('verordnungam', 'verordnungbis');
		
			$sapv = Doctrine_Query::create()
			->select('*')
			->from('SapvVerordnung')
			->andWhere('isdelete=0 and ((' . str_replace($s, $r, $active_cond ['interval_sql']) . '))')
			->andWhereIn('ipid', $ipidarr)
			->andWhere('status != "1"')
			->orderBy("ipid ASC, verordnungam ASC");
			$sapvarr = $sapv->fetchArray();
			
			//SAPV erstverordnungen patient data + list days sapv
			$p_ipid = "";
			foreach($sapvarr as $keys => $sapv)
			{
				if($sapv['ipid'] != $p_ipid)
				{
					$p_ipid = $sapv['ipid'];
					if($sapv['sapv_order'] == 0 || $sapv['sapv_order'] == 1)
					{
						$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
					}
				}
				else 
				{					
					if($sapv['sapv_order'] == 1)
					{
						$patientData [$sapv ['ipid']] ['sapvDaysList'] [] = $pm->getDaysInBetween(date("Y-m-d", strtotime($sapv ['verordnungam'])), date("Y-m-d", strtotime($sapv ['verordnungbis'])), false);
					}
				}
			}
			
			foreach($patientData as $ipid => $sapvdata)
			{
				foreach($sapvdata ['sapvDaysList'] as $group => $spvdata)
				{
					foreach($spvdata as $key => $daysapv)
					{
						if(in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['real_active_days'])  // active day
								&& !in_array(date('d.m.Y', strtotime($daysapv)), $patientDetails [$ipid]['hospital_days_cs']) // not in hospital days
								&& !in_array(date('Y-m-d', strtotime($daysapv)), $patientDetails [$ipid] ['sapv_active_days']) // does not exist already in array
								)
						{
							$patientDetails [$ipid] ['sapv_active_days'] [] = $daysapv;
						}
					}
				}
			}
		
		
			foreach($patientDetails as $ipid => $patDet)
			{
				$MasterData ['data'] [$ipid] ['epid'] = $patientDetails [$ipid] ['epid'];
				$MasterData ['data'] [$ipid] ['lastname'] = $patientDetails [$ipid] ['surname'];
				$MasterData ['data'] [$ipid] ['firstname'] = $patientDetails [$ipid] ['firstname'];
				$MasterData ['data'] [$ipid] ['dateofbirth'] = $patientDetails [$ipid] ['dateofbirth'];
				$MasterData ['data'] [$ipid] ['admissiondate'] = $patientDetails [$ipid] ['admissiondate'];
				$MasterData ['data'] [$ipid] ['dischargedate'] = $patientDetails [$ipid] ['dischargedate'];
				$MasterData ['data'] [$ipid] ['sapvtage'] = count($patientDetails [$ipid] ['sapv_active_days']);
				$MasterData ['data'] [$ipid] ['treateddays'] = $patientDetails [$ipid]['real_active_days_no'];
				$MasterData ['data'] [$ipid] ['dotminushospitaldays'] = $patientDetails [$ipid]['active_days_no_hospital_days'];
				$MasterData ['data'] [$ipid] ['hospitaldays'] = $patientDetails [$ipid]['hospital_days_cs_no'];
			}
			// 	print_r($MasterData);exit;
			return $MasterData;
		}
		
		private function voluntaryworkersvisits2bis($params)
		{
			// report_id = 191
			// ISPC - 2116 - (copy the report Ehrenamtliche Besuche -> Ehrenamtliche Besuche II BIS and:
			//remove the patient coloumns so just the VW coloumns remain; 
			//add coloumns for Nachtschicht and TYPE of VW work. 
			$quarterarr = $params['quarterarr'];
			$yeararr = $params['yeararr'];
			$montharr = $params['montharr'];
			$includearr = $params['includearr'];
			$onlyactive = $params['onlyactive'];
	
			$logininfo = new Zend_Session_Namespace('Login_Info');
			$clientid = $logininfo->clientid;
			$whereepid = $this->getDocCondition();
		
			$active_cond = $this->getTimePeriod($quarterarr, $yeararr, $montharr);
			$all = array();
			$dead = array();
			$standby = array();
				
			if($onlyactive == 0)
			{
				$all = $this->getActivePatients($quarterarr, $yeararr, $montharr);
					
				if($includearr['dead'] == 1)
				{
					$dead = $this->getDeadPatients($quarterarr, $yeararr, $montharr);
				}
				if($includearr['standby'] == 1)
				{
					$standby = $this->getStandbyPatients($quarterarr, $yeararr, $montharr);
				}
					
				$ipidarr = array_merge($all, $dead, $standby);
			}
			else
			{
				$ipidarr = $this->getActivePatients($quarterarr, $yeararr, $montharr);
			}
			
			$ipids = '';
			$masterdata = array();
			
			if(empty($ipidarr))
			{
				return $masterdata;
			}	
				
			foreach($ipidarr as $val)
			{
				$ipids .= "'" . $val . "',";
			}
		
			$drop = Doctrine_Query::create()
				->select('*')
				->from('PatientHospizvizits')
				->where('ipid in (' . substr($ipids, 0, -1) . ') and isdelete=0')
				->andWhere('' . str_replace('%date%', 'hospizvizit_date', $active_cond['date_sql']) . '')
				->orderBy('vw_id ASC, hospizvizit_date ASC');
				$hospizvizits = $drop->fetchArray();
			
			//$ipid_str = '';
			if (empty($hospizvizits))
			{
				return $masterdata;
			}
			
			//grund details
			$vrs = new HospizVisitsTypes();
			$vrsarray = $vrs->get_client_hospiz_visits_types($clientid);
			//var_dump($vrsarray); exit;
			foreach($hospizvizits as $k => $h_data)
			{
				$h_data['grunddet'] = $vrsarray[$h_data['grund']]['grund'];
				$patient_h_visits[$h_data['vw_id']][] = $h_data;
			}			
			//print_r($patient_h_visits); exit;
			
			$connected_client = VwGroupAssociatedClients::connected_parent($logininfo->clientid);
			if($connected_client){
				$clientid_for_vw = $connected_client;
			} else{
				$clientid_for_vw = $logininfo->clientid;
			}
					
			//vw details
			$vws = new Voluntaryworkers();
			$vwsarray = $vws->getClientsVoluntaryworkers($clientid_for_vw);
			
			foreach($vwsarray as $k=>$vw_data)
			{
				if(trim($vw_data['last_name']) != "")
				{
					$vw_details[$vw_data['id']]['name'] = trim($vw_data['last_name']) . ", " . trim($vw_data['first_name']);
				}
				else
				{
					$vw_details[$vw_data['id']]['name']  = trim($vw_data['first_name']);
				}
			}
		
			foreach($patient_h_visits as $keyworker => $worker)
			{
				$masterdata['data'][$keyworker]['voluntaryworker'] = $vw_details[$keyworker]['name'];
				$viz = 0;
				foreach($worker as $kv=>$vv)
				{					
					$masterdata['data'][$keyworker]['visits'][$viz]['beginvisit'] = date('d.m.Y', strtotime($vv['hospizvizit_date']));				
					$masterdata['data'][$keyworker]['visits'][$viz]['endvisit'] = date('d.m.Y', strtotime($vv['hospizvizit_date']));
					$masterdata['data'][$keyworker]['visits'][$viz]['duration'] = $vv['besuchsdauer'];
					if($vv['nightshift'] == 1)
					{
						$masterdata['data'][$keyworker]['visits'][$viz]['duration_nightshift'] = $vv['besuchsdauer'];
					}
					else 
					{
						$masterdata['data'][$keyworker]['visits'][$viz]['duration_nightshift'] = '';
					}
					$masterdata['data'][$keyworker]['visits'][$viz]['distance'] = $vv['fahrtkilometer'];
					$masterdata['data'][$keyworker]['visits'][$viz]['visit_reason'] = $vv['grunddet'];
					$viz++;
				}
			}
			//print_r($masterdata);exit;
			return $masterdata;
		}
		
	}

?>