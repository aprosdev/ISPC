<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('AssessmentProblemCourse', 'MDAT');

/**
 * BaseAssessmentProblemCourse
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $assessment_problems_id
 * @property timestamp $course_date
 * @property integer $how_long
 * @property integer $driving_distance
 * @property string $freetext
 * @property integer $isdelete
 * @property integer $create_user
 * @property timestamp $create_date
 * @property integer $change_user
 * @property timestamp $change_date
 * 
 * @package    ISPC
 * @subpackage Application (2019-01-04)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseAssessmentProblemCourse extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('assessment_problem_course');

        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('assessment_problems_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('course_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'when (date / time} ',
             ));
        $this->hasColumn('how_long', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => ' how long (can be "0") ',
             ));
        $this->hasColumn('driving_distance', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => ' driving distance ',
             ));
        $this->hasColumn('freetext', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('isdelete', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));


        $this->index('isdelete', array(
             'fields' => 
             array(
              0 => 'isdelete',
             ),
             ));
        $this->index('assessment_problems_id', array(
             'fields' => 
             array(
              0 => 'assessment_problems_id',
             ),
             ));
    }    
            

    public function setUp()
    {
        parent::setUp();
        /*
         *  auto-added by builder
         */
        $this->actAs(new Softdelete());
            
        /*
         *  auto-added by builder
         */
        $this->actAs(new Timestamp());
    }
    
    

    /**
     * change format of the date
     *
     * (non-PHPdoc)
     * @see Doctrine_Record::preSave()
     */
    public function preSave($event)
    {
        parent::preSave($event);
    
        if ( ! empty($this->course_date) && Zend_Date::isDate($this->course_date, $this->_date_format_datetime)) {
            $date = new Zend_Date($this->course_date, $this->_date_format_datetime);
            $this->course_date = null;
            $this->course_date = $date->toString($this->_datetime_format_db);
        } else {
    
        }
    
    }
    /**
     * change format of the date
     *
     * (non-PHPdoc)
     * @see Doctrine_Record::preHydrate()
     */
    public function preHydrate( Doctrine_Event $event )
    {
        if ( ! empty($event->data['course_date'])) {
    
            $data = $event->data;
    
            if (Zend_Date::isDate($event->data['course_date'], $this->_datetime_format_db)) {
    
                $date = new Zend_Date($event->data['course_date']);
                $data['course_date'] = $date->toString($this->_date_format_datetime);
            }
            
            $event->data = $data;
    
        }
    }
    
}