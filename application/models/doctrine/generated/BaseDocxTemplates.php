<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('DocxTemplates', 'SYSDAT');

/**
 * BaseDocxTemplates
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $clientid
 * @property string $action
 * @property string $file_name
 * @property string $file_nicename
 * @property string $file_type
 * @property string $comments
 * @property integer $isdelete
 * @property integer $create_user
 * @property timestamp $create_date
 * @property timestamp $change_date
 * @property integer $change_user
 * 
 * @package    ISPC
 * @subpackage Application (2017-08-11)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDocxTemplates extends Doctrine_Record
{
	public function setTableDefinition()
	{
		$this->setTableName('docx_templates');
		$this->hasColumn('id', 'integer', 4, array(
				'type' => 'integer',
				'length' => 4,
				'fixed' => false,
				'unsigned' => false,
				'primary' => true,
				'autoincrement' => true,
		));
		$this->hasColumn('clientid', 'integer', 4, array(
				'type' => 'integer',
				'length' => 4,
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'notnull' => true,
				'autoincrement' => false,
		));
		$this->hasColumn('action', 'string', 255, array(
				'type' => 'string',
				'length' => 255,
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'default' => 'default',
				'notnull' => true,
				'autoincrement' => false,
		));
		$this->hasColumn('file_name', 'string', 255, array(
				'type' => 'string',
				'length' => 255,
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'notnull' => true,
				'autoincrement' => false,
				'comments' => 'absolute path = DOCX_TEMPLATE_PATH/clientid/action/file_name',
		));
		$this->hasColumn('file_nicename', 'string', 255, array(
				'type' => 'string',
				'length' => 255,
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'notnull' => true,
				'autoincrement' => false,
		));
		$this->hasColumn('file_type', 'string', 255, array(
				'type' => 'string',
				'length' => 255,
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'notnull' => true,
				'autoincrement' => false,
		));
		$this->hasColumn('comments', 'string', null, array(
				'type' => 'string',
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'notnull' => false,
				'autoincrement' => false,
		));
		/*
		$this->hasColumn('isdelete', 'integer', 4, array(
				'type' => 'integer',
				'length' => 4,
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'default' => '0',
				'notnull' => true,
				'autoincrement' => false,
		));
		$this->hasColumn('create_user', 'integer', 8, array(
				'type' => 'integer',
				'length' => 8,
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'notnull' => true,
				'autoincrement' => false,
		));
		$this->hasColumn('create_date', 'timestamp', null, array(
				'type' => 'timestamp',
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'notnull' => true,
				'autoincrement' => false,
		));
		$this->hasColumn('change_date', 'timestamp', null, array(
				'type' => 'timestamp',
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'notnull' => false,
				'autoincrement' => false,
		));
		$this->hasColumn('change_user', 'integer', 8, array(
				'type' => 'integer',
				'length' => 8,
				'fixed' => false,
				'unsigned' => false,
				'primary' => false,
				'notnull' => false,
				'autoincrement' => false,
		));
		*/
		$this->index('id', array(
				'fields' => array('id'),
				'primary' => true
		));
		$this->index('idx_clientid_isdelete', array(
				'fields' => array('clientid','isdelete')
		));
		$this->index('idx_action', array(
				'fields' => array('action')
		));
	}

    public function setUp()
    {
        parent::setUp();
        
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());    

//         $this->actAs(new SoftEncrypt());    
        
    }
}