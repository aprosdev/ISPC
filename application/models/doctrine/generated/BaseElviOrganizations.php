<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ElviOrganizations', 'SYSDAT');

/**
 * BaseElviOrganizations
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $clientid
 * @property integer $organizationId
 * @property enum $organizationType
 * @property timestamp $create_date
 * @property integer $create_user
 * @property timestamp $change_date
 * @property integer $change_user
 * @property integer $isdelete
 * 
 * @package    ISPC
 * @subpackage Application (2018-09-17)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseElviOrganizations extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('elvi_organizations');

        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('clientid', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('organizationId', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('organizationType', 'enum', 12, array(
             'type' => 'enum',
             'length' => 12,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'NONE',
              1 => 'PRACTICE',
              2 => 'ORGANIZATION',
              3 => 'SOCIETY',
              4 => 'COMPANY',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('isdelete', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));


        $this->index('clientid', array(
             'fields' => 
             array(
              0 => 'clientid',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
        $this->hasOne('Client', array(
            'local' => 'clientid',
            'foreign' => 'id'
        ));
        
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());
        
        
        
    }
}