<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ElviUsers', 'SYSDAT');

/**
 * BaseElviUsers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $user_id
 * @property string $username
 * @property integer $userIdExternal
 * @property string $usernameAtVendor
 * @property string $userpassAtVendor
 * @property enum $profileType
 * @property enum $state
 * @property integer $isdelete
 * @property timestamp $create_date
 * @property integer $create_user
 * @property timestamp $change_date
 * @property integer $change_user
 * 
 * @package    ISPC
 * @subpackage Application (2018-09-27)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseElviUsers extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('elvi_users');

        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'comment' => 'ispc',
             ));
        $this->hasColumn('username', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('userIdExternal', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'elvi side',
             ));
        $this->hasColumn('usernameAtVendor', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('userpassAtVendor', 'blob', null, array(
             'type' => 'blob',
             'length' => null,
             'fixed' => true,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'comment' => 'sha512 = 64 bytes',
             ));
        /*
         * this was changed, so server version 1.0.2 only has doctor|user, default user
         */
        $this->hasColumn('profileType', 'enum', 17, array(
             'type' => 'enum',
             'length' => 17,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'notSpecified',
              1 => 'nurse',
              2 => 'doctor',
              3 => 'organizationStaff',
              4 => 'user',
              5 => 'visitor',
              6 => 'patient',
             ),
             'primary' => false,
//              'default' => 'notSpecified',
             'default' => 'user',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('state', 'enum', 8, array(
             'type' => 'enum',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'PENDING',
              1 => 'ACCEPTED',
              2 => 'DENIED',
             ),
             'primary' => false,
             'default' => 'PENDING',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('isdelete', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'comment' => '1=soft-deleted',
             ));
        $this->hasColumn('create_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));


        $this->index('userid', array(
             'fields' => 
             array(
              0 => 'user_id',
             ),
             ));
        $this->index('userNameExternal', array(
             'fields' => 
             array(
              0 => 'usernameAtVendor',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
        $this->hasOne('User', array(
            'local' => 'user_id',
            'foreign' => 'id'
        ));
        
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());
        
    }
    
}