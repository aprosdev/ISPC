<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('FormBlockSuckoff', 'MDAT');

/**
 * BaseFormBlockSuckoff
 * #ISPC-2512PatientCharts
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $ipid
 * @property integer $contact_form_id
 * @property enum $source
 * @property timestamp $suckoff_date
 * @property decimal $suckoff_secretion
 * @property enum $suckoff_consistency
 * @property string $suckoff_consistency_text
 * @property enum $suckoff_color
 * @property integer $isdelete
 * @property integer $create_user
 * @property timestamp $create_date
 * @property integer $change_user
 * @property timestamp $change_date
 * 
 * @package    ISPC
 * @subpackage Application (2020-04-13) ISPC-2523
 * @author     carmen <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseFormBlockSuckoff extends Pms_Doctrine_Record
{
	/**
	 * default when inserting into patient_course
	 */
	const PATIENT_COURSE_TYPE       = 'K';
	
    public function setTableDefinition()
    {
        $this->setTableName('form_block_suckoff');
        $this->option('type', 'INNODB');

        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
		));

        $this->hasColumn('ipid', 'string', 255, array(
        		'type' => 'string',
        		'length' => 255,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => true,
        		'autoincrement' => false,
        ));
        $this->hasColumn('contact_form_id', 'integer', 8, array(
        		'type' => 'integer',
        		'length' => 8,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        ));
        $this->hasColumn('source', 'enum', 3, array(
        		'type' => 'enum',
        		'length' => 3,
        		'fixed' => false,
        		'unsigned' => false,
        		'values' =>
        		array(
        				0 => 'cf',
        				1 => 'charts',
        		),
        		'primary' => false,
        		'default' => null,
        		'notnull' => true,
        		'autoincrement' => false,
        ));
        $this->hasColumn('suckoff_date', 'timestamp', null, array(
        		'type' => 'timestamp',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        ));
        $this->hasColumn('suckoff_secretion', 'decimal', 10, array(
             'type' => 'decimal',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'scale' => '2',
             ));
        $this->hasColumn('suckoff_consistency', 'enum', 4, array(
             'type' => 'enum',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
             	1 => 'zäh',
             	2 => 'flüssig',
             	3 => 'stückig',
             	4 => 'Freitext',
             ),
             'primary' => false,
             'default' => null,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('suckoff_consistency_text', 'string', 255, array(
        		'type' => 'string',
        		'length' => 255,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => true,
        		'autoincrement' => false,
        ));
        $this->hasColumn('suckoff_color', 'enum', 6, array(
        		'type' => 'enum',
        		'length' => 6,
        		'fixed' => false,
        		'unsigned' => false,
        		'values' =>
        		array(
        			1 => 'blutig',
        			2 => 'gräulich',
        			3 => 'bräunlich',
        			4 => 'gelb-grün',
        			5 => 'weiß',
        			6 => 'weiß-schaumig',
        		),
        		'primary' => false,
        		'default' => null,
        		'notnull' => true,
        		'autoincrement' => false,
        ));
        
        //Lore ISPC-2523 14.05.2020
        $this->hasColumn('suckoff_soothing', 'integer', 1, array(
                'type' => 'integer',
                'length' => 1,
                'notnull' => true,
                'comments' => '0=unchecked, 1=checked'
            ));
        
        $this->hasColumn('suckoff_possible', 'integer', 1, array(
                'type' => 'integer',
                'length' => 1,
                'notnull' => true,
                'comments' => '0=unchecked, 1=checked'
            ));
        //.
        
        $this->index('idx_isdeleted', array(
             'fields' => 
             array(
              0 => 'isdelete',
             ),
		));
    }

    public function setUp()
    {
        parent::setUp();
        
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());
        
        /*
         * disabled by default, because it was created JUST for inserts from the Kontaktformular
         */
        $this->addListener(new PostInsertWriteToPatientCourseListener(array(
            "disabled"      => true,
            "course_title"  => static::PATIENT_COURSE_TITLE,
            "tabname"       => static::PATIENT_COURSE_TABNAME,
            "course_type"   => static::PATIENT_COURSE_TYPE,
            //"done_name"     => static::PATIENT_COURSE_DONE_NAME,
        )), 'PostInsertWriteToPatientCourse');
        
    }
}