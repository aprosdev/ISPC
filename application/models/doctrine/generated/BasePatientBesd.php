<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PatientBesd', 'MDAT');

/**
 * BasePatientBesd
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $ipid
 * @property text $breathing
 * @property text $negative_utterance
 * @property text $face_expression
 * @property text $body_language
 * @property text $consolation
 * @property integer $isdelete
 * @property integer $create_user
 * @property timestamp $create_date
 * @property integer $change_user
 * @property timestamp $change_date
 * 
 * @package    ISPC
 * @subpackage Application (2018-08-31)
 * @author     carmen <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePatientBesd extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('patient_besd');
        $this->option('type', 'INNODB');

        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('ipid', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('calm', 'integer', 4, array(
        		'type' => 'integer',
        		'length' => 4,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'autoincrement' => false,
        ));
        $this->hasColumn('mob', 'integer', 4, array(
        		'type' => 'integer',
        		'length' => 4,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'autoincrement' => false,
        ));
         $this->hasColumn('mob_by', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('breathing', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'normal', // translate :  normal
        				1 => 'hard_occasionaly', // translate :  hard_occasionaly
        				2 => 'short_fast_deep', // translate :  short_fast_deep
        				3 => 'loudly', 	//translate: loudly
        				4 => 'long_fast_deep', //translate: long_fast_deep
        				5 => 'cheyene_stokes', //translate: cheyene_stokes
        		),
        ));
        $this->hasColumn('negative_utterance', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'none', // translate :  none
        				1 => 'moan_occasionally', // translate :  moan_occasionally
        				2 => 'disapproving_speak', // translate :  disapproving_speak
        				3 => 'repeatedly_distressed_call', 	//translate: repeatedly_distressed_call
        				4 => 'loud_moan', //translate: loud_moan
        				5 => 'weep', //translate: weep
        		),
        ));
        $this->hasColumn('face_expression', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'smiling_or_nothing', // translate :  smiling_or_nothing
        				1 => 'sad', // translate :  //translate: sad
        				2 => 'anxious', // translate :  anxious
        				3 => 'worried', 	//translate: worried
        				4 => 'grimacing', //translate: grimacing
        		),
        ));
        $this->hasColumn('body_language', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'relaxed', // translate :  relaxed
        				1 => 'tense', // translate :  tense
        				2 => 'back_forth_nervously', // translate :  back_forth_nervously
        				3 => 'fiddle', //translate: fiddle
        				4 => 'rigid', //translate: rigid
        				5 => 'clenched_fists', //translate: clenched_fists
        				6 => 'tightened_knees', //translate: tightened_knees,
        				7 => 'push_away_escape', //translate: push_away_escape
        				8 => 'beat', //translate: beat
        		),
        ));
        $this->hasColumn('consolation', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'not_necessary', // translate :  not_necessary
        				1 => 'voice_touch_consolation', // translate :  //translate: voice_touch_consolation
        				2 => 'no_consolation', // translate :  no_consolation
        		),
        ));
        $this->index('idx_ipid', array(
             'fields' => 
             array(
              0 => 'ipid',
             ),
             ));
        $this->index('idx_isdeleted', array(
             'fields' => 
             array(
              0 => 'isdelete',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());
        
    }
}