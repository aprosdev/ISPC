<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PatientDatamatrixImport', 'MDAT');

/**
 * BasePatientDatamatrixImport
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $ipid
 * @property enum $tabname
 * @property blob $datamatrix_xml
 * @property blob $datamatrix_array
 * @property integer $isdelete
 * @property integer $create_user
 * @property timestamp $create_date
 * @property integer $change_user
 * @property timestamp $change_date
 * 
 * @package    ISPC
 * @subpackage Application (2017-08-31)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePatientDatamatrixImport extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('patient_datamatrix_import');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('ipid', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('tabname', 'enum', 14, array(
             'type' => 'enum',
             'length' => 14,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'medication_new',
             ),
             'primary' => false,
             'default' => 'medication_new',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('datamatrix_xml', 'blob', null, array(
             'type' => 'blob',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('datamatrix_array', 'blob', null, array(
             'type' => 'blob',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        
        /*
        $this->hasColumn('isdelete', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_user', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_user', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        */
        
        $this->index('id', array(
        		'fields' => array('id'),
        		'primary' => true
        ));
        
        $this->index('idx_ipid', array(
        		'fields' => array('ipid')
        ));
        

        $this->index('idx_ipid_isdelete', array(
        		'fields' => array(
        				'ipid',
        				'isdelete'
        		)
        ));
    }

    public function setUp()
    {
        parent::setUp();
        
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());
        
        $this->actAs(new SoftEncrypt(array(
        		'datamatrix_xml',
        		'datamatrix_array',
        )));
        
        $this->actAs(new SoftDecrypt(array(
        		'datamatrix_xml',
        		'datamatrix_array',
        )));
        
    }
}