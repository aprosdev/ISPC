<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PatientDisabilityDegree', 'MDAT');

/**
 * BasePatientDisabilityDegree
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $ipid
 * @property set $degree_disability
 * @property date $expiration
 * @property enum $permanent
 * @property enum $initiate_application
 * @property enum $trigger_amendment
 * @property enum $benefits_workinglife
 * @property enum $benefits_community
 * @property blob $freetext
 * @property integer $isdelete
 * @property integer $create_user
 * @property timestamp $create_date
 * @property integer $change_user
 * @property timestamp $change_date
 * 
 * @package    ISPC
 * @subpackage Application (2019-02-18)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePatientDisabilityDegree extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('patient_disability_degree');

        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('ipid', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('degree_disability', 'set', 2, array(
             'type' => 'set',
             'length' => 2,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'aG',
              1 => 'G',
              2 => 'H',
              3 => 'GI',
              4 => 'B',
              5 => 'BI',
              6 => 'RF',
              7 => 'AK',
              8 => 'GI',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'Grad der Behinderung',
             ));
        $this->hasColumn('expiration', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'Befristung',
             ));
        $this->hasColumn('permanent', 'enum', 3, array(
             'type' => 'enum',
             'length' => 3,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'no',
              1 => 'yes',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'unbefristet',
             ));
        $this->hasColumn('initiate_application', 'enum', 3, array(
             'type' => 'enum',
             'length' => 3,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'no',
              1 => 'yes',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'Erstantrag ausl�sen',
             ));
        $this->hasColumn('trigger_amendment', 'enum', 3, array(
             'type' => 'enum',
             'length' => 3,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'no',
              1 => 'yes',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => '�nderungsantrag ausl�sen',
             ));
        $this->hasColumn('benefits_workinglife', 'enum', 3, array(
             'type' => 'enum',
             'length' => 3,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'no',
              1 => 'yes',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'Leistungen zur Teilhabe am Arbeitsleben',
             ));
        $this->hasColumn('benefits_community', 'enum', 3, array(
             'type' => 'enum',
             'length' => 3,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'no',
              1 => 'yes',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'Leistungen zur Teilhabe am Leben in der Gemeinschaft',
             ));
        $this->hasColumn('freetext', 'blob', null, array(
             'type' => 'blob',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('isdelete', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'comment' => '1=deleted',
             ));
        $this->hasColumn('create_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));


        $this->index('ipid', array(
             'fields' => 
             array(
              0 => 'ipid',
             ),
             ));
        $this->index('isdelete', array(
             'fields' => 
             array(
              0 => 'isdelete',
             ),
             ));
    }    
            

    public function setUp()
    {
        parent::setUp();
        /*
         *  auto-added by builder
         */
        $this->actAs(new Softdelete());
            
        /*
         *  auto-added by builder
         */
        $this->actAs(new Timestamp());
    }
    
    
    
    /**
     * change format of the date
     *
     * (non-PHPdoc)
     * @see Doctrine_Record::preSave()
     */
    public function preSave($event)
    {
        parent::preSave($event);
    
        if ( ! empty($this->expiration) && Zend_Date::isDate($this->expiration, $this->_date_format_datepicked)) {
            $date = new Zend_Date($this->expiration, $this->_date_format_datepicked);
            $this->expiration = null;
            $this->expiration = $date->toString($this->_date_format_db);
        } else {
            $this->expiration = null;
        }
    
    }

    /**
     * change format of the date
     *
     * (non-PHPdoc)
     * @see Doctrine_Record::preHydrate()
     */
    public function preHydrate( Doctrine_Event $event )
    {
        if ( ! empty($event->data['expiration']) && Zend_Date::isDate($event->data['expiration'], $this->_date_format_db)) {
    
            $data = $event->data;
    
            $date = new Zend_Date($event->data['expiration']);
            $data['expiration'] = $date->toString($this->_date_format_datepicked);

            $event->data = $data;
    
        }
    }
    
    
}