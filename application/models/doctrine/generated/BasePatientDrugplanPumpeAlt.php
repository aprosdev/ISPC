<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PatientDrugplanPumpeAlt', 'MDAT');

/**
 * BasePatientDrugplanPumpeAlt
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property string $ipid
 * @property string $source_ipid
 * @property integer $userid
 * @property integer $clientid
 * @property integer $source_pumpe_id
 * @property integer $drugplan_pumpe_id
 * @property string $pumpe_medication_type
 * @property string $overall_volume
 * @property string $run_rate
 * @property enum $used_liquid
 * @property string $pat_weight
 * @property string $overall_drug_volume
 * @property string $liquid_amount
 * @property string $overall_running_time
 * @property string $min_running_time
 * @property string $bolus
 * @property string $max_bolus_day
 * @property string $max_bolus_after
 * @property string $next_bolus
 * @property integer $isdelete
 * @property enum $status
 * @property integer $inactive
 * @property integer $approved
 * @property integer $approval_user
 * @property timestamp $approval_date
 * @property integer $declined
 * @property timestamp $decline_date
 * @property integer $decline_user
 * @property integer $create_user
 * @property timestamp $create_date
 * @property integer $change_user
 * @property timestamp $change_date
 * @property enum $change_source
 *
 * @package    ISPC [ISPC-2833]
 * @subpackage Application (2021-03-03)
 * @author     Ancuta <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePatientDrugplanPumpeAlt extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('patient_drugplan_pumpe_alt');
        
        $this->hasColumn('id', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => true,
            'autoincrement' => true,
        ));
        $this->hasColumn('ipid', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('source_ipid', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('userid', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('clientid', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('source_pumpe_id', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('drugplan_pumpe_id', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('pumpe_medication_type', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('overall_volume', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [Zielvolumen Pumpe (ml)]',
        ));
        $this->hasColumn('run_rate', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [gewunschte Laufrate (ml/h)]',
        ));
        $this->hasColumn('used_liquid', 'enum', 4, array(
            'type' => 'enum',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'values' =>
            array(
                0 => 'nacl',
                1 => 'aqua',
            ),
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [Tragerlosung]',
        ));
        $this->hasColumn('pat_weight', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [Gewicht (kg)]',
        ));
        $this->hasColumn('overall_drug_volume', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [Gesamtvolumen aus Wirkstoffen]',
        ));
        $this->hasColumn('liquid_amount', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [Pumpe auffullen mit (ml)]',
        ));
        $this->hasColumn('overall_running_time', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [Laufzeit (ohne Bolus) in h]',
        ));
        $this->hasColumn('min_running_time', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [Laufzeit min. (mit Bolus)]',
        ));
        $this->hasColumn('bolus', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [Bolusmenge (in ml)]',
        ));
        $this->hasColumn('max_bolus_day', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [max Bolus pro Tag]',
        ));
        $this->hasColumn('max_bolus_after', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [max Bolus hintereiander]',
        ));
        $this->hasColumn('next_bolus', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
            'comment' => 'ISPC-2833 [Sperrzeit (in Min.)]',
        ));
        $this->hasColumn('isdelete', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('status', 'enum', 6, array(
            'type' => 'enum',
            'length' => 6,
            'fixed' => false,
            'unsigned' => false,
            'values' =>
            array(
                0 => 'new',
                1 => 'edit',
                2 => 'delete',
                3 => 'renew',
            ),
            'primary' => false,
            'default' => 'edit',
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('inactive', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('approved', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('approval_user', 'integer', 8, array(
            'type' => 'integer',
            'length' => 8,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('approval_date', 'timestamp', null, array(
            'type' => 'timestamp',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('declined', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('decline_date', 'timestamp', null, array(
            'type' => 'timestamp',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('decline_user', 'integer', 8, array(
            'type' => 'integer',
            'length' => 8,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('create_user', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('create_date', 'timestamp', null, array(
            'type' => 'timestamp',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('change_user', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('change_date', 'timestamp', null, array(
            'type' => 'timestamp',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('change_source', 'enum', 7, array(
            'type' => 'enum',
            'length' => 7,
            'fixed' => false,
            'unsigned' => false,
            'values' =>
            array(
                0 => 'online',
                1 => 'offline',
            ),
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
            'comment' => 'changed from offline app, or other ',
        ));
    }
    
    
    public function setUp()
    {
        parent::setUp();
        /*
         *  auto-added by builder
         */
        $this->actAs(new Softdelete());
        
        /*
         *  auto-added by builder
         */
        $this->actAs(new Timestamp());
    }
}