<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PatientMre', 'MDAT');

/**
 * BasePatientMre
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property string $ipid
 * @property enum $pathogen
 * @property string $pathogen_other
 * @property timestamp $first_pathogen_date
 * @property enum $rehabilitation
 * @property enum $rehabilitation_stauts
 * @property timestamp $last_pathogen_date
 * @property enum $localization
 * @property string $localization_wound
 * @property string $localization_device
 * @property string $localization_other
 * @property enum $carrier_status
 * @property timestamp $negative_evidence_date
 * @property integer $change_user
 * @property timestamp $create_date
 * @property integer $create_user
 * @property timestamp $change_date
 *
 * @package    ISPC
 * @subpackage Application (2020-10-06)
 * @author     Ancuta <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 * ISPC-2654 Ancuta 07.10.2020
 */
abstract class BasePatientMre extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('patient_mre');
        
        $this->hasColumn('id', 'integer', 8, array(
            'type' => 'integer',
            'length' => 8,
            'fixed' => false,
            'unsigned' => false,
            'primary' => true,
            'autoincrement' => true,
        ));
        $this->hasColumn('ipid', 'string', 255, array(
            'type' => 'string',
            'length' => 255,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('pathogen', 'enum', 22, array(
            'type' => 'enum',
            'length' => 22,
            'fixed' => false,
            'unsigned' => false,
            'values' =>
            array(
                0 => 'pathogen_mrsa',
                1 => 'pathogen_esbl_educator',
                2 => 'pathogen_3mrgn2',
                3 => 'pathogen_4mrgn2',
                4 => 'pathogen_vre',
            	5 => 'pathogen_clostridioides',
                6 => 'pathogen_other',
            ),
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('pathogen_other', 'string', null, array(
            'type' => 'string',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('first_pathogen_date', 'timestamp', null, array(
            'type' => 'timestamp',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('rehabilitation', 'enum', 11, array(
            'type' => 'enum',
            'length' => 11,
            'fixed' => false,
            'unsigned' => false,
            'values' =>
            array(
                0 => 'reh_yes',
                1 => 'reh_no',
                2 => 'reh_not_posible',
            ),
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('rehabilitation_status', 'enum', 22, array(
            'type' => 'enum',
            'length' => 22,
            'fixed' => false,
            'unsigned' => false,
            'values' =>
            array(
                0 => 'reh_with_success',
                1 => 'reh_without_success',
                2 => 'reh_was_started',
                3 => 'reh_could_not_be_completed',
            ),
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('last_pathogen_date', 'timestamp', null, array(
            'type' => 'timestamp',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('localization', 'enum', 20, array(
            'type' => 'enum',
            'length' => 20,
            'fixed' => false,
            'unsigned' => false,
            'values' =>
            array(
                0 => 'nose_throat',
                1 => 'sputum',
                2 => 'skin',
                3 => 'wound',
                4 => 'urine_bladder',
                5 => 'stool_rectal_swab',
                6 => 'blood_culture_liquor',
                7 => 'device_type',
                8 => 'other_localization',
            ),
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('localization_wound', 'string', null, array(
            'type' => 'string',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('localization_device', 'string', null, array(
            'type' => 'string',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('localization_other', 'string', null, array(
            'type' => 'string',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('carrier_status', object, 12, array(
            'type' => 'object',
            'length' => 12,
            'fixed' => false,
            'unsigned' => false,
            'values' =>
            array(
                'colonization' => 'colonization',
                'infection' => 'infection',
            ),
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        $this->hasColumn('negative_evidence_date', 'timestamp', null, array(
            'type' => 'timestamp',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('change_user', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('create_date', 'timestamp', null, array(
            'type' => 'timestamp',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('create_user', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('change_date', 'timestamp', null, array(
            'type' => 'timestamp',
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        
        
        $this->index('ipid', array(
            'fields' =>
            array(
                0 => 'ipid',
            ),
        ));
        $this->index('change_user', array(
            'fields' =>
            array(
                0 => 'change_user',
            ),
        ));
        $this->index('create_user', array(
            'fields' =>
            array(
                0 => 'create_user',
            ),
        ));
        $this->index('date', array(
            'fields' =>
            array(
                0 => 'first_pathogen_date',
            ),
        ));
    }
    
    
    public function setUp()
    {
        parent::setUp();
        /*
         *  auto-added by builder
         */
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());
        
        $this->addListener(new PostUpdateWriteToPatientCourseListener(array(
        		"disabled"      => true,
        		"course_title"  => static::PATIENT_COURSE_TITLE,
        		"tabname"       => static::PATIENT_COURSE_TABNAME,
        		"course_type"   => static::PATIENT_COURSE_TYPE,
        		//"done_name"     => static::PATIENT_COURSE_DONE_NAME,
        )), 'PostUpdateWriteToPatientCourse');
        
        $this->addListener(new PostInsertWriteToPatientCourseListener(array(
        		"disabled"      => true,
        		"course_title"  => static::PATIENT_COURSE_TITLE,
        		"tabname"       => static::PATIENT_COURSE_TABNAME,
        		"course_type"   => static::PATIENT_COURSE_TYPE,
        		//"done_name"     => static::PATIENT_COURSE_DONE_NAME,
        )), 'PostInsertWriteToPatientCourse');
        
    }
}