<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PatientRubin', 'MDAT');

/**
 * BasePatientRubin
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $ipid
 * @property timestamp $form_date
 * @property text $question1
 * @property text $question2
 * @property text $question3
 * @property text $question4
 * @property text $question5
 * @property text $bmi
 * @property text $question6
 * @property decimal $before_anamnesis_total
 * @property text $question7
 * @property text $question8
 * @property text $question9
 * @property text $question10
 * @property text $question11
 * @property text $question12
 * @property text $question13
 * @property text $question14
 * @property text $question15
 * @property text $question16
 * @property text $question17
 * @property text $question18
 * @property decimal $anamnesis_total
 * @property decimal $total
 * @property integer $isdelete
 * @property integer $create_user
 * @property timestamp $create_date
 * @property integer $change_user
 * @property timestamp $change_date
 * 
 * @package    ISPC
 * @subpackage Application (2019-03-29)
 * @author     carmen <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePatientRubin extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('patient_rubin');
        $this->option('type', 'INNODB');

        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('ipid', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('form_date', 'timestamp', null, array(
        		'type' => 'timestamp',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        ));
        $this->hasColumn('before_anamnesis', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        ));
        

        $this->hasColumn('before_anamnesis_total', 'decimal', 11, array(
        		'type' => 'decimal',
        		'length' => 11,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => true,
        		'autoincrement' => false,
        		'scale' => '2',
        ));
        
        
        $this->hasColumn('anamnesis', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        ));
     

        $this->hasColumn('anamnesis_total', 'decimal', 11, array(
        		'type' => 'decimal',
        		'length' => 11,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => true,
        		'autoincrement' => false,
        		'scale' => '2',
        ));
        
           
        $this->hasColumn('total', 'decimal', 11, array(
        		'type' => 'decimal',
        		'length' => 11,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => true,
        		'autoincrement' => false,
        		'scale' => '2',
        ));
        
        
        $this->index('idx_ipid', array(
             'fields' => 
             array(
              0 => 'ipid',
             ),
             ));
        $this->index('idx_isdeleted', array(
             'fields' => 
             array(
              0 => 'isdelete',
             ),
             ));
        
        $this->setColumnOption('before_anamnesis', 'values', [
        		"question1" => array(
        				'severe_anorexia' => '0', // translate :  severe_anorexia 
        				'slight_anorexia' => '1', // translate :  slight_anorexia
        				'no_anorexia' => '2', // translate :  no_anorexia
        		),
        		"question2" => array(
        				'weight_loss' => '0', // translate :  weight_loss
        				'do_not_know' => '1', // translate :  do_not_know
        				'weight_loss_between_1_3_kg' => '2', // translate :  weight_loss_between_1_3_kg
        				'no_weight_loss' => '3', 	//translate: no_weight_loss
        		),
        		"question3" => array(
        				'from_bed_to_chair' => '0', // translate :  from_bed_to_chair
        				'mobile_in_apartment' => '1', // translate :  mobile_in_apartment
        				'leaves_the_apartment' => '2', // translate :  leaves_the_apartment
        		),
        		"question4" => array(
        				'yes' => '0', // translate :  yes
        				'no' => '2', // translate :  no
        		),
        		"question5" => array(
        				'severe_dementia_or_depression' => '0', // translate :  severe_dementia_or_depression
        				'mild_dementia_or_depression' => '1', // translate :  mild_dementia_or_depression
        				'no_problem' => '2', // translate :  no_problem
        		),
        		"question6" => array(
        						'bmi_lt_19' => '0', // translate :  bmi_less_19
        						'bmi_between_19_21' => '1', // translate :  bmi_between_19_21
        						'bmi_between_21_23' => '2', // translate :  bmi_between_21_23
        						'bmi_gt_23' => '3', // translate :  bmi_bigger_23
        				),
        ]
        		);
        
        $this->setColumnOption('anamnesis', 'values', [
        		"question7" => array(
        				'no' => '0', // translate :  no
        				'yes' => '1', // translate : yes
        		),
        		"question8" => array(
        				'yes' => '0', // translate :  yes
        				'no' => '1', // translate :   no
        		),
        		"question9" => array(
        				'yes' => '0', // translate :  yes
        				'no' => '1', // translate :   no
        		),
        		"question10" => array(
        				'1meal' => '0', // translate :  1meal
        				'2meals' => '1', // translate :  2meal
        				'3meals' => '2', // translate :  3meal
        		),
        		"question11" => array(
        				'dairy_products_at_least_once_a_day' => array('yes' => '0', 'no' => '0'), // translate :  dairy_products_at_least_once_a_day
        				'at_least_once_or_twice_a_week_legumes_or_eggs' => array('yes' => '0.5', 'no' => '0'), // translate :  at_least_once_or_twice_a_week_legumes_or_eggs
        				'every_day_meat_fish_or_poultry' => array('yes' => '1', 'no' => '0'), // translate :  every_day_meat_fish_or_poultry
        		),
        		"question12" => array(
        				'no' => '0', // translate :  no
        				'yes' => '1', // translate : yes
        		),
        		"question13" => array(
        				'less_than_3_glasses_or_cups' => '0', // translate :  less_than_3_glasses_or_cups
        				'3_to_5_glasses_or_cups' => "0.5", // translate :  3_to_5_glasses_or_cups
        				'more_than_5_glasses_or_cups' => '1', // translate :  more_than_5_glasses_or_cups
        		),
        		"question14" => array(
        				'needs_help_with_food' => '0', // translate :  needs_help_with_food
        				'eats_without_help_but_with_difficulty' => '1', // translate :  eats_without_help_but_with_difficulty
        				'eats_without_help_no_trouble' => '2', // translate :  eats_without_help_no_trouble
        		),
        		"question15" => array(
        				'serious_malnutrition' => '0', // translate :  serious_malnutrition
        				'do_not_know_or_slight_malnutrition' => '1', // translate :  do_not_know_or_slight_malnutrition
        				'well_fed' => '2', // translate :  well_fed
        		),
        		"question16" => array(
        				'worse' => '0', // translate :  worse
        				'do_not_know' => '0.5', // translate :  do_not_know
        				'equally_good' => '1', // translate :  equally_good
        				'better' =>'2', // translate :  better
        		),
        		"question17" => array(
        				'oau_lt_21' => '0', // translate :  oau_less_21
        				'oau_between_21_22' => '0.5', // translate :  oau_between_21_22
        				'oau_gt_22' => '1', // translate :  oau_bigger_22
        		),
        		"question18" => array(
        				'wu_lt_31' => '0', // translate :  wu_less_31
        				'wu_gt_31' =>'1', // translate : wu_bigger_31
        		),
        ]
        		);
    }

    public function setUp()
    {
        parent::setUp();
        
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());
        
    }
}