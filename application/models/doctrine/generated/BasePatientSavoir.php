<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PatientSavoir', 'IDAT');

/**
 * BasePatientSavoir
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $ipid
 * @property enum $consent_A
 * @property enum $consent_B
 * @property enum $consent_C
 * @property enum $school_education
 * @property enum $working_status
 * @property enum $job
 * @property string $countryofbirth
 * @property string $countryofbirth_mother
 * @property string $countryofbirth_father
 * @property integer $rule_approach
 * @property integer $rule_arrival_time
 * @property enum $first_assessment_carried_by
 * @property integer $isdelete
 * @property integer $create_user
 * @property timestamp $create_date
 * @property integer $change_user
 * @property timestamp $change_date
 * 
 * @package    ISPC
 * @subpackage Application (2018-01-08)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePatientSavoir extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('patient_savoir');
        $this->option('type', 'INNODB');
        
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('ipid', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('consent_A', 'enum', 3, array(
             'type' => 'enum',
             'length' => 3,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'no',
              1 => 'yes',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
//         $this->hasColumn('consent_B', 'enum', 3, array(
//              'type' => 'enum',
//              'length' => 3,
//              'fixed' => false,
//              'unsigned' => false,
//              'values' => 
//              array(
//               0 => 'no',
//               1 => 'yes',
//              ),
//              'primary' => false,
//              'notnull' => false,
//              'autoincrement' => false,
//              ));
        
        $this->hasColumn('consent_B', 'enum', 1, array(
            'type' => 'enum',
            'length' => 1,
            'fixed' => false,
            'unsigned' => false,
            'values' =>
            array(
                0 => '1',
                1 => '2',
                2 => '3',
                3 => '4',
                4 => '5',
            ),
            'primary' => false,
            'notnull' => false,
            'autoincrement' => false,
        ));
        
        $this->hasColumn('consent_C', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '2',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('school_education', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '2',
              2 => '3',
              3 => '4',
              4 => '5',
              5 => '6',
              6 => '7',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('working_status', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => //PatientSavoir::getDefaults('working_status'),
             array(
              0 => '1',
              1 => '2',
              2 => '3',
              3 => '4',
              4 => '5',
              5 => '6',
              6 => '7', //sonstiges
              7 => '8', //berufstÃ¤tig
                 
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('job', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => '1',
              1 => '2',
              2 => '3',
              3 => '4',
              4 => '5',
              5 => '6',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('countryofbirth', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('countryofbirth_mother', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('countryofbirth_father', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('rule_approach', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('rule_arrival_time', 'integer', 4, array(
            'type' => 'integer',
            'length' => 4,
            'fixed' => false,
            'unsigned' => false,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        $this->hasColumn('first_assessment_carried_by', 'enum', 1, array(
            'type' => 'enum',
            'length' => 1,
            'fixed' => false,
            'unsigned' => false,
            'values' =>
            array(
                0 => '1',
                1 => '2',
            ),
            'default' => null,
            'primary' => false,
            'notnull' => true,
            'autoincrement' => false,
        ));
        
        /*
        $this->hasColumn('isdelete', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_user', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_user', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        */
        $this->index('idx_ipid', array(
            'fields' => array('ipid')
        ));
        $this->index('idx_isdelete', array(
            'fields' => array('isdelete')
        ));
    }

    public function setUp()
    {
        parent::setUp();
        
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());
        
        $this->hasMany('PatientSavoirSapv', array(
            'local'         => 'id',
            'foreign'       => 'patient_savoir_id',
//             'cascade'       => array('delete'), // Softdelete must be updated
            'owningSide'    => true,
            //'onDelete' => 'CASCADE', // this is db-level, must define ForeignKey
        ));
    }
}