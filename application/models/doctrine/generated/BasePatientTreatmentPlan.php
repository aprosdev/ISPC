<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PatientTreatmentPlan', 'MDAT');

/**
 * BasePatientTreatmentPlan
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $contact_form_id
 * @property string $ipid
 * @property string $agreed_with
 * @property timestamp $formular_date
 * @property text $item1
 * @property text $item2
 * @property text $item3
 * @property text $item4
 * @property text $item5
 * @property text $item6
 * @property text $item7
 * @property integer $isdelete
 * @property integer $create_user
 * @property timestamp $create_date
 * @property integer $change_user
 * @property timestamp $change_date
 * 
 * @package    ISPC
 * @subpackage Application (2019-01-28)
 * @author     carmen <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePatientTreatmentPlan extends Pms_Doctrine_Record
{
	/**
	 * default when inserting into patient_course
	 */
	const PATIENT_COURSE_TYPE       = 'K';
	
    public function setTableDefinition()
    {
        $this->setTableName('patient_treatment_plan');
        $this->option('type', 'INNODB');

        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
		));
        $this->hasColumn('contact_form_id', 'integer', 8, array(
        		'type' => 'integer',
        		'length' => 8,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        ));
        $this->hasColumn('ipid', 'string', 255, array(
        		'type' => 'string',
        		'length' => 255,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => true,
        		'autoincrement' => false,
        ));
        $this->hasColumn('agreed_with', 'text', 255, array(
        		'type' => 'string',
        		'length' => 255,
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => true,
        		'autoincrement' => false,
        ));
        $this->hasColumn('formular_date', 'timestamp', null, array(
        		'type' => 'timestamp',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        ));
        $this->hasColumn('medicine', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'goal', // translate :  treatment_goal
        				1 => 'plan', // translate :  treatment_plan
        		),
        ));
        $this->hasColumn('maintenance', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'goal', // translate :  treatment_goal
        				1 => 'plan', // translate :  treatment_plan
        		),
        ));
        $this->hasColumn('social_work', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'goal', // translate :  treatment_goal
        				1 => 'plan', // translate :  treatment_plan
        		),
        ));
        $this->hasColumn('psychological', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'goal', // translate :  treatment_goal
        				1 => 'plan', // translate :  treatment_plan
        		),
        ));
        $this->hasColumn('spiritual', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'goal', // translate :  treatment_goal
        				1 => 'plan', // translate :  treatment_plan
        		),
        ));
        $this->hasColumn('relaxation_techniques', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'goal', // translate :  treatment_goal
        				1 => 'plan', // translate :  treatment_plan
        		),
        ));
        $this->hasColumn('physical_therapy', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        		'autoincrement' => false,
        		'values' =>
        		array(
        				0 => 'goal', // translate :  treatment_goal
        				1 => 'plan', // translate :  treatment_plan
        		),
        ));
        $this->hasColumn('history_since_last_meeting', 'text', null, array(
        		'type' => 'text',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => true,
        		'autoincrement' => false,
        ));
        
        $this->hasColumn('main_problems', 'text', null, array(
        		'type' => 'text',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => true,
        		'autoincrement' => false,
        ));
        
        $this->hasColumn('additional_users', 'object', null, array(
        		'type' => 'object',
        		'fixed' => false,
        		'unsigned' => false,
        		'primary' => false,
        		'notnull' => false,
        ));
        
        $this->index('idx_isdeleted', array(
             'fields' => 
             array(
              0 => 'isdelete',
             ),
		));
    }

    public function setUp()
    {
        parent::setUp();
        
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());
        
        $this->addListener(new PostInsertWriteToPatientCourseListener(array(
        		"course_title"  => self::translate(static::PATIENT_COURSE_TITLE),
        		"tabname"       => static::PATIENT_COURSE_TABNAME,
        		"course_type"   => static::PATIENT_COURSE_TYPE,
        		"done_name"     => static::PATIENT_COURSE_DONE_NAME,
        )), 'PostInsertWriteToPatientCourseListener');
        
        
    }
    
    /**
     * change format of the date
     *
     * (non-PHPdoc)
     * @see Doctrine_Record::preSave()
     */
   /* public function preSave($event)
    {
    	parent::preSave($event);
    
    	//         $invoker = $event->getInvoker();
    
    	//         dd($this->toArray(), $invoker->toArray());
    
    	$dateform = null;
    
    	if ( ! empty($this->formular_date)) {
    
    		$dateform = new Zend_Date($this->formular_date, $this->_date_format_datepicked);
    		$this->formular_date = null;
    		$this->formular_date = $dateform->toString($this->_date_format_db);
    
    	} else {
    
    	}
    	 
    
    }*/
    /**
     * change format of the date
     *
     * (non-PHPdoc)
     * @see Doctrine_Record::preHydrate()
     */
   /* public function preHydrate( Doctrine_Event $event )
    {
    	if ( ! empty($event->data['formular_date']) ) {
    
    		$data = $event->data;
    
    		if (Zend_Date::isDate($event->data['formular_date'], $this->_date_format_db)) {
    
    			$date = new Zend_Date($event->data['formular_date']);
    			$data['formular_date'] = $date->toString($this->_date_format_datepicked);
    		}
    
    		$event->data = $data;
    
    	}
    }*/
}