<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PatientsOrdersDetails', 'MDAT');

/**
 * BasePatientsOrdersDetails
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $ipid
 * @property enum $status
 * @property date $order_date
 * @property enum $order_interval
 * @property string $order_interval_options
 * @property string $order_comment
 * @property integer $isdelete
 * @property timestamp $create_date
 * @property integer $create_user
 * @property timestamp $change_date
 * @property integer $change_user
 * 
 * @package    ISPC
 * @subpackage Application (2018-12-21)
 * @author     Ancuta <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePatientsOrdersDetails extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('patients_orders_details');

        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));

        $this->hasColumn('parent_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        
        $this->hasColumn('step_parent_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'autoincrement' => false,
             ));
        
        
        $this->hasColumn('ipid', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('status', 'enum', 9, array(
             'type' => 'enum',
             'length' => 9,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'active',
              1 => 'verified',
              2 => 'paused',
              3 => 'canceled',
              4 => 'completed',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'the status of the order',
             ));
        $this->hasColumn('action_status', 'enum', 9, array(
             'type' => 'enum',
             'length' => 9,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'opened',
              1 => 'paused',
              2 => 'stopped'
             ),
             'default' => 'opened',
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'Status used when play/paused/stop are pressed',
             ));
        $this->hasColumn('order_date', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('order_interval', 'enum', 25, array(
             'type' => 'enum',
             'length' => 25,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'once',
              1 => 'every_x_days',
              2 => 'selected_days_of_the_week',
             ),
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('order_interval_options', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('order_comment', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        //ISPC-2464  Ancuta 31.10.2019        
        $this->hasColumn('stand_alone', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('isdelete', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_user', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_user', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));


        $this->index('id_isdelete', array(
             'fields' => 
             array(
              0 => 'id',
              1 => 'isdelete',
             ),
             ));
    }    
            

    public function setUp()
    {
        parent::setUp();
        
        $this->hasOne('PatientsOrdersAllowed', array(
            'local' => 'ipid',
            'foreign' => 'ipid',
        ));
        
        $this->hasOne('PatientsOrdersDeliveryDates', array(
            'local' => 'id',
            'foreign' => 'order_id',
        ));
        
        
        $this->hasMany('PatientsOrdersMaterials', array(
            'local' => 'id',
            'foreign' => 'order_id',
        ));
        
        
        $this->hasMany('PatientsOrdersRecipients', array(
            'local' => 'id',
            'foreign' => 'order_id',
        ));
        
        $this->hasMany('PatientsOrdersMedication', array(
            'local' => 'id',
            'foreign' => 'order_id',
        ));
        

        $this->hasMany('PatientsOrdersPeriods', array(
            'local' => 'parent_id',
            'foreign' => 'parent_id',
        ));
 
        /*
         *  auto-added by builder
         */
        $this->actAs(new Softdelete());
            
        /*
         *  auto-added by builder
         */
        $this->actAs(new Timestamp());
        
        
        //DO NOT MOVE - Leave this at the end ( after Softdelete and Timestamp)
        $this->addListener(new HistoryListener(array(
        
        )), "HistoryListener");
        
    }
}