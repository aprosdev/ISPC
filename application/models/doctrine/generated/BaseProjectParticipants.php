<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ProjectParticipants', 'SYSDAT');

/**
 * BaseProjectParticipants
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $project_participant_ID
 * @property integer $project_ID
 * @property enum $participant_type
 * @property integer $participant_id
 * @property string $participant_name
 * @property string $work_description
 * @property date $work_date
 * @property integer $work_duration
 * @property integer $work_driving_distance
 * @property integer $work_driving_time
 * @property integer $isdelete
 * @property timestamp $create_date
 * @property integer $create_user
 * @property timestamp $change_date
 * @property integer $change_user
 * 
 * @package    ISPC
 * @subpackage Application (2018-05-11)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseProjectParticipants extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('project_participants');
        
        $this->hasColumn('project_participant_ID', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('project_ID', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('participant_type', 'enum', 15, array(
             'type' => 'enum',
             'length' => 15,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'user',
              1 => 'voluntaryworker',
              2 => 'manual',
             ),
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'comment' => 'manual is Jhon Doe '
             ));
        $this->hasColumn('participant_id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'id from table users or voluntaryworkers, null=manual',
             ));
        $this->hasColumn('participant_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'comment' => 'manual participant name',
             ));
        $this->hasColumn('work_description', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('work_date', 'date', null, array(
             'type' => 'date',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('work_duration', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'comment' => 'in minutes',
             ));
        $this->hasColumn('work_driving_distance', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'comment' => 'in km',
             ));
        $this->hasColumn('work_driving_time', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'comment' => 'in minutes',
             ));
        /*
        $this->hasColumn('isdelete', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_user', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             ));
        */
        $this->index('PRIMARY', array(
            'fields' => array('project_participant_ID'),
            'primary' => true
        ));
        
        $this->index('idx_project_ID', array(
            'fields' => array('project_ID')
        ));
        
        $this->index('idx_isdeleted', array(
            'fields' => array('isdelete')
        ));
    }

    public function setUp()
    {
        parent::setUp();
        
        $this->actAs(new Timestamp());
        
        $this->actAs(new Softdelete());
        
        $this->hasOne('Projects', array(
            'local' => 'project_ID',
            'foreign' => 'project_ID'
        ));

        
        
        
    }
}