<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('RegisterTextsList', 'SYSDAT');

/**
 * BaseRegisterTextsList
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $clientid
 * @property integer $isdelete
 * @property enum $field_name
 * @property string $field_value
 * @property timestamp $create_date
 * @property timestamp $change_date
 * @property integer $create_user
 * @property integer $change_user
 * 
 * @package    ISPC
 * @subpackage Application (2017-08-29)
 * @author     ancuta <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRegisterTextsList extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('register_texts_list');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('clientid', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));

        $this->hasColumn('field_name', 'enum', 19, array(
             'type' => 'enum',
             'length' => 19,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'aufwand_mit',
              1 => 'problem_besonders',
              2 => 'problem_ausreichend',
              3 => 'bedarf',
              4 => 'massnahmen',
             ),
             'primary' => false,
             'default' => 'aufwand_mit',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('field_value', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
       /*  
         $this->hasColumn('isdelete', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
         $this->hasColumn('create_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_date', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('create_user', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('change_user', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             )); */
    }

    public function setUp()
    {
        parent::setUp();
        
        $this->actAs(new Timestamp());
        $this->actAs(new Softdelete());
        
        
    }
}