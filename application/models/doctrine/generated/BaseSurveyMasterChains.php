<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('SurveyMasterChains', 'IDAT');

/**
 * BaseSurveyMasterChains
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property integer $date
 * @property enum $active
 * @property enum $type
 * @property enum $project_only
 * @property integer $project
 * @property integer $master_chain
 * @property enum $rights_managed
 * @property enum $progress
 * @property string $anchors
 * @property integer $scores
 * @property enum $logins
 * @property enum $timer
 * @property enum $save
 * @property enum $unanswered
 * @property string $last_screen
 * @property string $css
 * 
 * ISPC-2695
 * 
 * @package    ISPC
 * @subpackage Application (2020-11-04)
 * @author     Ancuta <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseSurveyMasterChains extends Pms_Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('survey_master_chains');

        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('date', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('active', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => '0',
              1 => '1',
             ),
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('type', 'enum', 10, array(
             'type' => 'enum',
             'length' => 10,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'patient',
              1 => 'practice',
              2 => 'chain-link',
             ),
             'primary' => false,
             'default' => 'patient',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('project_only', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => '0',
              1 => '1',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('project', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('master_chain', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('rights_managed', 'enum', 3, array(
             'type' => 'enum',
             'length' => 3,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'yes',
              1 => 'no',
             ),
             'primary' => false,
             'default' => 'no',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('progress', 'enum', 2, array(
             'type' => 'enum',
             'length' => 2,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'tp',
              1 => 'pb',
              2 => 'no',
             ),
             'primary' => false,
             'default' => 'tp',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('anchors', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('scores', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('logins', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'o',
              1 => '1',
              2 => 'm',
             ),
             'primary' => false,
             'default' => 'o',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('timer', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => '0',
              1 => '1',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('save', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => '0',
              1 => '1',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('unanswered', 'enum', 1, array(
             'type' => 'enum',
             'length' => 1,
             'fixed' => false,
             'unsigned' => false,
             'values' => 
             array(
              0 => '0',
              1 => '1',
             ),
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('last_screen', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('css', 'string', null, array(
             'type' => 'string',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));


        $this->index('active', array(
             'fields' => 
             array(
              0 => 'active',
             ),
             ));
        $this->index('type', array(
             'fields' => 
             array(
              0 => 'type',
             ),
             ));
        $this->index('master_chain', array(
             'fields' => 
             array(
              0 => 'master_chain',
             ),
             ));
    }    
            

    public function setUp()
    {
        parent::setUp();
        
    }
}