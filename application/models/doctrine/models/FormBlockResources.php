<?php

/**
 * FormBlockResources
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ISPC-2673
 * @subpackage Application (2020-09-25)
 * @author     Lore <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2020-09-25 15:13:27Z jwage $
 */
class FormBlockResources extends BaseFormBlockResources
{            
    /**
     * translations are grouped into an array
     * @var unknown
     */
    const LANGUAGE_ARRAY    = 'formblockresources_lang';
            
    /**
     * define the FORMID and FORMNAME, if you want to piggyback some triggers
     * @var unknown
     */
    const TRIGGER_FORMID    = null;
    const TRIGGER_FORMNAME  = 'frm_formblockresources';
            
    /**
     * insert into patient_files will use this
     */
    const PATIENT_FILE_TABNAME  = 'FormBlockResources';
    const PATIENT_FILE_TITLE    = 'FormBlockResources PDF'; //this will be translated
            
    /**
     * insert into patient_course will use this
     */
    const PATIENT_COURSE_TITLE      = 'FormBlockResources PDF was created';
    const PATIENT_COURSE_TABNAME    = 'FormBlockResources';
    const PATIENT_COURSE_TYPE       = 'K'; // add letter

    
    public static function getMotoroptions()
    {
        $motor_arr = array(
            '1' => "Kopf drehen aber keine Kopfkontrolle (Neugeborenes)",
            '2' => "Gegenstände fixieren (1 Monat)",
            '3' => "Kopf anheben in Bauchlage (2 Monate)",
            '4' => "Kopf kontrollieren (3 Monate)",
            '5' => "In Bauchlage auf Unterarme stützen (3 Monate)",
            '6' => "Hände betrachten (3 Monate)",
            '7' => "Gegenstände greifen und reichen (6 Monate)",
            '8' => "In Bauchlage auf Hände stützen (6 Monate)",
            '9' => "Aus Rückenlage auf Seite drehen (6 Monate)",
            '10' => "Sitzen (hingesetzt) für kurze Zeit (6 Monate)",
            '11' => "Hinsetzen und frei sitzen (9 Monate)",
            '12' => "Sich zum Stehen hochziehen (9 Monate)",
            '13' => "Mit Unterstützung stehen (9 Monate)",
            '14' => "Kriechen (9 Monate)",
            '15' => "Scherengriff (9 Monate)",
            '16' => "Frei stehen (12 Monate)",
            '17' => "Pinzettengriff (12 Monate)",
            '18' => "Frei laufen (15 Monate)",
            '19' => "Aus dem Glas trinken (15 Monate)",
            '20' => "Selbstständig essen (15 Monate)",
            '21' => "Sicheres Laufen und Hindernisse umgehen (2 Jahre)",
            '22' => "Kritzeln (2 Jahre)",
            '23' => "Dreirad fahren (3 Jahre)",
            '24' => "Treppenlaufen (4 Jahre)",
            '25' => "Erwachsenengriff (4 Jahre)",
            '26' => "Auf einem Bein hüpfen (5 Jahre)",
            '27' => "Sonstiges"
        );
        
        return $motor_arr;
    }
    
    public static function getCommunicationoptions()
    {
        $communication_arr = array(
            '1' => "Seufzen (Neugeborenes)",
            '2' => "Schreien (Neugeborenes)",
            '3' => "Reaktive Laute bilden (2 Monate)",
            '4' => "Spontan vokalisieren (3 Monate)",
            '5' => "Vokalisiert antworten (6 Monate)",
            '6' => "Plaudern (6 Monate)",
            '7' => "Sprachlaute imitieren (5-9 Monate)",
            '8' => '"Mama", "Papa" sagen (9-12 Monate)',
            '9' => "Passiver Wortschatz: 100-150 Wörter (12-18 Monate) ",
            '10' => "Aktiver Wortschatz: 20-30 Wörter (12-18 Monate)",
            '11' => "Einwortsätze (12-18 Monate)",
            '12' => "Aktiver und passiver Wortschatz 50-200 Wörter (16-20 Monate)",
            '13' => "Wortschatzspurt (ab 18 Monaten)",
            '14' => "Zwei- und Dreiwortsätze (18-24 Monate)",
            '15' => "Vor- und Nachnamen sagen (3 Jahre)",
            '16' => "Singular und Plural richtig verwenden (3 Jahre)",
            '17' => "Geschichten erzählen (3 Jahre)",
            '18' => "Von Erlebnissen erzählen (4 Jahre)",
            '19' => "Nahezu fehlerfrei sprechen (5 Jahre)",
            '20' => "Sonstiges"
        );
        
        return $communication_arr;
    }
    
    public static function getSocialoptions()
    {
        $social_arr = array(
            '1' => "Spontan lächeln (Neugeborenes)",
            '2' => "Licht oder Gesichter fixieren (1 Monat)",
            '3' => "Soziales Lächeln (ab 6 Wochen)",
            '4' => "Sich Stimmen zuwenden (3 Monate)",
            '5' => "Laut lachen (6 Monate)",
            '6' => "Fremdeln (9 Monate)",
            '7' => '"Nein" sagen (2 Jahre)',
            '8' => "Um Hilfe bitten (2 Jahre)",
            '9' => "Bilderbuch ansehen (2 Jahre)",
            '10' => "Mit anderen Kindern spielen (3 Jahre)",
            '11' => "Sich mit Hilfe anziehen (3 Jahre)",
            '12' => "Tagsüber trocken sein, nachts teilweise (3 Jahre)",
            '13' => "Hinterfragen 'Warum?' (4 Jahre)",
            '14' => "Sich selbstständig anziehen (5 Jahre)",
            '15' => "Sonstiges"
        );
        
        return $social_arr;
    }
    
    public static function getIndependenceoptions()
    {
        $independence_arr = array(
            '1' => "Putzt Zähne eigenständig",
            '2' => "Putzt Zähne mit Unterstützung",
            '3' => "Kleidet sich eigenständig an- und aus",
            '4' => "Kleidet sich mit Unterstützung an- und aus",
            '5' => "Toilettengang eigenständig",
            '6' => "Toilettengang mit Unterstützung",
            '7' => "Isst eigenständig",
            '8' => "Isst mit Unterstützung",
            '9' => "Kann Sättigungsmonitor abmachen",
            '10' => "altersgemäß",
            '11' => "Sonstiges"
        );
        
        return $independence_arr;
    }
    
    public static function getSensors_listen_options()
    {
        $listen_arr = array(
            '1' => "Normales Gehör",
            '2' => "Beeinträchtigtes Gehör",
            '3' => "Dreht Kopf zu Geräuschquelle",
            '4' => "Reagiert auf akustische Reize",
            '5' => "Kein Gehör/Taub",
            '6' => "Sonstiges"
        );
        
        return $listen_arr;
    }
    
    public static function getSensors_see_options()
    {
        $see_arr = array(
            '1' => "Normale Sehfähigkeit",
            '2' => "Beeinträchtigte Sehfähigkeit",
            '3' => "Folgt Lichtquelle mit den Augen",
            '4' => "Dreht Kopf zu Lichtquelle",
            '5' => "Erkennt hell und dunkel",
            '6' => "Reagiert auf visuelle Reize",
            '7' => "nicht bekannt",
            '8' => "Sonstiges"
        );
        
        return $see_arr;
    }
    
    public function getLastContactformBlockResources($ipid)
    {
        if (empty($ipid)) {
            return; 
        }
        
        $fbr = Doctrine_Query::create()
        ->select("*")
        ->from('FormBlockResources')
        ->andWhere("ipid= ? ", $ipid)
        ->andWhere('isdelete = 0 ')
        ->orderby('contact_form_id DESC')
        ->limit(1);
        $fbrarr = $fbr->fetchArray();
        
        return $fbrarr;
        
    }
    
    public function getLastResources($ipid)
    {
        if (empty($ipid)) {
            return;
        }
        
        $fbr = Doctrine_Query::create()
        ->select("*")
        ->from('FormBlockResources')
        ->andWhere("ipid= ? ", $ipid)
        ->andWhere('isdelete = 0 ')
        ->andWhere('contact_form_id = 0');
        $fbrarr = $fbr->fetchArray();
        
        return $fbrarr;
        
    }
    
    
    public function getResources($ipid)
    {
        if (empty($ipid)) {
            return;
        }
        
        $fbr = new FormBlockResources();
        $fbr_stm = $fbr->getLastResources($ipid);                      // last stamdaten saved ressourcen
        if(empty($fbr_stm)){
            $fbr_arr = $fbr->getLastContactformBlockResources($ipid);      // last saved contact form ressourcen
        } else {
            $fbr_arr = $fbr_stm;
        }
        
        if(!empty($fbr_arr)){
            $motor = FormBlockResources::getMotoroptions();
            $Sensors_listen = FormBlockResources::getSensors_listen_options();
            $Sensors_see = FormBlockResources::getSensors_see_options();
            $Communication = FormBlockResources::getCommunicationoptions();
            $Social = FormBlockResources::getSocialoptions();
            $Independence = FormBlockResources::getIndependenceoptions();
            
            if(!empty($fbr_arr[0]['motor_skills_opt'])){
                $fbr_arr[0]['motor'] = '<ul class="resourc_pm">';
                $motor_skills_opt_arr = explode(",", $fbr_arr[0]['motor_skills_opt']);
                foreach($motor_skills_opt_arr as $km => $vm){
                        
                    if($km > 0 ){
                        $fbr_arr[0]['motor'] .= '';
                    }
                    $fbr_arr[0]['motor'] .= '<li>';
                    $fbr_arr[0]['motor'] .= $motor[$vm];
                    if($vm == 27){
                        $fbr_arr[0]['motor'] .= '('.$fbr_arr[0]['motor_skills_text'].')';
                    }
                    $fbr_arr[0]['motor'] .= '</li>';
                }
               $fbr_arr[0]['motor'] .= '</ul>';
            }

            if(!empty($fbr_arr[0]['sensors_listen_opt'])){
                $fbr_arr[0]['sensors_listen'] = '<ul class="resourc_pm">';
                $motor_skills_opt_arr = explode(",", $fbr_arr[0]['sensors_listen_opt']);
                foreach($motor_skills_opt_arr as $km => $vm){
                    if($km > 0 ){
                        $fbr_arr[0]['sensors_listen'] .= '';
                    }
                    $fbr_arr[0]['sensors_listen'] .= '<li>';
                    $fbr_arr[0]['sensors_listen'] .= $this->translate('listen').": ".$Sensors_listen[$vm];
                    if($vm == 6){
                        $fbr_arr[0]['sensors_listen'] .= '('.$fbr_arr[0]['sensors_listen_text'].')';
                    }
                    $fbr_arr[0]['sensors_listen'] .= '</li>';
                }
                $fbr_arr[0]['sensors_listen'] .= '</ul>';
            }

            if(!empty($fbr_arr[0]['sensors_see_opt'])){
                $fbr_arr[0]['sensors_see'] = '<ul class="resourc_pm">';
                $motor_skills_opt_arr = explode(",", $fbr_arr[0]['sensors_see_opt']);
                foreach($motor_skills_opt_arr as $km => $vm){
                    if($km > 0 ){
                        $fbr_arr[0]['sensors_see'] .= '';
                    }
                    $fbr_arr[0]['sensors_see'] .= '<li>';
                    $fbr_arr[0]['sensors_see'] .= $this->translate('see').": ".$Sensors_see[$vm];
                    if($vm == 8){
                        $fbr_arr[0]['sensors_see'] .= '('.$fbr_arr[0]['sensors_see_text'].')';
                    }
                    $fbr_arr[0]['sensors_see'] .= '</li>';
                }
                $fbr_arr[0]['sensors_see'] .= '</ul>';
            }
            
            if($fbr_arr[0]['sensors_smel_opt'] == 1 ){
                $fbr_arr[0]['sensors_smel'] = '<ul class="resourc_pm">';
                $fbr_arr[0]['sensors_smel'] .= '<li>'.$this->translate('smeel').'</li>';
                $fbr_arr[0]['sensors_smel'] .= '</ul>';
            }
            if($fbr_arr[0]['sensors_feel_opt'] == 1){
                $fbr_arr[0]['sensors_feel'] = '<ul class="resourc_pm">';
                $fbr_arr[0]['sensors_feel'] .=  '<li>'.$this->translate('feel').'</li>' ;
                $fbr_arr[0]['sensors_feel'] .= '</ul>';
            }
            
            if(!empty($fbr_arr[0]['communication_opt'])){
                $fbr_arr[0]['communication'] = '<ul class="resourc_pm">';
                $motor_skills_opt_arr = explode(",", $fbr_arr[0]['communication_opt']);
                foreach($motor_skills_opt_arr as $km => $vm){
                    if($km > 0 ){
                        $fbr_arr[0]['communication'] .= '';
                    }
                    $fbr_arr[0]['communication'] .= '<li>';
                    $fbr_arr[0]['communication'] .= $Communication[$vm];
                    if($vm == 20){
                        $fbr_arr[0]['communication'] .= '('.$fbr_arr[0]['communication_text'].')';
                    }
                    $fbr_arr[0]['communication'] .= '</li>';
                } 
                $fbr_arr[0]['communication'] .= '</ul>';
            }
            if(!empty($fbr_arr[0]['social_behavior_opt'])){
                $fbr_arr[0]['social'] = '<ul class="resourc_pm">';
                $motor_skills_opt_arr = explode(",", $fbr_arr[0]['social_behavior_opt']);
                foreach($motor_skills_opt_arr as $km => $vm){
                    if($km > 0){
                        $fbr_arr[0]['social'] .= '';
                    }
                    $fbr_arr[0]['social'] .= '<li>';
                    $fbr_arr[0]['social'] .= $Social[$vm];
                    if($vm == 15){
                        $fbr_arr[0]['social'] .= '('.$fbr_arr[0]['social_behavior_text'].')';
                    }
                    $fbr_arr[0]['social'] .= '</li>';
                }
                $fbr_arr[0]['social'] .= '</ul>';
            }
            if(!empty($fbr_arr[0]['independence_opt'])){
                $fbr_arr[0]['independence'] = '<ul class="resourc_pm">';
                $motor_skills_opt_arr = explode(",", $fbr_arr[0]['independence_opt']);
                foreach($motor_skills_opt_arr as $km => $vm){
                    if($km > 0){
                        $fbr_arr[0]['independence'] .= '';
                    }
                    $fbr_arr[0]['independence'] .= '<li>';
                    $fbr_arr[0]['independence'] .= $Independence[$vm];
                    if($vm == 11){
                        $fbr_arr[0]['independence'] .= '('.$fbr_arr[0]['independence_text'].')';
                    }
                    $fbr_arr[0]['independence'] .= '</li>';
                }
                $fbr_arr[0]['independence'] .= '</ul>';
            }
            
            if(!empty($fbr_arr[0]['preferences_and_interests']) || !empty($fbr_arr[0]['habits']) || !empty($fbr_arr[0]['dislikes']) || !empty($fbr_arr[0]['sole_occupations'])){
                $fbr_arr[0]['employment'] = '<ul class="resourc_pm">';
                $fbr_arr[0]['employment'] .= !empty($fbr_arr[0]['preferences_and_interests']) ? '<li>'.$this->translate('preferences_and_interests').': '.$fbr_arr[0]['preferences_and_interests'].'</li>' : "" ;
                $fbr_arr[0]['employment'] .= !empty($fbr_arr[0]['habits']) ? '<li>'.$this->translate('habits').': '.$fbr_arr[0]['habits'].'</li>' : "" ;
                $fbr_arr[0]['employment'] .= !empty($fbr_arr[0]['dislikes']) ? '<li>'.$this->translate('dislikes').': '.$fbr_arr[0]['dislikes'].'</li>' : "" ;
                $fbr_arr[0]['employment'] .= !empty($fbr_arr[0]['sole_occupations']) ? '<li>'.$this->translate('sole_occupations').': '.$fbr_arr[0]['sole_occupations'].'</li>' : "" ;
                $fbr_arr[0]['employment'] .= '</ul>';
            }
        } 

        return $fbr_arr;
        
    }

}