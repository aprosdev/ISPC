<?php

/**
 * InvoiceSystem
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ISPC
 * @subpackage Application (2018-06-19)
 * @author     Ancuta <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class InvoiceSystem extends BaseInvoiceSystem
{
    


    public function invoice_products($invoice_type = false){

        $products['bre_kinder_invoice'] = array(
            "monthly_fee",//Monatspauschale;
            "transfer2standard",// Uberfuhrung in die Regelversorgung
            "rejected_regulation",//abgelehnte Verordnungen;
        );
        
        //ISPC-2286
        $products['nr_invoice'] = array(
            "b1",// Beratung Grundpauschale (Tag 1-28) ;[can be billed one time per LIFE 	is billed for FIRST ever XT entry or "Beratung" shortcut in verlauf in the first 28 days of treatment ]
            "b2",// Beratung Folgepauschale (ab Tag 29) [can be billed one time per LIFE 	is billed for FIRST ever XT entry or "Beratung" shortcut in verlauf from day 29 of treatment ]
            "k1",// Koordination/Assessment Grundpauschale (Tag 1-28) [for 1-n assessment forms being filled in the days 1- 28 	is billed for the ASSESMENT being filled ]
            "k2",// Koordination/Assessment Folgepauschale (ab Tag 29) [ONE TIME BILLED ! 	for 1-n FOLGE-assessment forms being filled from day 29 of reatment ]
            "tv1",// TV/VV Versorgungstag ambulant [ONE per day max. 	billed for every day WITH A VISIT ]
            "tvh",// TV Versorgungstag stat. Hospiz  [ONE per day max.  -  	billed for every day WITH A VISIT in HOSPIZ ]
            "dth",// allpauschale Exitus 48h  [can be billed one time per LIFE ]
        );
        
        $products['rlp_invoice'] = array(
            "be_aasse",//Beratung / Assessment gem. ยง7 Abs. 1;
            "sapv_flatrate",//Pauschale , wenn es nicht zur Versorgung mit SAPV kommt
            "first_dot",//Am 1. Behandlungstag ;
            "second_dot",//ab dem 2. Behandlungstag ;
            "doctor_visit",//Koordinationspausch. Arzt ;
            "nurse_visit",//Koordinationspausch. Pflege ;
            "regional_flatrate" // Regionale Strukturpauschale ;
        );
        
        $products['demstepcare_invoice'] = array(
            "q_adm",//Custom name: triggered by admission , can be billed once per patient life 
            "q_gav",//Custom name: triggered for a quartal in which the STATUS of the patient was GREEN, patient was active and had one visit (on an active day) 
            "q_yav",//Custom name: triggered for a quartal in which the STATUS of the patient was YELLOW, patient was active and had one visit (on an active day) 
            "q_rav",//Custom name: triggered for a quartal in which the STATUS of the patient was RED, patient was active and had one visit (on an active day) 
            "q_case",//Custom name: triggered(manually) for a quartal in which "case management" is triggered 
            "q_crisis",//Custom name: triggered(manually) for a quartal in which "Krisenmanagement" is triggered 
        );
        
        //ISPC-2585 Ancuta 15.06.2020
        $products['demstepcare_internal_invoice'] = array(
            "q_adm",//Custom name: triggered by admission , can be billed once per patient life 
            "q_gav",//Custom name: triggered for a quartal in which the STATUS of the patient was GREEN, patient was active and had one visit (on an active day) 
            "q_yav",//Custom name: triggered for a quartal in which the STATUS of the patient was YELLOW, patient was active and had one visit (on an active day) 
            "q_rav",//Custom name: triggered for a quartal in which the STATUS of the patient was RED, patient was active and had one visit (on an active day) 
//             "q_case",//Custom name: triggered(manually) for a quartal in which "case management" is triggered 
//             "q_crisis",//Custom name: triggered(manually) for a quartal in which "Krisenmanagement" is triggered 
        );
 
        
        if($invoice_type){
            return $products[$invoice_type];
        } else {
            return $products;
        }	
    }
    
    public function invoice_locations_mapping($invoice_type = false){
        	
        $locations['bre_kinder_invoice'] = array(
            //HOME
            "home" => array(
                "location_type" => array(
                    "5", // Zu Hause
                )
            ),
            
            // "Altenheim" or "Pflegheim"
            "heim" => array(
                "location_type" => array(
                    "4", //Altenheim
                    "3" //Pflegeheim
                )
            ),
            "all" => array( ),
        
        );
        
        //ISPC-2286
        $locations['nr_invoice'] = array(
            //privater Haushalt
            "private_house" => array(
                "location_type" => array(//  privater Haushalt
                    "5", // Zu Hause
                    "6" // bei Kontaktperson
                )
            ),
            
            // teilstat. Pflege
            "partial_care_facility" => array(
                "location_type" => array(//teilstat. Pflege
                    "9" //Kurzzeitpflege
                )
            ),
            
            
            // vollstat. Pflege
            "complete_care_facility" => array(
                "location_type" => array(// vollstat. Pflege
                    "4", //Altenheim
                    "3" //Pflegeheim 
                )
            ),
            
            
            // Behinderteneinrichtung
            "disabled_care_facility" => array(
                "location_type" => array(// Behinderteneinrichtung

                )
            ),
            
            
            // stat. Hospiz
            "hospiz_location" => array(
                "location_type" => array(//stat. Hospiz
                    "2" //Hospiz
                )
            ),
            // Sonstiger Ort
            "other_locations" =>array(
                "location_type" => array( //Sonstiger Ort
                    "8", // betreutes Wohnen
                    "0" // Sonstige
                )
            )
        );
        
        
        
        
        
        $locations['rlp_invoice'] = array(
            //privater Haushalt
            "private_house" => array(
                "dta_digits_1_2" => "00",
                "location_type" => array(//  privater Haushalt
                    "5", // Zu Hause
                    "6" // bei Kontaktperson
                )
            ),
            // vollst. Pflegeeinrichtung
            "complete_care_facility" => array(
                "dta_digits_1_2" => "10",
                "location_type" => array(//vollst. Pflegeeinrichtung
                    "9", //Kurzzeitpflege
                    "3" //Pflegeheim
                )
            ),
            // teilst. Pflegeeinrichtung
            "partial_care_facility" => array(
                "dta_digits_1_2" => "20",
                "location_type" => array(//teilst. Pflegeeinrichtung
                    "4", //Altenheim
                    "8" // betreutes Wohnen
                )
            ),
            // stat. Hospiz
            "hospiz_location" => array(
                "dta_digits_1_2" => "30",
                "location_type" => array(//stat. Hospiz
                    "2" //Hospiz
                )
            ),
            // sonst. Ort
            "other_locations" =>array(
                "dta_digits_1_2" => "60",
                "location_type" => array(//sonst. Ort
                    "0" // Sonstige
                )
            )
        );
        

        $locations['demstepcare_invoice'] = array(
            "all" => array( ),
        
        );
        
        
        if($invoice_type){
            return $locations[$invoice_type];
        } else {
            return $locations;
        }
    }
    
    
    
    public function invoice_products_default_prices($invoice_type = false){
        	
        $products_default_prices['bre_kinder_invoice'] = array(
            "monthly_fee"=> array(//Monatspauschale;
                "home"=>array(
                    "price"=>"1963.00",
                    "dta_price"=>"1963.00",
                    "dta_id"=>"00 10 55 6000",
                ),
                "heim"=>array(
                    "price"=>"1963.00",
                    "dta_price"=>"1963.00",
                    "dta_id"=>"10 10 55 6000",
                ),
            ),
            
            "transfer2standard"=> array(// Uberfuhrung in die Regelversorgung
                "all"=>array(
                    "price"=>"400.00",
                    "dta_price"=>"400.00",
                    "dta_id"=>"00 10 35 2001",
                )
            ),
            
            "rejected_regulation"=> array(//abgelehnte Verordnungen;
                "all"=>array(
                    "price"=>"400.00",
                    "dta_price"=>"400.00",
                    "dta_id"=>"00 10 55 7300",
                )
            ),
            
            
        );        
        
        $products_default_prices['rlp_invoice'] = array(
            // Beratung / Assessment gem. ยง7 Abs. 1
            "be_aasse" => array(
                "private_house"=> array(
                    "price"=>"255.00",
                    "dta_price"=>"255.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"1001",
                ),
                "complete_care_facility"=> array(
                    "price"=>"255.00",
                    "dta_price"=>"255.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"1001",
                ),
                	
                "partial_care_facility"=> array(
                    "price"=>"255.00",
                    "dta_price"=>"255.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"1001",
                ),
                "hospiz_location"=> array(
                    "price"=>"100.00",
                    "dta_price"=>"400.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"1001",
                ),
                "other_locations"=> array(
                    "price"=>"255.00",
                    "dta_price"=>"255.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"1001",
                ),
            ),
            	
            //Pauschale , wenn es nicht zur Versorgung mit SAPV kommt
            "sapv_flatrate" => array(
                "private_house"=> array(
                    "price"=>"150.00",
                    "dta_price"=>"150.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2002",
                ),
                "complete_care_facility"=> array(
                    "price"=>"150.00",
                    "dta_price"=>"150.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2002",
                ),
                	
                "partial_care_facility"=> array(
                    "price"=>"150.00",
                    "dta_price"=>"150.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2002",
                ),
                "hospiz_location"=> array(
                    "price"=>"150.00",
                    "dta_price"=>"150.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2002",
                ),
                "other_locations"=> array(
                    "price"=>"150.00",
                    "dta_price"=>"150.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2002",
                ),
            ),
            //Am 1. Behandlungstag ;
            "first_dot" => array(
                "private_house"=> array(
                    "price"=>"230.00",
                    "dta_price"=>"230.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2001",
                ),
                "complete_care_facility"=> array(
                    "price"=>"218.00",
                    "dta_price"=>"218.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2001",
                ),
                	
                "partial_care_facility"=> array(
                    "price"=>"100.00",
                    "dta_price"=>"100.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2001",
                ),
                "hospiz_location"=> array(
                    "price"=>"100.00",
                    "dta_price"=>"100.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2001",
                ),
                "other_locations"=> array(
                    "price"=>"230.00",
                    "dta_price"=>"230.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2001",
                ),
            ),
            //ab dem 2. Behandlungstag ;
            "second_dot" => array(
                "private_house"=> array(
                    "price"=>"115.00",
                    "dta_price"=>"115.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2001",
                ),
                "complete_care_facility"=> array(
                    "price"=>"109.00",
                    "dta_price"=>"109.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2001",
                ),
                	
                "partial_care_facility"=> array(
                    "price"=>"109.00",
                    "dta_price"=>"109.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2001",
                ),
                "hospiz_location"=> array(
                    "price"=>"50.00",
                    "dta_price"=>"50.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2001",
                ),
                "other_locations"=> array(
                    "price"=>"115.00",
                    "dta_price"=>"115.00",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"2001",
                ),
            ),
            	
            //Koordinationspausch. Arzt;
            "doctor_visit" => array(
                "private_house"=> array(
                    "price"=>"4.00",
                    "dta_price"=>"4.00",
                    "dta_digits_3_4"=>"20",
                    "dta_digits_7_10"=>"4102",
                ),
                "complete_care_facility"=> array(
                    "price"=>"4.00",
                    "dta_price"=>"4.00",
                    "dta_digits_3_4"=>"20",
                    "dta_digits_7_10"=>"4102",
                ),
                	
                "partial_care_facility"=> array(
                    "price"=>"4.00",
                    "dta_price"=>"4.00",
                    "dta_digits_3_4"=>"20",
                    "dta_digits_7_10"=>"4102",
                ),
                "hospiz_location"=> array(
                    "price"=>"4.00",
                    "dta_price"=>"4.00",
                    "dta_digits_3_4"=>"20",
                    "dta_digits_7_10"=>"4102",
                ),
                "other_locations"=> array(
                    "price"=>"4.00",
                    "dta_price"=>"4.00",
                    "dta_digits_3_4"=>"20",
                    "dta_digits_7_10"=>"4102",
                ),
            ),
            	
            // Koordinationspausch. Pflege;
            "nurse_visit" => array(
                "private_house"=> array(
                    "price"=>"2.00",
                    "dta_price"=>"2.00",
                    "dta_digits_3_4"=>"30",
                    "dta_digits_7_10"=>"4103",
                ),
                "complete_care_facility"=> array(
                    "price"=>"2.00",
                    "dta_price"=>"2.00",
                    "dta_digits_3_4"=>"30",
                    "dta_digits_7_10"=>"4103",
                ),
                	
                "partial_care_facility"=> array(
                    "price"=>"2.00",
                    "dta_price"=>"2.00",
                    "dta_digits_3_4"=>"30",
                    "dta_digits_7_10"=>"4103",
                ),
                "hospiz_location"=> array(
                    "price"=>"2.00",
                    "dta_price"=>"2.00",
                    "dta_digits_3_4"=>"30",
                    "dta_digits_7_10"=>"4103",
                ),
                "other_locations"=> array(
                    "price"=>"2.00",
                    "dta_price"=>"2.00",
                    "dta_digits_3_4"=>"30",
                    "dta_digits_7_10"=>"4103",
                ),
            ),
            	
            // Regionale Strukturpauschale
            "regional_flatrate" => array(
                "private_house"=> array(
                    "price"=>"106.51",
                    "dta_price"=>"106.51",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"7001",
                ),
                "complete_care_facility"=> array(
                    "price"=>"106.51",
                    "dta_price"=>"106.51",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"7001",
                ),
                	
                "partial_care_facility"=> array(
                    "price"=>"106.51",
                    "dta_price"=>"106.51",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"7001",
                ),
                "hospiz_location"=> array(
                    "price"=>"106.51",
                    "dta_price"=>"106.51",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"7001",
                ),
                "other_locations"=> array(
                    "price"=>"106.51",
                    "dta_price"=>"106.51",
                    "dta_digits_3_4"=>"10",
                    "dta_digits_7_10"=>"7001",
                ),
            )
            	
        );

        $products_default_prices['demstepcare_invoice'] = array(
        
            "q_adm"=> array( 
                "all"=>array(
                    "price"=>"0.00"
                )
            ),
            "q_gav"=> array( 
                "all"=>array(
                    "price"=>"0.00"
                )
            ),
            "q_yav"=> array( 
                "all"=>array(
                    "price"=>"0.00"
                )
            ),
            "q_rav"=> array( 
                "all"=>array(
                    "price"=>"0.00"
                )
            ),
            "q_case"=> array( 
                "all"=>array(
                    "price"=>"0.00"
                )
            ),
            "q_crisis"=> array( 
                "all"=>array(
                    "price"=>"0.00"
                )
            ),
        
        
        );
        
        
        // ISPC-2286
        // Ancuta - 06.12.2018
        $inv_product = InvoiceSystem::invoice_products($invoice_type);
        $inv_locations = InvoiceSystem::invoice_locations_mapping($invoice_type);
        
        
        foreach($inv_product as $product){
            foreach($inv_locations as $location=>$loc_info){
                $products_default_prices[$invoice_type][$product][$location] = "0.00";
            }
        }
        
        
        if($invoice_type){
            return $products_default_prices[$invoice_type];
        } else {
            return $products_default_prices;
        }
        
    }
    
    
 
    
    
    public function get_invoiced_sapvs($invoice_type = false, $ipids)
    {
        if( ! $invoice_type){
            return false;
        }
        
        if(empty($ipids)){
            return false;
        }
    
        
        // TODO-1961 - Ancuta 12.12.2018
        // get storno ids -
        $storno_arr = Doctrine_Query::create()
        ->select("*")
        ->from('InvoiceSystem')
        ->whereIn("ipid", $ipids)
        ->andwhere('storno = "1"')
        ->andwhere('isdelete = "0"')
        ->fetchArray();
        	
        $storno_ids = array();
        if(!empty($storno_arr)){
            foreach($storno_arr as $inv => $sinv){
                $storno_ids[] = $sinv['record_id'];
            }
        }
        //--
        
        
        
        $invoiced_sapvs = Doctrine_Query::create()
        ->select("*")
        ->from('InvoiceSystem')
        ->whereIn("ipid", $ipids)
        ->andwhere('invoice_type = ?',$invoice_type)
        ->andwhere('storno = "0"')
        ->andwhere('isdelete = "0"');
        // TODO-1961 - Ancuta 12.12.2018
        if(!empty($storno_ids)){
            $invoiced_sapvs->andwhereNotIn('id',$storno_ids);
        }
        // --
        $invoiced_sapvs_res = $invoiced_sapvs->fetchArray();
    
        $invoices_sapvs_ids = array();
        if($invoiced_sapvs_res)
        {
            
            foreach($invoiced_sapvs_res as $k_res => $v_res)
            {
                $invoices_sapvs_ids[$v_res['invoice_type']]['sapv'][] = $v_res['sapvid'];
                $invoices_sapvs_ids[$v_res['invoice_type']]['sapv'] = array_values(array_unique($invoices_sapvs_ids[$v_res['invoice_type']]['sapv']));
    
                $invoices_sapvs_ids[$v_res['invoice_type']]['fall'][] = $v_res['ipid'] . '_' . date("Y_m_d", strtotime($v_res['invoice_start'])). '_' . date("Y_m_d", strtotime($v_res['invoice_end']));
                $invoices_sapvs_ids[$v_res['invoice_type']]['fall'] = array_values(array_unique($invoices_sapvs_ids[$v_res['invoice_type']]['fall']));
    
                $invoices_sapvs_ids[$v_res['invoice_type']]['admission'][] = $v_res['admissionid'];
                $invoices_sapvs_ids[$v_res['invoice_type']]['admission'] = array_values(array_unique($invoices_sapvs_ids[$v_res['invoice_type']]['admission']));
                
                //ISPC-2461 Ancuta 16.11.2019
                $invoices_sapvs_ids[$v_res['invoice_type']]['quarter'][] = $v_res['ipid'] . '_' . $v_res['quarterid'];
                $invoices_sapvs_ids[$v_res['invoice_type']]['quarter'] = array_values(array_unique($invoices_sapvs_ids[$v_res['invoice_type']]['quarter']));
                //--
            }
            
            return $invoices_sapvs_ids[$invoice_type];
        }
        else
        {
            return false;
        }
    }
    
    
    public function getInvoices($invoice_type = false, $invoice, $status = false)
    {
        if( ! $invoice_type){
            return false;
        }
        
        if(empty($invoice)){
            return false;
        }
        
        if( !is_array($invoice)){
            $invoice = array($invoice);
        }
        
        $invoices_items = new InvoiceSystemItems();
    
        $invoices = Doctrine_Query::create()
        ->select("*, IF(completed_date is null, create_date, IF(completed_date is null, create_date, completed_date)) as completed_date_sort")
        ->from('InvoiceSystem')
        ->whereIn("id", $invoice)
        ->andWhere('invoice_type = ?',$invoice_type)
        ->andWhere('isdelete = 0');
        if($status)
        {
            $invoices->andWhere('status = ? ', $status);
        }
        $invoices->limit('1');
        $invoices_res = $invoices->fetchArray();
    
        	
        if($invoices_res)
        {
            //get all invoice items
            $invoice_items = $invoices_items->getInvoicesItems($invoice_type,$invoices_res[0]['id']);
    
    
            foreach($invoices_res as $k_invoice_res => $v_invoice_res)
            {
                if($v_invoice_res['completed_date'] != '0000-00-00 00:00:00' && date('Y-m-d', strtotime($v_invoice_res['completed_date'])) != '1970-01-01')
                {
                    $v_invoice_res['completed_date'] = date('d.m.Y', strtotime($v_invoice_res['completed_date']));
                }
                else
                {
                    $v_invoice_res['completed_date'] = date('d.m.Y');
                }
    
                $invoice_details = $v_invoice_res;
    
                if($invoice_items)
                {
                    $invoice_details['items'] = $invoice_items[$v_invoice_res['id']];
                }
            }
    
    
            return $invoice_details;
        }
        else
        {
            return false;
        }
    }
    
    public function get_invoice($invoice_type = false, $invoiceid)
    {
        if( ! $invoice_type || empty($invoiceid)){
            return false;
        }
        
        
        $invoices = Doctrine_Query::create()
        ->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort")
        ->from('InvoiceSystem')
        ->andWhere('id = ?', $invoiceid)
        ->andWhere('invoice_type = ?', $invoice_type)
        ->andWhere('isdelete = 0');
        $invoices_res = $invoices->fetchArray();
    
        if($invoices_res)
        {
            return $invoices_res;
        }
        else
        {
            return $invoices;
        }
    }
    
    public function get_highest_invoice_number($invoice_type = false, $clientid, $prefix = false, $all = false)
    {
        if( ! $invoice_type || empty($clientid)){
            return false;
        }
        
        $invoice_number = Doctrine_Query::create()
        ->select("*")
        ->from('InvoiceSystem')
        ->where("client=?", $clientid )
        ->andWhere('invoice_type = ?',$invoice_type)
        ->andWhere('isdelete = 0')
        ->orderBy('invoice_number DESC')
        ->limit('1');
        if($prefix)
        {
            $invoice_number->andWhere('prefix = ?', $prefix);
        }
        else if($all === false)
        {
            $invoice_number->andWhere('prefix = ""');
        }
        $invoice_number = $invoice_number->fetchArray();
    
        if($invoice_number)
        {
            return $invoice_number[0];
        }
        else
        {
            return false;
        }
    }
    
    
    public function create_storno_invoice($invoice_type = false, $invoiceid)
    {
        
        if( ! $invoice_type || empty($invoiceid)){
            return false;
        }
 
//         $find_invoice = Doctrine::getTable('InvoiceSystem')->findOneById($invoiceid); // ADD INVOICE TYPE !!!!!!!!!!!!!!!
//         $found_invoice = $find_invoice->toArray();
        
        $found_invoice = Doctrine_Query::create()
            ->select("*")
            ->from('InvoiceSystem')
            ->where('id = ?', $invoiceid)
            ->andWhere("invoice_type = ? ",$invoice_type)
            ->andWhere('isdelete = 0')
            ->limit(1)
            ->fetchOne(null, Doctrine_Core::HYDRATE_ARRAY);
        
        
        
    
            $has_storno = self::has_storno($invoice_type,$invoiceid);
    
        if($found_invoice && !$has_storno)
        {
            $inv = new InvoiceSystem();
            $inv->invoice_type = $invoice_type;
            $inv->invoice_start = $found_invoice['invoice_start'];
            $inv->invoice_end = $found_invoice['invoice_end'];
            $inv->start_active = $found_invoice['start_active'];
            $inv->end_active = $found_invoice['end_active'];
            $inv->start_sapv = $found_invoice['start_sapv'];
            $inv->end_sapv = $found_invoice['end_sapv'];
            $inv->sapv_approve_date = $found_invoice['sapv_approve_date'];
            $inv->sapv_approve_nr = $found_invoice['sapv_approve_nr'];
            $inv->ipid = $found_invoice['ipid'];
            $inv->client = $found_invoice['client'];
            
            //ISPC-2532 Carmen 14.02.2020
            $invoice_number = $this->get_next_invoice_number($invoice_type, $found_invoice['client']);
            if($found_invoice['client'] != 0)
            {
            	$inv->prefix = $invoice_number['prefix'];
            	$inv->invoice_number = $invoice_number['invoicenumber'];
            }
            else
            {
            	$inv->prefix = $found_invoice['prefix'];
            	$inv->invoice_number = $found_invoice['invoice_number'];
            }
            //--
            
            $inv->invoice_total = $found_invoice['invoice_total'];
            $inv->status = $found_invoice['status'];
            $inv->address = $found_invoice['address'];
            $inv->footer = $found_invoice['footer'];
            $inv->isdelete = '0';
            $inv->record_id = $invoiceid;
            $inv->storno = '1';
            //$inv->completed_date = $found_invoice['completed_date'];
            $inv->completed_date = date('Y-m-d H:i:s', time());        //ISPC-2532 Lore 11.11.2020
            $inv->save();
        }
    }
    
    
    public function del_storno_invoice($invoice_type = false, $invoiceid)
    {
        // !!!!!!!!!!!!!!!!!!!!!!!
        // !!!!!!!!!!!!!!!!!!!!!!!
        // !!!!!!!!!!!!!!!!!!!!!!!
        // !!!!!!!!!!!!!!!!!!!!!!!
        // !!!!!!!!!!!!!!!!!!!!!!!
        if( ! $invoice_type || empty($invoiceid)){
            return false;
        }
        
        $found_invoice_obj = Doctrine_Query::create()
        ->select("*")
        ->from('InvoiceSystem')
        ->where('id = ?', $invoiceid)
        ->andWhere("invoice_type = ? ",$invoice_type)
        ->andWhere('isdelete = 0')
        ->limit(1)
        ->fetchOne();
        
        
        if( ! empty($found_invoice_obj)){
            $$found_invoice_obj->set("isdelete", "1")->save();
            
            
        }
//         $del_storno_invoice = Doctrine::getTable('InvoiceSystem')->findOneById($invoiceid); // ADD INVOICE TYPE !!!!!!!!!!!!!!!
//         $del_storno_invoice->isdelete = '1';
//         $del_storno_invoice->save();
    }
    
    public function get_previous_patient_invoices($invoice_type = false, $ipid, $clientid)
    {
        
        if( ! $invoice_type || empty($ipid)){
            return false;
        }
        
        if(!is_array($ipid))
        {
            $ipids = array($ipid);
        }
        else
        {
            $ipids = $ipid;
        }
    
        $invoices = Doctrine_Query::create()
        ->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort")
        ->from('InvoiceSystem')
        ->whereIn('ipid', $ipids)
        ->andWhere("client= ? ",$clientid)
        ->andWhere("invoice_type = ? ",$invoice_type)
        ->andWhere('isdelete = 0')
        ->andWhere(' DATE(invoice_start) < DATE("' . date('Y-m-d', time()) . '")');
        $invoices_res = $invoices->fetchArray();
    
        if($invoices_res)
        {
            return $invoices_res;
        }
        else
        {
            return false;
        }
    }
    
    public function get_previous_patients_invoices($invoice_type = false, $ipid)
    {
        

        if( ! $invoice_type || empty($ipid)){
            return false;
        }
        
        if(!is_array($ipid))
        {
            $ipids = array($ipid);
        }
        else
        {
            $ipids = $ipid;
        }
    
        $invoices = Doctrine_Query::create()
        ->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort")
        ->from('InvoiceSystem')
        ->whereIn('ipid', $ipids)
        ->andWhere('invoice_type = ?',$invoice_type)
        ->andWhere('isdelete = 0');
        $invoices_res = $invoices->fetchArray();
    
        if($invoices_res)
        {
            return $invoices_res;
        }
        else
        {
            return false;
        }
    }
    
    public function get_next_invoice_number($invoice_type = false, $clientid, $temp = false)
    {

        if( ! $invoice_type || empty($clientid)){
            return false;
        }
        
        $client = new Client();
        $invoice_settings = new InvoiceSettings();
        $invoices = new InvoiceSystem();
        $client_data = $client->getClientDataByid($clientid);
    
        $collective = '0';
        if($client_data[0]['invoice_number_type'] == '1')
        {
            $collective = '1';
        }
        
        $required_shortcuts = array($invoice_type);
        $invoice_settings_arr = $invoice_settings->getClientInvoiceSettings($clientid, $required_shortcuts, $collective);
   
    
        if($client_data[0]['invoice_number_type'] == '0') //individual type
        {
          
            $invoiceSystem_number = $invoices->get_highest_invoice_number($invoice_type, $clientid, $invoice_settings_arr[$invoice_type]['invoice_prefix']);
            if($invoiceSystem_number)
            {
                if($invoiceSystem_number['invoice_number'] >= $invoice_settings_arr[$invoice_type]['invoice_start'] && $invoiceSystem_number['prefix'] == $invoice_settings_arr[$invoice_type]['invoice_prefix'])
                {
                    $prefix = $invoice_settings_arr[$invoice_type]['invoice_prefix'];
                    $i_number = $invoiceSystem_number['invoice_number'];
                    $i_number++;
                }
                else
                {
                    $prefix = $invoice_settings_arr[$invoice_type]['invoice_prefix'];
                    $i_number = $invoice_settings_arr[$invoice_type]['invoice_start'];
                    if($invoice_settings_arr[$invoice_type]['invoice_start'] == '0')
                    {
                        $i_number++;
                    }
                }
            }
            else
            {
                if(strlen($invoice_settings_arr[$invoice_type]['invoice_start']) > 0)
                {
                    $prefix = $invoice_settings_arr[$invoice_type]['invoice_prefix'];
                    $i_number = $invoice_settings_arr[$invoice_type]['invoice_start'];
                    if($invoice_settings_arr[$invoice_type]['invoice_start'] == '0')
                    {
                        $i_number++;
                    }
                }
                else
                {
                    $prefix = "";
                    $i_number = '1000';
                }
            }
            $invoicenumber = $i_number;
        }
        else
        {
            //get all client invoices highest number if collective settings are applied
            $collective_highest_number = $invoice_settings->get_all_invoices_high_number($clientid,$invoice_type);
    
            
            foreach($invoice_settings_arr as $k_inv_settigns => $v_inv_settings)
            {
                if(in_array($v_inv_settings['invoice_prefix'], $collective_highest_number['prefix']))
                {
                    foreach($collective_highest_number['number'] as $k_coll_high => $v_coll_high)
                    {
                        if($collective_highest_number['prefix'][$k_coll_high] == $v_inv_settings['invoice_prefix'])
                        {
                            $coll_numbers[] = $v_coll_high;
                        }
                    }
    
                    if(count($coll_numbers) > 0)
                    {
                        $max_collection_number = max($coll_numbers);
    
                        if($max_collection_number > $v_inv_settings['invoice_start'])
                        {
                            $i_number[$k_inv_settigns] = $max_collection_number;
                        }
                        else
                        {
                            $i_number[$k_inv_settigns] = $v_inv_settings['invoice_start'];
                        }
    
                        $i_number[$k_inv_settigns] ++;
                    }
                }
                else
                {
    
                    $i_number[$k_inv_settigns] = $v_inv_settings['invoice_start'];
                    if($v_inv_settings['invoice_start'] == '0')
                    {
                        $i_number[$k_inv_settigns] ++;
                    }
                }
            }
    
            $final_invoice_number = max($i_number);
    
            $prefix = $client_data[0]['invoice_number_prefix'];
            $invoicenumber = $final_invoice_number;
        }
    
        if($temp === false)
        {
            $invoice_nr_arr['prefix'] = $prefix;
            $invoice_nr_arr['invoicenumber'] = $invoicenumber;
        }
        else
        {
            $invoice_nr_arr = self::generate_temp_invoice_number($invoice_type,$clientid);
        }
        
        return $invoice_nr_arr;
    }
    
    private function generate_temp_invoice_number($invoice_type = false, $clientid)
    {
        if( ! $invoice_type){
            return false;
        }
        
        $invoices = new InvoiceSystem();
        $temp_prefix = 'TEMP_';
        $high_inv_nr = $invoices->get_highest_invoice_number($invoice_type, $clientid, $temp_prefix);
    
        if($high_inv_nr)
        {
            $high_inv_nr['invoice_number'] ++;
            $inv_nr = $high_inv_nr['invoice_number'];
        }
        else
        {
            $inv_nr = '1';
        }
    
        $invoice_nr_arr['prefix'] = $temp_prefix;
        $invoice_nr_arr['invoicenumber'] = $inv_nr;
    
        return $invoice_nr_arr;
    }
    
    public function get_storned_invoices($invoice_type = false, $clientid)
    {        
        if( ! $invoice_type){
            return false;
        }
        $storno_invoices = Doctrine_Query::create()
        ->select("*")
        ->from('InvoiceSystem')
        ->where("client= ?",$clientid)
        ->andWhere("invoice_type = ?",$invoice_type)
        ->andwhere('storno = "1"');
        $storno_invoices_res = $storno_invoices->fetchArray();
    
        if($storno_invoices_res)
        {
            foreach($storno_invoices_res as $k_storno => $v_storno)
            {
                $storned_invoices[] = $v_storno['record_id'];
            }
    
            return $storned_invoices;
        }
        else
        {
            return false;
        }
    }
    
    public function has_storno($invoice_type = false, $invoiceid)
    {
        if ( !$invoice_type ){
            return false;
        } 
        $invoice_storno = Doctrine_Query::create()
        ->select("*")
        ->from('InvoiceSystem')
        ->where("record_id = ?", $invoiceid)
        ->andwhere('storno = "1"')
        ->andwhere('invoice_type = ?',$invoice_type)
        ->limit('1');
        $invoice_storno_res = $invoice_storno->fetchArray();
    
        if($invoice_storno_res)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    
    
    
    public function get_multiple_invoices($invoice_type = false, $invoice_ids = false)
    {
        if ( !$invoice_type ){
            return false;
        }
        
        $invoiceitems = new InvoiceSystemItems();
    
        if ($invoice_ids === false || !is_array($invoice_ids) || empty($invoice_ids)){
            return false;
        }
        $invoices = Doctrine_Query::create()
        ->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort")
        ->from('InvoiceSystem')
        ->whereIn("id", $invoice_ids)
        ->andWhere('invoice_type = ?',$invoice_type)
        ->andWhere('isdelete = 0');
        $invoices_res = $invoices->fetchArray();
    
        if($invoices_res)
        {
            //get all invoice items
            $invoice_items = $invoiceitems->getInvoicesItems($invoice_type,$invoice_ids);
            	
            foreach($invoices_res as $k_invoice_res => $v_invoice_res)
            {
    
                if($invoice_items[$v_invoice_res['id']])
                {
                    $v_invoice_res['items'] = $invoice_items[$v_invoice_res['id']];
                }
                else
                {
                    $v_invoice_res['items'] = '';
                }
    
                $invoice_details[$v_invoice_res['id']] = $v_invoice_res;
            }
    
            return $invoice_details;
        }
        else
        {
            return false;
            
        }
    }
    
    
    
    
    public function get_invoices($invoice_type = false, $invoices_ids,$allow_archiv = false)
    {
        
        if( ! $invoice_type){
            return false;
        }
        
        if(empty($invoices_ids)){
            return false;
        }
        	
        $invoice_items = new InvoiceSystemItems();
        	
        $invoices = Doctrine_Query::create()
        ->select("*, IF(completed_date = '0000-00-00 00:00:00', create_date, IF(completed_date = '1970-01-01 01:00:00', create_date, completed_date)) as completed_date_sort")
        ->from('InvoiceSystem')
        ->whereIn("id", $invoices_ids)
        ->andWhere('invoice_type = ?',$invoice_type)
        ->andWhere('isdelete = "0"');
        if(!$allow_archiv){
            $invoices->andWhere('isarchived = "0"');
        }
        $invoices_res = $invoices->fetchArray();
    
      
        
        foreach($invoices_res as $k_inv => $v_inv)
        {
            if($v_inv['storno'] == "1")
            {
                $storned_ids[$v_inv['id']] = $v_inv['record_id'];
                $invoices_ids[] = $v_inv['record_id'];
            }
        }
    
        if($invoices_res)
        {
            //get all invoice items
            $invoice_items = $invoice_items->getInvoicesItems($invoice_type,$invoices_ids);
    
            foreach($invoices_res as $k_invoice_res => $v_invoice_res)
            {
                $master_data['invoices_users'][] = $v_invoice_res['user'];
    
                $master_data['invoices_data'][$v_invoice_res['id']] = $v_invoice_res;
                if($invoice_items)
                {
                    if(array_key_exists($v_invoice_res['id'], $storned_ids))
                    {
                        //make sure that storno invoices have inherited the items of storned invoice
                        $master_data['invoices_data'][$v_invoice_res['id']]['items'] = $invoice_items[$storned_ids[$v_invoice_res['id']]];
                    }
                    else
                    {
                        $master_data['invoices_data'][$v_invoice_res['id']]['items'] = $invoice_items[$v_invoice_res['id']];
                    }
                }
            }
            return $master_data;
        }
        else
        {
            return false;
        }
    }
    
    
    
    
    
    
    
}