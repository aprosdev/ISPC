<?php

/**
 * MedicationsSetsList
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ISPC
 * @subpackage Application (2018-10-26)
 * @author     carmen <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class MedicationsSetsList extends BaseMedicationsSetsList
{
	/**
	 * define the FORMID and FORMNAME, if you want to piggyback some triggers
	 * @var unknown
	 */
	const TRIGGER_FORMID    = null;
	const TRIGGER_FORMNAME  = '';
	
	public function findById( $id = '', $hydrationMode = Doctrine_Core::HYDRATE_ARRAY )
	{
		if (empty($id) || !is_string($id)) {
	
			return;
	
		} else {
			return $this->getTable()->findBy('id', $id, $hydrationMode);
	
		}
	}
	
	public function findOrCreateOneById($id = 0 , array $data = array(), $hydrationMode = Doctrine_Core::HYDRATE_RECORD)
	{
			$primaryKey = $this->getTable()->getIdentifier();
				
			/*
			 * do not allow to overwrite the $primaryKey
			 */
			if (isset($data[$primaryKey])) {
				unset($data[$primaryKey]);
			}
				
			/*
			 * prevent changes to fields populated by Timestamp Listener
			 */
			if (isset($data['create_date']) || isset($data['change_date']) || isset($data['create_user']) || isset($data['change_user'])) {
				unset($data['create_date'], $data['change_date'], $data['create_user'], $data['change_user']);
			}
				
				
			if ( empty($id)) {
					
				$entity = $this->getTable()->create();
					
				$entity->assignDefaultValues(false);
					
			} else {
				/*
				 * this is an update of $entity
				 */
				$entity = $this->getTable()->findOneBy('id', $id, Doctrine_Core::HYDRATE_RECORD);
			}
				
				
				
				
			//$this->_encryptData($data); // encrypt model->_encypted_columns
				
			//TODO maybe add a check ??? empty($data) is_array($data) count($data, COUNT_RECURSIVE)) ... what?
			$entity->fromArray($data); //update
				
				
			$entity->save(); //at least one field must be dirty in order to persist
	
			return $entity;
	}
	
	public function get_medications_sets($clientid = null, $type = null)
	{
		$actions_sql = Doctrine_Query::create()
		->select('*')
		->from('MedicationsSetsList')
		->where('clientid =?', $clientid);
		
		if($type)
		{
			$actions_sql->andWhere('med_type =?', $type);
			
		}
	
		$actionsarray = $actions_sql->fetchArray();
	
		if($actionsarray)
		{
			return $actionsarray;
		}
	}
	
	public function get_medications_sets_details($clientid = null, $type = null,$sets = array())
	{
	    
	    if( empty($clientid)){
	        return array();
	    }
	    
		$actions_sql = Doctrine_Query::create()
		->select('s.*, si.*')
		->from('MedicationsSetsList as s INDEXBY s.id')
		->leftJoin('s.MedicationsSetsItems as si')
		->where('s.clientid = ?', $clientid);
		
		if($type)
		{
			$actions_sql->andWhere('s.med_type =?', $type);
		}
	   if(!empty($sets)){
			$actions_sql->andWhereIn('id', $sets );
	   }
		$actionsarray = $actions_sql->fetchArray();
	
		if($actionsarray)
		{
			return $actionsarray;
		}
	}
	
	public function getmedicationssetsDrop($clientid = null, $type = null)
	{
	    if(empty($clientid)){
	        return false;
	    }
	    
		$Tr = new Zend_View_Helper_Translate();
		$drop = Doctrine_Query::create()
		->select("*")
		->from('MedicationsSetsList')
		->where("clientid=?", $clientid);
		
		if($type)
		{
			$drop->andWhere('med_type=?', $type);
		}
		$droparr = $drop->fetchArray();
	
		if($droparr)
		{
			$droparray = array("" => $Tr->translate('select'));
	
			foreach($droparr as $kdrop=>$vdrop)
			{
				$droparray[$vdrop[id]] = $vdrop['title'];
			}
	
			return $droparray;
		}
	}

}