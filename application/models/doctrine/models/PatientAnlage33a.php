<?php

/**
 * PatientAnlage33a
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ISPC
 * @subpackage Application (2017-12-11)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PatientAnlage33a extends BasePatientAnlage33a
{

    /**
     * translations are grouped into an array
     * @var unknown
     */
    const LANGUAGE_ARRAY    = 'Form_PatientAnlage33a';

    /**
     * define the FORMID and FORMNAME, if you want to piggyback some triggers
     * @var unknown
     */
    const TRIGGER_FORMID    = null;
    const TRIGGER_FORMNAME  = null;
    

    
    
    
    
    
    
    public function getEnumValuesDefaults()
    {
        $result = array();
        $tr =  new Zend_View_Helper_Translate();
        $tr = $tr->translate('Form_PatientAnlage33a');
    
        $enum = $this->getTable()->getEnumValues('selected_value');
        foreach ($enum as $val) {
            $result[$val] =  isset($tr[$val]) ? $tr[$val] : $val;
        }
    
        return $result;
    }
    
    /**
     *
     * @param string|array $ipid
     * @param int $hydrationMode
     */
    public function findByIpid( $ipid = '', $hydrationMode = Doctrine_Core::HYDRATE_ARRAY )
    {
        if (empty($ipid) || !is_string($ipid)) {
    
            return;
    
        } else {
            return $this->getTable()->findBy('ipid', $ipid, $hydrationMode);
    
        }
    }
    
    public function findOrCreateOneBy($fieldName, $value, array $data = array(), $hydrationMode = Doctrine_Core::HYDRATE_RECORD)
    {
        if ( is_null($value) || ! $entity = $this->getTable()->findOneBy($fieldName, $value, $hydrationMode)) {
    
            if ($fieldName != $this->getTable()->getIdentifier()) {
                $entity = $this->getTable()->create(array( $fieldName => $value));
            } else {
                $entity = $this->getTable()->create();
            }
        }
    
//         $this->_encryptData($data);
    
        $entity->fromArray($data); //update
    
        $entity->save(); //at least one field must be dirty in order to persist
    
        return $entity;
    }
    
    
    public function findOrCreateMultipleBy($fieldName, $value, array $data = array(), $hydrationMode = Doctrine_Core::HYDRATE_RECORD)
    {
        $entitys = $this->getTable()->findBy($fieldName, $value);
        
        $rows = array();
        
        if ( is_null($value) || ! $entitys->count()) { 
            // insert new
    
            foreach ($data['selected_value'] as $selected_value) {
                $row = $data;
                $row['selected_value'] =  $selected_value;
                
                if ($fieldName != $this->getTable()->getIdentifier()) {
                    $row[$fieldName] =  $value;
                } 
                
                $rows[] = $row;
            }
            
            $entitys =  new Doctrine_Collection($this->getTable());
            
        } else {
            
            //update+insert
            $old_values = array();
            foreach ($entitys->getIterator() as $entity) {
                if ( ! in_array($entity->selected_value, $data['selected_value'])) {
                    //this was deleted
                    $entity->wlassessment_id =  $data['wlassessment_id'];
                    $entity->delete();
                    $rows[] = $entity->toArray();
                } else {
            
                    $rows[] = $entity->toArray();
                    $old_values[] = $entity->selected_value;
                }
            
            }
            foreach (array_diff($data['selected_value'], $old_values) as $new) {
                //this are brand new, must pe inserted
                $row = $data;
                $row['selected_value'] =  $new;
                if ($fieldName != $this->getTable()->getIdentifier()) {
                    $row[$fieldName] =  $value;
                }
                $rows[] = $row;
               
            }
            
        }
                
        if( ! empty ($rows)) {
        
            $entitys->synchronizeWithArray($rows);
            
            $entitys->save();//at least one field must be dirty in order to persist
        }
        
        return $entitys;
    }
    
}