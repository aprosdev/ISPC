<?php

/**
 * PatientPort
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ISPC
 * @subpackage Application (2017-11-22)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PatientPort extends BasePatientPort
{
    
    //radio
    public static function getDefaultPort()
    {
        $Tr = new Zend_View_Helper_Translate();
        return array(
            'no' => $Tr->translate('noconfirm'),
            'yes' => $Tr->translate('yesconfirm'),
            'right' => $Tr->translate('right'),
            'left' => $Tr->translate('left'),
        );
    }
    
    
    public function findOrCreateOneBy($fieldName, $value, array $data = array(), $hydrationMode = Doctrine_Core::HYDRATE_RECORD)
    {
        if ( is_null($value) || ! $entity = $this->getTable()->findOneBy($fieldName, $value, $hydrationMode)) {
            $entity = $this->getTable()->create(array( $fieldName => $value));
        }
    
        $entity->fromArray($data); //update
    
        $entity->save(); //at least one field must be dirty in order to persist
    
        return $entity;
    }
    
    
    
    /**
     *
     * @param string|array $ipid
     * @param int $hydrationMode
     */
    public function findByIpid( $ipid = '', $hydrationMode = Doctrine_Core::HYDRATE_ARRAY )
    {
        if (empty($ipid) || !is_string($ipid)) {
    
            return;
    
        } else {
           
            return $this->getTable()->findBy('ipid', $ipid, $hydrationMode);
    
        }
    }
    
    
    public function findOrCreateOneByIpidAndPort($ipid, $port, array $data = array(), $hydrationMode = Doctrine_Core::HYDRATE_RECORD)
    {
        if ( is_null($value) || ! $entity = $this->getTable()->findOneByIpidAndPort($ipid, $port, $hydrationMode)) {
    
            $entity = $this->getTable()->create(array( 'ipid' => $ipid, 'port' => $port));
    
        }
        unset($data[$this->getTable()->getIdentifier()]); // just in case
    
        $entity->fromArray($data); //update
    
        $entity->save(); //at least one field must be dirty in order to persist
    
        return $entity;
    }
}