<?php

/**
 * PatientSavoirSapv
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ISPC
 * @subpackage Application (2018-01-08)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PatientSavoirSapv extends BasePatientSavoirSapv
{

    /**
     * translations are grouped into an array
     * @var unknown
     */
    const LANGUAGE_ARRAY    = 'savoir_sapv_lang';
    
    /**
     * define the FORMID and FORMNAME, if you want to piggyback some triggers
     * @var unknown
     */
    const TRIGGER_FORMID    = null;
    const TRIGGER_FORMNAME  = null;
    
    /**
     * insert into patient_files will use this
     */
    const PATIENT_FILE_TABNAME  = null;
    const PATIENT_FILE_TITLE    = null; //this will be translated
    
    /**
     * insert into patient_course will use this
     */
    const PATIENT_COURSE_TITLE      = null;
    const PATIENT_COURSE_TABNAME    = null;
    const PATIENT_COURSE_TYPE       = null;
    
    
    
    public static function getDefaults( $field = null) 
    {
        switch($field) {

            case 'patient_sapvverordnung_symptom'://sapv, checkboxes
                $defaults = array(
                    '0' => self::translate('ausgeprägte Schmerzsymptomatik'),
                    '1' => self::translate('ausgeprägte urogenitale Symptomatik'),
                    '2' => self::translate('ausgeprägte respiratorische/kardiale Symptomatik'),
                    '3' => self::translate('ausgeprägte gastrointestinale Symptomatik'),
                    '4' => self::translate('ausgeprägte ulzeriernde Wunden/Tumore'),
                    '5' => self::translate('ausgeprägte neurologische/psychiatrische/psychische Symptomatik'),
                    '6' => self::translate('sonstiges komplexes Symptomgeschehen'),
                    );
                break;
    
            case 'patient_sapvverordnung_prescriber'://sapv, radio
                $defaults = array(
                    '0' => self::translate('keine Angabe'),
                    '1' => self::translate('Hausarzt'),
                    '2' => self::translate('Krankenhausarzt'),
                );
                break;
    
            default : $defaults = null;
        }
    
    
        return $defaults;
    }
    
    
    public function findOrCreateOneByIdAndIpid($id = 0 , $ipid = '', array $data = array(), $hydrationMode = Doctrine_Core::HYDRATE_RECORD)
    {
        if ( empty($id) || ! $entity = $this->getTable()->findOneByIdAndIpid($id, $ipid)) {
    
            $entity = $this->getTable()->create(array( 'ipid' => $ipid));
        }
    
        unset($data[$this->getTable()->getIdentifier()]);
    
        $entity->fromArray($data); //update
    
        $entity->save(); //at least one field must be dirty in order to persist
    
        return $entity;
    }
    
    
    
    /**
     * @claudiu
     * @param string $ipid
     * @param unknown $hydrationMode
     * @return void|Ambigous <Doctrine_Collection, multitype:>
     */
    public function findByIpid( $ipid = '', $hydrationMode = Doctrine_Core::HYDRATE_ARRAY )
    {
        if (empty($ipid) || ! is_string($ipid)) {
    
            return;
    
        } else {
            return $this->getTable()->findBy('ipid', $ipid, $hydrationMode);
    
        }
    }
    
    
    /**
     * @claudiu
     * @param string $ipid
     * @param unknown $hydrationMode
     * @return void|Ambigous <Doctrine_Collection, multitype:>
     */
    public function findOneByIpid( $ipid = '', $hydrationMode = Doctrine_Core::HYDRATE_ARRAY )
    {
        if (empty($ipid) || ! is_string($ipid)) {
    
            return;
    
        } else {
            return $this->getTable()->createQuery()
            ->where('ipid = ?')
            ->orderBy('id DESC') // just in case the delete is not ok
            ->limit(1)
            ->fetchOne(array($ipid), $hydrationMode);
        }
    }
    
}