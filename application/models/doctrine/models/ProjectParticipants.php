<?php

/**
 * ProjectParticipants
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ISPC
 * @subpackage Application (2018-05-11)
 * @author     claudiu <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ProjectParticipants extends BaseProjectParticipants
{

    /**
     * (non-PHPdoc)
     * this fn should be in Table
     */
    public function findOrCreateOneByPrimaryKeyAndProjectId($pKey = 0, $projectId = 0, array $data = array())
    {
    
        $primaryKey = $this->getTable()->getIdentifier();
    
        /*
         * magic Doctrine finder
        */
        $fn = "findOneBy" . Doctrine_Inflector::classify($primaryKey) . "AndProjectId";
    
        /*
         * do not allow to overwrite the $primaryKey
        */
        if (isset($data[$primaryKey])) {
            unset($data[$primaryKey]);
        }
    
        /*
         * do not allow to overwrite the $project_ID
         */
        if (isset($data['project_ID'])) {
            unset($data['project_ID']);
        }
    
        /*
         * prevent changes to fields populated by Timestamp Listener
         */
        if (isset($data['create_date']) || isset($data['change_date']) || isset($data['create_user']) || isset($data['change_user'])) {
            unset($data['create_date'], $data['change_date'], $data['create_user'], $data['change_user']);
        }
        
    
        if ( empty($pKey) || ! ($entity = $this->getTable()->{$fn}($pKey, $projectId, Doctrine_Core::HYDRATE_RECORD))) {
    
            $entity = $this->getTable()->create(['project_ID' => $projectId]);
    
            $entity->assignDefaultValues(false);
    
        } else {
            /*
             * this is an update of $entity
             */
        }
    
    
    
    
       // $this->_encryptData($data); // encrypt model->_encypted_columns
    
        //TODO maybe add a check ??? empty($data) is_array($data) count($data, COUNT_RECURSIVE)) ... what?
        $entity->fromArray($data); //update
    
    
        $entity->save(); //at least one field must be dirty in order to persist
    
        return $entity;
    }
}