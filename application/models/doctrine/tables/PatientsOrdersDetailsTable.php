<?php

/**
 * PatientsOrdersDetailsTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @method createIfNotExistsOneBy($fieldName, $value = null, array $data = array())
 * @method findOrCreateOneBy($fieldName, $value = null, array $data = array())
 * 
 * @package    ISPC
 * @subpackage Application (2018-12-21)
 * @author     Ancuta <office@originalware.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class PatientsOrdersDetailsTable extends Pms_Doctrine_Table
{

    /**
     * Returns an instance of this class.
     *
     * @return PatientsOrdersDetailsTable (object)
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PatientsOrdersDetails');
    }

    /**
     * @Ancuta
     * 07.01.2019
     *
     * Changed on 10.01.2019
     * 
     * @param unknown $ipids            
     * @param unknown $order_date            
     * @param string $order_status            
     * @param string $opened_status            
     * @return void|Ambigous <multitype:, Doctrine_Collection>
	 * ISPC-2464  add parent param
     */
    public static function find_patients_withOrders($ipids = array(), $order_date = false, $order_status = false, $opened_status = false, $active_cond = '',$parent_id = false)
    {
        if (empty($ipids)) {
            return;
        }
        
        $int_cond = '';
        if($active_cond != '')
        {
            $int_cond = str_replace('%date%', 'poa.order_date', $active_cond['date_sql']);
        }
        
        $poa = self::getInstance()->createQuery('poa INDEXBY id')
            ->select('poa.*,pom.*,por.*,pod.* ,pomt.*')
            ->whereIn('ipid', $ipids);
        if (! empty($order_status)) {
            $poa->andWhere('poa.status = ? ', $order_status);
        }
        if (! empty($opened_status)) {
            $poa->andWhere('poa.action_status = ? ', $opened_status);
        }
        if (! empty($order_date)) {
            $poa->andWhere('poa.order_date >= ? ', $order_date);
        }
        
        if(!empty($int_cond)){
            $poa->andWhere($int_cond);
        }
        
        if (! empty($parent_id)) {
            $poa->andWhere('poa.parent_id = ? ', $parent_id);
        }
        
        $poa->leftJoin('poa.PatientsOrdersMedication as pom')
            ->leftJoin('poa.PatientsOrdersRecipients as por')
            ->leftJoin('poa.PatientsOrdersDeliveryDates as pod')
            ->leftJoin('poa.PatientsOrdersMaterials as pomt')
            ->orderBy('poa.order_date ASC');
        $result = $poa->fetchArray();
        
        return $result;
    }

    /**
     * @Ancuta
     * 21.12.2018
     *
     * @param string $period            
     * @param number $clientid
     *            ISPC-2281
     */
    public static function find_patients_withOrders_InPeriod($ipids = array(), $period = array())
    {
        if (empty($ipids)) {
            return;
        }
        
        return self::getInstance()->createQuery('poa')
            ->select('poa.*,pom.*,por.*,pod.* ')
            ->whereIn('ipid', $ipids)
            ->andWhere('poa.order_date BETWEEN ? AND ? ', array(
            $period['start'],
            $period['end']
        ))
            ->leftJoin('poa.PatientsOrdersMedication as pom')
            ->leftJoin('poa.PatientsOrdersRecipients as por')
            ->leftJoin('poa.PatientsOrdersDeliveryDates as pod')
            ->fetchArray();
    }

    /**
     * @Ancuta
     * 04.01.2019
     *
     * @param number $ipid            
     * @param number $order_id            
     * @return void|mixed
     */
    public static function find_patient_order($ipid = 0, $order_id = 0)
    {
        if (empty($ipid) && empty($order_id)) {
            return;
        }
        return self::getInstance()->createQuery('poa')
            ->select('poa.*,pom.*,por.*,pod.* ,pomt.* ')
            ->where('ipid =?', $ipid)
            ->andWhere('poa.id =? ', $order_id)
            ->leftJoin('poa.PatientsOrdersMedication as pom')
            ->leftJoin('poa.PatientsOrdersRecipients as por')
            ->leftJoin('poa.PatientsOrdersDeliveryDates as pod')
            ->leftJoin('poa.PatientsOrdersMaterials as pomt')
            ->limit(1)
            ->fetchOne(null, Doctrine_Core::HYDRATE_ARRAY);
        ;
    }

    /**
     * @Ancuta
     * 06.01.2019
     *
     * @param number $ipid            
     * @param number $parent_id            
     * @param unknown $order_date            
     * @return void|mixed
     */
    public static function find_patient_following_orders($ipid = 0, $parent_id = false, $order_date = false )
    {
        if (empty($ipid)) {
            return;
        }
        $poa = self::getInstance()->createQuery('poa INDEXBY id')
            ->select('poa.*,pom.*,por.*,pod.* ,pomt.* ')
            ->where('ipid =?', $ipid);
        
            if(!empty($parent_id)){
                $poa->andWhere('poa.parent_id =? ', $parent_id);
            }
            
            if(!empty($order_date)){
                $poa->andWhere('poa.order_date >= ? ', $order_date);
            }
            
            $poa->leftJoin('poa.PatientsOrdersMedication as pom')
            ->leftJoin('poa.PatientsOrdersRecipients as por')
            ->leftJoin('poa.PatientsOrdersDeliveryDates as pod')
            ->leftJoin('poa.PatientsOrdersMaterials as pomt');
            $result = $poa->fetchArray();
        
        
        return $result;
    }

    /**
     * @Ancuta
     * 09.01.2019
     *
     * @param number $ipid            
     * @param number $parent_id            
     * @param unknown $order_date            
     * @return void|Ambigous <multitype:, Doctrine_Collection>
     */
    public static function find_patient_ordersByParent($ipid = 0, $parent_id = 0)
    {
        if (empty($ipid) && empty($parent_id)) {
            return;
        }
        return self::getInstance()->createQuery('poa INDEXBY id')
            ->select('poa.*,pom.*,por.*,pod.* ,pomt.* ')
            ->where('ipid =?', $ipid)
            ->andWhere('poa.parent_id =? ', $parent_id)
            ->leftJoin('poa.PatientsOrdersMedication as pom')
            ->leftJoin('poa.PatientsOrdersRecipients as por')
            ->leftJoin('poa.PatientsOrdersDeliveryDates as pod')
            ->leftJoin('poa.PatientsOrdersMaterials as pomt')
            ->fetchArray();
        ;
    }
    
    /**
     * @Ancuta
     * 10.01.2019
     * @param unknown $ipids
     * @return void|Ambigous <multitype:, Doctrine_Collection>
     */
    public static function find_patient_lastOrder($ipids = array())
    {
        if (empty($ipids)) {
            return;
        }
    
        $poa = self::getInstance()->createQuery('poa INDEXBY id')
        ->select('poa.*,pom.*,por.*,pod.* ')
        ->whereIn('ipid', $ipids);
        $poa->leftJoin('poa.PatientsOrdersMedication as pom')
        ->leftJoin('poa.PatientsOrdersRecipients as por')
        ->leftJoin('poa.PatientsOrdersDeliveryDates as pod')
        ->orderBy('poa.order_date DESC')
        ->limit(1);
        $result = $poa->fetchArray();
    
        return $result;
    }
    
  
    public static function find_patient_ordersByDate($ipid = 0 , $order_date = false) {
        if(empty($ipid)){
            return;
        }
        
        $poa = self::getInstance()->createQuery('poa INDEXBY id')
        ->select('poa.*,pom.*,por.*,pod.* ,pomt.* ')
        ->where('ipid =?', $ipid);
        if(!empty($order_date)){
            $poa->andWhere('poa.order_date = ? ', $order_date);
        }
        
        $poa->leftJoin('poa.PatientsOrdersMedication as pom')
        ->leftJoin('poa.PatientsOrdersRecipients as por')
        ->leftJoin('poa.PatientsOrdersDeliveryDates as pod')
        ->leftJoin('poa.PatientsOrdersMaterials as pomt');
        dd($poa->getSqlQuery());
        $result = $poa->fetchArray();
        
        return $result;
        
    }
    
}